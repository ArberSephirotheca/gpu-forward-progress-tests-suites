#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_37 {
 bool _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_35 {
 mat3x2 _f0;
 vec4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_34 {
 mat2 _f0;
 vec4 _f1;
 vec2 _f2;
 float _f3;
} ;

struct _GLF_struct_36 {
 int _f0;
 _GLF_struct_34 _f1;
 float _f2;
 mat2x4 _f3;
 _GLF_struct_35 _f4;
 uvec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_38 {
 ivec3 _f0;
 mat2x3 _f1;
 _GLF_struct_36 _f2;
 mat2x3 _f3;
 ivec4 _f4;
 _GLF_struct_37 _f5;
 uint workgroup_base;
} ;

struct _GLF_struct_31 {
 bvec2 _f0;
} ;

struct _GLF_struct_30 {
 float _f0;
 mat3 _f1;
 bool _f2;
 mat4x3 _f3;
 mat3x4 _f4;
 uint _f5;
 vec3 _f6;
} ;

struct _GLF_struct_29 {
 mat4 _f0;
 vec3 _f1;
 bvec2 _f2;
 mat2x4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_28 {
 float _f0;
} ;

struct _GLF_struct_32 {
 bvec2 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
 mat4x3 _f4;
 _GLF_struct_31 _f5;
} ;

struct _GLF_struct_33 {
 int _injected_loop_counter;
 _GLF_struct_32 _f0;
} ;

struct _GLF_struct_25 {
 mat3x4 _f0;
 mat3x2 _f1;
 vec4 _f2;
 mat4x3 _f3;
 bvec3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_23 {
 vec4 _f0;
 float _f1;
} ;

struct _GLF_struct_22 {
 int _f0;
 float _f1;
 mat3 _f2;
 mat3x4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_24 {
 mat2x3 _f0;
 _GLF_struct_22 _f1;
 bool _f2;
 _GLF_struct_23 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_27 {
 _GLF_struct_24 _f0;
 _GLF_struct_26 _f1;
 uint _f2;
 int _injected_loop_counter;
 mat4 _f3;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 uvec3 _f1;
 mat3 _f2;
 uvec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_18 {
 ivec4 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 mat2 _f3;
 float _f4;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
 _GLF_struct_18 _f1;
 int _injected_loop_counter;
 _GLF_struct_19 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_16 {
 ivec2 _f0;
 vec3 _f1;
 mat4x2 _f2;
 mat2 _f3;
 mat4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
 vec3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 mat2x4 _f2;
 mat3x4 _f3;
 mat4x3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_21 {
 _GLF_struct_17 _f0;
 _GLF_struct_20 _f1;
 ivec4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_12 {
 int _f0;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 mat3 _f1;
 uvec2 _f2;
 bvec3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 mat3x4 _f1;
 uint _f2;
 uvec3 _f3;
 ivec2 _f4;
 ivec2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 mat3 _f1;
 mat2x3 _f2;
 bvec3 _f3;
 ivec3 _f4;
 vec2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 ivec3 _f1;
 ivec2 _f2;
 bvec2 _f3;
 bvec3 _f4;
 vec2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 mat3 _f1;
 mat4x2 _f2;
 bvec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 mat3 _f2;
 _GLF_struct_8 _f3;
 mat2x4 _f4;
 _GLF_struct_9 _f5;
 _GLF_struct_10 _f6;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 mat3x4 _f1;
 ivec4 _f2;
 ivec3 _f3;
 mat2x4 _f4;
 mat2x4 _f5;
 uint _f6;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 mat4 _f1;
 mat2x3 _f2;
 uint _f3;
 uvec3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat3 _f1;
 int _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 uvec2 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 uint _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_1 _f0;
 vec2 _f1;
 uint next_virtual_gid;
 _GLF_struct_5 _f2;
 _GLF_struct_11 _f3;
 uint _f4;
 _GLF_struct_13 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), min((0 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), ((0 << _GLF_IDENTITY(int(7), int(7)))) + 0))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), (bool(false)) || false)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), true && (bool(_GLF_WRAPPED_IF_FALSE(false)))))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (2))), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
          {
          }
         else
          {
           for(_GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_24(mat2x3(1.0), _GLF_struct_22(1, 1.0, mat3(1.0), mat3x4(1.0), uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), true, _GLF_struct_23(vec4(1.0), 1.0), uvec4(1u)), _GLF_struct_26(_GLF_struct_25(mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat3x2(1.0), vec4(1.0), mat4x3(1.0), bvec3(true), mat3x2(1.0)), bvec2(true)), _GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u))), _GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), mix(float(_GLF_FUZZED(4.6)), float(_GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(vec3(-1.1, _GLF_IDENTITY(444.162, mix(float(444.162), float(_GLF_FUZZED(4508.9352)), bool(false))), -7872.2719).z)), max(float(_GLF_FUZZED(vec3(-1.1, _GLF_IDENTITY(444.162, mix(float(444.162), float(_GLF_FUZZED(4508.9352)), bool(false))), -7872.2719).z)), float(_GLF_FUZZED(vec3(-1.1, _GLF_IDENTITY(444.162, mix(float(444.162), float(_GLF_FUZZED(4508.9352)), bool(false))), -7872.2719).z)))), bool(false)))), bool(true)))), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), mix(float(_GLF_FUZZED(4.6)), float(_GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(vec3(-1.1, _GLF_IDENTITY(444.162, mix(_GLF_IDENTITY(float(444.162), (_GLF_IDENTITY(true, ! (! (true))) ? float(444.162) : _GLF_FUZZED(598.476))), float(_GLF_FUZZED(4508.9352)), bool(false))), -7872.2719).z)), max(float(_GLF_FUZZED(vec3(-1.1, _GLF_IDENTITY(444.162, mix(float(444.162), float(_GLF_FUZZED(4508.9352)), bool(false))), -7872.2719).z)), float(_GLF_FUZZED(vec3(-1.1, _GLF_IDENTITY(444.162, mix(float(444.162), float(_GLF_FUZZED(4508.9352)), bool(false))), -7872.2719).z)))), bool(false)))), bool(true)))))))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_27._injected_loop_counter < 1); _GLF_IDENTITY(_GLF_struct_replacement_27._injected_loop_counter ++, (_GLF_struct_replacement_27._injected_loop_counter ++) / 1))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(ivec3(1), mat2x3(1.0), _GLF_struct_36(1, _GLF_struct_34(mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), max(_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), _GLF_IDENTITY(vec4(1.0), mat4(1.0) * (_GLF_IDENTITY(vec4(1.0), vec4(mat3x4(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) - vec4(0.0, 0.0, 0.0, 0.0)), cos(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))), vec2(1.0), 1.0), 1.0, mat2x4(1.0), _GLF_struct_35(mat3x2(1.0), vec4(1.0), ivec3(1)), uvec2(1u), mat4x3(1.0)), mat2x3(1.0), ivec4(1), _GLF_struct_37(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), bool(bvec4(! (_GLF_IDENTITY(true, bool(bool(true)))), false, false, false))))), bvec3(true)), workgroup_size * workgroup_id);
 uint subgroup_base = subgroup_id * subgroup_size;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-518.171), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-2.5)), bool(false)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.2)), bvec2(true, false))).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint virtual_gid = _GLF_struct_replacement_38.workgroup_base + subgroup_base + subgroup_local_id;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_1(_GLF_struct_0(ivec2(1), _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u))))), ivec4(1))), _GLF_IDENTITY(vec2(1.0), vec2(1.0, 1.0) * (vec2(1.0))), _GLF_struct_replacement_38.workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), _GLF_struct_5(mat3x2(1.0), mat3(1.0), 1, _GLF_struct_2(mat2x3(1.0), mat4x2(1.0)), _GLF_struct_3(uvec3(1u), mat4(1.0), mat2x3(1.0), _GLF_IDENTITY(1u, 0u ^ (1u)), uvec3(_GLF_IDENTITY(1u, (1u) >> (1u ^ 1u))), ivec3(1)), uvec2(1u), _GLF_struct_4(uvec4(1u), mat3x4(1.0), ivec4(1), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, 0 + (1)), 1, 0)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, 0 + (1)), 1, 0)), (int(ivec3(_GLF_IDENTITY(1, 0 + (1)), 1, 0))) ^ 0), 1, 0, 0)), ~ (~ (int(ivec4(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, 0 + (1)), 1, 0)), (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) ^ 0) + (1)), 1, 0))) ^ 0), 1, 0, 0)))))), int(ivec2(int(ivec3(1, 1, 0)), 0))))), mat2x4(1.0), mat2x4(1.0), 1u)), _GLF_struct_11(_GLF_struct_6(mat2x3(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0)))), mat3(1.0), mat4x2(1.0), _GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec2(bvec2(bvec2(true))))))), mat3x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(2.5, mix(float(_GLF_FUZZED(52.35)), float(_GLF_IDENTITY(2.5, mix(float(_GLF_FUZZED(-88.95)), float(2.5), bool(true)))), bool(true)))) : 1.0)))), _GLF_struct_7(bvec4(true), ivec3(1), ivec2(1), bvec2(true), bvec3(true), vec2(1.0), mat3(1.0)), mat3(1.0), _GLF_struct_8(mat4x2(1.0), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(1.0), bool(true))) : _GLF_FUZZED(9.7))), 1.0)), mat2x3(1.0), bvec3(true), ivec3(1), vec2(1.0), mat2x3(1.0)), mat2x4(1.0), _GLF_struct_9(vec4(1.0), mat3x4(1.0), 1u, uvec3(1u), ivec2(1), ivec2(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1))))), mat3(1.0)), _GLF_struct_10(uvec4(1u), mat3(1.0), uvec2(1u), bvec3(true), ivec4(1))), 1u, _GLF_struct_13(mat2x3(1.0), _GLF_struct_12(1)));
 uint read = 0;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[_GLF_struct_replacement_14.next_virtual_gid], uint(1), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0)))))))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0), float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))), false), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0)))))))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0), float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))), false), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true))))))), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0)))))))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0), float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))), false), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0)))))))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0), float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))), false), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true))))))), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0), mix(vec3(_GLF_FUZZED(-0.1), (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[1], (vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[2]), vec3((vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(26.04)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), sqrt(0.0), 1.0))[0], _GLF_FUZZED(-209.420), _GLF_FUZZED(-96.94)), bvec3(true, false, false)))) * vec3(1.0, 1.0, 1.0)))))))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0), float(_GLF_IDENTITY(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), (mat3(mat4x3(mat3(min(injectionSwitch.y, injectionSwitch.y), sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))), false), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true)))))))))))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  return;
 if((subgroup_local_id % 2) == _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
    }
   subgroupAll(false);
   for(_GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_17(_GLF_struct_15(bvec3(_GLF_IDENTITY(true, true && (true))), vec3(1.0), mat3x2(1.0)), _GLF_struct_16(ivec2(1), vec3(1.0), mat4x2(1.0), mat2(1.0), mat4(1.0), uvec3(1u)), mat2x4(1.0), mat3x4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-8434.2615) : 1.0))))), mat4x3(1.0), ivec4(1)), _GLF_struct_20(mat2x4(1.0), _GLF_struct_18(ivec4(1), mat4x3(1.0), mat2x4(1.0), mat2(1.0), 1.0), 0, _GLF_struct_19(vec4(1.0), uvec3(1u), mat3(1.0), uvec2(1u), mat3x4(1.0)), mat2x4(1.0)), ivec4(1), _GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(1), (ivec3(1)) / ivec3(1, 1, 1))))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_21._f1._injected_loop_counter < 1); _GLF_struct_replacement_21._f1._injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), _GLF_IDENTITY(max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)), mix(vec4((max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(-19.95), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[2], _GLF_FUZZED(8.7)), vec4(_GLF_FUZZED(121.054), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6429.2190) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-9.1)), bool(false))), 1.0)), 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[1], _GLF_FUZZED((-844.437 - -4410.6279)), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(0.0, tan(0.0) + (0.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[3]), bvec4(false, true, false, true))))), max(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), _GLF_IDENTITY(max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)), mix(vec4((max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(-19.95), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[2], _GLF_FUZZED(8.7)), vec4(_GLF_FUZZED(121.054), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6429.2190) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-9.1)), bool(false))), 1.0)), 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[1], _GLF_FUZZED((-844.437 - -4410.6279)), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(0.0, tan(0.0) + (0.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[3]), bvec4(false, true, false, true))))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), _GLF_IDENTITY(max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)), mix(vec4((max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(-19.95), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[2], _GLF_FUZZED(8.7)), vec4(_GLF_FUZZED(121.054), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6429.2190) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-9.1)), bool(false))), 1.0)), 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[1], _GLF_FUZZED((-844.437 - -4410.6279)), (max(vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(0.0, tan(0.0) + (0.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0)))[3]), bvec4(false, true, false, true))))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            continue;
           _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)));
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (max(injectionSwitch, injectionSwitch)), clamp(mat2(1.0) * (max(injectionSwitch, injectionSwitch)), mat2(1.0) * (max(injectionSwitch, injectionSwitch)), mat2(1.0) * (max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y))))
    return;
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-82610) : 7))), min(int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-82610) : 7))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-82610) : 7))), (int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-82610) : 7)))) >> 0)))))))
    {
     case 15:
     bool _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(90.03) : injectionSwitch.y)), injectionSwitch.y))), float(_GLF_IDENTITY(_GLF_FUZZED(636.078), max(_GLF_FUZZED(636.078), _GLF_FUZZED(636.078)))), bool(false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)), (false ? _GLF_FUZZED(90.03) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), injectionSwitch.y))), float(_GLF_IDENTITY(_GLF_FUZZED(636.078), max(_GLF_FUZZED(636.078), _GLF_FUZZED(636.078)))), bool(false)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(90.03) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), injectionSwitch.y))), float(_GLF_IDENTITY(_GLF_FUZZED(636.078), max(_GLF_FUZZED(636.078), _GLF_FUZZED(636.078)))), bool(false)))))), true))))))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(8284.9150))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     case 99:
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((-8258 & 0), ~ (~ ((_GLF_IDENTITY(-8258 & 0, (-8258 & 0) | 0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     for(     (_GLF_IDENTITY(_GLF_IDENTITY(vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154)), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), max(_GLF_IDENTITY(989.154, (989.154) / 1.0), _GLF_IDENTITY(989.154, _GLF_IDENTITY((989.154), 0.0 + (_GLF_IDENTITY((989.154), max(_GLF_IDENTITY((989.154), mix(float(_GLF_FUZZED(-7910.4275)), float((989.154)), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (989.154))))) / 1.0)))) * 1.0)))), _GLF_IDENTITY(mat3(1.0) * (vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154)), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), mix(float(_GLF_IDENTITY(989.154, (989.154) / 1.0)), float(_GLF_FUZZED(-46.59)), bool(false))), max(_GLF_IDENTITY(989.154, (989.154) / 1.0), _GLF_IDENTITY(989.154, (989.154) / 1.0)))) * 1.0))))), vec3(mat4(mat3(1.0) * (vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(-58.16) : 989.154)), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), max(_GLF_IDENTITY(989.154, (989.154) / 1.0), _GLF_IDENTITY(989.154, (989.154) / 1.0)))) * 1.0))))), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, log(1.0), 0.0))))[1], mix(float(_GLF_IDENTITY(vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154), mix(float(_GLF_FUZZED(-3.3)), float(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-58.16), (true ? _GLF_IDENTITY(_GLF_FUZZED(-58.16), clamp(_GLF_FUZZED(-58.16), _GLF_FUZZED(-58.16), _GLF_FUZZED(-58.16))) : _GLF_FUZZED(3.0))) : 989.154), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), max(_GLF_IDENTITY(989.154, (989.154) / 1.0), _GLF_IDENTITY(989.154, (989.154) / 1.0)))) * 1.0)))), _GLF_IDENTITY(mat3(1.0) * (vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154)), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 989.154)), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 989.154)), float(vec3(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 989.154)), 0.0, 0.0)))) * 1.0), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), max(_GLF_IDENTITY(989.154, (989.154) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(989.154, (989.154) / 1.0)))) * 1.0))))), vec3(_GLF_IDENTITY(mat4(mat3(1.0) * (vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154)), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true))), mix(float(_GLF_FUZZED(-8366.7289)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true)))), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true)))))), max(_GLF_IDENTITY(989.154, (989.154) / 1.0), _GLF_IDENTITY(989.154, (989.154) / 1.0)))) * 1.0))))), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, log(1.0), 0.0), (false ? _GLF_FUZZED(mat4(-92.43, 568.107, 0.1, 7.0, -7.3, -8.4, -85.83, -51.88, 6.3, 4547.3822, -9422.4372, -89.18, -7.2, -32.59, 616.046, 2.1)) : mat4(mat3(1.0) * (vec3(92.03, 92.48, _GLF_IDENTITY(_GLF_IDENTITY(989.154, max(_GLF_IDENTITY(989.154, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-58.16) : 989.154)), _GLF_IDENTITY(989.154, float(mat4x3(989.154, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 0.0, 1.0))))), clamp(_GLF_IDENTITY(989.154, float(vec4(_GLF_IDENTITY(989.154, max(989.154, 989.154)), 1.0, 1.0, 0.0))), 989.154, _GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(989.154, (989.154) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true))), mix(float(_GLF_FUZZED(-8366.7289)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true)))), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8662.6478)), float(1.0), bool(true)))))), max(_GLF_IDENTITY(989.154, (989.154) / 1.0), _GLF_IDENTITY(989.154, (989.154) / 1.0)))) * 1.0))))), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, log(1.0), 0.0))))))[1]), float(_GLF_FUZZED(415.133)), bool(false))) + mat2x3(3.8, -3.5, 7.1, 871.255, -883.342, 73.74));
 _GLF_SWITCH_0_1v; (mat3x2(0.6, -521.951, -21.19, 8.6, 23.48, _GLF_IDENTITY(13.55, clamp(13.55, 13.55, 13.55))) - mat3x2(-4.8, -8.3, _GLF_IDENTITY(_GLF_IDENTITY(-3448.6778, max(_GLF_IDENTITY(-3448.6778, clamp(-3448.6778, -3448.6778, -3448.6778)), -3448.6778)), (true ? _GLF_IDENTITY(-3448.6778, max(-3448.6778, -3448.6778)) : _GLF_FUZZED(log((+ -3629.7325))))), 2682.1758, 261.562, -8.6)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), (true ? max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED((-5077.9854 * 51.27))))) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false))) || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
              break;
             (-52010 - ivec4(39567, 28033, 92540, 99145));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       (-33198 ^ -43366);
       bool _GLF_SWITCH_0_3v[83];
       if(_GLF_DEAD(false))
        return;
       if((_GLF_SWITCH_0_2v))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           break;
          }
         if(_GLF_DEAD(false))
          return;
         (mat3x2(4.1, -29.97, -49.79, 5.4, 514.571, -7.7) / 867.379);
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
          break;
         if(_GLF_DEAD(false))
          return;
         (uvec4(73408u, 156795u, 33514u, _GLF_IDENTITY(_GLF_IDENTITY(103706u, (103706u) - 0u), (_GLF_IDENTITY(103706u, (103706u) - 0u)) | 0u)) << uvec4(87278u, 141785u, 91454u, 173503u));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               break;
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              return;
             break;
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               do
                {
                 while((bvec2(false, true) == bvec2(true, false)))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           return;
                          }
                        }
                       else
                        {
                        }
                       do
                        {
                         mat2x3(-9.3, -8.3, 1210.9887, 445.876, -1.0, -663.322);
                         if(_GLF_DEAD(false))
                          break;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))))))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))))))))), true, false))))) || false), true, true))));
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         ivec3 _GLF_SWITCH_0_4v[18], _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           ;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 vec3(-6848.7544, 17.85, -6317.4435);
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + 0.0), 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, sqrt(sqrt(0.0))), mat4(1.0) * (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, sqrt(sqrt(0.0))), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, sqrt(sqrt(0.0))))))))), mix(float(_GLF_FUZZED(34.12)), float(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, sqrt(sqrt(0.0))), mat4(1.0) * (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, tan(0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(dot(vec4(-8.9, 1.2, -34.08, -688.898), vec4(-17.77, 564.828, -61.12, -7.5))))), 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, sqrt(sqrt(0.0))), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, sqrt(sqrt(0.0)))))))))), bool(true)))) > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
             break;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            {
            }
           else
            {
             ;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         {
          (uvec3(193526u, _GLF_IDENTITY(180437u, clamp(180437u, 180437u, 180437u)), 155354u) | uvec3(5130u, 15055u, 47112u));
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            mat4x3(mat3x2(-1.8, -4.7, -92.81, -488.237, 97.48, -2250.7529));
           }
          else
           {
           }
          if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             break;
            continue;
           }
          if(_GLF_DEAD(false))
           continue;
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
            if(_GLF_DEAD(false))
             continue;
           }
          else
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
           }
          if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
           {
            do
             {
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 break;
                return;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
              if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.3, 732.841)))).y))))))
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  do
                   {
                    return;
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 }
                else
                 {
                 }
               }
              return;
              if(_GLF_DEAD(false))
               break;
              if(_GLF_DEAD(false))
               continue;
             }
            while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))));
           }
          ivec3(_GLF_IDENTITY(-65857, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(-65857, 0 ^ (-65857)) : _GLF_FUZZED(-445))), 97872, -10860);
          transpose(mat4x2(-5.7, 9.7, 5.1, -7.6, 217.891, -2.9, 475.447, 84.14));
         }
         if(_GLF_IDENTITY(all(bvec4(true, false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (all(bvec4(true, false, true, false))) || _GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            break;
           int _GLF_SWITCH_0_7v[90];
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             for(_GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(1, _GLF_struct_32(bvec2(true), _GLF_struct_28(1.0), _GLF_struct_29(mat4(1.0), vec3(1.0), bvec2(true), mat2x4(1.0), ivec2(1)), _GLF_struct_30(1.0, mat3(1.0), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))), mat4x3(1.0), mat3x4(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1u, vec3(1.0)), mat4x3(1.0), _GLF_struct_31(bvec2(true)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_33._injected_loop_counter > (1 ^ (1 | (1 & 1)))); _GLF_IDENTITY(_GLF_struct_replacement_33._injected_loop_counter --, (_GLF_struct_replacement_33._injected_loop_counter --) - 0))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 & 1) | 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   uvec3(_GLF_IDENTITY(63425u, max(_GLF_IDENTITY(63425u, clamp(63425u, 63425u, _GLF_IDENTITY(63425u, uint(uvec2(63425u, 0u))))), _GLF_IDENTITY(63425u, uint(uvec4(63425u, 0u, 0u, 1u))))), 172791u, 174511u);
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           uvec4 _GLF_SWITCH_0_8v;
           if(_GLF_DEAD(false))
            continue;
           uvec2 _GLF_SWITCH_0_9v[13];
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               findMSB(-94393);
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           bvec4 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v[74], _GLF_SWITCH_0_12v;
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
            break;
           mat4 _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v[24], _GLF_SWITCH_0_15v;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     case 0:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     case 79:
     case 92:
     case 63:
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.5)), float(injectionSwitch.y), bool(true))), (injectionSwitch.x > injectionSwitch.y) && true)))))
        continue;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           subgroupAll(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     case 55:
     case 84:
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     case 82:
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))))))));
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     break;
     default:
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         1;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))))), ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         return;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   subgroupBarrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true)))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y) && true, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)))) && true)))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), max(_GLF_IDENTITY((~ (1)), 1 * ((~ (1)))), _GLF_IDENTITY((~ (1)), int(ivec2((~ (1)), (0 ^ 0)))))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) - _GLF_IDENTITY(0u, (0u) | (0u))), 4, 64, 4);
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
}
