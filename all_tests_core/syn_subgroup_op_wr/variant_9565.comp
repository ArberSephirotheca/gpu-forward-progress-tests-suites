#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uint num_workgroup;
 vec3 _f0;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 bvec2 _f3;
 ivec3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 bvec2 _f1;
 uvec4 _f2;
 uint _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 mat3x4 _f1;
 bvec3 _f2;
 int _f3;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 vec4 _f1;
 mat2 _f2;
 ivec2 _f3;
 ivec2 _f4;
 mat3x4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 uint subgroup_size;
 _GLF_struct_2 _f1;
 _GLF_struct_5 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(24138)))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(29.86) : float(mat4x3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 0.0))))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-3.5)), bool(false))) / 1.0)) * _GLF_ONE(1.0, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))).x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0))).x > injectionSwitch.y)))) || false), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))))))))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                    {
                     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), false || (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))))); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ~ (~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), 0 | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(4)))))) | ((1 << _GLF_IDENTITY(int(4), int(4))))), (1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))), 1)), (int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4)))) | ((1 << _GLF_IDENTITY(int(4), int(4))))), (1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))), 1))) / 1)) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), ! (! (false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, ((_GLF_IDENTITY(true, ! (! (true)))) && true) && true), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true, ! (! ((_GLF_IDENTITY(true, ! (! (true)))) && true))))))))
                          {
                           barrier();
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                    {
                                     barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(degrees(vec3(86.55, -1.8, 615.355)), max(degrees(vec3(86.55, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-1.8, (-1.8) + 0.0), (-1.8) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-1.8, (-1.8) + 0.0), (-1.8) / 1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(-1.8, (-1.8) + 0.0), (-1.8) / _GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(-1.8, (-1.8) + 0.0), (-1.8) / 1.0))))), 615.355)), degrees(vec3(86.55, -1.8, 615.355))))) : vec3(1.0))), gl_SubgroupSize, _GLF_struct_2(mat2x3(1.0), _GLF_struct_0(mat3(1.0), vec4(1.0), mat2(1.0), ivec2(1), ivec2(1), mat3x4(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0 * (_GLF_IDENTITY(1.0, (1.0) - 0.0)))), float(_GLF_FUZZED(-7670.4972)), bool(false)))), (mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0 * (_GLF_IDENTITY(1.0, (1.0) - 0.0)))), float(_GLF_FUZZED(-7670.4972)), bool(false))))) * mat2(1.0))), _GLF_struct_1(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), (0 >> _GLF_IDENTITY(int(4), int(4)))), ivec3(0, 0, 0) + (ivec3(ivec2(1), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))))), ivec2(ivec2(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), (0 >> _GLF_IDENTITY(int(4), int(4)))), ivec3(0, 0, 0) + (ivec3(ivec2(1), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(int(int(4)))))))))))))), mat3x4(1.0), bvec3(true), 1)), _GLF_struct_5(_GLF_struct_3(bvec3(true), bvec2(true), uvec4(1u), 1u, bvec3(true)), _GLF_struct_4(mat2x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), uvec2(1u), mat4x3(1.0), bvec2(true), ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1 ^ (1 & 1)) | (_GLF_IDENTITY(1, (1) - 0)))) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ~ (~ (_GLF_IDENTITY(ivec3(1), min(_GLF_IDENTITY(ivec3(1), (ivec3(1)) | (ivec3(1))), ivec3(1)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ivec3(_GLF_IDENTITY(ivec3(ivec3(1)), (ivec3(ivec3(1))) / ivec3(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(ivec3(1), min(_GLF_IDENTITY(ivec3(1), (ivec3(1)) | (ivec3(1))), ivec3(1)))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ~ (~ (_GLF_IDENTITY(ivec3(1), min(_GLF_IDENTITY(ivec3(1), (ivec3(1)) | (ivec3(1))), ivec3(1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ~ (~ (_GLF_IDENTITY(ivec3(1), min(_GLF_IDENTITY(ivec3(1), (ivec3(1)) | (ivec3(1))), ivec3(1)))))), ivec3(0, 0, 0) | _GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), ~ (~ (_GLF_IDENTITY(ivec3(1), min(_GLF_IDENTITY(ivec3(1), (ivec3(_GLF_IDENTITY(1, ~ (~ (1))))) | (ivec3(1))), ivec3(1))))))), ~ (~ ((_GLF_IDENTITY(ivec3(1), ~ (~ (_GLF_IDENTITY(ivec3(1), min(_GLF_IDENTITY(ivec3(1), (ivec3(_GLF_IDENTITY(1, ~ (~ (1))))) | (ivec3(1))), ivec3(1)))))))))))) >> ivec3(0, 0, 0)))))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(gl_NumWorkGroups.x, vec3(1.0));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), max(_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)), _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) && true); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), false || ((_GLF_WRAPPED_IF_TRUE(true))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y))))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(23.17)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6934.6272)), float(injectionSwitch.y), bool(true)))), bool(true)))) / 1.0)))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, true && (false)), false, true))))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
             else
              {
              }
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))).x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))), max((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))), (1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)) && (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false) || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(false)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-6725.8269)), float(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)), bool(true))), _GLF_FUZZED(-39.99)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-421.583)), float(injectionSwitch.y), bool(true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true, true))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true, true))), true))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) << 0))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((3819 & 0), ((3819 & 0)) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-37.86)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.y = _GLF_struct_replacement_7.num_workgroup, (GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.y = _GLF_struct_replacement_7.num_workgroup) << 0u);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), _GLF_IDENTITY((true ? _GLF_IDENTITY(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(uint(uvec2(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(118982u) : (0u))))), 0u)))), min(uint(uvec2(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(118982u) : (0u))))), 0u)))), uint(uvec2(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(118982u) : (0u))))), 0u))))))) : _GLF_FUZZED(subgroup_local_id)), ((true ? _GLF_IDENTITY(uint(gl_WorkGroupSize.x), uint(uvec2(uint(gl_WorkGroupSize.x), 0u))) : _GLF_FUZZED(subgroup_local_id))) ^ 0u))), (uint(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), (true ? _GLF_IDENTITY(uint(gl_WorkGroupSize.x), uint(uvec2(uint(gl_WorkGroupSize.x), 0u))) : _GLF_FUZZED(subgroup_local_id))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (false ? _GLF_FUZZED(uvec4(110168u, 65085u, 50227u, 123269u)) : _GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), clamp(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (uvec4(gl_WorkGroupSize, 0u)) | (uvec4(gl_WorkGroupSize, 0u))))), uvec4(gl_WorkGroupSize, 0u), uvec4(gl_WorkGroupSize, 0u)))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ (uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (false ? _GLF_FUZZED(uvec4(110168u, 65085u, 50227u, 123269u)) : uvec4(gl_WorkGroupSize, 0u))))))).x), uint(uvec2(uint(gl_WorkGroupSize.x), 0u))) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(uint(gl_WorkGroupSize.x), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (false ? _GLF_FUZZED(uvec4(110168u, 65085u, 50227u, 123269u)) : _GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), clamp(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (uvec4(gl_WorkGroupSize, 0u)) | (uvec4(gl_WorkGroupSize, 0u))))), uvec4(gl_WorkGroupSize, 0u), uvec4(gl_WorkGroupSize, 0u)))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ (uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (false ? _GLF_FUZZED(uvec4(110168u, 65085u, 50227u, 123269u)) : uvec4(gl_WorkGroupSize, 0u))))))).x), uint(uvec2(uint(gl_WorkGroupSize.x), 0u))) : _GLF_FUZZED(subgroup_local_id)))) >> ((35719u - 20170u) & 0u))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, uint(_GLF_IDENTITY(uvec3(gl_WorkGroupID.x, 1u, 0u), clamp(uvec3(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)).x, 1u, 0u), uvec3(gl_WorkGroupID.x, 1u, 0u), uvec3(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 0u))), 0u)))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) - 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) || false)))))))
          barrier();
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (((0 | 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) >> 0)), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), _GLF_IDENTITY(int(ivec4(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), 0, 1, (0 & -4730))), (int(ivec4(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))), 0, 1, (0 & -4730)))) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))) : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     for(int _injected_loop_counter = (0 & 37814); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0))), ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)))) >> 0)); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))), true && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(clamp(int(0), int(0), int(0)), clamp(clamp(int(0), int(0), int(0)), clamp(int(0), int(0), int(0)), _GLF_IDENTITY(clamp(int(0), int(0), int(0)), max(clamp(int(0), int(0), int(0)), clamp(int(0), int(0), int(0))))))))) >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   do
                    {
                     do
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) + 0), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) - 0)) << (1 ^ 1)))) * 1)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) + 0), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) - 0)) << (_GLF_IDENTITY(1 ^ 1, 0 ^ (_GLF_IDENTITY(1 ^ 1, clamp(1 ^ 1, 1 ^ 1, 1 ^ 1)))))))) * 1)) | 0), (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) + 0), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) - 0)) << (1 ^ 1)))) * 1)) | 0)) << 0)) ^ 0))
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))));
                    }
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7166.6245) : 0.0)), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7166.6245) : 0.0)), injectionSwitch.x))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)) && true))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), _GLF_FUZZED(891.192)), vec2(_GLF_FUZZED(-868.722), (injectionSwitch)[1]), bvec2(false, true)), max(mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), _GLF_FUZZED(891.192)), vec2(_GLF_FUZZED(-868.722), (injectionSwitch)[1]), bvec2(false, true)), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), _GLF_FUZZED(891.192)), vec2(_GLF_FUZZED(-868.722), (injectionSwitch)[1]), bvec2(false, true))))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 0.0)))) - 0.0) < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(151.303), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.4)), bvec2(true, false))).x < injectionSwitch.y))))) ? _GLF_struct_replacement_6.subgroup_size : _GLF_FUZZED(subgroup_id))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0), (1u ^ 1u) | (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), int(_GLF_IDENTITY(ivec2((1), 0), ivec2(0, 0) ^ (ivec2((1), 0)))))))) | 0)))) % _GLF_struct_replacement_6.subgroup_size), min(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), ((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size))) << 0u))), max(~ (~ (_GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), ((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size))) << 0u))), ~ (~ (_GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), max((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), (((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)))), min(_GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), max((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), (((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)))), _GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), max((((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size)), (((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size))))))) << 0u)))))) >> 0u), ((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size))), ((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_struct_replacement_6.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_struct_replacement_6.subgroup_size) - 0u))), uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_struct_replacement_6.subgroup_size) - _GLF_IDENTITY(0u, (0u) << 0u))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), (((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_size, (_GLF_struct_replacement_6.subgroup_size) - _GLF_IDENTITY(0u, (0u) << 0u))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))) << 0u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.x = next_virtual_gid, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.x = next_virtual_gid, 0u | _GLF_IDENTITY((GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.x = next_virtual_gid), (true ? (GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.x = next_virtual_gid) : _GLF_FUZZED(next_virtual_gid)))) : _GLF_FUZZED(92809u)));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_ZERO(0.0, injectionSwitch.x) + (0.0)), injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) - (0 << _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bvec3((_GLF_IDENTITY(true, (true) && true)), false, true)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bvec3((_GLF_IDENTITY(true, (true) && true)), false, true))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bvec3((_GLF_IDENTITY(true, (true) && true)), false, true)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bvec3((_GLF_IDENTITY(true, (true) && true)), false, true))))) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), true && ((_GLF_IDENTITY(true, (true) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bvec3((_GLF_IDENTITY(true, (true) && true)), false, true)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))) || false))), (true) && true)), false, true))))) && true)))))) && true))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, true))))
              {
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(-10976) : _GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                        {
                         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(false, false))))))))
                          barrier();
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(6.2)), bool(false)))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))); _injected_loop_counter --)
                          {
                           do
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)))) || false))))))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(42.56)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true)))), float(_GLF_FUZZED(693.779)), bool(false)))))));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), false)))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(8, _GLF_IDENTITY(8, max(8, 8)), _GLF_IDENTITY(8, (8) << 0)))) >> 0)), int(8))) << _GLF_IDENTITY(int(1), int(1))), ! (_GLF_IDENTITY(! (_injected_loop_counter > ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(8, _GLF_IDENTITY(8, max(8, 8)), _GLF_IDENTITY(8, (8) << 0)))) >> 0)), int(8))) << _GLF_IDENTITY(int(1), int(1)))), bool(bvec3(! (_injected_loop_counter > ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(8, _GLF_IDENTITY(8, max(8, 8)), _GLF_IDENTITY(8, (8) << 0)))) >> 0)), int(8))) << _GLF_IDENTITY(int(1), int(1)))), false, false)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           barrier();
          }
        }
       atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.x, (GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.x) - 0u)], uint(1), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false))), (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, false || (false)), false, false))), (false) && true)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((5.6 / 0.3)))), injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y, false || _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 0.0, 0.0), (_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), max(vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), max(float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), max(vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), max(vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), vec4(0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), (true ? mat2(injectionSwitch.x, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(837.255, 3.8, -1483.3621, 6594.8882))))) / mat2(1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), false)), _GLF_IDENTITY((bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), false))), bool(bool((bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), false)))))) && true)))))))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), (bool((! (false)))) || false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) * _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) * _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0))))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(7, int(int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(bitCount(next_virtual_gid)))), (int(7)) * _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0))))))), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) * _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec2(1, 1))))))), _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), int(ivec3((_GLF_IDENTITY(1, min(1, 1))), 1, 1))) | 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec4(int(7), 1, 1, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, ~ (~ (2)))))) | 1)); _injected_loop_counter ++)
        {
         GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.z = read;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(0, 0, (0 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) ^ 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (-31735 & 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) - 0))) < _GLF_struct_replacement_6.subgroup_size)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true))), true, true))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(true))), bool(false))))) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6785.2858), _GLF_FUZZED(-581.140)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 1, ~ (~ (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 1)))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(checker[virtual_gid], GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.z, _GLF_IDENTITY(4, (4) / 1), _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), (_GLF_IDENTITY((64) | (64), 0 ^ ((64) | (64)))) >> 0))) << 0), 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (1 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), cos(sqrt(0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), vec3(0.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), vec3(_GLF_FUZZED(4.1), _GLF_FUZZED(-40.02), _GLF_FUZZED(0.3)), bvec3(false, false, false))), vec3(0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false)))) || false))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) || false, ! (_GLF_IDENTITY(! ((bool(false)) || false), ! (_GLF_IDENTITY(! (! ((bool(false)) || false)), ! (! (! (! ((bool(false)) || false)))))))))), bool(bvec2(bool(false), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(false))), ! (! (! (bool(bool(false)))))), false || (! _GLF_IDENTITY((bool(bool(false))), false || ((bool(bool(false)))))))))) && true), bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec4(bool(bvec3(false, true, false)), false, false, false)))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(false, true, false)), false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))), false)), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bvec3(false, true, false)), false, false, false))), false || (! (bool(bvec4(bool(bvec3(false, true, false)), false, false, false))))))))), false)))))))))) || false))), (_GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(false))), false || (! (bool(bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(false))), false || (! (bool(bool(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bool(false))), false || (! (bool(bool(false)))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), false || (! (bool(bool(false))))))))))) || false)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), false || (! (bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), bool(bvec2(! (bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), true))), false || (! (bool(bool(false)))))))))) && true), false, true)))));
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), true, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), true, false)), false)))))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false))), true, false, true)))))), (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))) || false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((vec2(58.79, -4.5) / vec2(-2.3, 90.74)).g)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))
            {
             atomicStore(checker[virtual_gid], GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread.z, 4, 64, 4);
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))));
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), int(3))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     do
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             for(int _injected_loop_counter = ((((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))) / int(_GLF_ONE(1.0, injectionSwitch.y))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(int(3)), (int(int(3))) + 0)), max(int(_GLF_IDENTITY(int(int(3)), (int(int(3))) + 0)), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) + 0)))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(int(int(3)), (int(int(3))) + 0)), max(int(_GLF_IDENTITY(int(int(3)), (int(int(3))) + 0)), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) + 0))))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, 1 * (_GLF_IDENTITY(4, (4) | 0))))) + 0)) ^ 0)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
