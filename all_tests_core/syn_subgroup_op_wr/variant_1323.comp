#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (uint(subgroup_id)) << 0u))))) * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), 0u ^ (_GLF_IDENTITY(~ (~ (subgroup_size)), 0u + (~ (~ (subgroup_size)))))))) >> 0u))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size), (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)) | (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), max(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), 0u | (uint(uvec4(subgroup_size, 0u, 0u, 1u))))))), (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))) | (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (subgroup_size)), subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id, (77751u & 0u) ^ (subgroup_id)) * subgroup_size))))))) | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (uint(subgroup_id)) << 0u))))) * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), 0u ^ (_GLF_IDENTITY(~ (~ (subgroup_size)), 0u + (~ (~ (subgroup_size)))))))) >> 0u))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size), (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)) | (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), max(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), 0u | (uint(uvec4(subgroup_size, 0u, 0u, 1u))))))), (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))) | (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (subgroup_size)), subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id, (77751u & 0u) ^ (subgroup_id)) * subgroup_size))))))) | 0u)))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (uint(subgroup_id)) << 0u))))) * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), 0u ^ (_GLF_IDENTITY(~ (~ (subgroup_size)), 0u + (~ (~ (subgroup_size)))))))) >> 0u))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size), (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)) | (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), max(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), 0u | (uint(uvec4(subgroup_size, 0u, 0u, 1u))))))), (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))) | (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (subgroup_size)), subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id, (77751u & 0u) ^ (subgroup_id)) * subgroup_size))))))) | 0u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (uint(subgroup_id)) << 0u))))) * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), 0u ^ (_GLF_IDENTITY(~ (~ (subgroup_size)), 0u + (~ (~ (subgroup_size)))))))) >> 0u))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size), (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)) | (clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), max(min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size), min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), 0u | (uint(uvec4(subgroup_size, 0u, 0u, 1u))))))), (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))) | (~ (min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), 0u | (clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (subgroup_size)), subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id, (77751u & 0u) ^ (subgroup_id)) * subgroup_size))))))) | 0u))))) / 1u), 1u)))) ^ (21688u & 0u));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), max(_GLF_IDENTITY((0), int(ivec4((0), 1, 0, _GLF_IDENTITY(1, ~ (~ (1)))))), (0))), (~ (0)) | (~ _GLF_IDENTITY((0), ~ (~ ((0)))))))), (0) * 1);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec2(6, 0)), max(int(ivec2(6, 0)), int(ivec2(6, 0)))))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(6, 6, 6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(4), int(4))) | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 0)))); _injected_loop_counter --)
                        {
                         do
                          {
                           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1))))), (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1))))), min(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1))))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1)))))))) - 0))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1678.4839)), _GLF_IDENTITY(float(injectionSwitch.y), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y))), bool(true)))))), true && _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))))))))))))))))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true))))))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, false))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))) && true, true)))))), bool(bool(! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true, true)))))))))))))))))))))))))) || false))))))))))))
            {
            }
           else
            {
             if((subgroup_local_id % 2) == 0)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 ^ (int(2))), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) | 0)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 ^ (int(2))), (_GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((int(2)), clamp((int(2)), (int(2)), (int(2)))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 ^ (int(2))), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) | 0)) ^ 0))) << 0))); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                    {
                                     subgroupAll(false);
                                    }
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u + (atomicLoad(buf[virtual_gid], 4, 64, 2)));
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (int(0)))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         subgroupAll(false);
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | 0u, (_GLF_IDENTITY((1u) | 0u, uint(uint((1u) | 0u)))) | ((1u) | 0u))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(min(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u)), max(min(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u)), min(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u)))))))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(uvec2(uvec2(buf[virtual_gid], 1u)))), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u)))))), ~ (~ (uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u))))))))))), (0u ^ 0u) + (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))), uvec2(buf[virtual_gid], 1u))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), clamp(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) : _GLF_FUZZED(112448u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), clamp(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)))) : _GLF_FUZZED(112448u))))) | 0u))), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) - uvec2(0u, 0u)))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u))))), (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))), uvec2(buf[virtual_gid], 1u))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u)))), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))), uvec2(buf[virtual_gid], 1u))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u)))), ~ (~ (uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u))), ((_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))) * (uvec2(1u, 1u) & uvec2(1u, 1u)))), uvec2(buf[virtual_gid], 1u))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u))))))))))) / uvec2(1u, 1u)), _GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))), uvec2(buf[virtual_gid], 1u))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u))))), _GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | uvec2(0u, 0u)))), uvec2(buf[virtual_gid], 1u))), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(buf[virtual_gid], 1u))))))))))), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), _GLF_IDENTITY(uvec2(1u, 1u) * (uvec2(0u, 0u)), ~ (_GLF_IDENTITY(~ (uvec2(1u, 1u) * (uvec2(0u, 0u))), (~ (uvec2(1u, 1u) * (uvec2(0u, 0u)))) | (~ (uvec2(1u, 1u) * (uvec2(0u, 0u)))))))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u))), _GLF_IDENTITY((uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(0u, 0u)), ~ (~ ((uvec2(0u, 0u)))))) ^ uvec2(0u, 0u)) - uvec2(0u, 0u))), ((_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u))), _GLF_IDENTITY((uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(0u, 0u)), ~ (~ ((uvec2(0u, 0u)))))) ^ uvec2(0u, 0u)) - uvec2(0u, 0u)))) + uvec2(0u, 0u)) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(next_virtual_gid) : 0u)), _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))))))), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (false ? _GLF_FUZZED((uvec2(82979u, 195149u) % uvec2(75537u, 41209u))) : _GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))))))), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, 0u + (4u))), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))), (true ? uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))) : _GLF_FUZZED(subgroup_size)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))), 0u | (uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u))))))))), ~ (~ ((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 0u, (false ? _GLF_FUZZED(subgroup_id) : 0u) / 1u)))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(2u), clamp(_GLF_IDENTITY(uvec2(2u), ~ (~ (uvec2(2u)))), uvec2(2u), uvec2(2u))), uvec2(2u))) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(4u), uvec2(4u)), min(_GLF_IDENTITY(uvec2(4u), uvec2(4u)), _GLF_IDENTITY(uvec2(4u), uvec2(4u))))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(_GLF_IDENTITY(uvec2(4u), uvec2(uvec2(_GLF_IDENTITY(uvec2(4u), min(uvec2(4u), uvec2(4u))))))))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))), (true ? uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(_GLF_IDENTITY(2u, min(_GLF_IDENTITY(2u, (2u) | 0u), _GLF_IDENTITY(2u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) | (2u))))))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))) : _GLF_FUZZED(subgroup_size)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)), (uvec2(0u, 0u) | uvec2(1u, 1u)) * (_GLF_IDENTITY(min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)), min(min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)), _GLF_IDENTITY(min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)), (min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u))) - uvec2(0u, 0u)))))))))), 0u | (uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(_GLF_IDENTITY(0u, (0u) / 1u), 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u)), _GLF_IDENTITY((uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))), clamp((uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))), (uvec2(uvec4(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(1u, 1u) * (uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(0u, 0u), clamp(_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), uvec2(0u, 0u), uvec2(0u, 0u))))), 1u, 1u))) / ((((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u))) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u))) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), _GLF_IDENTITY(uvec2(4u), uvec2(uvec2(uvec2(4u)))))))))) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 1u), uvec2(buf[virtual_gid], 1u)))))))))))))))), (0u ^ 0u) + (uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u), uvec2(1u, 1u) * (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u), min(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (_GLF_IDENTITY(uvec2(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), virtual_gid, virtual_gid))))], 1u), (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), ~ (~ ((uvec2(buf[virtual_gid], 1u))))) ^ uvec2(0u, 0u), (false ? _GLF_FUZZED((uvec2(151547u, _GLF_IDENTITY(167621u, min(167621u, 167621u))) ^ uvec2(98222u, 101421u))) : _GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), ~ (~ ((uvec2(buf[virtual_gid], 1u))))) ^ uvec2(0u, 0u), (_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), ~ (~ ((uvec2(buf[virtual_gid], 1u))))) ^ uvec2(0u, 0u)) | (_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), ~ (~ ((uvec2(buf[virtual_gid], 1u))))) ^ uvec2(0u, 0u))))))) / uvec2(1u, 1u))) - uvec2(0u, 0u)), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, _GLF_IDENTITY((true ? 1u : _GLF_FUZZED(subgroup_base)), uint(uvec3(_GLF_IDENTITY((true ? 1u : _GLF_FUZZED(subgroup_base)), clamp((true ? 1u : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), clamp(_GLF_FUZZED(subgroup_base), _GLF_FUZZED(subgroup_base), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) / 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), clamp(_GLF_FUZZED(subgroup_base), _GLF_FUZZED(subgroup_base), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) / 1u))), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), clamp(_GLF_FUZZED(subgroup_base), _GLF_FUZZED(subgroup_base), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) / 1u))), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), clamp(_GLF_FUZZED(subgroup_base), _GLF_FUZZED(subgroup_base), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) / 1u))))), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), clamp(_GLF_FUZZED(subgroup_base), _GLF_FUZZED(subgroup_base), _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_FUZZED(subgroup_base)) / 1u)))))), (true ? 1u : _GLF_FUZZED(subgroup_base)), _GLF_IDENTITY((true ? 1u : _GLF_FUZZED(subgroup_base)), ((true ? 1u : _GLF_FUZZED(subgroup_base))) | ((true ? 1u : _GLF_FUZZED(subgroup_base)))))), 1u, 0u))))), uvec2(buf[virtual_gid], 1u))))))))), ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(buf[_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))], 1u), uvec2(buf[virtual_gid], 1u)))))), (_GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) >> 0u)) + (uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), min(uvec2(buf[virtual_gid], _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_base)))), uvec2(_GLF_IDENTITY(buf[virtual_gid], (true ? buf[virtual_gid] : _GLF_FUZZED(uvec4(77071u, 83733u, 72301u, 76722u)[3]))), 1u)))))))))) / 1u)))))), 4, 64, 2);
                }
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), (true) && true)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           atomicStore(checker[virtual_gid], read, 4, 64, 4);
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
