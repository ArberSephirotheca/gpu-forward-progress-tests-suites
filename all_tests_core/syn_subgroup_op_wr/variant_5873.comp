#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 ivec3 _f0;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 mat3x2 _f1;
 uvec4 _f2;
 uint _f3;
 mat2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 mat3x2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 vec4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 uvec2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 bvec3 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uvec2 _f1;
 bvec2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_1 _f0;
 _GLF_struct_6 _f1;
 int _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_1(_GLF_struct_0(bvec3(true), uvec2(1u), bvec2(true), mat3x4(1.0)), ivec4(1)), _GLF_struct_6(ivec4(1), _GLF_struct_2(mat2(1.0), uvec2(1u), vec2(1.0)), _GLF_struct_3(mat3(1.0), vec4(1.0), mat2x4(1.0)), _GLF_struct_4(vec2(1.0), mat3x2(1.0), ivec4(1)), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), _GLF_struct_5(bvec4(true), uvec2(1u), ivec2(1), mat4(1.0))), 1, _GLF_struct_9(vec4(1.0), _GLF_struct_7(mat2x3(1.0), mat4x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1267.5408) : 1.0)), float(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1267.5408) : 1.0))))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0))))), _GLF_struct_8(vec3(1.0), mat3x2(1.0), uvec4(1u), 1u, mat2(1.0), ivec2(1)), ivec4(1)), _GLF_struct_10(ivec3(1)), gl_SubgroupInvocationID);
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = _GLF_struct_replacement_11.subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y + (_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1), uint(uvec2((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1), (1u ^ 0u)))) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], 1u * (buf[virtual_gid]))) - 0u), 4, 64, 0);
 if(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
