#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true))))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > injectionSwitch.y))))
                barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(vec3(4.4, 2804.4124, -650.406))))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(vec3(4.4, 2804.4124, -650.406))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x < injectionSwitch.y)))) ? injectionSwitch : _GLF_FUZZED(vec2(vec3(4.4, _GLF_IDENTITY(2804.4124, (true ? 2804.4124 : _GLF_FUZZED(-5.0))), -650.406))))).x > injectionSwitch.y))))))))))))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(0.8)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(true))))), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))))), (injectionSwitch.x > injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(0.8)), float(injectionSwitch.y), bool(true))), false || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), ! (! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y)))))) && true));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(-4.9, 77.58, (bvec4(false, false, false, false) == bvec4(true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true, true)))))), _GLF_IDENTITY(false, true && (false)))))) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(-4.9, 77.58, (bvec4(false, false, false, false) == bvec4(true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true, true)))))), _GLF_IDENTITY(false, true && (false)))))) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(-4.9, 77.58, (bvec4(false, false, false, false) == bvec4(true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false, true, true)))))), _GLF_IDENTITY(false, true && (false)))))) : injectionSwitch.y)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(true, (true) || false)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(true, (true) || false))))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(true, (true) || false))))), false, true)))))))))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (bool(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true))), true), bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true)))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0))), true), bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true), bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true))))))), false))))))))), false, true, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.3)), bool(false))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.3)), bool(false))) > injectionSwitch.y)))))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(bvec3(_GLF_IDENTITY((! (false)), ((! (false))) && true), false, true)))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))), (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(-46.46) & 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-15063 & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), int(0)))) | (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) | 0, (true ? (int(0)) | 0 : _GLF_FUZZED(_injected_loop_counter)))), int(0))), min((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), int(0)))))))) + 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, abs(1.0), 1.0, cos(0.0), 1.0, 1.0, 1.0))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))), false), true, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, true, true)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false), true, true))), false, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(916.984)), float(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0))))) + 0.0), injectionSwitch.y), max(max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.3)), float(0.0), bool(true))), 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y), mix(float(max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))).y, injectionSwitch.y)), injectionSwitch.y)), float(_GLF_FUZZED(-0.2)), bool(false))))))))), false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && (! (true))))))))))) || false), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(916.984)), float(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0))))) + 0.0), injectionSwitch.y), max(max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.3)), float(0.0), bool(true))), 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y), mix(float(max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))).y, injectionSwitch.y)), injectionSwitch.y)), float(_GLF_FUZZED(-0.2)), bool(false))))))))), false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && (! (true))))))))))) || false), true)), false, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), mix(float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), float(_GLF_FUZZED(29.25)), bool(false))))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), float(mat2(min(injectionSwitch.y, injectionSwitch.y), tan(sqrt(0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))), injectionSwitch.y))), min(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(30.46)), float(_GLF_IDENTITY(1.0, 0.0 + (1.0))), bool(true))), _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((! (true))), (! ((! (true)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), true, true)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(22.25, -7729.3839)) : injectionSwitch)).y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 0.0))))))), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0, 1.0, exp(0.0)))).y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false))), false, true)), true, true))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ! (! ((true)))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bool(! (true))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bool(! (true))))), (! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))) || false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), true, true))))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ! (! ((true)))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bool(! (true))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bool(! (true))))), (! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))) || false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((! (true)))))))))))), true)), false, false))), false, true)), true, true))))), true, true)))))))))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) && true)))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true, (true) && true) && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, ! (! (true)))))))), true)), false, false))), false, true)))))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) - 0.0), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false)))))), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true && (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))) || false)), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(true, true && (true)))), false, false))), true, true)))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true && (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))) || false)), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(true, true && (true)))), false, false))), true, true)))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true && (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))) || false)), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(true, true && (true)))), false, false))), true, true)))))), true))))))))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.5))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && _GLF_IDENTITY(_GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bool((! (true))), false || (bool((! (true))))))), false || (_GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bool((! (true))), false || (bool((! (true)))))))))))), true)), false, false))), false, true)))))), false)), true))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-28.16) : _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 0.0))))))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bool(! ((true))))))))))), true)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), false))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), false)))))))), false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && _GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false)), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY((true), true && ((true)))) || false))))))))))))))))), ! (! (! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && _GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false)), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && true)), (_GLF_IDENTITY((true), true && ((true)))) || false)))))))))))))))))))))) || false), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), false))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false))), false)))))))), false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && _GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false)), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY((true), true && ((true)))) || false))))))))))))))))), ! (! (! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && _GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false)), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && true)), (_GLF_IDENTITY((true), true && ((true)))) || false)))))))))))))))))))))) || false), true)), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-4.8)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), injectionSwitch.y))))), mix(float(_GLF_FUZZED(vec3(24.08, 7.1, -4.1).z)), float(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), bool(true))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))), true)), false, false))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), true && (_GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(true && (! (! (true))), (true && (! (! (true)))) && true)))))), true && (! (true))))), true)), false, false))), false, true)))))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), (! (_GLF_IDENTITY(! (true), true && (! (true))))) && true)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0))))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, (true) || false)))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), true && ((true)))))))))), true)), false, false))), true, true)))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), (! (true)) && true))), true && (! (_GLF_IDENTITY(true, (true) || false)))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, _GLF_IDENTITY(false, (false) || false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), true, true)))))))), true)))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), (! (_GLF_IDENTITY(! (true), true && (! (true))))) && true)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0))))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, (true) || false)))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), true && ((true)))))))))), true)), false, false))), true, true)))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), (! (true)) && true))), true && (! (_GLF_IDENTITY(true, (true) || false)))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, _GLF_IDENTITY(false, (false) || false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), true, true)))))))), true)))), false))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, true))) ? 1.0 : _GLF_FUZZED(-3.5))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, injectionSwitch.y)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, injectionSwitch.y)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, injectionSwitch.y)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0))))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))) && true)))), false || (bool((! (true)))))))))), true)), false, false))), false, true)))))), false)), true)))))))), ! (! ((! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (true) && true)), true && (! (true))))), true)), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.4) : 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (! (true)), true && (true && _GLF_IDENTITY((! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false)), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && ((true)))) || false), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY((true), true && ((true)))) || false))))))))))))))))))) || false), true)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), (true ? _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) : _GLF_FUZZED(-404.014)))) * 1.0))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5609.2325) : injectionSwitch.y)), 1.0))))), injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), mix(float(_GLF_FUZZED(vec3(24.08, 7.1, -4.1).z)), float(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), bool(true))))), false), _GLF_IDENTITY(true, ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true))))))), false || ((_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))) || false), false, true)))), true)), false, false))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), true && (_GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))), true && (! (true))))), true)), false, false))), false, true)))))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true))))) && true))))), true)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true)), ! (! (bool(bvec2(bool(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true))))))), true && (! (true)))), (! (_GLF_IDENTITY(! (true), true && (! (true))))) && true)), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false)), true, true))), false)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false, false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false, false), false))))), bool(bvec3(! (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false, false), false))))), false, true)))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, cos(0.0), 1.0), max(vec3(injectionSwitch.y, cos(0.0), 1.0), vec3(injectionSwitch.y, cos(0.0), 1.0)))))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5645.6757))))))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - _GLF_IDENTITY(0.0, min(0.0, 0.0))))))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), (true) || false)))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), float(_GLF_FUZZED(-2.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), false || (! (_GLF_IDENTITY(true, true && (true))))))), true && (! (true))))), true)), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 0.0))))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), true && ((true)))))))))), true)), false, false))), true, true)))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, cos(0.0), 1.0)))) - 0.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), (! (true)) && true))), true && (! (_GLF_IDENTITY(true, (true) || false)))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), true, false, true))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, true && (true))))))), true)), false, _GLF_IDENTITY(false, (false) || false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), determinant(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), determinant(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), determinant(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))), false), true, true)))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter))) != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false, false))), true, true)))))))), true)))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), bool(bool(! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))), true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.5))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, injectionSwitch.y)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0))), injectionSwitch.y))))), false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bool((! (true))), false || (bool((! (true)))))))))), true)), false, false))), false, true)))))), false)), true))))))))))))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 1u))) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(findLSB(-75162)) : 0))))), (0) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / (1 & 1)))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), (true ? (int(6)) : _GLF_FUZZED(ivec4(-16033, -47042, -20229, 14539).x))) / 1), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) / 1))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true)))))))));
        }
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       do
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))), _GLF_IDENTITY(true, (true) && true) && (! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))))))), (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, true, true), bvec3(bvec3(bvec3(_injected_loop_counter < 1, true, true))))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) * ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))
            {
             barrier();
            }
          }
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))).x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)) / 1) != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0))), (true ? ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0))) : _GLF_FUZZED(_injected_loop_counter)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-7009) : int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) / 1u), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(true ? buf[virtual_gid] : _GLF_FUZZED(next_virtual_gid), max(true ? _GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u))), buf[virtual_gid])) : _GLF_FUZZED(next_virtual_gid), true ? buf[virtual_gid] : _GLF_FUZZED(next_virtual_gid))))), buf[virtual_gid])), 4, _GLF_IDENTITY(64, (64) | 0), 2)) / 1u)) * 1u)), max((_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) / 1u), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (true ? buf[virtual_gid] : _GLF_FUZZED(next_virtual_gid))), buf[virtual_gid])), 4, 64, 2)) / 1u)) * 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) / 1u), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true)), false || (bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true, true))))) ? buf[virtual_gid] : _GLF_FUZZED(next_virtual_gid))), buf[virtual_gid])), 4, 64, 2)) / 1u)) * 1u)))) | 0u);
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 & (1 & _GLF_IDENTITY(1, (1) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(339.293)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-44.53) : injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, true && (true)), false))), true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false))), true), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))), true), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))), true), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))), false))))))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (21440 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1))) && _GLF_IDENTITY(true, true && (true))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), (bool(false)) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false))))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), (_GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true && (bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))) || false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false))))))), true && (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) && true))), _GLF_IDENTITY(true, true && (true)) && (bool(false))))))))), true, false, false))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, abs(0.0)))) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, abs(0.0)))) < injectionSwitch.y))))) && (_GLF_IDENTITY((bool(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(true)))))), bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) || false), true)))))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))), ! (! ((! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))))))), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))) || _GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))), ! (! ((! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))))))), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))) || _GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false, false)), bvec3(bvec3(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))), ! (! ((! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))))))), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))) || _GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false, false))))))))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (bool(bvec3(false, true, true))), true && (! (bool(bvec3(false, true, true))))), false, true)), bool(bvec3(bool(bvec3(! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true))), false, true)), false, false))))))))), false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), _GLF_IDENTITY(true && (bool(bvec3(false, true, true))), true && (true && (bool(bvec3(false, true, true)))))))))))), false), _GLF_IDENTITY(false, false || (false)))))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), _GLF_IDENTITY(false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))))), bool(bool(false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true))))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false, false))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (bool(bvec3(false, true, true))), true && (! (bool(bvec3(false, true, true))))), false, true)), bool(bvec3(bool(bvec3(! (_GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))))), false, true)), false, false))))))))), false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))))))), false), false)))))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, _GLF_IDENTITY(true, false || (true)))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! _GLF_IDENTITY((! ((bool(bvec3(false, true, true))))), bool(bvec2(_GLF_IDENTITY((! ((bool(bvec3(false, true, true))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! ((bool(bvec3(false, true, true))))), true && ((! ((bool(bvec3(false, true, true))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((! ((bool(bvec3(false, true, true))))), true && ((! ((bool(bvec3(false, true, true))))))), false), true, true))))), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))) || false))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))) || false))), false, false)), (bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))), false || (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ! (! ((bool(bvec3(false, true, true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))) || false))), false, false))) && true)))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (bool(bvec3(false, true, true))), true && (! (bool(bvec3(false, true, true))))), false, true)), bool(bvec3(bool(bvec3(! (bool(bvec3(false, true, true))), false, true)), false, false))))))))), false), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true))))))), (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true))))), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))))) || false)))), false), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true))))))), (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true))))), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))))) || false)))), false), false)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true))))))), (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true))))), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))))) || false)))), false), false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true))))))), (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true))))), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))))) || false)))), false), false))))))))))))))), true), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false, true, true))))))))))));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))), max(clamp(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))), clamp(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))))), clamp(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)))))))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             _GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 4, 64, 2), ~ (~ (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 4, 64, 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 4, 64, 2), (read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 4, 64, 2)) / 1u)), 1u * (~ (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 4, 64, 2), (read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)])), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), buf[virtual_gid])), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u))), buf[virtual_gid])))), 1u, 1u, 0u))))), 4, 64, 2)) / 1u)))))))));
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) / 1))))
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                            }
                           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), (int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(true, true, true), true)), true)))))), _GLF_IDENTITY((true), true && ((true))) || false)))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (injectionSwitch.x)) > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (injectionSwitch.x)) > injectionSwitch.y)))), true, false, true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || false))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-711.760) : injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(int(0), 0)), (true ? _GLF_IDENTITY(int(ivec2(int(0), 0)), ~ (~ (int(ivec2(int(0), 0))))) : _GLF_FUZZED(_injected_loop_counter)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
                              barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(1))) >> _GLF_IDENTITY(int(1), int(1)), 0 | (((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-62.14) : injectionSwitch.y))), float(mat3x2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-62.14) : injectionSwitch.y))), 1.0, sqrt(0.0), sqrt(0.0), 1.0, 0.0))), 0.0 + _GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_ONE(1.0, injectionSwitch.y))) - 0.0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-48282 & 0)); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               do
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                        }
                       barrier();
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1062 & 0)); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, tan(0.0), 1.0, abs(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0))) > injectionSwitch.y))));
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))) || false));
                 barrier();
                }
              }
             else
              {
              }
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(_injected_loop_counter))), int(1))))), true && (_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), 0, 1)))), _GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(_injected_loop_counter))), int(1)))))))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (false))));
                      }
                    }
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = (0 & (45749 / -55352)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) && true)));
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(false))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(false))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 subgroupBarrier();
                }
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter ++)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
