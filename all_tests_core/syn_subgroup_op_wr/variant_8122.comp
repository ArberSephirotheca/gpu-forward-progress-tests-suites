#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, 0 | (1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (false) && true))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((! ((_GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))))))))))), ! (! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, (false) && true))))), true && (! ((! ((_GLF_IDENTITY(false, (false) && true)))))))))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), ! (! (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))))))))))) && true)))))))), ! (! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(false, (false) && true))))), _GLF_IDENTITY(true && (! ((! ((_GLF_IDENTITY(false, (false) && true)))))), (true && (! ((! ((_GLF_IDENTITY(false, (false) && true))))))) && true)))))))) || false))))))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))), false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))), false || ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), ! (! ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! _GLF_IDENTITY((! (_injected_loop_counter != 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (_injected_loop_counter != 0)), true), bvec2(bvec2(bvec2((! (_injected_loop_counter != 0)), true))))), ! (! (bool(_GLF_IDENTITY(bvec2((! (_injected_loop_counter != 0)), _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec2(bvec2((! (_injected_loop_counter != 0)), true))))))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ! (! ((! (_GLF_WRAPPED_IF_FALSE(false)))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-323.630) : _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9734.1016), _GLF_FUZZED(32.47)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9734.1016), _GLF_FUZZED(32.47)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9734.1016), _GLF_FUZZED(_GLF_IDENTITY(32.47, (32.47) / 1.0))), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-6405.9100)), float((injectionSwitch)[0]), bool(true)))), float(_GLF_FUZZED(124.440)), bool(false))), (injectionSwitch)[1]), bvec2(true, true))).y))))))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(abs(vec2(1.0, 1.0)) * (injectionSwitch), min(_GLF_IDENTITY(abs(vec2(1.0, 1.0)) * (injectionSwitch), clamp(abs(vec2(1.0, 1.0)) * (injectionSwitch), abs(vec2(1.0, 1.0)) * (injectionSwitch), abs(vec2(1.0, 1.0)) * (injectionSwitch))), abs(vec2(1.0, 1.0)) * (injectionSwitch)))), 0.0, cos(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), (vec4(1.0, 0.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))))), 0.0, sqrt(0.0)), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(0.0, float(float(0.0))), cos(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), max(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))), 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), min(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), max(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0))), 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 0.0, sqrt(0.0))), (true ? mat3x4(mat2x4(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), 0.0, cos(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mat3(1.0) * (vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mix(vec3(_GLF_FUZZED(756.764), (vec3(1.0, 0.0, 0.0))[1], _GLF_FUZZED(-75.70)), vec3((vec3(1.0, 0.0, 0.0))[0], _GLF_FUZZED(3245.6933), (vec3(1.0, 0.0, 0.0))[2]), bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, determinant(mat3(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0)), 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0)), min(float(mat4x3(0.0, determinant(mat3(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0)), 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0)), float(mat4x3(0.0, determinant(mat3(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0)), 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0))))), 0.0, 0.0))), 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), float(mat2(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 0.0, 0.0)))))), 0.0, sqrt(0.0))) : _GLF_FUZZED(mat3x4(7.4, 4.1, -9452.6075, -8035.6356, -4.9, -23.77, -374.306, 28.70, 452.859, -1508.9992, -75.99, -8.9)))))))).y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, _GLF_IDENTITY(false, (false) || false))))))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false))))))))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-71.20)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, false, true)), ! (! (bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, false, true)))))))))))), false))))), true))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0)), mat4x3(_GLF_IDENTITY(mat4(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0))))))))), bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(654.340)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), false), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), false, false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), false, false))), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), false, false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), false), false, false))), false))))))))))))), true)))))) && true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bvec3(false, true, true)))))
                barrier();
               for(int _injected_loop_counter = (1 & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) >> 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) * 1)), int(_GLF_IDENTITY(6, (6) + 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)), true && (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), (bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))) && true)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), clamp((gl_WorkGroupSize), (gl_WorkGroupSize), (gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u)))) / uvec3(1u, 1u, 1u)).x, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize.x), clamp(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x))), _GLF_IDENTITY(~ (gl_WorkGroupSize.x), (true ? _GLF_IDENTITY(~ (gl_WorkGroupSize.x), 0u | (~ (gl_WorkGroupSize.x))) : _GLF_FUZZED(173269u))), ~ (gl_WorkGroupSize.x))), (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) >> (0u & 121177u)) + ((gl_WorkGroupSize.x))), _GLF_IDENTITY(clamp(~ (gl_WorkGroupSize.x), _GLF_IDENTITY(~ (gl_WorkGroupSize.x), max(~ (gl_WorkGroupSize.x), _GLF_IDENTITY(~ (gl_WorkGroupSize.x), min(~ (gl_WorkGroupSize.x), ~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)))), (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))))) ^ uvec3(0u, 0u, 0u))).x))))), ~ (gl_WorkGroupSize.x)), (clamp(~ (gl_WorkGroupSize.x), _GLF_IDENTITY(~ (gl_WorkGroupSize.x), max(~ (gl_WorkGroupSize.x), _GLF_IDENTITY(~ (gl_WorkGroupSize.x), min(~ (gl_WorkGroupSize.x), ~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)))), (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))))) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u))).x))))), ~ _GLF_IDENTITY((gl_WorkGroupSize.x), (true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(subgroup_size))))) + 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), (_GLF_IDENTITY(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), 1u)))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), 1u))))) / uvec3(1u, 1u, 1u), ((uvec3(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))), gl_WorkGroupSize), 1u))))) / uvec3(1u, 1u, 1u)) >> uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u))), max(gl_WorkGroupSize, gl_WorkGroupSize)).x, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), max(gl_WorkGroupSize, gl_WorkGroupSize)).x, 1u, 0u, 0u)))), ~ _GLF_IDENTITY((gl_WorkGroupSize.x), min((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) | ((gl_WorkGroupSize.x))))), ~ (gl_WorkGroupSize.x))), _GLF_IDENTITY(0u, (0u) | (0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize.x), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize.x), uint(uint(~ (gl_WorkGroupSize.x)))), ~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x))), clamp(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))) && true)))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED((subgroup_local_id ++)))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u), (_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u), (uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)), uint(uint(clamp((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))))) | (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (((subgroup_local_id + 1) % subgroup_size))))))), 0u ^ (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u), (_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u), (uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)) ^ uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)), uint(uint(clamp((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))))) | (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (((subgroup_local_id + 1) % subgroup_size)))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY(_GLF_IDENTITY((true), ! (! ((true)))), false || ((true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, uint(uvec2(next_virtual_gid, 1u)))) - (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), clamp(_GLF_IDENTITY(~ (virtual_gid), (_GLF_IDENTITY(~ _GLF_IDENTITY((virtual_gid), 0u ^ ((virtual_gid))), (~ (_GLF_IDENTITY(virtual_gid, ~ (~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), (virtual_gid))))))) + 0u)) << 0u), ~ (virtual_gid), ~ (virtual_gid))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) | (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) - 0u))), clamp(_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) << 0u), ~ (virtual_gid), ~ (virtual_gid)))) >> 0u)))], _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((0 | _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(0, min(0, 0)))))) | 0) + 0)) / 1)), ((0 | 0)) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(924.374)), float(0.0), bool(true))))), injectionSwitch.x))) ^ (_GLF_IDENTITY(4, _GLF_IDENTITY((4) | 0, _GLF_IDENTITY(max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, (4) | 0)) << 0)) | 0, int(ivec4((4) | 0, 0, 1, 0))), (4) | 0), (max(_GLF_IDENTITY((_GLF_IDENTITY(4, (4) | 0)) | 0, int(ivec4(_GLF_IDENTITY((4) | 0, ((4) | 0) | ((4) | 0)), 0, 1, 0))), (4) | 0)) / (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, max(_GLF_IDENTITY(0 | 0, (0 | 0) >> 0), 0 | 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) | 0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) | 0, ~ (~ (_GLF_IDENTITY(0, (0) << 0) | 0)))) + 0))) / 1), ((0 | 0)) / 1)), (false ? _GLF_FUZZED(73856) : (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) | 0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0) | 0, ~ (~ (_GLF_IDENTITY(0, (0) << 0) | 0)))) + 0))) / 1), ((0 | 0)) / 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, int(_GLF_IDENTITY(ivec3(0 | 0, 1, 0), clamp(_GLF_IDENTITY(ivec3(0 | 0, 1, 0), (ivec3(0 | 0, 1, 0)) / ivec3(1, 1, 1)), ivec3(0 | 0, 1, 0), ivec3(0 | 0, 1, 0)))))), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((_GLF_IDENTITY(0, 0 | (0)) | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(0, (0) << 0) | 0), max((_GLF_IDENTITY(0, (0) << 0) | 0), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) << 0) | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) | ((_GLF_IDENTITY(0, (0) << 0) | 0)))))), (false ? _GLF_FUZZED(24610) : (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) << 0) | 0), max((_GLF_IDENTITY(0, (0) << 0) | 0), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) << 0) | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) | ((_GLF_IDENTITY(0, (0) << 0) | 0)))))))) / 1), _GLF_IDENTITY(((0 | 0)) / 1, (((0 | 0)) / 1) | (((0 | 0)) / 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0)))))))), (true ? _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) >> 0) << 0) | _GLF_IDENTITY(0, (0) | (0)))) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_IDENTITY((0 | 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1)), clamp(int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1)), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1)), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1))))))) | (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | 0)))) - 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ ((_GLF_IDENTITY((0 | 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(36.08) : _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-7.7)), float(0.0), bool(true))), injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1), clamp(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1), clamp(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1))), ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0 ^ (_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, int(ivec2(((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1, 0)))))), ((0 | 0)) / _GLF_IDENTITY(1, min(1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1)))), clamp(int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), _GLF_IDENTITY(((0 | 0)), max(((0 | 0)), ((0 | 0)))) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1)), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), ((0 | 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1)), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / _GLF_IDENTITY(1, (1) + 0)), ((0 | 0)) / 1)) >> _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1))))))) | (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, (0) << 0) | 0)) / 1), (_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | 0)))) - 0)) / 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) * 1) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), clamp(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(4, (4) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4(_GLF_IDENTITY((4), ((4)) * 1) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY(_GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))), min(_GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))), _GLF_IDENTITY(_GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))), (_GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0)))) | 0)))) ^ 0))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) * (_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1)))) | 0))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), max(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), max(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), max(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), max(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))))), _GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), max(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0)))))))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), max(_GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0))))), _GLF_IDENTITY((4) | 0, max(_GLF_IDENTITY((4) | 0, int(ivec4((4) | 0, 0, 1, _GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY((4) | 0, ~ (~ ((4) | 0)))))))))))))))) : _GLF_FUZZED((70529 / 1745)))))), 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(2698) : 0))) - ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) << _GLF_IDENTITY(int(3), int(3)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, _GLF_IDENTITY(true, false || (true)), false), false))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(true, false || (true)), false)))), false))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).x < injectionSwitch.y)))))), bool(bool(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(true, false || (true)), false)))), false))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec4(bvec2(true, true), _GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).x < injectionSwitch.y))))))))))) || false), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)), float(mat3x2(injectionSwitch.y, 0.0, cos(0.0), 1.0, 1.0, 1.0)))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x)), float(_GLF_IDENTITY(float(clamp(float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(injectionSwitch.x))), float(vec2(float(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))), 1.0))))))), min(float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))).x), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), float(injectionSwitch.x)))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) / sqrt(abs(1.0))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-48.79, mix(float(-48.79), float(_GLF_FUZZED(-6.5)), bool(false))))), float(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) / sqrt(abs(1.0)))), bool(true))), clamp(_GLF_IDENTITY(float(injectionSwitch.x), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec4(mat2x4(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(-122.388)), float(float(injectionSwitch.x)), bool(true))), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), max(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), abs(cos(0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 0.0, 0.0))), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec2(0.0, 0.0)), 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, length(vec2(0.0, 0.0)), 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 1.0))), 1.0, 0.0, 0.0)), mix(float(float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), abs(cos(0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 0.0, 0.0))), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, length(vec2(0.0, 0.0)), 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, length(vec2(0.0, 0.0)), 0.0), vec4(1.0, 1.0, 1.0, 1.0))), 1.0))), 1.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.4)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(8.3)), bool(false))), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 1.0, 1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, abs(0.0), 1.0), (mat3(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 1.0, 1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, abs(0.0), 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), (vec4(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), sin(0.0)))))), float(injectionSwitch.x), float(injectionSwitch.x)))))), float(vec2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) / cos(0.0)), _GLF_IDENTITY(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x)), float(_GLF_IDENTITY(float(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))), float(vec2(float(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))), _GLF_IDENTITY(1.0, 1.0 * (1.0))))))))), min(float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x)))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) / sqrt(abs(1.0))), clamp(_GLF_IDENTITY(float(injectionSwitch.x), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-70.86) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.1) : injectionSwitch.x))))), 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec4(mat2x4(_GLF_IDENTITY(vec4(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), (vec4(_GLF_IDENTITY(float(injectionSwitch.x), float(mat3(float(injectionSwitch.x), log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))), sin(0.0)))))), float(injectionSwitch.x), float(injectionSwitch.x)))))), 0.0)))))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), mix(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), float(_GLF_FUZZED(25.67)), bool(false))), float(injectionSwitch.x), float(injectionSwitch.x)))), min(float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) - 0.0), float(injectionSwitch.x)))), float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x)), mix(float(_GLF_FUZZED((true ? -1960.9735 : -799.507))), float(clamp(float(injectionSwitch.x), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))))), bool(true))))), min(float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), float(injectionSwitch.x)))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), max(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), clamp(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), clamp(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))))), clamp(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), float(injectionSwitch.x)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x)), mix(float(_GLF_FUZZED(_GLF_IDENTITY((true ? -1960.9735 : -799.507), float(vec2((true ? -1960.9735 : -799.507), 1.0))))), float(clamp(float(injectionSwitch.x), float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))))), bool(true))))), min(float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), float(injectionSwitch.x)))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(mat3(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), abs(0.0), 1.0, 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), clamp(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) + 0.0))).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))) / 1.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)).x), clamp(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))))).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))))), clamp(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x), float(injectionSwitch.x))))))) + 0.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)) < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && ((true))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.0) : injectionSwitch.y)), ! (! (injectionSwitch.x > injectionSwitch.y)))))));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), ! (! (false || ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 + (0)))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)), true && (bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))))), false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
        }
       else
        {
         subgroupAll(true);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((58165 & 0) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x)) - 0.0)) + 0.0)))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, bool(bool(false))))), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, bool(bool(false))))), ! (! (bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, bool(bool(false)))))))), true, false, false)))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (95610 * -78547))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (_GLF_IDENTITY(true ? int(2) : _GLF_FUZZED(86243), (true ? int(2) : _GLF_FUZZED(86243)) * 1))) : _GLF_FUZZED(bitfieldExtract(99795, -46937, -68962)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), clamp((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(false, (false) && true))), true && (false))), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), true && (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), true && (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), true && (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true && (_GLF_DEAD(false))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), true && (false))), true && (_GLF_DEAD(false))), false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (false)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) && true)))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
