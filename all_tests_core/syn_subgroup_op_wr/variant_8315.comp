#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0) < injectionSwitch.y)), true && ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0)), float(_GLF_FUZZED(1923.3508)), bool(false))), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))), float(_GLF_FUZZED(8.6)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 0.0, 1.0), (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0)), float(_GLF_FUZZED(1923.3508)), bool(false))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(40603))), float(1.0), bool(true))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 0.0, 1.0)) / mat4(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0)), float(_GLF_FUZZED(1923.3508)), bool(false))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8853.7320) : 0.0))), float(_GLF_FUZZED(-1.8)), bool(false))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(8.7))), 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(5543.6210)), (float(_GLF_FUZZED(5543.6210))) - 0.0), bool(false)))) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0)), float(_GLF_FUZZED(1923.3508)), bool(false))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 0.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(5543.6210)), (float(_GLF_FUZZED(5543.6210))) - 0.0), bool(false)))) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5543.6210)), bool(false)))) / 1.0)), float(_GLF_FUZZED(1923.3508)), bool(false))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, determinant(mat2(1.0, tan(0.0), 0.0, 1.0)), 0.0, 1.0) : _GLF_FUZZED(mat4(0.8, 1.1, 4.8, -4.6, 49.52, -46.00, 8.8, -9422.3064, 6735.5803, 578.836, 4.6, -294.080, 437.611, -9.6, -5228.6009, 5077.8802))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) + 0.0)) < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 1, max(_GLF_IDENTITY(0 ^ 1, min(0 ^ 1, 0 ^ 1)), 0 ^ 1)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false, false))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(true), false || (bool(true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), false || (bool(true)))))))), (bool(_GLF_IDENTITY(bool(true), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(true), false || (bool(true)))), false || ((_GLF_IDENTITY(bool(true), false || (bool(true))))))))) && true)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))))))), false, true, false)), (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, (false) || false)))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && (_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(false, (false) || false)))))))))))), false, true, false))) && true)) || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.1))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false)))))) || false))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), true && ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))), vec2(-4.4, -7682.1475)))))), _GLF_IDENTITY(min(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475)))))), vec2(mat4x2((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475)))))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0))), (false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475))))))), vec2(1.0, 1.0) * (min(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475))))), vec2(vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475))))), _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), vec2(mat4x2(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475)))))), vec2(_GLF_IDENTITY(mat2x4((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475)))))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), transpose(transpose(mat2x4((false ? _GLF_FUZZED(vec2(864.624, -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475)))))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0))), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(864.624, (864.624) / 1.0), -0.5)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-67.19, -9.5), injectionSwitch, vec2(-4.4, -7682.1475))))))))))).x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(4716.1829) : float(injectionSwitch.x))), float(_GLF_FUZZED(-6.8)), bool(false))) > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(4716.1829) : float(injectionSwitch.x))), float(_GLF_FUZZED(-6.8)), bool(false))) > injectionSwitch.y))), true, false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, int(_GLF_IDENTITY(ivec2(8, 0), clamp(_GLF_IDENTITY(ivec2(8, 0), (ivec2(8, 0)) ^ ivec2(0, 0)), ivec2(8, 0), _GLF_IDENTITY(ivec2(8, 0), ivec2(1, 1) * (ivec2(8, 0)))))))), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true, true)))))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0))))), injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, (7) << 0)))), _GLF_IDENTITY(int(7), (int(7)) << 0)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec4(bvec2((_GLF_DEAD(false)), false), true, false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                  barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), ! (! (! (_GLF_IDENTITY(! (false), (! (false)) && true)))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 0.0))))) > injectionSwitch.y))))))) && true));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(float(82736))), bool(false)))))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) ^ 0u), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u))), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(workgroup_size) : uint(3u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), 1u, 0u))))))) - 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) * 1u) : _GLF_FUZZED(workgroup_id))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_id) : uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, min(3u, 3u))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) ? _GLF_FUZZED(workgroup_size) : uint(3u)), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u)), ~ (~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(3u)))))) >> 0u)), (_GLF_IDENTITY(uint(3u), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), (false || ((injectionSwitch.x > injectionSwitch.y))) || false)))))) ? _GLF_FUZZED(workgroup_size) : uint(_GLF_IDENTITY(3u, 0u + (3u)))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))))) << 0u) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(((true)), false || (((true)))) && true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && _GLF_IDENTITY(true, false || (true)))), bool(bvec2((_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), false)))) && true)), (_GLF_IDENTITY(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(((true)), false || (((true)))) && true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! (true))), (! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, true))))))))) && true)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && _GLF_IDENTITY(true, false || (true)))), bool(bvec2((_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), false)))) && true, ((_GLF_IDENTITY((_GLF_IDENTITY(! (! (! (true))), (! (! _GLF_IDENTITY((! _GLF_IDENTITY((true), true && ((true)))), false || (_GLF_IDENTITY((! _GLF_IDENTITY((true), true && ((true)))), ((! _GLF_IDENTITY((true), true && ((true))))) || false))))) && _GLF_IDENTITY(true, false || (true)))), bool(bvec2((_GLF_IDENTITY(! (! (! (true))), (! (! (! (true)))) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), false)))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(true, ! (! (true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), true && (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) && true))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) && true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) && _GLF_IDENTITY(true, true && (true))))))));
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))) && true)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) ? _GLF_IDENTITY(_GLF_FUZZED(vec2(21.97, 614.207)), mix(vec2((_GLF_FUZZED(vec2(21.97, 614.207)))[0], _GLF_FUZZED(7.7)), vec2(_GLF_FUZZED(vec4(53.26, 7.6, -7700.5197, 1.3).r), (_GLF_FUZZED(vec2(21.97, 614.207)))[1]), bvec2(false, true))) : injectionSwitch)) : _GLF_FUZZED(vec2(-144.791, -4.2)))).x), mix(float(_GLF_FUZZED(-2.8)), float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(_GLF_IDENTITY(21.97, sqrt(1.0) * (21.97)), 614.207)) : injectionSwitch)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(-144.791, (false ? _GLF_FUZZED(exp(1041.5378)) : _GLF_IDENTITY(-144.791, (-144.791) / 1.0))), -4.2)))).x)), bool(true)))), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, tan(0.0), 0.0, sqrt(0.0), 0.0))))))) | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-718.950), _GLF_FUZZED(-91.40)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec4(bvec2(false, false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))).x))) - 0)) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) - 0))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), false)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), max(_GLF_IDENTITY(min(workgroup_base, workgroup_base), clamp(min(workgroup_base, workgroup_base), min(workgroup_base, workgroup_base), min(workgroup_base, workgroup_base))), _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) ^ 0u)))), 0u | (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size)), 0u + (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)))), workgroup_base)) + subgroup_id * subgroup_size)))), _GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) << (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))))))))), (1u) | (1u)))), (uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY(0u + (workgroup_base), min(0u + (workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | 0u)))))))) + (workgroup_base), (false ? _GLF_FUZZED(workgroup_base) : 0u + (workgroup_base)))))) + subgroup_id * subgroup_size, _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u + (workgroup_base), (_GLF_IDENTITY(0u + (workgroup_base), min(0u + (workgroup_base), 0u + (workgroup_base)))) << (179472u & 0u))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(bitfieldExtract(subgroup_id, 59554, -58464))))) | (_GLF_IDENTITY(workgroup_base, 0u + _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), (_GLF_IDENTITY(((workgroup_base)), 0u + (((workgroup_base))))) | (((workgroup_base)))) | ((workgroup_base))), min((workgroup_base), (workgroup_base)))) + subgroup_id * subgroup_size))), (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ (0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_id * subgroup_size) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) / 1u) + _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_id)))) / (1u & 1u)) * subgroup_size), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) + subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u + _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))), (0u + _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) ^ 0u)) + subgroup_id * subgroup_size))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) | (0u)) + _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u), _GLF_IDENTITY((workgroup_base), clamp((workgroup_base), (workgroup_base), (workgroup_base)))))))) + subgroup_id * subgroup_size)) ^ 0u))))))))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), 0u, 1u))) / _GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(_GLF_IDENTITY(uint(2u), 0u | (uint(2u))), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) / 1u)) - 0u)))), min((_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(virtual_gid)))), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, (1u) - 0u), 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, ~ (~ (2u)))), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) / 1u)) - 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, _GLF_IDENTITY((_GLF_IDENTITY(2u, (2u) / 1u)), 0u ^ ((_GLF_IDENTITY(2u, (2u) / 1u)))) - 0u)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))), 1u * (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) / 1u)) - 0u))))), ~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))), 1u * (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) / 1u)) - 0u)))))), max(~ (((_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))), 1u * (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) / 1u)) - 0u)))))), ~ (((_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))), 1u * (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), clamp(_GLF_IDENTITY(uint(2u), min(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u), uint(2u))), uint(2u))), min((_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) | (_GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) << 0u)))) << _GLF_IDENTITY(uint(2u), uint(2u))), (1u << _GLF_IDENTITY(uint(2u), uint(2u))))))) >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) / 1u)) - 0u)))))))))) << (0u | 0u)))))) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u))), 0u))), _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | (_GLF_FUZZED(num_workgroup))) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) - (0u & 40127u))) | 0u)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), min(_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))), (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))))) + 1) - (0u & 40127u))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup)))), clamp((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup)))), ((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup))))) | 0u), (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup)))))))) - 0u))))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), uint(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), 1u, 1u, 1u)))) + 1) - (0u & 40127u))) | 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))) - 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u)), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))) | 0u)))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) - (0u & 40127u))) | 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))))) + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) - (0u & 40127u))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) - (0u & 40127u)))) | 0u) | 0u)), 0u + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id))), (subgroup_local_id))) - 0u))))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) - (0u & 40127u))) | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))), max((false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))) - 0u))))))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) << 0), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) - (0u & 40127u))) | 0u)))))) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), (false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), 0u ^ (false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)))))), 0u | (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), (false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), 0u ^ (false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size))) + (0u | 0u)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), (false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(0u | (subgroup_local_id + 1), (0u | (subgroup_local_id + 1)) - 0u))) % subgroup_size), 0u ^ (false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))))) % subgroup_size)))))), 0u | (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1)))), 0u | (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), min(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size), false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))))) % subgroup_size), 0u ^ (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))) : ((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size)))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY(((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size))), (((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size)))) | (_GLF_IDENTITY(((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | (((false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))) : ((subgroup_local_id + 1) % subgroup_size))))))) + (0u | 0u)) >> 0u)) - 0u)))) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))), true && (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))))))))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))), false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
        {
        }
       else
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) >> 0), 4);
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), ! (! (bool(! (_GLF_DEAD(false)))))))))))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(6221.9571, -8614.6919) + vec2(5.8, 1966.4237))) : injectionSwitch)).y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))) || false))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(6221.9571, -8614.6919) + vec2(5.8, 1966.4237))) : injectionSwitch)).y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], (true ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))], (buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))]) >> 0u) : _GLF_FUZZED(virtual_gid))), 4, 64, 0);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (1)), 1, 1)))))))), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-684.411)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false))))), true)), false, true, true)))) && true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(false, true)), true)), ! (! (bool(bvec2(bool(bvec2(false, true)), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, _GLF_IDENTITY(true, true && (true)))))), ((_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(false, true)), true)), ! (! (bool(bvec2(bool(bvec2(false, true)), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, _GLF_IDENTITY(true, true && (true))))))) || false) && true)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(false, true)), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), true && (! (true)))))))), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(bool(bvec2(false, true)), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), true && (! (true)))))))), true)), false, false, true)), (bool(bvec4(bool(bvec4(bool(bvec2(false, _GLF_IDENTITY(true, (true) || false))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), true && (! (true)))))))), true)), false, false, true))) && true)))) && true)))))), (false) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) / 1))), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7)), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7))) - 0), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7))) << 0)))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true), true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(461.427) : injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)) : _GLF_FUZZED(8737.2930))), clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0)), _GLF_IDENTITY((injectionSwitch.y) / 1.0, mix(float(_GLF_FUZZED(-6.5)), float(_GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) - 0.0)), bool(true)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5828.9134))))), injectionSwitch.y)) : _GLF_FUZZED(8737.2930))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)) : _GLF_FUZZED(8737.2930))), (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - 0.0) / 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)) : _GLF_FUZZED(8737.2930)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)) : _GLF_FUZZED(8737.2930)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
          {
           barrier();
          }
         else
          {
          }
        }
       atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), clamp(_GLF_IDENTITY((4) | (4), (true ? (4) | (4) : _GLF_FUZZED(-71703))), _GLF_IDENTITY((4), 0 + ((4))) | (4), (4) | (4))))), min(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (4) : _GLF_FUZZED(17531))) | (4))), ~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), (4) | (4))), max(~ (_GLF_IDENTITY(4, (4) | (4))), ~ (_GLF_IDENTITY(4, (4) | (4)))))), 1 * ((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), _GLF_IDENTITY(max(~ (_GLF_IDENTITY(4, (4) | (4))), ~ (_GLF_IDENTITY(4, (4) | (4)))), ~ (_GLF_IDENTITY(~ (max(~ (_GLF_IDENTITY(4, (4) | (4))), ~ (_GLF_IDENTITY(4, (4) | (4))))), (~ (max(~ (_GLF_IDENTITY(4, (4) | (4))), ~ (_GLF_IDENTITY(4, (4) | (4)))))) - (0 << _GLF_IDENTITY(int(0), int(0)))))))))) << 0)) - 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), int(ivec3(~ (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, int(ivec2(4, (0 << _GLF_IDENTITY(int(5), int(5))))))))), 1, _GLF_IDENTITY(1, (1) ^ 0)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), _GLF_IDENTITY(int(int((_GLF_IDENTITY(4, (4) | (4))))), _GLF_IDENTITY(int(int(int(int((_GLF_IDENTITY(4, (4) | (4))))))), min(int(int(int(int((_GLF_IDENTITY(4, (4) | (4))))))), int(int(int(int((_GLF_IDENTITY(4, (4) | (4)))))))))))) << 0)) - 0)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(10378) : 4))) | (4))), clamp(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true) ? _GLF_FUZZED(10378) : 4))) | (4))), ~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), (false ? _GLF_FUZZED(10378) : 4))) | (4))), ~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(10378) : 4))) | (4))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), max((4), (4))) | (4)), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (false ? _GLF_FUZZED(72197) : _GLF_IDENTITY(4, (4) | (4)))))), ~ (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (false ? _GLF_FUZZED(72197) : _GLF_IDENTITY(4, (4) | (4)))))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (false ? _GLF_FUZZED(72197) : _GLF_IDENTITY(4, (4) | (4)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (false ? _GLF_FUZZED(72197) : _GLF_IDENTITY(4, (4) | (4))))))))))))) * 1)), (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(-13174) : (_GLF_IDENTITY(4, (4) | (4)))))) << 0)) - 0))) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), clamp(0 << _GLF_IDENTITY(int(2), int(2)), 0 << _GLF_IDENTITY(int(2), int(2)), 0 << _GLF_IDENTITY(int(2), int(2))))) << 0), 0 << _GLF_IDENTITY(int(2), int(2))))))) << 0), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), 0 + ((_GLF_IDENTITY(4, (4) | (4))))))))) << 0)) - 0, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), 0 + ((_GLF_IDENTITY(4, (4) | (4))))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), 0 + ((_GLF_IDENTITY(4, (4) | (4))))))))) << 0)) - 0)), _GLF_IDENTITY(clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))), (true ? (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) : _GLF_FUZZED(-4373))) | (4)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, (4) | (4)))), ~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0), clamp(_GLF_IDENTITY(clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))), (true ? (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) : _GLF_FUZZED(-4373))) | (4)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, (4) | (4)))), ~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0), ~ (~ (clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))), (true ? (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) : _GLF_FUZZED(-4373))) | (4)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, (4) | (4)))), ~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0)))), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))), (true ? (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) : _GLF_FUZZED(-4373))) | (4)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, (4) | (4)))), ~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))), (true ? (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, ~ (~ (4))), 4, 4))) : _GLF_FUZZED(-4373))) | (4)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, (4) | (4)))), ~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))) << 0)) - 0, (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) | (4))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), ~ (~ (_GLF_IDENTITY(4, (4) | (4))))))) << 0)) - 0))))))) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0)))), (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0))))) | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0))))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, ((90242 ^ -27129) & 0))), clamp(int(ivec3(0, 0, ((90242 ^ -27129) & 0))), int(ivec3(0, 0, ((90242 ^ -27129) & 0))), int(ivec3(0, 0, ((90242 ^ -27129) & 0)))))), (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), 0 | ((0) | (0))))) + 0), _GLF_IDENTITY(0, (0) | (0)))))), 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(_GLF_IDENTITY(false, true && (false)));
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY((bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(72.41, -2.0)) : injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) / 1.0)), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(72.41, -2.0)), mix(vec2((_GLF_FUZZED(vec2(72.41, -2.0)))[0], (_GLF_IDENTITY(_GLF_FUZZED(vec2(72.41, -2.0)), (_GLF_FUZZED(vec2(72.41, -2.0))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-8494.9675), _GLF_FUZZED(-519.218)), bvec2(false, false))) : injectionSwitch)).x > injectionSwitch.y))))), true))), bool(bvec3((bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(72.41, -2.0)) : injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) / 1.0)), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(72.41, -2.0)), mix(vec2((_GLF_FUZZED(vec2(72.41, -2.0)))[0], (_GLF_IDENTITY(_GLF_FUZZED(vec2(72.41, -2.0)), (_GLF_FUZZED(vec2(72.41, -2.0))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-8494.9675), _GLF_FUZZED(-519.218)), bvec2(false, false))) : injectionSwitch)).x > injectionSwitch.y))))), true))), false, false))) || _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           subgroupAll(true);
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > (0 << _GLF_IDENTITY(int(1), int(1)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1))), false || (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1))), bool(_GLF_IDENTITY(bool(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1)))), true && (bool(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1))))))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) >> 0)) + (-51548 & 0))), _GLF_IDENTITY(int(1), int(1)))))))))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter --), ~ (_GLF_IDENTITY(~ ((_injected_loop_counter --)), (true ? ~ ((_injected_loop_counter --)) : _GLF_FUZZED(bitfieldReverse(-35060)))))) | 0, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-8402) : _injected_loop_counter --))) | 0), (true ? ~ ((_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-8402) : _injected_loop_counter --))) | 0) : _GLF_FUZZED(bitfieldInsert((_injected_loop_counter), clamp(_injected_loop_counter, 76567, -70054), _injected_loop_counter, _injected_loop_counter))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-883.898)), bool(false))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-883.898)), bool(false))))), min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.8)), bool(false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))).y)), injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
}
