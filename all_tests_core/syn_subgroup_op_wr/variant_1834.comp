#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 uvec2 _f0;
 int _f1;
 uvec4 _f2;
 bvec3 _f3;
 mat3 _f4;
 mat4x2 _f5;
 int _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 ivec4 _f1;
 vec2 _f2;
 uint _f3;
 mat2x4 _f4;
 bvec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 uvec4 _f1;
 uvec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 mat2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_7 {
 bool _f0;
 bvec3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 float _f1;
 vec4 _f2;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 mat4 _f1;
 mat4 _f2;
 bool _f3;
 vec4 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 _GLF_struct_3 _f2;
 uvec2 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 mat3x2 _f1;
 float _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 _GLF_struct_1 _f1;
 uint virtual_gid;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_12 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread;
 uvec3 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.xy = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z = workgroup_size;
 GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.xy.y = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.y = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.xy.x = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.y;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.xy.y * GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.xy.x;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(uvec2(1u), _GLF_struct_1(ivec4(1), _GLF_struct_0(mat3x2(1.0), mat3x2(1.0), 1.0, bvec3(true))), workgroup_base + subgroup_id * subgroup_size + GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x, _GLF_struct_6(_GLF_struct_2(bvec2(true), mat4(1.0), mat4(1.0), true, vec4(1.0)), mat4x2(1.0), _GLF_struct_3(vec4(1.0), mat2x4(1.0)), uvec2(1u), _GLF_struct_4(mat3(1.0)), _GLF_struct_5(uvec2(1u), 1.0, vec4(1.0))), _GLF_struct_7(true, bvec3(true), vec4(1.0)), _GLF_struct_10(_GLF_struct_8(ivec3(1), uvec4(1u), uvec3(1u), true), _GLF_struct_9(mat4x3(1.0), ivec4(1), vec2(1.0), 1u, mat2x4(1.0), bvec3(true), mat3(1.0)), mat2(1.0), vec2(1.0)), _GLF_struct_12(_GLF_struct_11(uvec2(1u), 1, uvec4(1u), bvec3(true), mat3(1.0), mat4x2(1.0), 1)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.z = next_virtual_gid;
 atomicStore(buf[GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.z], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[_GLF_struct_replacement_13.virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.w = read;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[_GLF_struct_replacement_13.virtual_gid], GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.w, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[_GLF_struct_replacement_13.virtual_gid], GLF_merged3_0_2_51_2_1_16_3_1_4GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidread.w, 4, 64, 4);
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
