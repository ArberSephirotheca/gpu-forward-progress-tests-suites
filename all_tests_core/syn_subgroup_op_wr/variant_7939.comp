#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 bvec3 _f0;
 bvec4 _f1;
 mat2 _f2;
 mat4 _f3;
 mat4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_15 {
 float _f0;
 uint _f1;
 mat2x4 _f2;
 uvec2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_17 {
 mat3x2 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_16 _f2;
 vec4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
} ;

struct _GLF_struct_18 {
 uint subgroup_local_id;
 _GLF_struct_14 _f0;
 ivec2 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_12 {
 uint next_virtual_gid;
 mat3x4 _f0;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat4x3 _f3;
 mat2 _f4;
 bool _f5;
 mat2 _f6;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 _GLF_struct_10 _f1;
} ;

struct _GLF_struct_13 {
 uint _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 mat2 _f3;
 vec4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_5 {
 float _f0;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 ivec3 _f1;
 uint _f2;
 mat3x2 _f3;
 int _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_2 {
 float _f0;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 mat3 _f3;
 mat4 _f4;
 mat2x3 _f5;
 ivec3 _f6;
 uint subgroup_size;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 mat2x3 _f1;
 _GLF_struct_1 _f2;
 uvec2 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_7 _f5;
 _GLF_struct_8 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat3x2(1.0), mat2x3(1.0), _GLF_struct_1(_GLF_struct_0(uvec4(1u), mat2x4(1.0), mat3x2(_GLF_IDENTITY(1.0, (1.0) + sin(0.0))), vec2(1.0))), uvec2(1u), _GLF_struct_4(mat4x2(1.0), _GLF_struct_2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 0.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 0.0), mat2(mat3x2(mat2(1.0, 0.0, 1.0, 0.0))))) - mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(clamp(float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0))), min(_GLF_IDENTITY(clamp(float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0))), mix(float(_GLF_FUZZED(-3010.6246)), float(clamp(float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)))), bool(true))), _GLF_IDENTITY(clamp(float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0))), (clamp(float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)), float(mat2(1.0, 0.0, 1.0, 0.0)))) - 0.0)))))), _GLF_struct_3(mat4(1.0), _GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ (ivec3(1, 1, _GLF_IDENTITY(1, max(1, 1))) ^ ivec3(1, 1, 1))), 1u, mat3x2(1.0), 1, mat2x4(1.0)), mat3(1.0), mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * 1.0)), mat2x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), ivec3(1), gl_SubgroupSize), _GLF_struct_7(mat3x4(1.0), _GLF_struct_5(1.0), _GLF_struct_6(ivec2(_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(uvec4(1u), _GLF_IDENTITY((uvec4(1u)) / uvec4(1u, 1u, 1u, 1u), (uvec4(0u, 0u, 0u, 0u) ^ uvec4(1u, 1u, 1u, 1u)) * ((uvec4(1u)) / uvec4(1u, 1u, 1u, 1u)))))), _GLF_struct_8(_GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true)), bvec3(bvec3(bvec3(bvec3(true))))))), mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.5) : 1.0)), (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.5) : 1.0))) - 0.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(gl_SubgroupInvocationID, _GLF_struct_14(bvec4(true)), _GLF_IDENTITY(ivec2(1), ivec2(ivec3(ivec2(1), 1))), _GLF_struct_17(mat3x2(1.0), _GLF_struct_15(1.0, 1u, mat2x4(1.0), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (true ? _GLF_IDENTITY(1u, max(1u, 1u)) : _GLF_FUZZED(subgroup_id)))) | 0u)) | 0u)), mat3x2(1.0)), _GLF_struct_16(bvec3(true), bvec4(true), mat2(1.0), mat4(1.0), mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat3x4(1.0)), vec4(1.0), uvec2(1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || (false)))) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2913.8348))) > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y : _GLF_FUZZED(35.83)))))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), (_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)) + _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id))) : gl_NumWorkGroups.x), (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), ~ (~ (_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id))))) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true)))))), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id))) : gl_NumWorkGroups.x), (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), (_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)) | 0u), _GLF_IDENTITY((_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)), ((_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), max(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), (_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)) - 0u))))) + 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id))) : gl_NumWorkGroups.x), (true ? (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), (_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)) | 0u), _GLF_IDENTITY((_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)), ((_GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), max(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), (_GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id)) - 0u))))) + 0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id), _GLF_FUZZED(_GLF_struct_replacement_18.subgroup_local_id))) : gl_NumWorkGroups.x) : _GLF_FUZZED((subgroup_id * subgroup_id))))) / 1u)) ^ 0u))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), false || (_GLF_IDENTITY(false, false || (false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, (1 ^ 1) + (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)) & 1)); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u), workgroup_size * workgroup_id), max(_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))), workgroup_id))) | 0u), workgroup_size * workgroup_id), min(min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u), workgroup_size * workgroup_id), min(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id) | 0u, 0u | ((workgroup_size * workgroup_id) | 0u))), workgroup_size * workgroup_id))), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u), workgroup_size * workgroup_id))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((793.368))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (false ? _GLF_FUZZED(4129.6887) : injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((793.368))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (false ? _GLF_FUZZED(4129.6887) : injectionSwitch.y)))))), bool(bool(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((793.368))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (false ? _GLF_FUZZED(4129.6887) : injectionSwitch.y))))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_9._f4.subgroup_size, max(_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_9._f4.subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_9._f4.subgroup_size, (_GLF_struct_replacement_9._f4.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_9._f4.subgroup_size, (true ? _GLF_struct_replacement_9._f4.subgroup_size : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_9._f4.subgroup_size, (subgroup_id * _GLF_struct_replacement_9._f4.subgroup_size) >> 0u), subgroup_id * _GLF_struct_replacement_9._f4.subgroup_size)), subgroup_id * _GLF_struct_replacement_9._f4.subgroup_size));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), true && (! ((injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y)) && ((false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))) && true)) && true)))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))), false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))), false))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) >> (0u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))) + subgroup_base + _GLF_struct_replacement_18.subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(1u, _GLF_struct_11(bvec4(true), _GLF_struct_10(ivec2(1), uvec2(1u), ivec2(1), mat4x3(1.0), mat2(1.0), true, mat2(1.0))), _GLF_struct_12(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(num_workgroup))) + subgroup_base + (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % _GLF_IDENTITY(_GLF_struct_replacement_9._f4.subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_9._f4.subgroup_size, clamp(_GLF_struct_replacement_9._f4.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_9._f4.subgroup_size, (true ? _GLF_struct_replacement_9._f4.subgroup_size : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_struct_replacement_9._f4.subgroup_size, ~ (~ (_GLF_struct_replacement_9._f4.subgroup_size)))))) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), 0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((_GLF_struct_replacement_18.subgroup_local_id + 1)), (~ ((_GLF_struct_replacement_18.subgroup_local_id + 1))) ^ 0u))), 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u))))))))) % _GLF_struct_replacement_9._f4.subgroup_size, min(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), 0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((_GLF_struct_replacement_18.subgroup_local_id + 1)), (~ ((_GLF_struct_replacement_18.subgroup_local_id + 1))) ^ 0u))), 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u))))))))) % _GLF_struct_replacement_9._f4.subgroup_size, _GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), 0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((_GLF_struct_replacement_18.subgroup_local_id + 1)), (~ ((_GLF_struct_replacement_18.subgroup_local_id + 1))) ^ 0u))), 1u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u))))))))) % _GLF_struct_replacement_9._f4.subgroup_size)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), _GLF_IDENTITY(0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)))), uvec2(0u, 0u) | ((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), clamp(_GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))) | (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)))), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), max(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))))))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)), uvec2(uvec4((false ? _GLF_IDENTITY(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), clamp(_GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))) | (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)))), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), max(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))))))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))))))), (true ? 0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), ((_GLF_struct_replacement_18.subgroup_local_id + 1)) ^ 0u), 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_IDENTITY(_GLF_struct_replacement_18.subgroup_local_id, (_GLF_struct_replacement_18.subgroup_local_id) | 0u) + 1), 1u)))), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) | uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u)) + (uvec2(0u, 0u))) | ((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((_GLF_IDENTITY(uvec4(89899u, 177001u, _GLF_IDENTITY(12483u, (_GLF_IDENTITY(12483u, uint(uvec2(12483u, 1u)))) | (12483u)), 116206u), (uvec4(89899u, 177001u, _GLF_IDENTITY(12483u, (_GLF_IDENTITY(12483u, uint(uvec2(12483u, 1u)))) | (12483u)), 116206u)) << uvec4(0u, 0u, 0u, 0u)) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)))))))))) : _GLF_FUZZED(subgroup_id)))) % _GLF_struct_replacement_9._f4.subgroup_size)), (_GLF_IDENTITY((~ (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), _GLF_IDENTITY(0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)))), uvec2(0u, 0u) | ((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), clamp(_GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))) | (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)))), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), max(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))))))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)), uvec2(uvec4((false ? _GLF_IDENTITY(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), clamp(_GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))) | (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)))), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), max(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))))))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))))))), (true ? 0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), ((_GLF_struct_replacement_18.subgroup_local_id + 1)) ^ 0u), 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_IDENTITY(_GLF_struct_replacement_18.subgroup_local_id, (_GLF_struct_replacement_18.subgroup_local_id) | 0u) + 1), 1u)))), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) | uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u)) + (uvec2(0u, 0u))) | ((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((_GLF_IDENTITY(uvec4(89899u, 177001u, _GLF_IDENTITY(12483u, (_GLF_IDENTITY(12483u, uint(uvec2(12483u, 1u)))) | (12483u)), 116206u), (uvec4(89899u, 177001u, _GLF_IDENTITY(12483u, (_GLF_IDENTITY(12483u, uint(uvec2(12483u, 1u)))) | (12483u)), 116206u)) << uvec4(0u, 0u, 0u, 0u)) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)))))))))) : _GLF_FUZZED(subgroup_id)))) % _GLF_struct_replacement_9._f4.subgroup_size)), uint(uvec2((~ (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), _GLF_IDENTITY(0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)))), uvec2(0u, 0u) | ((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), clamp(_GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))) | (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)))), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), max(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))))))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)), uvec2(uvec4((false ? _GLF_IDENTITY(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), clamp(_GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))) | (uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)))), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), _GLF_IDENTITY(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), max(uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u)), uvec2(uvec3(_GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))), 1u))))))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))))))), (true ? 0u | (_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_18.subgroup_local_id + 1), ((_GLF_struct_replacement_18.subgroup_local_id + 1)) ^ 0u), 1u), uvec2(0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((uvec4(89899u, 177001u, 12483u, 116206u) , uvec2(20021u, 90876u))) : uvec2((_GLF_IDENTITY(_GLF_struct_replacement_18.subgroup_local_id, (_GLF_struct_replacement_18.subgroup_local_id) | 0u) + 1), 1u)))), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) | uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u)) + (uvec2(0u, 0u))) | ((_GLF_IDENTITY(uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u), (false ? _GLF_FUZZED((_GLF_IDENTITY(uvec4(89899u, 177001u, _GLF_IDENTITY(12483u, (_GLF_IDENTITY(12483u, uint(uvec2(12483u, 1u)))) | (12483u)), 116206u), (uvec4(89899u, 177001u, _GLF_IDENTITY(12483u, (_GLF_IDENTITY(12483u, uint(uvec2(12483u, 1u)))) | (12483u)), 116206u)) << uvec4(0u, 0u, 0u, 0u)) , uvec2(20021u, 90876u))) : uvec2((_GLF_struct_replacement_18.subgroup_local_id + 1), 1u)))))))))) : _GLF_FUZZED(subgroup_id)))) % _GLF_struct_replacement_9._f4.subgroup_size)), 0u)))) ^ 0u)), (_GLF_struct_replacement_18.subgroup_local_id + 1) % _GLF_struct_replacement_9._f4.subgroup_size))), mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(mat3(vec4(1.0), 0.0, 0.0, 0.0, 1.0, 0.0))), vec4(mat4x2(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3682.6431)), bool(false))), length(0.0), 1.0, 1.0))), ivec4(1));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.3, 3107.5639)) : injectionSwitch)).y, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6118.0051))) + (injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true))))))))
              break;
             return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               return;
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | _GLF_IDENTITY((_injected_loop_counter ++), (true ? (_injected_loop_counter ++) : _GLF_FUZZED(_injected_loop_counter)))))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), bool(bool((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))))), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), bool(bool((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))))), false, false))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(dot(vec4(-9.5, 1.6, _GLF_IDENTITY(-7.2, mix(float(-7.2), float(_GLF_FUZZED(22.42)), bool(false))), 451.898), vec4(-3.1, -6.6, -9512.3127, 4.4).tpps)) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), mix(float(float(mat3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(80.10)))))), float(_GLF_FUZZED(-1.6)), bool(false)))))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.2)), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(626.670) : 0.0))), bool(true))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-79.49) : 0.0)))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(mat3(vec4(0.0, 1.0, 0.0, 0.0), 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), max(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0, 1.0))), injectionSwitch.y))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, _GLF_IDENTITY(0.0, _GLF_IDENTITY((false ? _GLF_FUZZED(dot(vec4(-9.5, 1.6, -7.2, 451.898), vec4(-3.1, -6.6, -9512.3127, 4.4).tpps)) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2969.0845))), 1.0)), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-727.998)), bool(false))), 0.0, 1.0, 1.0)), mix(float(float(mat3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), float(_GLF_FUZZED(-1.6)), bool(false))))), ((false ? _GLF_FUZZED(dot(vec4(-9.5, 1.6, -7.2, 451.898), vec4(-3.1, -6.6, -9512.3127, 4.4).tpps)) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2969.0845))), 1.0)), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-727.998)), bool(false))), 0.0, 1.0, 1.0)), mix(float(float(mat3(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), float(_GLF_FUZZED(-1.6)), bool(false)))))) - tan(0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(sin(3.8)))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, _GLF_IDENTITY(sqrt(0.0), min(_GLF_IDENTITY(sqrt(0.0), float(float(_GLF_IDENTITY(sqrt(0.0), _GLF_IDENTITY((sqrt(0.0)) / 1.0, min(_GLF_IDENTITY((sqrt(0.0)) / 1.0, max((sqrt(0.0)) / 1.0, (sqrt(0.0)) / 1.0)), _GLF_IDENTITY((sqrt(0.0)) / 1.0, ((sqrt(0.0)) / 1.0) * 1.0))))))), sqrt(0.0))), 1.0, 1.0, 1.0))), sqrt(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.2)), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(626.670) : 0.0))), _GLF_IDENTITY(bool(true), (bool(true)) && true))), 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0, 1.0))), injectionSwitch.y)))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), false || (bool(false))), true, true))))))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), false || (bool(false))), true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(false), false || (bool(false))), true, true)))))))))))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.4)), vec2(_GLF_FUZZED(vec3(545.381, -6.6, -6.8).t), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), false || (_GLF_IDENTITY(! (false), true && (! (false)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-450.303)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - (1 ^ 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) + 0)) | (int(7))), _GLF_IDENTITY(int(7), (int(7)) - (1 ^ 1)))) / 1), clamp(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - (1 ^ 1))), (true ? _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - (1 ^ 1))) : _GLF_FUZZED(abs(14977)))), 0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - (1 ^ 1))), 0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - (_GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(5), int(5)))) ^ 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_struct_replacement_13._f2.next_virtual_gid], uint(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ 0))))))), 4, 64, _GLF_IDENTITY(4, 1 * (_GLF_IDENTITY(4, _GLF_IDENTITY((4), (false ? _GLF_FUZZED(61258) : (4))) | 0))));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if((_GLF_struct_replacement_18.subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-7946.7930)), bool(false)))))));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (_GLF_IDENTITY(true, (true) || false))))), true && (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) || false)))), false || (! (_GLF_IDENTITY(true, (true) || false))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))) && (false)) || _GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, _GLF_IDENTITY(bool(bvec4((true) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), _GLF_IDENTITY(true && (bool(bvec4((true) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false || (true && (bool(bvec4((_GLF_IDENTITY(true, ! (! (true)))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(true, false || (true))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true && (bool(bvec4((true) || false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(true, false, false)), true, false)), true && (bool(bvec3(bool(bvec3(true, false, false)), true, false)))))))))))))), false || ((! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, _GLF_IDENTITY(bool(bvec4((true) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true && _GLF_IDENTITY((bool(bvec4((true) || _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), false, true))), true && ((bool(bvec4((true) || _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), false, true))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            barrier();
           subgroupAll(false);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(2, (2) | (2)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(2, (2) | (2)))), 0 | ((~ (_GLF_IDENTITY(2, (2) | (2)))))), (1 ^ 0)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(2, (2) | (2)))), 0 | ((~ (_GLF_IDENTITY(2, (2) | (2)))))), (1 ^ 0)), ivec2(ivec3(ivec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(2, (2) | (2)))), 0 | ((~ (_GLF_IDENTITY(2, (2) | (2)))))), (1 ^ 0)), _GLF_IDENTITY(1, (1) | 0)))))), ((~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(2, (2) | (2)))), 0 | ((~ (_GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), ~ (~ (_GLF_IDENTITY((2) | (2), ((2) | (2)) + 0))))))))), (1 ^ 0)), ivec2(ivec3(ivec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(2, (2) | (2)))), 0 | ((~ (_GLF_IDENTITY(2, (2) | (2)))))), (1 ^ 0)), 1)))))) >> ivec2(0, 0)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bool(bool(bool(true)))))) && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bool(true)))))))))));
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u), 4, 64, _GLF_IDENTITY(2, (2) | (0 & 53863)));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) / 1.0))) > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     subgroupBarrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y)))) || false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, 0 + _GLF_IDENTITY((_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), ((_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), (false ? _GLF_FUZZED(-26926) : (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))))))))), 4);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(bool(bvec4(! (! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec4(! (! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true))))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-7300.7940)), float(injectionSwitch.x), bool(true)), max(mix(float(_GLF_FUZZED(-7300.7940)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(-7300.7940)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
