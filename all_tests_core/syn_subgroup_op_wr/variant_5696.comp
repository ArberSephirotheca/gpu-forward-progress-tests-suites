#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 mat4x2 _f0;
 mat2 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_21 {
 _GLF_struct_20 _f0;
 uvec3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 uvec3 _f1;
 ivec2 _f2;
 uint subgroup_size;
 bvec2 _f3;
 mat2 _f4;
 int _f5;
} ;

struct _GLF_struct_19 {
 mat3x4 _f0;
 ivec4 _f1;
 vec4 _f2;
 mat2x4 _f3;
 float _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_22 {
 mat4 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_21 _f2;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 int _f1;
 mat3x4 _f2;
 mat4x3 _f3;
 ivec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 bvec3 _f1;
 bvec3 _f2;
 uvec3 _f3;
 bool _f4;
 bvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 ivec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 uvec4 _f1;
 float _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 mat2x4 _f1;
 vec3 _f2;
 uvec3 _f3;
 bvec3 _f4;
 int _f5;
 uint _f6;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
 float _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 mat2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_8 {
 uint workgroup_size;
 ivec3 _f0;
 ivec2 _f1;
 ivec4 _f2;
 float _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 uvec2 _f1;
 bvec2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 uvec3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_17 {
 vec2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_12 _f2;
 bvec3 _f3;
 _GLF_struct_16 _f4;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 mat4x2 _f1;
 mat2x4 _f2;
 ivec2 _f3;
 ivec4 _f4;
 bvec3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 bvec4 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_1 {
 float _f0;
 mat4 _f1;
 mat4x2 _f2;
 mat3x2 _f3;
 mat3x4 _f4;
 ivec2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 mat4 _f1;
 bool _f2;
 uint num_workgroup;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 ivec2 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_5 _f3;
 mat2x4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_0 {
 bool _f0;
 uint read;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat4(1.0), _GLF_struct_19(mat3x4(1.0), ivec4(1), vec4(1.0), mat2x4(1.0), 1.0, _GLF_struct_18(mat4x2(1.0), uvec3(1u), ivec2(1), gl_SubgroupSize, _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), false)))))), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), 1)), _GLF_struct_21(_GLF_struct_20(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2(1.0), mat4x3(1.0), uvec4(1u), ivec4(1)), uvec3(1u), bvec2(true)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(ivec2(1), ivec2(1), _GLF_struct_2(_GLF_struct_1(1.0, mat4(1.0), mat4x2(1.0), mat3x2(1.0), mat3x4(1.0), ivec2(1), vec3(1.0)), mat4(1.0), true, gl_NumWorkGroups.x), _GLF_struct_5(_GLF_struct_3(mat3(1.0)), bvec4(true), _GLF_struct_4(ivec2(1), mat4x2(1.0), mat2x4(1.0), ivec2(1), ivec4(1), bvec3(true), mat2x4(1.0))), mat2x4(1.0), mat2(1.0));
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(vec2(1.0), _GLF_struct_9(mat3x2(1.0), _GLF_struct_7(ivec2(1), uvec2(1u), bvec2(_GLF_IDENTITY(true, ! (! (true)))), mat2x4(1.0)), _GLF_struct_8(gl_WorkGroupSize.x, ivec3(1), ivec2(1), ivec4(1), 1.0, mat4x2(1.0), ivec3(1)), uvec3(1u), mat4(1.0)), _GLF_struct_12(_GLF_struct_10(ivec3(1), 1.0, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | 0u)), uvec3(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u + (_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))), 1u), clamp(_GLF_IDENTITY(uvec3(1u, ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u + _GLF_IDENTITY((uint(6u)), ((uint(6u))) << 0u)))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))), 1u), (uvec3(1u, ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (6u)), min(~ (~ (6u)), ~ (~ (6u)))), (~ (~ (6u))) >> 0u))), 0u + _GLF_IDENTITY((uint(_GLF_IDENTITY(6u, 1u * (6u)))), clamp((uint(6u)), (uint(6u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(uint(uint(6u)), uint(uvec4(uint(uint(6u)), 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ((uint(6u))) << 0u)))))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))), 1u)) / (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))), uvec3(_GLF_IDENTITY(uvec3((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u)))), (_GLF_IDENTITY(uvec3((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u)))), (uvec3((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))))) | uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 1u * (0u)), 0u))), 1u), (uvec4(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u), 1u)) | (uvec4(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u), 1u))))))))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u)))), uvec3(1u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u), max(_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u), 0u ^ (_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u))))), _GLF_IDENTITY(uint(6u), 0u + (uint(6u))))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u), _GLF_IDENTITY(uint(6u), 0u + (uint(6u))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u), _GLF_IDENTITY(uint(6u), 0u + (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))))))) | ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) << 0u), _GLF_IDENTITY(uint(6u), 0u + (uint(6u)))))))) >> 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uint(6u), 0u | (uint(6u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (6u) / 1u)) - 0u)), max(uint(6u), uint(6u))))), 1u), uvec3(1u, ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u + (uint(6u))))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))), 1u))))), 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)), max(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))))))))))), _GLF_struct_11(mat4(1.0), mat2x4(1.0), vec3(1.0), uvec3(1u), bvec3(true), 1, 1u), mat2(1.0), mat2(1.0)), bvec3(true), _GLF_struct_16(_GLF_struct_13(uvec4(1u), _GLF_IDENTITY(ivec2(1), max(ivec2(1), ivec2(1))), mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0 + (_GLF_IDENTITY(float(mat2(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(transpose(mat2(1.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))))))) * 1.0))), (float(mat2(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0)))), uvec4(1u), 1.0, _GLF_struct_14(bvec4(true), bvec3(true), bvec3(true), uvec3(1u), true, bvec3(true), ivec2(_GLF_IDENTITY(1, (1) + 0))), _GLF_struct_15(uvec2(1u), _GLF_IDENTITY(1, 0 | (1)), mat3x4(1.0), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_FUZZED(-1637.3553)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0), float(mat2x3((1.0), _GLF_ZERO(0.0, injectionSwitch.x), abs(exp(0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - determinant(mat4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0)))), 0.0, 0.0))), max(_GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), float(mat3x4((1.0), 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(-1.9) : (1.0))))), (1.0))) / _GLF_IDENTITY(1.0, 0.0 + (1.0))), 1.0, 1.0)), (true ? float(vec3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)) : _GLF_FUZZED(321.361))))), bool(true)))), ivec3(1), bvec3(true)), mat3x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- 2684.5272))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))))), (false ? _GLF_FUZZED(-0.9) : float(mat4x2(1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)))))))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))))))), bool(true))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_17._f1._f2.workgroup_size, (_GLF_struct_replacement_17._f1._f2.workgroup_size) / 1u) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(vec2(3303.1549, -68.48), injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))), ~ (~ (_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))))))) | (_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))), min(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) : _GLF_FUZZED(subgroup_local_id)))) / 1u)))))) - 0u) * _GLF_struct_replacement_22._f1._f5.subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_22._f1._f5.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_22._f1._f5.subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.6) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bool(true))))))))), atomicLoad(buf[virtual_gid], 4, 64, 0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED((subgroup_id % 123651u)) : _GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u) | _GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_local_id) : (subgroup_local_id + 1))), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(103428u)))))))))) < _GLF_struct_replacement_22._f1._f5.subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.2, -7778.7204)) : injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(max(injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(5.4)), bool(false)))))), (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), float(mat4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-37.10)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))), _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.read, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.read, uint(uvec4(_GLF_struct_replacement_0.read, 0u, 1u, 0u)))), (false ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.read, uint(uvec4(_GLF_struct_replacement_0.read, 0u, 1u, 0u)))), ((_GLF_IDENTITY(_GLF_struct_replacement_0.read, uint(uvec4(_GLF_struct_replacement_0.read, 0u, 1u, 0u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.read, uint(uvec4(_GLF_struct_replacement_0.read, 0u, 1u, 0u)))), uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_0.read, uint(uvec4(_GLF_struct_replacement_0.read, 0u, 1u, 0u)))), 0u))))))))), (_GLF_IDENTITY(_GLF_struct_replacement_0.read, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.read, clamp(_GLF_struct_replacement_0.read, _GLF_IDENTITY(_GLF_struct_replacement_0.read, _GLF_IDENTITY((_GLF_struct_replacement_0.read), _GLF_IDENTITY(0u | ((_GLF_struct_replacement_0.read)), min(0u | ((_GLF_struct_replacement_0.read)), _GLF_IDENTITY(0u | ((_GLF_struct_replacement_0.read)), clamp(0u | ((_GLF_struct_replacement_0.read)), 0u | ((_GLF_IDENTITY(_GLF_struct_replacement_0.read, (_GLF_IDENTITY(_GLF_struct_replacement_0.read, 0u ^ (_GLF_struct_replacement_0.read))) + 0u))), 0u | ((_GLF_struct_replacement_0.read))))))) + 0u), _GLF_struct_replacement_0.read))) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.read, clamp(_GLF_struct_replacement_0.read, _GLF_IDENTITY(_GLF_struct_replacement_0.read, (_GLF_struct_replacement_0.read) + 0u), _GLF_struct_replacement_0.read))) << 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(_GLF_struct_replacement_0.read, clamp(_GLF_struct_replacement_0.read, _GLF_IDENTITY(_GLF_struct_replacement_0.read, (_GLF_struct_replacement_0.read) + 0u), _GLF_struct_replacement_0.read))) << 0u : _GLF_FUZZED(subgroup_id)))) + 0u))) | (_GLF_struct_replacement_0.read)), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec3(bool(bvec4(false, false, true, true)), true, true))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, bool(bool(false))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! ((_GLF_DEAD(false)))))), true && (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))), bool(bvec2(! (_GLF_DEAD(false)), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), false, false), bvec3(bvec3(bvec3((_GLF_DEAD(false)), false, false)))))), ! (! ((_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))))))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))))), ! (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), false, false), bvec3(bvec3(bvec3((_GLF_DEAD(false)), false, false)))))), ! (! ((_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))))))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))))))), (! ((! (! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), false, false), bvec3(bvec3(bvec3((_GLF_DEAD(false)), false, false)))))), ! (! ((_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))))))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))))))) || false))))), (_GLF_DEAD(false)) || false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(_GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch.y)))) || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, clamp((injectionSwitch.x) - 0.0, _GLF_IDENTITY((injectionSwitch.x) - 0.0, min((injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0)), (injectionSwitch.x) - 0.0))), 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x)))), max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, abs(0.0), 0.0, exp(0.0), 1.0, 1.0, sqrt(_GLF_ZERO(0.0, injectionSwitch.x)), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, sqrt(1.0)), transpose(transpose(mat3x4(injectionSwitch, abs(0.0), 0.0, exp(0.0), 1.0, 1.0, sqrt(_GLF_ZERO(0.0, injectionSwitch.x)), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, sqrt(1.0))))))).x) / 1.0)))))) * 1.0)), float(_GLF_FUZZED(2.3)), bool(false)), (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))))) * 1.0)), float(_GLF_FUZZED(2.3)), bool(false)), (false ? _GLF_FUZZED(811.698) : mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0) / 1.0), mix(float(_GLF_FUZZED(3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(67.78)))), bool(true)))))))) * 1.0)), float(_GLF_FUZZED(2.3)), bool(false))))) / 1.0), float(mat3x4(mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(2.3)), bool(false)), 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(1.0), 0.0, 1.0)), tan(0.0), exp(0.0), 1.0, 1.0, 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((618.206 - 9.7)), _GLF_FUZZED((- (false ? -9.6 : -2.4)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), true))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true, false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))) || false))))))), false || (bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))) || false))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_0.read, max(_GLF_struct_replacement_0.read, _GLF_struct_replacement_0.read)), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(ivec3(75664, 39725, 48709).b) : 4)), 64, 4);
   subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)) * (injectionSwitch.x))) - 0.0, (true ? (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)) * (injectionSwitch.x))) - 0.0 : _GLF_FUZZED(-63.47)))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)) * (injectionSwitch.x))) - 0.0, (true ? (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)) * (injectionSwitch.x))) - 0.0 : _GLF_FUZZED(-63.47))))), float(_GLF_FUZZED((-8768.5671 / 80.85))), bool(false))) : _GLF_FUZZED(52.52))) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)))).y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), _GLF_IDENTITY(((true)), bool(bvec4(((true)), true, true, true))) && true)))), bool(bool(! (true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
}
