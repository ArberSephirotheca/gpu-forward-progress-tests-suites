#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 uint read;
 ivec4 _f0;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 uint virtual_gid;
 bvec2 _f1;
 ivec2 _f2;
 uvec4 _f3;
 mat2 _f4;
 uvec3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_14 {
 bvec2 _f0;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 vec2 _f1;
 vec3 _f2;
 mat2x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_12 {
 uint _f0;
 mat2 _f1;
 uvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 _GLF_struct_12 _f1;
 vec2 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 float _f1;
 vec3 _f2;
 ivec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_8 {
 bvec2 _f0;
 mat2 _f1;
 mat4 _f2;
 ivec4 _f3;
 mat2x3 _f4;
 mat4x2 _f5;
 uint _f6;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 ivec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_3 {
 uint workgroup_id;
 mat3 _f0;
 bvec2 _f1;
 uint _f2;
 bvec2 _f3;
 mat3x4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_1 {
 float _f0;
 uvec3 _f1;
 mat4x2 _f2;
 vec4 _f3;
 uvec3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 int _f1;
 ivec3 _f2;
 mat4x2 _f3;
 mat4 _f4;
 int _f5;
 _GLF_struct_1 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_10 _f3;
 uvec3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0) : _GLF_FUZZED(sin(-5.8))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 >> _GLF_IDENTITY(int(7), int(7)))) : _GLF_FUZZED(-8644))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(5u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | _GLF_IDENTITY((uvec3(5u)), (false ? _GLF_FUZZED(uvec3(86756u, 44765u, 79188u)) : (uvec3(5u))))), min(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), 0u) + (uvec3(5u)))) | (uvec3(5u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u))), (false ? _GLF_FUZZED(uvec3(113826u, 143576u, 77631u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), (uvec3(5u)) - uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)), 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u))), (false ? _GLF_FUZZED(uvec3(113826u, 143576u, 77631u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), (uvec3(5u)) - uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)), 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u))), (false ? _GLF_FUZZED(uvec3(113826u, 143576u, 77631u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), (uvec3(5u)) - uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)), 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u))), (false ? _GLF_FUZZED(uvec3(113826u, 143576u, 77631u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), (uvec3(5u)) - uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)), 0u, 0u) + (uvec3(5u)))) | (uvec3(5u))), (_GLF_IDENTITY(uvec3(5u), (_GLF_IDENTITY(uvec3(5u), uvec3(0u, 0u, 0u) + (uvec3(5u)))) | (uvec3(5u)))) << uvec3(0u, 0u, 0u)))))))))))))) >> _GLF_IDENTITY(uvec3(5u), _GLF_IDENTITY(uvec3(5u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(uvec3(5u)), (uvec3(uvec3(5u))) - uvec3(0u, 0u, 0u))), (uvec3(uvec3(uvec3(5u)))) / uvec3(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, 1u), (_GLF_IDENTITY(min(1u, 1u), (min(1u, 1u)) | (min(1u, 1u)))) << 0u)), 1u))))) * (gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_2(_GLF_struct_0(mat4x2(1.0), uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(1u, max(1u, 1u)))))))), 1, ivec3(1), mat4x2(1.0), mat4(1.0), 1, _GLF_struct_1(1.0, uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), mat4x2(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) - vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(intBitsToFloat(-87652)) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 0.0)), uvec3(1u), mat2x4(1.0))), _GLF_struct_4(_GLF_struct_3(gl_WorkGroupID.x, mat3(1.0), bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true)), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), false, false)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false)))))) || false), false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true)), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), false, false)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false)))))) || false), false))), bvec2(bvec4(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true)), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), false, false)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false)))))) || false), false))), true, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true)), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), false, false)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false)))))) || false), false))), bvec2(bvec4(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true)), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), false, false)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false)))))) || false), false))), true, false)))), false))))), bvec2(bvec2(bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) || false), _GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) && true), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) && true), (! ((_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) && true)) && true), true, false, false))))))), true)))))))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(bvec2(true, true))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, _GLF_IDENTITY(true, true && (true))), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), false, true))))))))))) && true), true)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, (true) && true))), false, false)))), true, false))), bvec2(bvec2(bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), ! (! (_GLF_IDENTITY(true, bool(bool(true)))))), true, false, false))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), true, true), true))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))), true, false))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))))) && true, ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), true)), false, false)))), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false, true))))))) && true) || false)), true, true), true))))))), false)))), true)))), false, false))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, true, false))))))))), mat3x4(1.0), mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(56.26)))))), _GLF_struct_6(_GLF_struct_5(mat4x3(1.0), uvec3(1u), mat4x3(1.0), mat3(1.0))), _GLF_struct_10(_GLF_struct_7(mat3x4(1.0), ivec3(1), bvec4(true)), _GLF_struct_8(bvec2(true), mat2(1.0), mat4(1.0), ivec4(1), mat2x3(1.0), mat4x2(1.0), 1u), _GLF_struct_9(mat3x2(1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-7029.3718 / 9.7))), float(1.0), bool(true)))) / 1.0), _GLF_IDENTITY(vec3(1.0), vec3(_GLF_IDENTITY(mat2(vec3(1.0), 0.0), mat2(mat4x2(mat2(vec3(1.0), 0.0)))))), ivec3(1), true), vec2(1.0)), uvec3(1u));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ((false)) && true), false, false, true)))))) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0) * (injectionSwitch.y), (_GLF_IDENTITY(1.0, (1.0) - 0.0) * (injectionSwitch.y)) / abs(1.0)))))), ! (! (false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))))))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec2(0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_11._f1._f0.workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_16(mat4x3(1.0), _GLF_struct_12(1u, mat2(1.0), uvec2(1u), vec3(1.0)), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3116.8836) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(35.09)))))), _GLF_struct_13(ivec4(1), vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y))))), mat2x4(1.0), vec4(1.0)), _GLF_struct_14(bvec2(true)), _GLF_struct_15(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(1u), max(uvec3(1u), _GLF_IDENTITY(uvec3(1u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(1u) : _GLF_FUZZED((uvec3(187267u, 56193u, 110694u) & uvec3(156240u, 175675u, 158080u)))))))))) | _GLF_IDENTITY((uvec3(1u)), uvec3(0u, 0u, 0u) ^ ((uvec3(1u))))), workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), bvec2(true), ivec2(1), _GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) + (uvec4(1u))), mat2(1.0), uvec3(1u), ivec4(1))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), min(0, 0)), _GLF_IDENTITY(ivec4(1), (false ? _GLF_FUZZED(ivec4(-99972, -36414, 10148, -50424)) : ivec4(1))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))) << 0u)], uint(1), 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), false, false))))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), false, false))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3x4(-4413.7199, -4.1, -443.173, -1890.5215, 2.0, -7.3, 5077.7688, -1291.8958, -0.7, -9.3, 94.52, 7569.6770)))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), false, false)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(35372))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bool((_GLF_IDENTITY(false, (false) && true)))))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bool((_GLF_IDENTITY(false, (false) && true)))))))))), (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bool((_GLF_IDENTITY(false, (false) && true)))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bool((_GLF_IDENTITY(false, (false) && true)))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, true, false))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bool((_GLF_IDENTITY(false, (false) && true)))))))))))) || false))), (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (1 & 1) * (_GLF_IDENTITY(0, ~ (~ (0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0)), true && ((subgroup_local_id % 2) == _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ _GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (0)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           do
            {
             subgroupAll(false);
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((true ? _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), 0 | ((_injected_loop_counter ++))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter)), ((true ? _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), 0 | ((_injected_loop_counter ++))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(_injected_loop_counter))) - 0)))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               _GLF_struct_replacement_18.read = atomicLoad(buf[_GLF_struct_replacement_17._f0._f5.virtual_gid], 4, 64, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) - 0) | (2))))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         else
          {
           subgroupAll(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y)), true))))))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true), false, false))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 _GLF_struct_replacement_18.read = atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_17._f0._f5.virtual_gid], (buf[_GLF_struct_replacement_17._f0._f5.virtual_gid]) + (0u | 0u)), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) / 1), 4, 4)), 64, 2);
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(0), int(0)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || _GLF_IDENTITY(false, bool(bool(false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-65831 & 0)); _injected_loop_counter --)
    {
     atomicStore(checker[_GLF_struct_replacement_17._f0._f5.virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_18.read, (_GLF_struct_replacement_18.read) - 0u), 4, 64, 4);
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 | int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(894.539)), vec2(_GLF_FUZZED(-2.1), (injectionSwitch)[1]), bvec2(false, true))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))).y) * 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) ? max(0, 0) : _GLF_FUZZED(-83296))))) | 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
}
