#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 uvec3 _f0;
} ;

struct _GLF_struct_10 {
 bool _f0;
 _GLF_struct_9 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_11 {
 uint next_virtual_gid;
 _GLF_struct_10 _f0;
} ;

struct _GLF_struct_6 {
 uint workgroup_id;
 bvec2 _f0;
 mat2 _f1;
 mat4 _f2;
 ivec4 _f3;
 mat2x3 _f4;
 mat4x2 _f5;
 uint _f6;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 ivec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 bool _f1;
 mat4x3 _f2;
 uvec3 _f3;
 mat4x3 _f4;
 mat3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 float _f3;
 mat2x4 _f4;
 mat3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 uint _f1;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 int _f1;
 ivec3 _f2;
 mat4x2 _f3;
 mat4 _f4;
 int _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 uvec3 _f1;
 _GLF_struct_0 _f2;
 float _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_7 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.1)), bool(false)))) - 0.0), 0.0), (false ? _GLF_FUZZED(vec2(-94.00, 6.9)) : vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(-9.1), clamp(_GLF_FUZZED(-9.1), _GLF_IDENTITY(_GLF_FUZZED(-9.1), (true ? _GLF_FUZZED(-9.1) : _GLF_FUZZED(1390.1870))), _GLF_FUZZED(-9.1)))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bvec2(_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true), true)))))))) - 0.0), 0.0))))), _GLF_IDENTITY(0.0, log(1.0) + (0.0)))))) + vec2(0.0, 0.0)).y)) ? injectionSwitch.y : _GLF_FUZZED(3.2)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && (_GLF_IDENTITY(false, ! (! (false)))))))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))) | uvec3(0u, 0u, 0u))), (uvec3(gl_NumWorkGroups)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u)))))).x, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u), ((uvec3(gl_NumWorkGroups)) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))).x)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, true, false)), false || (bool(bvec4(_GLF_DEAD(false), false, true, false))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_1(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2230.6397) : 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(-4.4), float(mat4(_GLF_IDENTITY(_GLF_FUZZED(-4.4), min(_GLF_FUZZED(-4.4), _GLF_FUZZED(-4.4))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0)))), bool(false))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2230.6397) : 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(-4.4), float(mat4(_GLF_IDENTITY(_GLF_FUZZED(-4.4), min(_GLF_FUZZED(-4.4), _GLF_FUZZED(-4.4))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0)))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2230.6397) : 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(-4.4), float(mat4(_GLF_IDENTITY(_GLF_FUZZED(-4.4), min(_GLF_FUZZED(-4.4), _GLF_FUZZED(-4.4))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0)))), bool(false)))))), uvec3(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) | 0u), 1u))), _GLF_struct_0(uvec2(1u), 1, ivec3(1), mat4x2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, abs(1.0)), (vec2(1.0, abs(_GLF_IDENTITY(1.0, (1.0) - 0.0)))) * vec2(1.0, 1.0))))), mat4(1.0), 1, mat2x3(1.0)), 1.0), _GLF_struct_3(_GLF_struct_2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(mat3(vec4(1.0), 0.0, 1.0, _GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(512.348))), _GLF_IDENTITY(log(1.0), (log(1.0)) / 1.0), 1.0))), mat4(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) * (vec4(1.0))), uvec3(1u), mat2x4(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(41.31), max(_GLF_FUZZED(41.31), _GLF_IDENTITY(_GLF_FUZZED(41.31), clamp(_GLF_FUZZED(41.31), _GLF_IDENTITY(_GLF_FUZZED(41.31), min(_GLF_FUZZED(41.31), _GLF_FUZZED(41.31))), _GLF_FUZZED(41.31)))))), float(1.0), bool(true))), mat2x4(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), mat3(mat3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, abs(1.0), 0.0, 1.0, 1.0))), min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))), bvec2(true)), 1u), _GLF_struct_7(mat3x4(1.0), _GLF_struct_4(vec3(1.0), true, mat4x3(1.0), uvec3(1u), mat4x3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))))), mat3(1.0), bvec2(true)), _GLF_struct_5(mat3x4(1.0), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, 0), ivec3(0, 0, 0) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), clamp(ivec3(1), _GLF_IDENTITY(ivec3(1), (ivec3(1)) * ivec3(1, 1, 1)), _GLF_IDENTITY(ivec3(1), (ivec3(1)) + ivec3(0, 0, 0))))) ^ ivec3(0, 0, 0), ((ivec3(1)) ^ ivec3(0, 0, 0)) * ivec3(1, 1, 1))))), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-74336) : _GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, 0), ivec3(0, 0, 0) ^ ((ivec3(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))) ^ ivec3(0, 0, 0))), ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, 0), ((ivec3(1)) ^ ivec3(0, 0, 0)) * ivec3(1, 1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), clamp(_GLF_IDENTITY(ivec3(1), max(ivec3(1), ivec3(1))), ivec3(1), ivec3(1))), _GLF_IDENTITY((ivec3(1)) ^ _GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0, min(0, 0)))), 0, 0), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0, min(0, 0)))), 0, 0), (ivec3(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0, min(0, 0)))), 0, 0)) ^ ivec3(0, 0, 0)))), _GLF_IDENTITY(ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(1)) ^ _GLF_IDENTITY(ivec3(0, 0, 0), (_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) | (ivec3(0, 0, 0)))) + ivec3(0, 0, 0)), _GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), min(_GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), min(((ivec3(1)) ^ ivec3(0, 0, 0)), _GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), max(((ivec3(1)) ^ ivec3(0, 0, 0)), ((ivec3(1)) ^ ivec3(0, 0, 0)))))), ((ivec3(1)) ^ ivec3(0, 0, 0)))) * ivec3(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(1282))), 1))), (ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(1)) ^ _GLF_IDENTITY(ivec3(0, 0, 0), (_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) | (ivec3(0, 0, 0)))) + ivec3(0, 0, 0)), _GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), min(_GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), min(((ivec3(1)) ^ ivec3(0, 0, 0)), _GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), max(((ivec3(1)) ^ ivec3(0, 0, 0)), ((ivec3(1)) ^ ivec3(0, 0, 0)))))), ((ivec3(1)) ^ ivec3(0, 0, 0)))) * ivec3(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(1282))), 1)))) | (ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(1)) ^ _GLF_IDENTITY(ivec3(0, 0, 0), (_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) | (ivec3(0, 0, 0)))) + ivec3(0, 0, 0)), _GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), min(_GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), min(((ivec3(1)) ^ ivec3(0, 0, 0)), _GLF_IDENTITY(((ivec3(1)) ^ ivec3(0, 0, 0)), max(((ivec3(1)) ^ ivec3(0, 0, 0)), ((ivec3(1)) ^ ivec3(0, 0, 0)))))), ((ivec3(1)) ^ ivec3(0, 0, 0)))) * ivec3(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(1282))), 1))))))))) : _GLF_FUZZED(ivec3(-44528, 12988, 71299)), _GLF_IDENTITY((true ? _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0)))))) >> 0) >> 0)), ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, 0 ^ (1)))) ^ ivec3(0, 0, 0), ((ivec3(1)) ^ ivec3(0, 0, 0)) * ivec3(1, 1, 1))))) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-44528, _GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), ~ (~ (int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))))))) | 0)), 12988, 71299), (ivec3(_GLF_IDENTITY(-44528, _GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142)))), (true ? int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142)))) : _GLF_FUZZED(-78474)))), ~ (~ (int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))))))) | 0)), 12988, 71299)) / (ivec3(1, 1, 1) | ivec3(1, 1, 1))))) + ivec3(0, 0, 0), _GLF_IDENTITY(((true ? _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0)))), (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0))))) >> 0)), ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, 0), ((ivec3(1)) ^ ivec3(0, 0, 0)) * ivec3(1, 1, 1))))) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-44528, _GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), ~ (~ (int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))))))) | 0)), 12988, 71299), (ivec3(_GLF_IDENTITY(-44528, _GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), ~ (~ (int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))))))) | 0)), 12988, 71299)) / (ivec3(1, 1, 1) | ivec3(1, 1, 1))))) + ivec3(0, 0, 0)) << ivec3(0, 0, 0), (((true ? _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1)), ivec3(1, 1, 1) * ((ivec3(1)))) ^ ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0)))), (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-50270))), _GLF_IDENTITY(0, clamp(0, 0, 0))))) >> 0)), ivec3(0, 0, 0) | (_GLF_IDENTITY((ivec3(1)) ^ ivec3(0, 0, 0), ((ivec3(1)) ^ ivec3(0, 0, 0)) * ivec3(1, 1, 1))))) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-44528, _GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), ~ (~ (int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))))))) | 0)), 12988, 71299), (ivec3(_GLF_IDENTITY(-44528, _GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))), ~ (~ (int(int(_GLF_IDENTITY(_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))), (_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142)))) | (_GLF_IDENTITY(-44528, (true ? -44528 : _GLF_FUZZED(-95142))))))))))) | 0)), 12988, 71299)) / (ivec3(1, 1, 1) | ivec3(1, 1, 1))))) + ivec3(0, 0, 0)) << ivec3(0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | 0), 0)), 0)) - ivec3(0, 0, 0)))))), bvec4(true)), _GLF_struct_6(gl_WorkGroupID.x, bvec2(true), mat2(1.0), mat4(_GLF_IDENTITY(1.0, float(mat2x3(1.0, _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0))), injectionSwitch.x), 0.0, sqrt(0.0), 1.0, sqrt(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-72.41)))))))), ivec4(1), mat2x3(1.0), mat4x2(_GLF_IDENTITY(1.0, 0.0 + (1.0))), 1u)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x : _GLF_FUZZED(-3567.0674))), (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_IDENTITY((vec2(0.0, 0.0))[0], min((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[0])), _GLF_FUZZED(-1.5)), vec2(_GLF_FUZZED(10.70), (vec2(0.0, 0.0))[1]), bvec2(false, true))) + (injectionSwitch)).x : _GLF_FUZZED(7.6))) > injectionSwitch.y)) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))), ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) && (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), 1.0, 0.0, 0.0)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0)), (vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0))) / vec2(1.0, 1.0)), (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), sqrt(0.0), 0.0, 0.0))) * mat2(1.0))).y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), 1.0, 0.0, 0.0)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0)), (vec2(mat2x3(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0))) / vec2(1.0, 1.0)), (vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), sqrt(0.0), 0.0, 0.0))) * mat2(1.0))).y)) && true))), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-59.47), _GLF_FUZZED(63.96)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-59.47), _GLF_FUZZED(63.96)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y)) || false))), true, true))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((bool((injectionSwitch.x > injectionSwitch.y))) || false, ! (! (_GLF_IDENTITY((bool((injectionSwitch.x > injectionSwitch.y))) || false, ! (! ((bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) || false))))))))))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(true, true, true)), false)), bool(bvec2(bool(bvec2(bool(bvec3(true, true, true)), false)), true)))))), bvec2(bvec2(bvec2(false, true))))))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0 ^ (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) ^ 0) | 0))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)))))))) && true); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true)))))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = (-83978 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1, (_injected_loop_counter != 1) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))))); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(38.72) : _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)))))), true, false)), bool(bvec2(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(1, int(ivec2(1, 1))) * (0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), true, false, false))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-3407 & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) - _GLF_IDENTITY(0u, ~ (~ (0u)))) * _GLF_struct_replacement_8._f2._f3.workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u)))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_local_id)), 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 0u, 0u)), 1u * (uint(uvec3(1u, 0u, 0u)))))) >> 0u), (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), max(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), 0u | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) + 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) + 0u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) + 0u)), ~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) + 0u)), ~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) + 0u))))) << 0u))), max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) / 1u)))))))))), subgroup_local_id)))), (140520u & 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(1u), uint(1u)), max(0u << _GLF_IDENTITY(uint(1u), uint(1u)), 0u << _GLF_IDENTITY(uint(1u), uint(1u))))))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(1u, (1u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), subgroup_local_id))))));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size)))), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size))))) | (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size)))))), _GLF_struct_10(true, _GLF_struct_9(uvec3(1u)), bvec2(true)));
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_11.next_virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_11.next_virtual_gid, (_GLF_struct_replacement_11.next_virtual_gid) ^ _GLF_IDENTITY((_GLF_IDENTITY(0u | _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u | _GLF_IDENTITY(0u, min(0u, 0u)), ~ (~ (0u | _GLF_IDENTITY(0u, min(0u, 0u))))), max(0u | _GLF_IDENTITY(0u, min(0u, 0u)), 0u | _GLF_IDENTITY(0u, min(0u, 0u)))), 0u | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (_GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u)))))), clamp(min(_GLF_IDENTITY(0u, (0u) | 0u), 0u), _GLF_IDENTITY(min(0u, 0u), clamp(min(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size)))), min(0u, 0u), min(0u, 0u))), min(0u, 0u)))) | 0u)), 0u | _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), min(0u, 0u))))), ((0u | _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), min(0u, 0u)))) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), min(_GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))))), _GLF_FUZZED(subgroup_local_id))) : _GLF_IDENTITY(_GLF_struct_replacement_11.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_11.next_virtual_gid, uint(uint(_GLF_IDENTITY(_GLF_struct_replacement_11.next_virtual_gid, (_GLF_struct_replacement_11.next_virtual_gid) * 1u))))) ^ _GLF_IDENTITY(_GLF_IDENTITY((0u | 0u), ((0u | 0u)) * 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) | ((0u | 0u)))), clamp(~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) | ((0u | 0u)))), ~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) | ((0u | 0u)))), ~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) | _GLF_IDENTITY(((0u | 0u)), ~ _GLF_IDENTITY((~ (((0u | 0u)))), min((~ (((0u | 0u)))), (~ ((_GLF_IDENTITY((0u | 0u), ~ (_GLF_IDENTITY(~ ((0u | 0u)), (~ ((0u | 0u))) - 0u))))))))))))))))))) / 1u)], uint(1), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, int(ivec3(4, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) * ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (0 | 0))))) >> _GLF_IDENTITY(int(1), int(1))))) >> 0), min(4, _GLF_IDENTITY(4, max(4, 4)))), (_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) << 0), 4, 4)), 4))))))) << 0), 4)), _GLF_IDENTITY(64, (64) - 0), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) * 1u)))], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))) || false)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)), ~ (~ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) - 0)))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(0 | (int(2)), int(int(0 | (int(2)))))))) >> _GLF_IDENTITY(int(2), int(2))))), int(ivec4((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))))), max(int(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))), int(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))))))))) >> _GLF_IDENTITY(int(2), int(2)), 1, 0, 0)))) - 0)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), max(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY((int(2)), ((int(2))) / 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), false))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(35372) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(subgroup_local_id + 1 < subgroup_size, true, true, false)))) || false, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, (0u & 27628u)), (uvec3(subgroup_size, 1u, (0u & 27628u))) << uvec3(0u, 0u, 0u)))), true, true, false)))) || false, ! (! ((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, (0u & 27628u)), (uvec3(subgroup_size, 1u, (0u & 27628u))) << uvec3(0u, 0u, 0u)))), true, true, false)))) || false))), true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(subgroup_local_id + 1 < subgroup_size, true, true, false)))) || false)), (bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, false || (subgroup_local_id + 1 < subgroup_size))))), true, true, false)))) || false))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))))))))
      {
       if(_GLF_DEAD(false))
        break;
       atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(int(64), (int(64)) | 0)), min(int(_GLF_IDENTITY(_GLF_IDENTITY(int(64), int(ivec4(int(64), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), (int(_GLF_IDENTITY(3, (3) / 1))) | 0)))), ~ (~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, max(3, 3)), clamp(3, 3, 3))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), (int(3)) << 0), int(_GLF_IDENTITY(3, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (3))), int(_GLF_IDENTITY(3, (3) / 1)))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), int(_GLF_IDENTITY(3, (3) / 1)))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), clamp(_GLF_IDENTITY(int(3), (int(3)) << 0), int(3), int(_GLF_IDENTITY(3, (3) / 1)))))))), ~ (~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, max(3, 3)), clamp(3, 3, 3))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) << 0), int(_GLF_IDENTITY(3, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (3))), int(_GLF_IDENTITY(3, (3) / 1)))))))) : _GLF_FUZZED(-71215)))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, 0 | (_GLF_IDENTITY(3, max(3, 3))))))), 0, 0))), _GLF_IDENTITY((int(64)), min(_GLF_IDENTITY(_GLF_IDENTITY((int(64)), min((int(_GLF_IDENTITY(64, int(ivec2(64, 0))))), (int(_GLF_IDENTITY(64, min(64, 64)))))), (_GLF_IDENTITY((int(64)), min((int(_GLF_IDENTITY(64, int(ivec2(64, 0))))), (int(64))))) | (_GLF_IDENTITY((int(64)), min((int(_GLF_IDENTITY(64, int(ivec2(64, 0))))), (int(64)))))), (int(64)))) | 0)), int(_GLF_IDENTITY(int(64), (int(64)) | 0))))), _GLF_IDENTITY(4, (4) << 0));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))) * 1.0)))))))
        continue;
       subgroupAll(false);
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.8) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), sin(sqrt(0.0)), 1.0, cos(0.0), 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), sin(sqrt(0.0)), 1.0, cos(0.0), 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat3(1.0)))) + (injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.8) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((mat3x2(878.352, -87.00, 1.1, -78.78, 1336.0179, -4.1) * vec3(743.359, 388.188, -2.7))))).y))) / 1.0)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5009.1659), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(152.717)), bvec2(true, false))), injectionSwitch)).y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           atomicStore(checker[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((virtual_gid), ((virtual_gid)) << 0u), (_GLF_IDENTITY(~ _GLF_IDENTITY((virtual_gid), (true ? (virtual_gid) : _GLF_FUZZED(read))), (true ? ~ _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), (true ? (virtual_gid) : _GLF_FUZZED(read))), (_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), (true ? (virtual_gid) : _GLF_FUZZED(read))), (_GLF_IDENTITY((virtual_gid), (true ? (virtual_gid) : _GLF_FUZZED(read)))) << 0u)) | (_GLF_IDENTITY((virtual_gid), (true ? (virtual_gid) : _GLF_FUZZED(read))))) : _GLF_FUZZED(num_workgroup)))) | (0u | 0u))))], read, 4, 64, 4);
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), (injectionSwitch)[1]), bvec2(false, true))).y))) && true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), (injectionSwitch)[1]), bvec2(false, true))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), (injectionSwitch)[1]), bvec2(false, true))).y))) && _GLF_IDENTITY(true, (true) && true))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0])), _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])))), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1]), bvec2(false, true))).y))) && true) || false), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(_GLF_IDENTITY(48.13, abs(0.0) + (48.13))), (injectionSwitch)[1]), bvec2(false, true))).y))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), (injectionSwitch)[1]), bvec2(false, true))).y))) && true) || false), false)), bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), true))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch), mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) * ((injectionSwitch)))[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), bvec2(false, true))).y))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(-0.4)), vec2(_GLF_FUZZED(48.13), (injectionSwitch)[1]), bvec2(false, true))).y))) && true) || false), false)))))) && true)))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) || false))), false || (bool(bool(_GLF_IDENTITY(true, (true) || false)))))))));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), false || (false || (_GLF_DEAD(false))))), true)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)), false, false)), ! (! (bool(bvec3((_GLF_DEAD(false)), false, false))))))))))))), true))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), false), bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), false), true))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), false), bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), false), true))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)))))))) && true))) || false)))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false)))))))))))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(abs(37953)) : 4))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
}
