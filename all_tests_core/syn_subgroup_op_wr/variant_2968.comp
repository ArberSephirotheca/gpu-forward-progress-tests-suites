#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)))))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y)), transpose(transpose(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(abs(1.0)), 1.0, 1.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y))))))))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((1 ^ 0), 0 + ((1 ^ 0)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u), (gl_WorkGroupID.x) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(uvec3(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, 0u))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true))))))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true))))))))), ! (! (bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - (_GLF_IDENTITY(90369u, ~ (~ (90369u))) & _GLF_IDENTITY(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), _GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), ((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))))) + 0u), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u))), min(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), _GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), ((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))))) + 0u), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), _GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), ((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))))) + 0u), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u))), uint(uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), _GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), ((_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))))) + 0u), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))), (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u), (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) | (clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ 0u))), 0u, 0u))))))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), 0u + (_GLF_FUZZED(workgroup_id)))))) * 1u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(false, false))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(bool(bvec2(false, false)), true, true, false)))), false, false, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))))) && true), true, false, true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1217.7855)), bool(false)))), (true ? (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1217.7855)), bool(false)))) : _GLF_FUZZED(32.35))) / 1.0), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2.9))), 1.0, 1.0, 0.0, 0.0))), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)))))).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, false || (false))), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, false || (false))), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, false || (false))), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, false || (false))), true, false)))), false, false)))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec2(1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec2(1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).x < injectionSwitch.y))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-513.834) : injectionSwitch[0])), injectionSwitch[1])).y))))
        barrier();
      }
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, false))), true, false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)), ~ (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1u, (1u) >> 0u))) * (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))), (_GLF_IDENTITY(~ (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))), 0u ^ (~ (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)))))) | 0u)))))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> ((0u ^ 1u) ^ 1u))) | (subgroup_size))) << 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) + (0u | 0u)))) | 0u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), clamp(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))) + ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), (subgroup_local_id + 1) | (subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))))), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size))) | (subgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u))) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), 1)))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), _GLF_IDENTITY(1u * ((subgroup_size) | (subgroup_size)), (1u * ((subgroup_size) | (subgroup_size))) | 0u)))), (workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), 1u * ((subgroup_size) | (subgroup_size)))))) >> (0u & 191968u)), workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) | 0u) + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ~ (~ ((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))))) : _GLF_FUZZED(workgroup_id))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) / 1u)), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))) | (subgroup_size))))), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), clamp((subgroup_size) | (subgroup_size), (subgroup_size) | (subgroup_size), (subgroup_size) | (subgroup_size))))), clamp(workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), 1u * ((subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + subgroup_base), ((workgroup_base + subgroup_base)) | ((workgroup_base + subgroup_base))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))))) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))) + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), clamp((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), 0u ^ (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))) << 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(virtual_gid)))) | (subgroup_local_id)) + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))) * 1)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | 0u), (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : _GLF_FUZZED(virtual_gid)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : _GLF_FUZZED(virtual_gid))) * 1u))))), 0u ^ ((_GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))) / 1u)))) + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), clamp(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | 0u) + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), clamp((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | 0u), (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), max(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), clamp((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | 0u), (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), clamp((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | 0u), (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) : _GLF_FUZZED(virtual_gid)))))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((false ? 5.6 : 616.015))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((vec4(-6.8, 461.240, 2.9, 805.741) * -2.0).s), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(42.88))), _GLF_FUZZED((+ -1.9))), bvec2(true, false))).x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0)), max(_GLF_IDENTITY(int(ivec3(1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0)), 0 | (int(ivec3(1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0)))), int(ivec3(1, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), false, false, false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.1) : injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (false)))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (false))))))) && true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y)) ? _GLF_FUZZED(-2.1) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2571.5452), _GLF_FUZZED(-7.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), true))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((+ 362.381)), _GLF_FUZZED(7.7)), bvec2(false, false))).x > injectionSwitch.y)) ? _GLF_FUZZED(-2.1) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) || false))), false || ((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2571.5452), _GLF_FUZZED(-7.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), true))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((+ 362.381)), _GLF_FUZZED(7.7)), bvec2(false, false))).x > injectionSwitch.y)) ? _GLF_FUZZED(-2.1) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) || false))))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-54290)))), (0 | (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-54290))))) | 0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-54290)))), (0 | (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-54290))))) | 0)))) >> 0)), ((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(true, ! (! (true))) ? int(3) : _GLF_FUZZED(_GLF_IDENTITY(-54290, (-54290) | (-54290)))))))))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
      }
     else
      {
       if((subgroup_local_id % 2) == _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1))) << 0)) : _GLF_FUZZED(-32500))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << int(_GLF_ZERO(0.0, injectionSwitch.x))) != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(-2.4, -629.733)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0))))) * mat2(1.0)))).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_FUZZED(4.1), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED((32.45 - -286.330))), bvec2(true, false))), (false ? _GLF_FUZZED(vec2(-2.4, -629.733)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)), 0.0)), vec2(mat3x4(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)), 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))))))) * mat2(1.0)))).y))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             subgroupAll(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.3)), vec2(_GLF_FUZZED((-5.5 / -1773.5632)), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(-2872.8375, 27.65)))).x > injectionSwitch.y))));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))
          barrier();
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec2((false), _GLF_IDENTITY(false, ! (! (false))))))))) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) && true, ((false) && true) && true)), bool(bvec4(! (_GLF_IDENTITY((false) && true, ((false) && true) && true)), false, false, true))))), true))))) || false), true)))) && true)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, 1), clamp(ivec2(64, _GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 ^ (0)))))), ivec2(64, 1), ivec2(64, 1))))), 2);
          }
         else
          {
          }
        }
       else
        {
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, abs(0.0), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, abs(0.0), 1.0))), cos(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), mat2x4(mat2x4(mat2x4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, abs(0.0), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, abs(0.0), 1.0))), cos(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-8.3, -7.6)))).x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)), bool(bvec3(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)), false, true)))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(-706.095))))) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1179.8895)), float(injectionSwitch.y), bool(true)))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))) && true))) && true)) || false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-30453, min(-30453, -30453))) : _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 | 0))); _injected_loop_counter --)
                      {
                       do
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)), true)))))) && true), false || (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true)))), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true)))), true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(854.004)), vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))).x > injectionSwitch.y)), true)))), true))), true))))))))))) && true))))))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))
                      barrier();
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x2(7.0, -1.3, 5870.6218, 1.6, -46.92, -5240.2453))))), clamp(float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x2(7.0, -1.3, 5870.6218, 1.6, -46.92, -5240.2453))))), float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x2(7.0, -1.3, 5870.6218, 1.6, -46.92, -5240.2453))))), float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.y, 1.0, determinant(mat3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x2(7.0, -1.3, 5870.6218, 1.6, -46.92, -5240.2453))))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))) || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) >> 0), 64)), 2), ~ (~ (read = atomicLoad(buf[virtual_gid], 4, 64, 2))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / exp(vec2(0.0, 0.0))).x : _GLF_FUZZED(96.91))))), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true && (false), true && (true && (false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(5609.0269)))), bool(true))))) / 1.0)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0))).y) - 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(_GLF_FUZZED(8.2)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true))) : _GLF_FUZZED(-0.8)))) / 1.0)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(695.785)), bool(false)))) - 0.0)) / 1.0)), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false))), true, true))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7780.7534) : _GLF_IDENTITY(1.0, (1.0) / 1.0))))))), false, true, true))), false, false), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)))).y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) - 0.0)), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) - 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) - 0.0)))) / 1.0)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7780.7534) : 1.0)))))), false, true, true))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)))).y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) - 0.0)), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) - 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) - 0.0)))) / 1.0)), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7780.7534) : 1.0)))))), false, true, true))), false, false), true)), _GLF_IDENTITY(true, (true) && true)))), false)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true))), true, true), false))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY((clamp(4, 4, 4)) >> _GLF_IDENTITY(0, (0) + 0), ~ (~ ((clamp(4, 4, 4)) >> _GLF_IDENTITY(0, (0) + 0)))))), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
