#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), false || (((false)))) || false), true, true)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2067.5188, 581.353)) : injectionSwitch)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-8.7, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), max(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))))))))), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0)))), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-8.7, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), max(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))))))))), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-8.7, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), max(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))))))))), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0)))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-8.7, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), max(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))))))))), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0)))))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-8.7, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), max(float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))), float(_GLF_IDENTITY(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), max(vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0), vec4(-8.7, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0)))))))))), 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0))))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) / 1.0))), injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-83.82)), bool(false)))))) - 0.0), 0.0))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) && true))) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false), false, false)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))), true))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (_GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec3(bool(bvec4(false, true, false, true)), true, false)))) && true)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(28.01) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.0) : injectionSwitch.y)))), (injectionSwitch.y) + 0.0)))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (_GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec3(bool(bvec4(false, true, false, true)), true, false)))) && true)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9402.1880), _GLF_FUZZED(3138.1967)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), injectionSwitch)).y, (injectionSwitch.y) + 0.0)), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-659.118) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) || false), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sqrt(1.0), 1.0, abs(1.0))), float(mat4x2(float(mat4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, sqrt(1.0), 1.0, abs(1.0))), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9402.1880), _GLF_FUZZED(3138.1967)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), injectionSwitch)).y, (injectionSwitch.y) + 0.0)), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-659.118) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), 1.0 * (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-659.118) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(abs(vec2(1.0, 1.0)))).y))))), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) || false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), ! (! (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), (_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))) && true))))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))))) && true))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)))), ((workgroup_base)) ^ (1u ^ 1u)) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (subgroup_id * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, uvec2(0u, 0u) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid)).x) | (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), clamp(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x, (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x) | (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)), 0u, 0u, 0u))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.4)), bool(false)))))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))), false || (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) ? _GLF_FUZZED(578.600) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))), false || (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), abs(vec2(0.0, 0.0)) + (max(injectionSwitch, injectionSwitch))), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)) ? _GLF_FUZZED(578.600) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))) || false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (! ((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) || false))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   GLF_merged2_0_1_16_1_1_4next_virtual_gidread.x = next_virtual_gid;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), true, true, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.4))), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = (59147 & (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) | (1))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      {
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5))))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false))))))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[GLF_merged2_0_1_16_1_1_4next_virtual_gidread.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, _GLF_IDENTITY(0u ^ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u ^ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y), (0u ^ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y)) / 1u), _GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, min(0u, 0u))), 0u, 0u)), uint(uvec2(uint(uvec4(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, min(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y))), (0u ^ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y)) / 1u), 0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)), 0u)), 0u)))))], 4, _GLF_IDENTITY(64, (64) | (64)), 0);
 _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y = read, _GLF_IDENTITY(0u | (GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y = read), (0u | (GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y = read)) * 1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec4((false) || false, true, false, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), _GLF_IDENTITY((false) || false, bool(bvec4((false) || false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), false, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), min(uint(8u), uint(8u))))))))), (~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) ^ 0u)))))), min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))), (false ? _GLF_FUZZED(57977u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))))) << 0u)) * 1u)), _GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) + 0u), 1u, 1u, 1u))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), (_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))), min(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))), _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), clamp(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))))), 1u, (0u ^ 0u), 1u))))) / 1u))))) >> 0u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))))))), min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))), ((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)))) / 1u))))) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))))), min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))))), min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(57977u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) / 1u)))) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))))), _GLF_IDENTITY(min(~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> _GLF_IDENTITY(0u, (0u) ^ 0u), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> 0u, min((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> 0u))))))), (false ? _GLF_FUZZED(57977u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) / 1u)))) ^ 0u)), (false ? _GLF_FUZZED(subgroup_id) : ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))))), _GLF_IDENTITY(min(~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> _GLF_IDENTITY(0u, (0u) ^ 0u), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> 0u, min((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY(min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u)), ~ (~ (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))) : subgroup_local_id))) << 0u)))))) / 1u))))), 0u | (min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id))))))) / 1u))))) >> 0u)))))))) / 1u))) : _GLF_FUZZED(subgroup_size))))) + 1 < GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (true ? min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) : _GLF_FUZZED(vec2(4.9, -941.316))))))).y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(36.25)), float(injectionSwitch.y), bool(true)))))) || false)))) || false)))))) && true))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED(297.595)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true)))) / determinant(mat2(1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))) > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           break;
          }
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y), min(_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y), min(~ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y), ~ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y))), ~ (GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y)))))], GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y, 4, 64, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1))));
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     subgroupAll(false);
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -55766), ((0 & -55766)) >> (0 << _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     atomicStore(checker[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) + (1 ^ 1))) << 0), 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     subgroupAll(true);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY((true), bool(bvec3(_GLF_IDENTITY((true), ((true)) && true), false, true))), false, false, true))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))), _GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(-680.648), (injectionSwitch)[1]), bvec2(false, true)))) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))).x > injectionSwitch.y), true)), ! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), true))))))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bool(bvec3(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bool(bvec3(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))), (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bool(bvec3(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false)))), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, false)), true)))))))))))) || false))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) - 0)))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) | (2))), int(2))), max((((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) - 0)))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) | (2))), int(2))), (((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) - 0)))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) | (2))), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(_GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(true && (false), ! (! (true && (false)))))), (_GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true && (false)), (! (true && (false))) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec3(_GLF_IDENTITY(! (true && (false)), (! (true && (false))) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true))))))))) && true)) || false))))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))) && true)))) && _GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) && true)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), false))))) || false, _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y) || false)), false || (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y) || false)), ! (! (bool(bool((injectionSwitch.x > injectionSwitch.y) || false)))))))))) || false)))))
      return;
    }
  }
}
