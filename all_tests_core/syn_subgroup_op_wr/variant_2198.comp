#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat3x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_2 {
 int _f0;
 bvec4 _f1;
 mat4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 mat4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uint subgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_3(_GLF_struct_0(mat2x4(1.0), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u)))), _GLF_struct_1(mat3(1.0), uvec3(1u), mat3x4(1.0), mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0)), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false)))), _GLF_struct_2(1, bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(true, ! (! (true)))), bool(_GLF_IDENTITY(bool(true && (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (true)), (! (! (true))) && true)), ! (! (! (_GLF_IDENTITY(! (! (true)), (! (! (true))) && true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (_GLF_IDENTITY(true, true && (true)))))))))) && true))))), true, false, false)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(bool(true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true)), bool(bvec2((! _GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true)), true))))))) && true))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(true && _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true)))), ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true))))) || false)), bool(bvec4(bool(true && _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true)))), ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true))))) || false)), false, false, false))), true, false, false))) && true)), ((_GLF_IDENTITY(bool(bvec4(bool(true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true)), bool(bvec2((! _GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true)), true))))))) && true))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(true && _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true)))), ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true))))) || false)), bool(bvec4(bool(true && _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true)))), ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))) && true))))) || false)), false, false, false))), true, false, false))) && true))) && true)), true && (bool(bvec4(bool(true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec3((! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3((! (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), true && ((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec3((! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3((! (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec3((! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3((! (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), true && ((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec3((! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3((! (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))))), true, false, false))))))))), mat4(1.0), vec3(1.0))), _GLF_struct_4(mat3x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0)), mat3(1.0)), gl_SubgroupID);
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), true, true)))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), true, true))))))))) || false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 | (1)), 1)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) - 0))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(min(workgroup_size * workgroup_id, workgroup_size * workgroup_id), (_GLF_IDENTITY(min(workgroup_size * workgroup_id, workgroup_size * workgroup_id), (min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)) ^ 0u)) << _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) << 0u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), (bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))) && true))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0)))), bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) - 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), true, false, false)))) || false))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))) && true, bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))) && true), false || (bool(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))) && true)))))), true, false))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))) : _GLF_FUZZED(vec2(-53.55, 434.811))))).x), float(_GLF_FUZZED(-1782.6884)), _GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), false || (! (bool(false))))))))))) > injectionSwitch.y))))
                return;
               return;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))) && true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
      return;
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(23.22)), bool(false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(23.22)), bool(false)))))) && true)));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))));
 uint subgroup_base = _GLF_struct_replacement_5.subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u | (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)))))) + ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-33211 & 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, clamp((1) << 0, (1) << 0, (1) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3((false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(60836) : 1)), 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec2(3, 0), (ivec2(3, 0)) ^ ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | 0), clamp(int(3), int(3), int(3))))), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) << 0)) >> 0)), 0 + ((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-45329)))) << 0)) >> 0)))) - 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(bool(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && true, true, false)), bool(bool(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false)), bool(bool(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false)), bool(bool(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false))))))), bool(bvec3(! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false)), bool(bool(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, true, false))))))), false, true)))) && true))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))) && true)) && true), true, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((_GLF_IDENTITY(-916.592, mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-5.3, max(-5.3, -5.3)))), max(float(_GLF_FUZZED(_GLF_IDENTITY(-5.3, max(-5.3, -5.3)))), float(_GLF_FUZZED(_GLF_IDENTITY(-5.3, max(-5.3, -5.3)))))), float(-916.592), bool(true))) - -3.2))), float(injectionSwitch.y), bool(true)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec3(bool(! (false)), true, true))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y)))) && true)) && true), true, false, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)) && true))))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), min(float(vec4(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), float(vec4(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))), (true ? injectionSwitch.x : _GLF_FUZZED(35.18))) < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, true && (injectionSwitch.x < injectionSwitch.y))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                   for(int _injected_loop_counter = (_GLF_IDENTITY(27531 & 0, (_GLF_IDENTITY(27531 & 0, 0 + (27531 & 0))) | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-70930) : _injected_loop_counter))) | (0 | (0 | 0))) < _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) - 0), 1)), 1))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                        break;
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) / 1.0)))))
                      continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (! (_GLF_IDENTITY(true, ! (! (true))))) && true)))))) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))))), true)))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))))))), true && (! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))))))))), bool(bool(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(injectionSwitch.y), bool(true)))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(97.84)), vec2(_GLF_FUZZED(-9555.4374), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(67.00)), (_GLF_IDENTITY(float(_GLF_FUZZED(67.00)), max(float(_GLF_FUZZED(67.00)), float(_GLF_FUZZED(67.00))))) / determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), log(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), float(injectionSwitch.y), bool(true))))))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(_GLF_IDENTITY(true, bool(bool(true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true))))))) && true)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true))))))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED((vec3(103.759, 55.35, 2.1) * vec3(-7060.5442, 50.94, 2.0)).y)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (false ? _GLF_FUZZED(-5.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), float(mat3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))), bool(true)))), bool(true)))), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * 1.0)) - 0.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(67.00)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(67.00)), (_GLF_IDENTITY(float(_GLF_FUZZED(67.00)), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(67.00)), (float(_GLF_FUZZED(67.00))) / 1.0), max(float(_GLF_FUZZED(67.00)), float(_GLF_FUZZED(67.00))))) / 1.0)) / 1.0), float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, abs(1.0), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0), mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, abs(1.0), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(exp(0.0), float(mat4x3(exp(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0), (mat3(injectionSwitch, 1.0, 1.0, abs(1.0), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(exp(0.0), float(mat4x3(exp(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, sin(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(step(-14.82, 6.7)))))), 0.0, 0.0, 0.0) + (mat3(mat3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0), mat2x4(mat4(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0), transpose(transpose(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0))))))))), 1.0, 1.0, abs(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(float(1.0))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.5))), 1.0))), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)))))))).y), bool(true)))))))))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))))), (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), (vec4(0.0, 0.0, 1.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))), injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true, true))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))) || false))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (-71966 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))), bool(bvec3(bool(bool(false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), (! (true)) && true)))))), _GLF_IDENTITY(true, bool(bvec3(true, true, false)))))))));
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (uint(1)), (false ? _GLF_FUZZED(196240u) : ~ (uint(1))))), ((_GLF_IDENTITY(~ (uint(1)), (false ? _GLF_FUZZED(196240u) : ~ (uint(1)))))) / _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) * 1u))), 4, 64, 4);
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true))))) || false)), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true))))) || false)), true, true)), (bool(bvec3((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true))))) || false)), true, true))) && true)) && true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7383.2563)), bool(false))), injectionSwitch.y)), injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(vec3(-2.3, -88.97, 5733.3973))) : mat2(1.0) * (injectionSwitch)))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7383.2563)), bool(false))), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7383.2563)), bool(false))), injectionSwitch.y)), injectionSwitch.y)))), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7383.2563)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-8.3, 19.55, 792.961, -2005.0754)))), ((injectionSwitch) * mat2(1.0)) + vec2(0.0, 0.0))))).y, float(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-412.406)), vec2(_GLF_FUZZED(-3543.1850), ((injectionSwitch))[1]), bvec2(false, true))) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) + vec2(0.0, 0.0))))).y, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, length(0.0), 0.0, _GLF_IDENTITY(1.0, (1.0) - length(vec3(0.0, 0.0, 0.0))), 0.0, 0.0))))), injectionSwitch.y)))), true, true))), false, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))))) || false)))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), true))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_FUZZED((+ 4.4))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true)))) / 1.0) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if((subgroup_local_id % 2) == 0)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0))) + vec2(0.0, 0.0))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))), bvec3(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))))))))))))
                {
                 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) | (int(0))), int(0))), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), 1 * (~ (_GLF_IDENTITY(0, 0 | (0))))))))))))); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)));
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-956.461), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-9.4)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)) || false), true, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false), true, true)))), false))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false), true, true)))) && true), true))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2620.7318)), bool(false))))) > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 subgroupAll(false);
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 continue;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], 4, 64, 2), 1u)), max(uint(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 1u)), uint(uvec2(atomicLoad(buf[virtual_gid], 4, 64, 2), 1u)))));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true) && true))))
                break;
               do
                {
                 subgroupAll(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))));
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                continue;
              }
             read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (0 ^ 0) | (4)), (_GLF_IDENTITY(4, (4) ^ 0)) | 0), 64, _GLF_IDENTITY(2, int(int(2))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 1.0), mat2x3(mat3(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 1.0))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 1.0), mat2x3(mat3(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 1.0)))))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (int(1)) | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), max(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), min(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) && true), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (! (false))) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) || false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) || false))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) || false)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) || false))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-15.52)), bvec2(true, false))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) || false)))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), false, false, false)), bool(bvec3(bool(bvec4(false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), false, false, false)), true, false))))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y, injectionSwitch.y, injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y, injectionSwitch.y, injectionSwitch.y)))))))), ! (! (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y, injectionSwitch.y, injectionSwitch.y)))))))))))), bool(bvec3(! (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y, injectionSwitch.y, injectionSwitch.y)))))))), ! (! (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y, injectionSwitch.y, injectionSwitch.y)))))))))))), true, false))))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) || false))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), false, true, true)))) && true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))), (bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))) || false))) || false)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))));
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec2(bool(bvec2(_GLF_DEAD(false), true)), true)))), true, false))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, true)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))))), false, false, false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), false, false, false)))))))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) + 0), 0 << _GLF_IDENTITY(int(1), int(1))))) ^ (int(6))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) + 0), 0 << _GLF_IDENTITY(int(1), int(1))))) ^ (int(6))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))), ~ (~ (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) + 0), 0 << _GLF_IDENTITY(int(1), int(1))))) ^ (int(6))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))), (int(ivec2(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) + 0), 0 << _GLF_IDENTITY(int(1), int(1))))) ^ (int(6))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))) >> 0)))))))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), clamp(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0), int(6))), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))) << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), clamp(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ _GLF_IDENTITY((_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))), int(ivec2((_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))), 1))))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6))))))) - 0))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) >> 0)))) * 1)), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (0 & (- -65326))))), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) - 0), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), int(ivec3(0 << _GLF_IDENTITY(int(1), int(1)), 1, 0)))) ^ 0), 0 << _GLF_IDENTITY(int(1), int(1))))) ^ (int(6)), ~ (~ ((0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6))))))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))), max(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, ~ (~ (0))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ ((int(6))), min(~ ((int(6))), ~ ((int(6))))))))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 + (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 1 * (0 << _GLF_IDENTITY(int(6), int(6))))) | (0 << _GLF_IDENTITY(int(6), int(6))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(_injected_loop_counter))))))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6))), 1 * (_GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6)))))))), (clamp((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) - 0)) ^ (_GLF_IDENTITY(int(6), (int(6)) / 1)))))), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6))))))) ^ 0), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 1 * (_GLF_IDENTITY(int(8), int(8)))))), 0 | (int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 1 * (_GLF_IDENTITY(int(8), int(8)))))))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) + 0), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(_GLF_IDENTITY(6, clamp(6, _GLF_IDENTITY(6, 0 + (6)), 6)))))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, max(6, 6)))))), int(6)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))))))), 0 << _GLF_IDENTITY(int(6), int(6))))))))) / 1))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ _GLF_IDENTITY((int(6)), ((int(6))) ^ 0)))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) ^ (int(6)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(atomicLoad(-55669, 93267, -95541, _injected_loop_counter)) : int(6)))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ((0 << _GLF_IDENTITY(int(8), int(8)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(int(6), int(6)))), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))) + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), int(6))), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), int(6))))))) - 0))) | (_GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, 6)))), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) ^ 0)) / 1))), 0 + (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) ^ 0)) / 1))))), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (6) / 1))) ^ 0)))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(6), max(int(6), int(6))))), int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) + 0)) | 0))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), int(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), 1)))) - 0), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6))))) ^ 0)) | 0))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) ^ 0)) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (int(6)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))), max((0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(1))), clamp(int(_GLF_IDENTITY(int(1), int(1))), int(_GLF_IDENTITY(int(1), int(1))), int(_GLF_IDENTITY(int(1), int(1)))))), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), int(1))), clamp(int(_GLF_IDENTITY(int(1), int(1))), int(_GLF_IDENTITY(int(1), int(1))), int(_GLF_IDENTITY(int(1), int(1))))))))))) ^ (int(6)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))), int(_GLF_IDENTITY(int(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6)))), (int(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))) / 1))))), ((0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))), int(_GLF_IDENTITY(int(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6)))), (int(max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6))))) / 1)))))) | 0)))))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) * 1) >> _GLF_IDENTITY(int(0), int(0))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(39.93), _GLF_FUZZED((true ? vec4(6.0, -8.1, 51.32, -8.0).r : vec2(-31.53, 41.71).s))), bvec2(false, false))).x > injectionSwitch.y)) || false))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           subgroupBarrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(injectionSwitch.y, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1597.5976)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) - determinant(mat2(0.0, 1.0, 0.0, 0.0)))), float(_GLF_FUZZED(1.0)), bool(false))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5932.7824)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))), 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), 0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(true ? float(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((8799.8209 - 764.549))), float(0.0), bool(true))), 1.0, 0.0, 0.0)) : _GLF_FUZZED(73.10), clamp(true ? float(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((8799.8209 - 764.549))), float(0.0), bool(true))), 1.0, 0.0, 0.0)) : _GLF_FUZZED(73.10), _GLF_IDENTITY(true ? float(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((8799.8209 - 764.549))), float(0.0), bool(true))), 1.0, 0.0, 0.0)) : _GLF_FUZZED(73.10), (false ? _GLF_FUZZED(39.98) : true ? float(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((8799.8209 - 764.549))), float(0.0), bool(true))), 1.0, 0.0, 0.0)) : _GLF_FUZZED(73.10))), _GLF_IDENTITY(true ? float(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((8799.8209 - 764.549))), float(0.0), bool(true))), 1.0, 0.0, 0.0)) : _GLF_FUZZED(73.10), mix(float(_GLF_FUZZED(244.746)), float(true ? float(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((8799.8209 - 764.549))), float(0.0), bool(true))), 1.0, 0.0, 0.0)) : _GLF_FUZZED(73.10)), bool(true)))))))), exp(0.0))), mix(float(_GLF_FUZZED((8.7 * vec3(6.4, 6.3, 96.70).g))), float(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), float(mat3(_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0))), 1.0, log(1.0), round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), max(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), clamp(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, length(0.0), 1.0, 0.0, 1.0, tan(determinant(mat2(0.0, 0.0, 0.0, 0.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), float(float(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))), 1.0, 1.0, 0.0, 1.0))), 1.0, 0.0, 0.0, exp(0.0)))), bool(true))), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(6311.3782)), bvec2(false, false))).y, sqrt(1.0), 1.0, 0.0, 0.0, exp(0.0))), float(mat2x3(injectionSwitch.y, sqrt(1.0), 1.0, 0.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, sqrt(1.0), 1.0, 0.0, 0.0, exp(0.0))), float(mat3(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(0.8)), bool(false))), 1.0, 0.0, 0.0, exp(0.0))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 0.0))))))))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (84829 & 0) ^ (_GLF_IDENTITY(1, min(1, 1)))), max(1, 1))) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), int(0)), (1 & 1) * _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) >> 0)), int(0))), max((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) >> 0)), int(0))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) >> 0)), int(0))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(56782)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat3x2(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0)))), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
