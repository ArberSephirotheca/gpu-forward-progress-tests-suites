#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (_GLF_IDENTITY(min(0, 0), (min(0, 0)) * 1)) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))), gl_NumWorkGroups)).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) / 1)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_size)) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (1))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
          }
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1])).y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(60534) : 1))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (1u ^ 1u))))) ^ 0u), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size))) - 0u)), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (1u ^ 1u))))) ^ 0u), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size))) - 0u)), min(workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (1u ^ 1u))))) ^ 0u), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size))) - 0u)), workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (1u ^ 1u))))) ^ 0u), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size))) - 0u)))), workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (1u ^ 1u))))) ^ 0u), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size))) - 0u)), workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (1u ^ 1u))))) ^ 0u), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size, 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size))) - 0u)))), (workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_size))), min(subgroup_local_id, subgroup_local_id)) + 1) | 0u)) % subgroup_size)) * 1u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-27.04), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0), (injectionSwitch)[1])), mix(float(_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0), (injectionSwitch)[1]))), float(_GLF_FUZZED(16.78)), bool(false)))), vec2((injectionSwitch)[0], _GLF_FUZZED((true ? 6.6 : 923.863))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-27.04), _GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0), float(float(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)))), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((true ? 6.6 : 923.863))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(87591))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), 0 ^ (_GLF_IDENTITY(0, (0) | (0))))) * ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((0 & _GLF_IDENTITY(93558, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 93558 : _GLF_FUZZED(-97573)))) << _GLF_IDENTITY(int(8), int(8))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, true, false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, true, false))))))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(4u))))))) % 2) == _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findLSB(subgroup_size)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ! (! ((! (_GLF_IDENTITY(false, false || (false)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) - 0)))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY(int(2), (int(2)) >> 0)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY(int(2), (int(2)) >> 0)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.4)), float(injectionSwitch.y), bool(true)))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         subgroupAll(false);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / _GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), min(0, 0)), 0 + (0)), (true ? _GLF_IDENTITY(0, 0 + (0)) : _GLF_FUZZED(38049))), _GLF_IDENTITY(0, 0 + (0))))) << 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 0, max(0 | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0)), (0 | 0) << 0))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-53218) : _injected_loop_counter --))) << 0))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(0.0, 0.0)), (mat2(1.0) * (vec2(0.0, 0.0))) * mat2(1.0))), max((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))[0], injectionSwitch[1])).y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))), true)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       barrier();
      }
     _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), _GLF_IDENTITY(4, 0 ^ (4)), 64, 2), (read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), uint(uvec2((buf[virtual_gid]), (1u | 1u)))) | _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) >> 0u) / 1u)) ^ 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) >> 0u) / 1u)) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) >> 0u) / 1u)) ^ 0u))) ^ 0u), (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) >> 0u) / 1u)) ^ 0u))))), 4, 64, 2)) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) << 0u)) | (_GLF_IDENTITY(uint(4u), uint(4u)))))), (read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u), virtual_gid, virtual_gid))], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | ((buf[virtual_gid]))) | (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), _GLF_IDENTITY((buf[virtual_gid]) / 1u, (true ? (buf[virtual_gid]) / 1u : _GLF_FUZZED(usubBorrow(192405u, num_workgroup, read)))))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) + ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)))) ^ 0u))), 4, 64, 2)) - 0u), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u, (false ? _GLF_FUZZED(virtual_gid) : (_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_local_id)))]) / 1u)) ^ 0u))))), 4, 64, 2), _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_base))) ^ (read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u), clamp(_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u), _GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u))))))], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2))), _GLF_IDENTITY((_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (true ? read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))) ^ 0u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), virtual_gid))], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)) - 0u)))) ^ 0u)) : _GLF_FUZZED(workgroup_base))) - 0u)), (0u + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u, (false ? _GLF_FUZZED(virtual_gid) : (_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_local_id)))]) / 1u)) ^ 0u))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) ^ 0), 64, 2), _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_base))) ^ (read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, uint(uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u))))], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (true ? read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))) ^ 0u)), ((_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (true ? read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))) ^ 0u))) ^ 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) / 1u, clamp((buf[virtual_gid]) / 1u, _GLF_IDENTITY((buf[virtual_gid]) / 1u, ((buf[virtual_gid]) / 1u) | ((buf[virtual_gid]) / 1u)), (buf[virtual_gid]) / 1u)))) ^ 0u))), 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 0u, 0u, 1u))), 4, 64, 2))), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 0u, 0u, 1u))), 4, 64, 2))), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))), ((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 0u, 0u, 1u))), 4, 64, 2))), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid))))) ^ (0u | 0u))))) ^ 0u)) : _GLF_FUZZED(workgroup_base))) - 0u)), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * ((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u, (false ? _GLF_FUZZED(virtual_gid) : (_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_local_id)))]) / 1u)) ^ 0u))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) ^ 0), 64, 2), _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_base))) ^ (read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, uint(uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u))))], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (true ? read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))) ^ 0u)), ((_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (true ? read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))) ^ 0u))) ^ 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) / 1u, clamp((buf[virtual_gid]) / 1u, _GLF_IDENTITY((buf[virtual_gid]) / 1u, ((buf[virtual_gid]) / 1u) | ((buf[virtual_gid]) / 1u)), (buf[virtual_gid]) / 1u)))) ^ 0u))), 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 0u, 0u, 1u))), 4, 64, 2))), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 0u, 0u, 1u))), 4, 64, 2))), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid)))), ((_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), uint(uvec4(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) / 1u)) ^ 0u))), 0u, 0u, 1u))), 4, 64, 2))), (true ? read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u)) ^ 0u))), 4, 64, 2) : _GLF_FUZZED(virtual_gid))))) ^ (0u | 0u))))) ^ 0u)) : _GLF_FUZZED(workgroup_base))) - 0u))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(intBitsToFloat(71849))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((+ vec2(6.0, 9.4))) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(_GLF_IDENTITY(bool(false), false || _GLF_IDENTITY((bool(false)), ! (! ((bool(false))))))))))))), true, false))) || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true), ! (! (bool(bool(false)))))))), _GLF_IDENTITY(true, true && (true)), false))) || (injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-87.81)), float(1.0), bool(true))))))).y, injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, true))))), ! (! (bool(bool(false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), false)))))) || false), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (true)), false)), true && (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false)))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(bool(false))))), false)))))) || false)))), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (true)), false))))) || (injectionSwitch.x > injectionSwitch.y))))))) || false)));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(4773.5461, min(_GLF_IDENTITY(4773.5461, max(4773.5461, _GLF_IDENTITY(4773.5461, mix(float(_GLF_FUZZED(-346.725)), float(4773.5461), bool(true))))), 4773.5461))), _GLF_FUZZED(2854.2905)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-5.5)), float((injectionSwitch)[0]), bool(true)))) / 1.0), (injectionSwitch)[1]), bvec2(true, true))).y))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), _GLF_IDENTITY(false, true && (false)) || (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))) || false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), _GLF_IDENTITY(false, true && (false)) || (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))) || false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), _GLF_IDENTITY(false, true && (false)) || _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))) || false)))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))) || false)))))), ((! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))) || false))))))) && true)) || false)))))) || false)), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bool(! (false))))) || false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), (false) && true)))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), false)))))))))), bool(bool((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), false)))))))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), false)))))))))), bool(bool((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)))))))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = (((1 ^ 1) >> _GLF_IDENTITY(int(4), int(4))) & 17828); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-1849) : 0)) | (4)), int(ivec2(_GLF_IDENTITY(4, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-1849) : 0)) | (4)), 0))))), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
}
