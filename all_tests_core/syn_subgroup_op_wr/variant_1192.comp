#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 bool _f0;
} ;

struct _GLF_struct_0 {
 uint _f0;
} ;

struct _GLF_struct_2 {
 uint _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 uvec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 mat4x2 _f1;
 _GLF_struct_2 _f2;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_4num_workgroupread;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))), false)), false)))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(2421)))) | (_GLF_IDENTITY(int(3), max(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(false) & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), max(float(_GLF_IDENTITY(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_IDENTITY(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(581.363)), bool(false)))))))
              break;
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bvec3(bool(bvec2(_GLF_DEAD(false), false)), true, false))))))))
                return;
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup), (~ (GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup)) / 1u)));
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(463.563), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-93826))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((-24509 & 0), ((-24509 & 0)) ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), false, false, false)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true, false, false)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), false || _GLF_IDENTITY((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))), bool(bvec3((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))), true, false)))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u))) ^ 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(subgroup_size, 1u, (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) >> 0u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))))), min(_GLF_IDENTITY(uvec4(subgroup_size, 1u, (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(subgroup_size, 1u, (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(uvec4(subgroup_size, 1u, (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(mat2(vec2(vec2(injectionSwitch)), 1.0, 0.0)))), injectionSwitch)).y))), uvec4(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u), 0u) ^ (uvec4(subgroup_size, 1u, (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat3x2(1.0), mat4x2(1.0), _GLF_struct_2(1u, _GLF_struct_0(1u), _GLF_struct_1(true), uvec3(1u), vec3(1.0)), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size))))), min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(929.134)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[_GLF_struct_replacement_3.next_virtual_gid], uint(1), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, sqrt(1.0), abs(0.0)))) > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, log(1.0), 1.0))), injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6))), bool(bvec3(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6))), false, true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || false)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec2(! (! (_GLF_WRAPPED_IF_FALSE(false))), true)))) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0)), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0)), false))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(1.0, 1.0, 0.0)))))))), min(float(mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(1.0, 1.0, 0.0)))))))), float(mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(1.0, 1.0, 0.0))))))))))), injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) | (6))), _GLF_IDENTITY(int(ivec3(int(6), (0 | 0), 0)), 0 ^ (int(ivec3(_GLF_IDENTITY(int(6), (int(6)) - 0), (0 | 0), 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, ~ (~ (3))) : _GLF_FUZZED(81104))))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(int(3), int(3)))) - 0) + 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) / 1)))); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_injected_loop_counter ++)))
      {
       GLF_merged2_0_1_13_1_1_4num_workgroupread.y = read;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((0 ^ 0) & -38983); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-88918))) != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(vec2(0.0, 0.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)));
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, true, false)), false || (bool(bvec4((false), true, true, false))))))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), int(ivec3((int(5)), 0, 1))) ^ 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_local_id))) | 0u))) + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true && (bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(sqrt(1.0), 0.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))
        {
         atomicStore(checker[virtual_gid], GLF_merged2_0_1_13_1_1_4num_workgroupread.y, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 | (64)), 0 ^ (64)))), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-89140))));
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))))
          barrier();
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), _GLF_IDENTITY(int(0), max(int(0), int(_GLF_IDENTITY(0, 0 | (0))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            continue;
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.4) : injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, true, true))))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, max(4, 4)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))))), ~ (~ (int(2)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), ~ (~ (int(2))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(false), false)))))));
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec3(-4.6, -8.6, 4.4).t)), bool(false)))) - 0.0) > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-496.106) : injectionSwitch.y))) / 1.0)))))
                  return;
                }
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
            return;
          }
        }
      }
     atomicStore(checker[virtual_gid], GLF_merged2_0_1_13_1_1_4num_workgroupread.y, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 + (4))) | 0));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
            return;
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))), _GLF_IDENTITY(true, (true) || false) && (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)))))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) + 0), int(1))), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
}
