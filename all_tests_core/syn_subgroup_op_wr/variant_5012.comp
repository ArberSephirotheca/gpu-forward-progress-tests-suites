#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-16.04 * 9.6))), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size))) << 0u), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), false)))), (bool(bvec2(false, false))) && true)) ? _GLF_FUZZED(53657u) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size))) << 0u), 0u | (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | (subgroup_size))))) << 0u)))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_local_id)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 0.0, abs(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), 0.0)), min(float(mat4x2(injectionSwitch.y, 0.0, abs(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), 0.0)), float(mat4x2(injectionSwitch.y, 0.0, abs(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), 0.0)))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(workgroup_id, (true ? _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), workgroup_id)) : _GLF_FUZZED(workgroup_id)));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) << 0u), min(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) | 0u), (workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) << 0u), _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) << 0u))), _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) << 0u))), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u) * _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) >> 0u), GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (false ? _GLF_FUZZED(subgroup_size) : GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w)))), workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w), (max(_GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u) * _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w) >> 0u), GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w, (false ? _GLF_FUZZED(subgroup_size) : GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w)))), workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.w)) >> 0u));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != 0, false || _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(bool(bool((_injected_loop_counter != 0))), false || (_GLF_IDENTITY(bool(bool((_injected_loop_counter != 0))), false || (bool(bool((_injected_loop_counter != 0)))))))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(49.87), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), mix(vec2((mat2(1.0) * ((injectionSwitch)))[0], _GLF_FUZZED(4.5)), vec2(_GLF_FUZZED(1817.4165), (mat2(1.0) * ((injectionSwitch)))[1]), bvec2(false, true))))) - vec2(0.0, 0.0))[0], (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), mix(vec2((mat2(1.0) * ((injectionSwitch)))[0], _GLF_FUZZED(4.5)), vec2(_GLF_FUZZED(1817.4165), (mat2(1.0) * ((injectionSwitch)))[1]), bvec2(false, true))))) - vec2(0.0, 0.0))[0]) - abs(0.0)), _GLF_FUZZED(-5.5)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(21.83)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(49.87), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)) - 0.0), _GLF_FUZZED(-5.5)), bvec2(true, false))).y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(49.87), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)) - 0.0), _GLF_FUZZED(-5.5)), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(49.87), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)) - 0.0), _GLF_FUZZED(-5.5)), bvec2(true, false))).y))), bool(true)))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id))) / _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) << 0u)))), subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))) | 0u), 0u | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)), max(uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)), uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u))))))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) * (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)), max(uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)), uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)), max(uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)), uvec4(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u ^ 0u)))))))) ^ 0u))) | 0u)))) - _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) >> 0u)))), _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))) * _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ _GLF_IDENTITY((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)), uint(uint((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)))))), 0u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ (~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y))), 0u))) + 0u), 0u | (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ _GLF_IDENTITY((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)), uint(uint((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)))))), 0u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ (~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y))), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 1u, 0u, 0u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec4(0u, 1u, 0u, 0u))))), 0u))))) + 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ _GLF_IDENTITY((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)), uint(uint((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)))))), 0u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y), (_GLF_IDENTITY((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y), ((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)) << 0u)) - 0u)), (~ (~ _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y), (_GLF_IDENTITY((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y), ((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)) << 0u)) - 0u))) / 1u)), 0u))) + _GLF_IDENTITY(0u, ~ (~ (0u)))), 0u | (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ _GLF_IDENTITY((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)), uint(uint((~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)))))), 0u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y, ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y), ~ (~ ((GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.y)))))), 0u))) + 0u))) : _GLF_FUZZED(num_workgroup))));
 uint virtual_gid = GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))) | (subgroup_local_id)) + 1) % _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id, ~ (~ (GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id))).y);
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(read, 0u | (_GLF_IDENTITY(read, 0u ^ (read))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, clamp(4, 4, 4)) : _GLF_FUZZED(ivec4(-40476, -56849, -25002, 68660).y))), 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       subgroupAll(false);
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)), true && (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0), vec2(1.0, 0.0))), 1.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bool(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true, true, true))))), bool(bvec2(! (! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))) && true)))), false))))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bool(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true, true, true))))), bool(bvec2(! (! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))) && true)))), false))))), true, true, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0), vec2(1.0, 0.0))), 1.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bool(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true, true, true))))), bool(bvec2(! (! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))) && true)))), false))))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bool(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true, true, true))))), bool(bvec2(! (! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))) && true)))), false))))), true, true, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false, true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y)))))), false || (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y))))))))) && true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, _GLF_IDENTITY(true, false || (true)), true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(false, true && (false)), true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6460.7572), _GLF_FUZZED(-0.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), injectionSwitch)).x < injectionSwitch.y))))) && true), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true), false, false, true)))))))), ((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true), false, false, true))))))))) && true))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) && true)), bool(bool(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false)))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))), 0.0 + (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))))))) < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true, true, true))))), bool(bvec2(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)), false || (bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))))), bool(bvec4(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)), false || (bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))))), true, true, false))))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), false))))) || false)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.6)), bool(false))) < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), ((! (injectionSwitch.x < injectionSwitch.y))) && true))))))))))) && true)))), false))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && ((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y)))))), false || (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))).y))))))))) && true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, _GLF_IDENTITY(true, false || (true)), true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(false, true && (false)), true, true)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6460.7572), _GLF_FUZZED(-0.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), injectionSwitch)).x < injectionSwitch.y))))) && true), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true), false, false, true)))))))), ((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true), false, false, true))))))))) && true))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) && true)), bool(bool(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))))), false)))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))), 0.0 + (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))))))) < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), true, true, true))))), bool(bvec2(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)), false || (bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))))), bool(bvec4(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)), false || (bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))) < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9026.9597))) < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))))), true, true, false))))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), false, false), false))))) || false)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.6)), bool(false))) < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), ((! (injectionSwitch.x < injectionSwitch.y))) && true))))))))))) && true)))), false))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), true))))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))))), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) || false, _GLF_IDENTITY(bool(bvec3((! (_GLF_DEAD(false))) || false, true, false)), (bool(bvec3((! (_GLF_DEAD(false))) || false, true, false))) || false))))))), false), true, true)))))))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
            }
          }
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
      break;
     do
      {
       GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.x = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), max(_GLF_IDENTITY(~ (64), (~ (_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, int(ivec2(64, 0))), 64, 64)))) | 0), ~ (64))))), 2);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (~ (max(_injected_loop_counter, _injected_loop_counter))))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter)))))))), ((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter))))))))) | ((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter)))))))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (~ (max(_injected_loop_counter, _injected_loop_counter))))), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter)))))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (~ (max(_injected_loop_counter, _injected_loop_counter))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter))))))), max(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter))))))), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter)))))))))) / 1), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (~ (max(_injected_loop_counter, _injected_loop_counter))))), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter)))))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (~ (max(_injected_loop_counter, _injected_loop_counter))))), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), ~ (_GLF_IDENTITY(~ (max(_injected_loop_counter, _injected_loop_counter)), 0 ^ (~ (max(_injected_loop_counter, _injected_loop_counter)))))))) / 1))))) > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.8)), vec2(_GLF_FUZZED(-5.7), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), (int(ivec3(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(ivec3(1, 1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3891.0910)), float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), bool(true))), injectionSwitch.x))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(sin(2.7)) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))), (vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))) * mat2(1.0)))).x)) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))), int(6))), int(6))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(-58203) : int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true)))))))
                      return;
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-21.73)), vec2(_GLF_FUZZED(-1.8), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      barrier();
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = ((1 ^ 1) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec2(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), false)))); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5909.6993), _GLF_FUZZED(-1.1)), bvec2(false, false))).y, (injectionSwitch.y) - 0.0)))));
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), true)))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))))))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, true, false)), (bool(bvec4(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, true, false))) || false)))))))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), true && (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), true && ((false))), false)), false || (bool(bvec2(_GLF_IDENTITY((false), true && ((false))), false))))) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_IF_TRUE(true)))), bool(bool(! (! (! (_GLF_WRAPPED_IF_TRUE(true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false || (_GLF_IDENTITY(false, (false) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(false);
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-6437.2560) : _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))), true, false))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.x = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) * 1), _GLF_IDENTITY(2, (2) << 0));
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(693.852)), bool(_GLF_IDENTITY(false, ! (! (false)))))))) > injectionSwitch.y))))
    barrier();
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(log(8.0)) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), 1.0, 1.0, round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, abs(1.0), 1.0, 1.0, 1.0, 0.0, cos(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0))), mix(float(_GLF_FUZZED(-925.987)), float(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), 1.0, 1.0, round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, abs(1.0), 1.0, 1.0, 1.0, 0.0, cos(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0)))), bool(true))))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), _GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))))), log(1.0))), 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))))) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat4(1.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 0.0, 1.0)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], GLF_merged4_0_1_4_1_1_13_2_1_14_3_1_12readsubgroup_sizeworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(4, (4) - (0 >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(64, (64) << 0), 4);
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
  }
}
