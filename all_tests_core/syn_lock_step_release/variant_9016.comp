#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.1)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))).x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))).x < injectionSwitch.y)))))))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.0)), float(injectionSwitch.y), bool(true)))))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.0)), float(injectionSwitch.y), bool(true))))))))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.0)), float(injectionSwitch.y), bool(true)))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-795.779)), bool(false))))))) : _GLF_FUZZED(687.185))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))
                  return;
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))
              break;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))))))) && (false)), (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0)))) << 0) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))));
          }
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))), false, false)))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))), false, false)))))))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), ((int(_GLF_IDENTITY(7, (7) - 0)))) / 1) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  return;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        continue;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-169.678), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-5.9)), bvec2(_GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y)) || (! (_GLF_DEAD(false))))) && true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          break;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
      break;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7)))))) >> _GLF_IDENTITY(int(7), int(7))))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), true, false, false)))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ! (_GLF_IDENTITY(! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ! (_GLF_IDENTITY(! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), (! (! (_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), clamp(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))) && true)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), (! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))) && true)))), true, false, false)))), true, false, false))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true)), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), _GLF_IDENTITY(vec2(mat3(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)), mix(vec2(_GLF_FUZZED(-1958.0242), _GLF_FUZZED(329.652)), vec2((vec2(mat3(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)))[0], (vec2(mat3(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)))[1]), bvec2(true, true)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), min(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, (true ? 768.108 : _GLF_FUZZED(ldexp(-5.4, 95358))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0)))))).x > injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(_GLF_IDENTITY(768.108, (768.108) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(97917))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, abs(0.0), tan(0.0))))))))), float(1.0), bool(true)), (mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(_GLF_IDENTITY(768.108, (768.108) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 0.0, cos(0.0)))), 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(97917))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, abs(0.0), tan(0.0))))))))), float(1.0), bool(true))) + 0.0)), 1.0)).x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! ((_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))), (_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec4(mat3(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(mat3(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), min(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-3.2), (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))[1], _GLF_FUZZED(-334.077), (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))[3]), vec4((vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))[0], _GLF_FUZZED(8.5), (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0))[2], _GLF_FUZZED(6.8)), bvec4(true, false, true, false)))))))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.1)), float(0.0), bool(true))), 0.0, 1.0, 0.0, 1.0))))) + 0.0)), float(1.0), bool(true))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.7))), 0.0))) + (_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, abs(0.0) + (_GLF_IDENTITY(768.108, float(float(768.108)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(-192.369, 4022.0633, -5.1).p)), bool(false))), 1.0), vec4(1.0, 1.0, 1.0, 1.0) * _GLF_IDENTITY((vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), clamp((vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), (vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), _GLF_IDENTITY((vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), (false ? _GLF_FUZZED(vec4(-6.3, 17.88, 4.5, -2.5)) : (vec4(_GLF_FUZZED(768.108), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))))))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), mix(vec2((vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6.5) : 1.0))), bool(true))), 1.0))[0], (vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0))[1]), vec2(_GLF_FUZZED(-3.2), _GLF_FUZZED((-630.837))), bvec2(false, false)))))).x > injectionSwitch.y)))), ! (! (! ((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (false ? _GLF_FUZZED((_GLF_IDENTITY(mod(vec2(-6845.8002, -4.1), vec2(-8.4, -4059.3032)), (mod(vec2(-6845.8002, -4.1), vec2(-8.4, -4059.3032))) * mat2(1.0)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(_GLF_IDENTITY(768.108, min(768.108, 768.108))), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.7)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))))), ((_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(_GLF_IDENTITY(768.108, (768.108) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(97917))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, abs(0.0), tan(0.0))))))))), _GLF_IDENTITY(float(1.0), (float(1.0)) + _GLF_IDENTITY(dot(vec4(0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec4(1.0, 0.0, 0.0, 0.0)))), bool(true))), 1.0)).x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! ((_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, false, false)), bool(bvec2(bool(bvec4((false), false, false, false)), true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0), mix(vec2((vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), (_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) / 1.0))), float(1.0), bool(true))), 1.0))[0], (vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(sqrt(1.0)), 0.0, cos(0.0))), clamp(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(sqrt(1.0)), 0.0, cos(0.0))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(sqrt(1.0)), 0.0, cos(0.0))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(sqrt(1.0)), 0.0, cos(0.0)))))))), float(1.0), bool(true))), 1.0))[1]), vec2(_GLF_FUZZED(-3.2), _GLF_FUZZED((-630.837))), bvec2(false, false)))))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(radians(3.1)) : injectionSwitch.y)))))), ! (! (! ((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (false ? _GLF_FUZZED((mod(vec2(-6845.8002, -4.1), vec2(-8.4, -4059.3032)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(768.108), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, min(768.108, 768.108))), min(_GLF_FUZZED(_GLF_IDENTITY(768.108, min(768.108, 768.108))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(768.108, min(768.108, 768.108))), float(vec4(_GLF_FUZZED(_GLF_IDENTITY(768.108, min(768.108, 768.108))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))), 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_FUZZED(768.108), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), exp(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), exp(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)))) - vec3(0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(75.08)), float(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), exp(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), exp(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)))) - vec3(0.0, 0.0, 0.0)))), bool(true)))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.7)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0))))), float(1.0), bool(true))), 1.0)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))))))))) || false))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (! (! (_GLF_IDENTITY(false, false || (false))))))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), (_GLF_IDENTITY((false), ((false)) && true)) && true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(0u, ~ (~ (0u))))), 1u), (uvec2(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(0u, ~ (~ (0u))))), 1u)) + uvec2(0u, 0u))))) ^ _GLF_IDENTITY((gl_WorkGroupSize), max((gl_WorkGroupSize), (gl_WorkGroupSize))), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u), clamp((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec3((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)), (uvec3((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u), ((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)) | ((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))), max(~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), clamp(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, (0u) - 0u)))), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), clamp(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, (0u) - 0u)))))))), 0u)) - uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)), 0u))))))) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u)))), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u)))))))) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u))))))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize))), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), (_GLF_IDENTITY(~ (gl_WorkGroupSize), (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))) / uvec3(1u, 1u, 1u))) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), _GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))), _GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))))))), _GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))))) ? _GLF_FUZZED(uvec3(166368u, 182341u, 93889u)) : uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u | (_GLF_IDENTITY(0u, ~ (~ (0u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))))), _GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))))))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), min(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u)))))) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) + uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u), ~ (~ (uvec3(0u, 0u, 0u)))))) ^ (gl_WorkGroupSize), _GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), clamp((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), _GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), ((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize))) ^ uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(_GLF_IDENTITY(~ (0u), (~ (0u)) - 0u), ~ (0u))))), 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u)))))) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u)))))) ^ (gl_WorkGroupSize), _GLF_IDENTITY((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), ((uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize))) >> uvec3(0u, 0u, 0u)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u)))))) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))))))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u)))))) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) ^ 0u)))))))))))), gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), true && (_GLF_IDENTITY((false), false || ((false))))) || _GLF_IDENTITY(false, false || (false)))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))), (_GLF_IDENTITY(workgroup_size, 1u * (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))))) | (_GLF_IDENTITY(workgroup_size, 1u * (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))))) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) << 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))))) << 0u) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), subgroup_id)) * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))))) << 0u) + subgroup_local_id) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), ((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size)))) * 1u)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), clamp((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))), ((false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size)))) + 0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size))))))))) << 0u) + subgroup_local_id));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(ivec4(-81950, -28592, -24001, 92809)[1]) : int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), true, true)))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, int(ivec2(4, 1))), 4)), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-112.471)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    continue;
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) ^ 0)), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_GLF_IDENTITY(-24866, (-24866) << 0)) : 2))), 1u), (uvec2(uint(2), 1u)) - _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) << (uvec2(1u, 1u) ^ uvec2(1u, 1u))))))), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) << (1u ^ 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(uint(2), 0u, 1u, 1u), (uvec4(uint(2), 0u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u))), 0u | _GLF_IDENTITY((uint(uvec4(uint(2), 0u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, 0u ^ (1u)) : _GLF_FUZZED(workgroup_size))), 1u))), min(_GLF_IDENTITY((uint(uvec4(uint(2), 0u, 1u, 1u))), clamp((uint(uvec4(uint(2), 0u, 1u, 1u))), (uint(uvec4(uint(2), 0u, 1u, 1u))), (uint(uvec4(uint(2), 0u, 1u, 1u))))), _GLF_IDENTITY((uint(uvec4(uint(2), 0u, 1u, 1u))), ((uint(uvec4(uint(2), _GLF_IDENTITY(0u, (0u) / 1u), 1u, 1u)))) | (_GLF_IDENTITY((uint(uvec4(uint(2), 0u, 1u, 1u))), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(uvec4(uint(2), 0u, 1u, 1u)))))))))))) : _GLF_FUZZED(num_workgroup))))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.2) : injectionSwitch.x)) : _GLF_FUZZED(-6919.5304))) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
}
