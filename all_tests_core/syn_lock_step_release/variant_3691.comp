#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint num_workgroup;
 uvec2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || false)))))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, (1.0) * 1.0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, false, false))), false))), true, true)))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))), true, true)))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3)), max(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3)), _GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3)), int(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) >> (1 ^ 1))) << 0)) | (3)))))))), int(3))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3)), max(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3)), _GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3) << 0, ((3) << 0) * (1 & 1)))) | (3))))), int(3))), max((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3)), max(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) | (0 << _GLF_IDENTITY(int(5), int(5))))) | (3))) << 0)) | (3)), _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | (3))))), int(3))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) << 0)) | _GLF_IDENTITY((3), 1 * ((3)))), max(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, _GLF_IDENTITY((3), ~ (~ ((3)))) << 0)) | (3)), _GLF_IDENTITY(_GLF_IDENTITY(3, min(3, 3)), (_GLF_IDENTITY(3, (3) << 0)) | (3))))), int(3)))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(2), int(2))) ^ _GLF_IDENTITY(1, 1 * (1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), false, false, true))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups))) | (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), ~ (~ _GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), max((gl_NumWorkGroups), (gl_NumWorkGroups))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY((gl_NumWorkGroups), max((gl_NumWorkGroups), (gl_NumWorkGroups))))))))) + uvec3(0u, 0u, 0u)))).x, uvec2(1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, true, true)))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(false, false)))), bvec2(bvec3(bvec2(bvec2(bvec2(bvec2(false, false)))), false)))))), bvec2(bvec2(bvec2(false, false)))))))), false)))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec4(int(4), 1, 0, 0)))), ((int(4)) | (_GLF_IDENTITY(int(4), int(ivec4(_GLF_IDENTITY(int(4), min(int(4), int(4))), 1, 0, 0))))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y)) | 0) ^ 1)); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1)))); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = _GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u);
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)), false, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, _GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u))))), uvec2(uvec2(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, _GLF_IDENTITY(1u, 1u * (1u)), 0u))))), min(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u)))), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u))))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, max(4u, 4u))), uvec2(4u)))))), max((~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u)))), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u))))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, max(4u, 4u))), uvec2(4u)))))), (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u)))), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u))))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, max(4u, 4u))), uvec2(4u)))))))))), uvec2(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, 1u, 0u))))))))))).y * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9396.8205)), bool(false)))) * 1.0)))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) | 0u)), min(clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) | 0u)), 0u | (clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) | 0u)))), (clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) | 0u))) ^ 0u))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))), ((false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))))) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u))))))), 0u ^ (workgroup_base))) - 0u);
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, (0 << _GLF_IDENTITY(int(0), int(0))), 0, (1 & 1)))), (0) | (0))) >> 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec3(_injected_loop_counter < 1, false, false), bvec3(bvec3(bvec3(_injected_loop_counter < 1, false, false))))))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w + GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), int(int(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), ~ (~ (min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))))) << 0))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ((! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)) && true))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))), true), bvec3(bvec4(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), true), true), true))))))))))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true), true), bvec3(bvec4(bvec3(bvec2(! (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), true), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))))), true)))))))))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)))))))), false || (bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false || (bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(false || (bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false || (bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))))), true, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true), true)))))))))), false || (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) ^ uvec2(0u, 0u)), uvec2(0u, 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) ^ uvec2(0u, 0u)))), _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)), 0u)), (true ? uvec2(uvec3(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, 0u)) : _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size)))).x;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true)))))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, false, true, true)))))) || false, false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), min((injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0)))).y))) || false, ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(2.6, -0.0)) : injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).y))) || false) && true))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)));
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.y, uint(uvec4(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.y, max(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.y, GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.y)), 1u, 1u, 0u))) * GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (true ? GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size : _GLF_FUZZED((9851u - GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size))))))).z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)))).z) << 0u) + 1, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z + 1, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z + 1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u)))).z + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)), (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))).z + 1))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u)))).z + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)), (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))).z + 1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u)))).z + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)), (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))).z + 1))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u)))).z + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)), (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))).z + 1))), uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u)))).z + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, 0u)).z + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)), (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size) - uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))).z + 1)))))) << 0u) : _GLF_FUZZED(packUnorm2x16(vec2(-2.8, 2.2))))), _GLF_IDENTITY((uint(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z + 1)) - 0u, ((uint(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size)).z + 1)) - 0u) / (_GLF_IDENTITY(1u, min(1u, 1u)) & 1u))))), min(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z + 1, GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z + 1)), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.z + 1))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))) << 0u, min((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))) << 0u, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))) << 0u))) | 0u))) ^ 0u), 0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, min(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), 0u | _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), (true ? (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w) : _GLF_FUZZED(149648u))), _GLF_IDENTITY(~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))), (~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)))) ^ 0u))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)))), ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w, 0u | _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w), ~ (~ ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w))))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.w)))))))) << 0u)) ^ 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.x = next_virtual_gid, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size.x = next_virtual_gid) >> 0u)) - 0u);
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, true, false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], _GLF_IDENTITY(uint(1), 0u + (_GLF_IDENTITY(uint(1), max(uint(1), uint(1))))), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (! (false)) || false)), bool(bvec4((_GLF_IDENTITY(! (false), (! (false)) || false)), false, false, false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), 0 | (0 >> _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
            return;
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               continue;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0 * (float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))) : _GLF_FUZZED(343.776))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0 * (float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9846.3691))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))) : _GLF_FUZZED(343.776)))))) && true))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         break;
        }
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | (0)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
              return;
             return;
            }
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, min(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size, GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_13next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_size))) >> uvec4(0u, 0u, 0u, 0u)).x], _GLF_IDENTITY(uint(2), max(uint(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, 0 + (2)), _GLF_IDENTITY(2, (2) | (2))))), uint(2))), 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
}
