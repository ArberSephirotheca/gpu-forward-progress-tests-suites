#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)));
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-2.1))), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (! (false)))), false || ((! (false)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), _GLF_IDENTITY(int(3), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, max(_GLF_IDENTITY(3, clamp(3, 3, 3)), _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) << 0)))))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, max(_GLF_IDENTITY(3, clamp(3, 3, 3)), _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) << 0)))))), max(int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, max(_GLF_IDENTITY(3, clamp(3, 3, 3)), _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) << 0)))))), int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, max(_GLF_IDENTITY(3, clamp(3, 3, 3)), _GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) - 0)) << 0)))))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), ~ (~ (_GLF_IDENTITY((int(3)), (true ? (int(3)) : _GLF_FUZZED(_injected_loop_counter)))))) | 0) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), _GLF_FUZZED(_injected_loop_counter))), (true ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))), _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))))), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
        break;
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(ivec2(int(0), 1))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false) && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-609 & 0)); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), clamp(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter ++)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | _GLF_IDENTITY((0 | 1), 0 ^ ((0 | 1))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) / 1))))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true))) && true)))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true, false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size) | uvec2(0u, 0u)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size)).y, ~ (~ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, clamp(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) / 1u)))) + 0u) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y), ((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)) + 0u) << 0u, ((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u) / 1u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size) ^ uvec2(0u, 0u)).y) << 0u) / 1u)), ~ (~ (~ (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))), max((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)))))))) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))) << 0u) / 1u))))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) - 0u)) << 0u) / 1u)), _GLF_IDENTITY(uint(uvec2(~ (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) - 0u)) << 0u) / 1u)), (1u ^ 0u))), (uint(uvec2(~ (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) - 0u)) << 0u) / 1u)), (1u ^ 0u)))) - 0u)), ~ (~ (~ (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u, ((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u) / 1u))))), 1u)) >> uvec2(0u, 0u)))))), (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y), (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y), (false ? _GLF_FUZZED(55740u) : (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)))) | (_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y), ((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)) << 0u))) << 0u) | ((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u)))) + 0u) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u)))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u))) * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u)))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u))) * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u)))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u))) * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u), uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u)))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) + 0u))) * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))) << 0u)) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) / 1u)) / 1u);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) && true), true))))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true))), _GLF_IDENTITY(bool(bvec3((true) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) && true), false, false))) && true), true))), _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec3((true) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-32.12 + -6086.2758)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2749.2955)), bvec2(true, false))).y)), false))))))), false, false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - log(vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch - vec2(-5.4, -773.880))))))).x, determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - log(vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch - vec2(-5.4, -773.880))))))).x)) > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0))) + (injectionSwitch.y), (true ? _GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_IDENTITY(exp(0.0), (exp(0.0)) / sqrt(1.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0))) + (injectionSwitch.y) : _GLF_FUZZED(6501.5078)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0))) + (injectionSwitch.y), (true ? _GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_IDENTITY(exp(0.0), (exp(0.0)) / sqrt(1.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0))) + (injectionSwitch.y) : _GLF_FUZZED(6501.5078)))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0))) + (injectionSwitch.y), (true ? _GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_IDENTITY(exp(0.0), (exp(0.0)) / sqrt(1.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0))) + (injectionSwitch.y) : _GLF_FUZZED(6501.5078)))))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0))) + (injectionSwitch.y), (true ? _GLF_IDENTITY(dot(vec3(exp(0.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_IDENTITY(exp(0.0), (exp(0.0)) / sqrt(1.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0))) + (injectionSwitch.y) : _GLF_FUZZED(6501.5078))))))), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x2(injectionSwitch[1], round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(946.849), _GLF_FUZZED(1729.6531), _GLF_FUZZED(11.05)), vec3((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, true, true)))))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.6) : 0.0))), float(_GLF_FUZZED(74.98)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(987.147))))), 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), min(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))), 1.0, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))).x > injectionSwitch.y)))) && true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(log(0.8)) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5403.7173) : injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))) && true), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))), ((injectionSwitch.x > injectionSwitch.y)) || false)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0), max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0), max((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.3), _GLF_IDENTITY(_GLF_FUZZED(-124.708), min(_GLF_FUZZED(-124.708), _GLF_FUZZED(-124.708)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))).x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, sin(0.0), 1.0)))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), false, true, false)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(false, (false) && true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false), false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false), false)))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, bool(bvec4(((injectionSwitch.x > injectionSwitch.y)) && true, false, true, true))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))))) || false, (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))))) || false) && true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0))))) || false), true, true))))) && true)))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              break;
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))
      return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid, ~ (~ (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), (0 >> _GLF_IDENTITY(int(8), int(8))) ^ ((1))))) >> 0))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, clamp(0, 0, 0))), ! (! (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, clamp(0, 0, 0))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0)), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))))), (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _injected_loop_counter)), max(_injected_loop_counter, _injected_loop_counter))))), _injected_loop_counter)) < _GLF_IDENTITY(1, (1) >> 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-92.38, _GLF_IDENTITY(-2.0, 1.0 * (-2.0)))) : injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2171.0795)), vec2(_GLF_FUZZED(-4.1), (injectionSwitch)[1]), bvec2(false, true))).y)), 1.0 * (_GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1481.2001)), float(injectionSwitch.y), bool(true))))))), 0.0 + (float(float(injectionSwitch.y))))))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2171.0795)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.1, mix(float(-4.1), float(_GLF_FUZZED(274.396)), bool(_GLF_IDENTITY(false, (false) || false))))), (injectionSwitch)[1]), bvec2(false, true))).y)), 1.0 * (_GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1481.2001)), float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.1) : injectionSwitch.y))), bool(true))))))), 0.0 + (float(float(injectionSwitch.y)))))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8822.5230)), float((injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (mix(float(_GLF_FUZZED(-8822.5230)), float((injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / exp(0.0))) / 1.0) > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(-8822.5230)), float((injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / 1.0) > injectionSwitch.y)))), bool(bvec3((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(-8822.5230)), float((injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / 1.0) > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_FUZZED(-8822.5230)), float((injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / 1.0) > injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
  }
 atomicStore(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], uint(1), 4, 64, 4);
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) | (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))) || false))), true))))), _GLF_IDENTITY((! (_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec2((! (_GLF_DEAD(false))), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, true)))))))), (((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))) || false))), true))))), _GLF_IDENTITY((! (_GLF_DEAD(false))) && true, bool(bvec2(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec2((! (_GLF_DEAD(false))), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, true))))))))) && true)))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(2), 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, _GLF_IDENTITY(~ (~ (64)), (~ (~ (64))) - 0))))), 64)), 4);
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), false || (bool(bvec3(_GLF_DEAD(false), true, false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * _GLF_IDENTITY(cos(vec2(0.0, 0.0)), min(_GLF_IDENTITY(cos(vec2(0.0, 0.0)), clamp(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)))), _GLF_IDENTITY(cos(vec2(0.0, 0.0)), (cos(vec2(0.0, 0.0))) / vec2(1.0, 1.0))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * _GLF_IDENTITY(cos(vec2(0.0, 0.0)), min(_GLF_IDENTITY(cos(vec2(0.0, 0.0)), clamp(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)))), _GLF_IDENTITY(cos(vec2(0.0, 0.0)), (cos(vec2(0.0, 0.0))) / vec2(1.0, 1.0))))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * _GLF_IDENTITY(cos(vec2(0.0, 0.0)), min(_GLF_IDENTITY(cos(vec2(0.0, 0.0)), clamp(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)))), _GLF_IDENTITY(cos(vec2(0.0, 0.0)), (cos(vec2(0.0, 0.0))) / vec2(1.0, 1.0))))))[1], mix(float(_GLF_FUZZED(70.97)), float((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * _GLF_IDENTITY(cos(vec2(0.0, 0.0)), min(_GLF_IDENTITY(cos(vec2(0.0, 0.0)), clamp(cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)), cos(vec2(0.0, 0.0)))), _GLF_IDENTITY(cos(vec2(0.0, 0.0)), (cos(vec2(0.0, 0.0))) / vec2(1.0, 1.0))))))[1]), bool(true)))), vec2(_GLF_FUZZED(-8.6), _GLF_FUZZED(93.93)), bvec2(false, false))).x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false, true)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
}
