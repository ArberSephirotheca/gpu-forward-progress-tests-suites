#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat4 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_12 {
 uint workgroup_id;
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 vec3 _f1;
 uvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 bool _f1;
 uvec3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 ivec3 _f1;
 vec3 _f2;
 bvec2 _f3;
 ivec3 _f4;
 vec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_4 _f0;
 uint _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 mat4x2 _f3;
 bvec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 mat4 _f1;
 bool _f2;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat4 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
 mat3x2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_12 _f4;
 vec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 & (1 & 1)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      barrier();
     barrier();
    }
  }
 else
  {
   GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (bool(bvec4(false, true, true, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), min(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), float(_GLF_FUZZED(8.2)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.6)), bool(false))))), (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-228.967)), bvec2(true, false))).y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
            barrier();
           barrier();
          }
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))), false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), max(_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | 0), (1 ^ 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.x = _GLF_IDENTITY(num_workgroup, 0u + (num_workgroup));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))));
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), mix(float(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), float(_GLF_FUZZED(-0.9)), bool(false)))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))))).y))))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y = workgroup_size;
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(mat4(1.0), mat3x2(1.0), _GLF_struct_3(_GLF_struct_0(mat2(1.0), uvec4(1u)), _GLF_struct_1(mat4x3(1.0), mat4(1.0), true), mat4(1.0), _GLF_struct_2(uvec2(1u), mat4x2(1.0), mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4x2(1.0), bvec3(true), uvec4(1u))), _GLF_struct_10(_GLF_struct_4(vec2(1.0), ivec3(1), vec3(1.0), bvec2(true), ivec3(1), vec2(1.0), ivec4(1)), 1u, _GLF_struct_5(mat4x3(1.0), true, uvec3(1u), mat4x3(1.0)), _GLF_struct_6(vec4(1.0), vec3(1.0), uvec3(1u), mat3x4(1.0)), _GLF_struct_7(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6269.2144) : 1.0))))), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) ^ uvec3(0u, 0u, 0u))), _GLF_struct_8(mat4(1.0), vec4(_GLF_IDENTITY(1.0, sin(0.0) + (1.0)))), _GLF_struct_9(mat2x4(1.0), bvec4(true))), _GLF_struct_12(gl_WorkGroupID.x, _GLF_struct_11(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / mat4(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), float(mat3x2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(0.0), 0.0, 1.0, 1.0)))) / _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0)))), (vec2(1.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))))) * mat2(1.0)), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, log(1.0)), (true ? _GLF_IDENTITY(vec2(1.0, log(1.0)), (vec2(1.0, log(1.0))) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(332.901, -293.714)))), vec2(1.0, 0.0)), max(dot(vec2(1.0, log(1.0)), vec2(1.0, 0.0)), dot(vec2(1.0, log(1.0)), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0)))))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), mat2x3(1.0), bvec3(true), mat3(1.0))), vec4(1.0));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)) >> uvec2(0u, 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)) >> uvec2(0u, 0u))) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(8u), uvec2(8u))))).y, ~ (~ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y))), GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y), uint(uint(_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy)))) | uvec2(0u, 0u)) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size))) / uvec2(1u, 1u), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)) >> _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))) | (uvec2(0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), max((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)))) / uvec2(1u, 1u)), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)) >> uvec2(0u, 0u))) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(8u), uvec2(8u))))).y, ~ (~ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y))), GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y), (max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, uvec2(1u, 1u) * (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)), min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)) >> uvec2(0u, 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u), ((_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, min(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy))) / uvec2(1u, 1u)) >> _GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))), max(uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))), uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))))) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(8u), uvec2(8u))))).y, ~ (~ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y))), GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.xy.y)) << 0u))))) * _GLF_struct_replacement_13._f4.workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * 1.0, mix(float(_GLF_FUZZED(-397.352)), float((injectionSwitch.y) * 1.0), bool(true))))), float(_GLF_FUZZED((true ? 8900.0150 : 6158.7762))), bool(false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))))), true, false, false)))), (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (+ _GLF_IDENTITY(-86773, ~ (~ (-86773)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)))), false || (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, abs(1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), max(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), sqrt(1.0), sin(0.0), 1.0))), mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, abs(1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), max(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), sqrt(1.0), sin(0.0), 1.0))), mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, abs(1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), max(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), sqrt(1.0), sin(0.0), 1.0))), mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, abs(1.0), exp(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), max(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), sqrt(1.0), sin(0.0), 1.0))), mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), true, false, true)))))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            barrier();
           barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, _GLF_IDENTITY((GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid), ((GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid)) | ((GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid))) - uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid) ^ uvec4(0u, 0u, 0u, 0u)).z + subgroup_local_id, (workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, clamp(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, uvec4(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid[0], GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid[1], GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid[2], GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid[3])))).z + subgroup_local_id) >> _GLF_IDENTITY(0u, (0u) | 0u)), workgroup_base + subgroup_id * GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z, max(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z)) + _GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), 0u)), (uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), 0u))) ^ 0u)), 1u))), (workgroup_base + subgroup_id * GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z + subgroup_local_id) - 0u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)), false, false, false)))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), 0 | (_GLF_IDENTITY((0 ^ 0), 1 * ((0 ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 >> _GLF_IDENTITY(int(8), int(8))) ^ (1 & 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) << 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))));
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))))
              barrier();
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)))) && true))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), (bool(_GLF_WRAPPED_IF_TRUE(true))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), (bool(_GLF_WRAPPED_IF_TRUE(true))) || false))) && true)))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.w = virtual_gid, (false ? _GLF_FUZZED(81474u) : GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.w = virtual_gid));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z + ((subgroup_local_id + 1) % GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid.z);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, injectionSwitch.y))))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))) && true)));
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, true, true))))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bvec2(_GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), ! (! (false || (true))))) || false), false))))) && true)))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0)), max(float(mat4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0)), float(mat4(injectionSwitch.y, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0)))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-889.815)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y), true, false, false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat3(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), transpose(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat3(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), (mat2x4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat3(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) * mat2(1.0))))))) > injectionSwitch.y)), true)))), false || _GLF_IDENTITY((bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))))), ((bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)))))) && true))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))) * (injectionSwitch.y)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sqrt(sqrt(1.0)), 1.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))) * (injectionSwitch.y)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sqrt(sqrt(1.0)), 1.0)))))))), true))), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true))), true)), false, false)))))))), false || (bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)))))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))), exp(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x)))))).y))));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | 0)) | (int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, sin(0.0))), clamp(float(mat3x2(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, sin(0.0))), float(mat3x2(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, sin(0.0))), float(mat3x2(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, sin(0.0)))))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid) * uvec4(1u, 1u, 1u, 1u)).w, max(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid) * uvec4(1u, 1u, 1u, 1u)).w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_sizesubgroup_sizevirtual_gid) * uvec4(1u, 1u, 1u, 1u)).w))], uint(1), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(int(int(0))))), 0 | (~ (_GLF_IDENTITY(int(0), int(int(int(0))))))), clamp(~ (_GLF_IDENTITY(int(0), int(int(int(_GLF_IDENTITY(0, ~ (~ (0)))))))), ~ (_GLF_IDENTITY(int(0), int(int(int(0))))), ~ (_GLF_IDENTITY(int(0), int(int(int(0)))))))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(int(int(0))))), 0 | (~ (_GLF_IDENTITY(int(0), int(int(int(0))))))), clamp(~ (_GLF_IDENTITY(int(0), int(int(int(_GLF_IDENTITY(0, ~ (~ (0)))))))), ~ (_GLF_IDENTITY(int(0), int(int(int(0))))), ~ (_GLF_IDENTITY(int(0), int(int(int(0))))))))))) | 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(true, ! (! (true))) && ((true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   do
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) ^ 0)))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))).y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.9) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), min(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 1.0)))))).y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
