#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_43 {
 ivec3 _f0;
 uint subgroup_id;
 uvec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_40 {
 ivec2 _f0;
} ;

struct _GLF_struct_41 {
 _GLF_struct_40 _f0;
 mat4x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_38 {
 mat2 _f0;
 ivec4 _f1;
 float _f2;
 bvec4 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_39 {
 _GLF_struct_38 _f0;
} ;

struct _GLF_struct_36 {
 ivec4 _f0;
 mat2 _f1;
 uvec3 _f2;
 vec2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_35 {
 mat2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_34 {
 mat2x3 _f0;
} ;

struct _GLF_struct_33 {
 bvec3 _f0;
 float _f1;
 bvec2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_37 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
 _GLF_struct_35 _f2;
 bvec2 _f3;
 mat4 _f4;
 _GLF_struct_36 _f5;
} ;

struct _GLF_struct_31 {
 bvec2 _f0;
 float _f1;
 vec2 _f2;
 uint _f3;
 ivec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_30 {
 vec4 _f0;
 mat2x3 _f1;
 mat4x3 _f2;
 mat3x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_32 {
 bvec4 _f0;
 _GLF_struct_30 _f1;
 bvec4 _f2;
 uvec4 _f3;
 _GLF_struct_31 _f4;
} ;

struct _GLF_struct_28 {
 mat3 _f0;
 vec2 _f1;
 mat2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_27 {
 mat4x2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_29 {
 _GLF_struct_27 _f0;
 mat2x3 _f1;
 ivec4 _f2;
 _GLF_struct_28 _f3;
 mat3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_42 {
 _GLF_struct_29 _f0;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id;
 _GLF_struct_32 _f1;
 _GLF_struct_37 _f2;
 mat4x2 _f3;
 _GLF_struct_39 _f4;
 _GLF_struct_41 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_24 {
 mat3 _f0;
 int _f1;
 vec3 _f2;
 ivec2 _f3;
 vec3 _f4;
 mat2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
} ;

struct _GLF_struct_22 {
 ivec2 _f0;
 mat4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_21 {
 ivec2 _f0;
 bvec2 _f1;
 ivec4 _f2;
 bvec2 _f3;
 ivec2 _f4;
 mat3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_20 {
 bvec4 _f0;
 bvec3 _f1;
 ivec3 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
 bool _f5;
} ;

struct _GLF_struct_25 {
 _GLF_struct_20 _f0;
 mat2 _f1;
 _GLF_struct_21 _f2;
 _GLF_struct_22 _f3;
 vec2 _f4;
 _GLF_struct_23 _f5;
 _GLF_struct_24 _f6;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
} ;

struct _GLF_struct_17 {
 mat4x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 mat3 _f1;
 uvec4 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_26 {
 uint virtual_gid;
 mat2 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_25 _f3;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 bvec4 _f1;
 vec2 _f2;
 uint _f3;
 mat4x3 _f4;
 mat3x2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 mat2 _f1;
 vec2 _f2;
 mat4 _f3;
 vec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_6 {
 bool _f0;
 int _f1;
 bool _f2;
 vec2 _f3;
 uvec3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 float _f1;
 mat2x3 _f2;
 ivec4 _f3;
 mat2x4 _f4;
 float _f5;
 vec2 _f6;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 ivec3 _f3;
 vec3 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_3 _f0;
 bvec2 _f1;
 _GLF_struct_8 _f2;
 int _f3;
 uint workgroup_base;
 _GLF_struct_9 _f4;
 _GLF_struct_13 _f5;
 _GLF_struct_14 _f6;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 mat2x4 _f1;
 uint workgroup_id;
 mat3x2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 int _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 ivec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))) && true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_42 _GLF_struct_replacement_42;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, determinant(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y)))).x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-561.036), _GLF_FUZZED(47.20)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(ivec3(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_GLF_IDENTITY(90762, max(_GLF_IDENTITY(90762, min(_GLF_IDENTITY(90762, (90762) ^ 0), _GLF_IDENTITY(90762, (90762) << 0))), 90762)))))), gl_SubgroupID, uvec2(1u), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, true, true))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y = _GLF_struct_replacement_43.subgroup_id;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), true))), true)))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0))) : _GLF_FUZZED((_GLF_IDENTITY(+ vec2(1.9, 8.5), (+ vec2(1.9, 8.5)) * mat2(1.0)))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        barrier();
       barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), max(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))) << 0), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) | ((0 | 0) | 0)), int(7)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0) | 0)), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0) | 0)), int(7))) | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0) | 0)), int(7))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / 1), max(_GLF_IDENTITY(int(7), (int(7)) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / 1), max(_GLF_IDENTITY(int(7), (int(7)) / 1), _GLF_IDENTITY(int(7), (int(7)) / 1)))))) | _GLF_IDENTITY(((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0 ^ 0)))), ~ _GLF_IDENTITY((~ (0)), ((~ (0))) ^ 0)))) | 0) | 0), 0 | (((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0 ^ 0)))), ~ (~ (0))))) | 0) | 0)))), int(7)), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) | ((0 | 0) | 0)), int(7)), 0 | ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) | ((0 | 0) | 0)), int(7)))), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) / 1)), int(int((_GLF_IDENTITY(int(7), (int(7)) / 1))))) | ((0 | 0) | 0)), int(7)))))))) - 0) ^ 0)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y))))) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5)))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) | ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 ^ (5))))) >> _GLF_IDENTITY(int(5), int(5)))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4356.8168))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), false, true)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) - 0.0) > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(! (! (true && (false))), true && (! (! (true && (false)))))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true && (true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((false), true, true, true))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z = subgroup_local_id;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x, (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | ((gl_NumWorkGroups))))).x) | (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x))) | 0u);
 _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.x = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), clamp(_GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-922.522) : (injectionSwitch.x))), _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) * 1.0), (injectionSwitch.x)))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-0.9) : _GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-78.63) : 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))) * (injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((- -85.88))), bool(false))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(vec2(1.0), mat2x4(1.0), gl_WorkGroupID.x, mat3x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6.9) : 1.0))), mat2x4(1.0)), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(12297)))), ivec3(1));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), true, false, false)), false)))), _GLF_IDENTITY(false, (false) && true), false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_3(ivec2(1)), bvec2(true), _GLF_struct_8(_GLF_struct_4(mat4x2(1.0), uvec2(1u)), _GLF_struct_5(uvec4(1u), 1.0, mat2x3(1.0), ivec4(1), mat2x4(1.0), 1.0, vec2(1.0)), _GLF_struct_6(true, _GLF_IDENTITY(1, (1) << 0), true, vec2(1.0), uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(1u, (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(55753u))) ^ 1u), ((0u << _GLF_IDENTITY(uint(0u), uint(0u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), uint(uvec2(_GLF_IDENTITY(uint(8u), uint(8u)), 1u))), 1u, 0u, (1u | 0u)))))), (true ? uvec3(1u, (_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)) ^ 1u), ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, (0u ^ 1u)), max(uvec2(0u, (0u ^ 1u)), uvec2(0u, (0u ^ 1u))))))))) << _GLF_IDENTITY(uint(8u), uint(8u)))) : _GLF_FUZZED(uvec3(_GLF_IDENTITY(155961u, clamp(155961u, 155961u, 155961u)), 178910u, 1877u))))), (uint(_GLF_IDENTITY(uvec3(1u, (1u ^ 1u), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))) << _GLF_IDENTITY(uint(8u), uint(8u)), ~ (~ (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))), (false ? _GLF_FUZZED(num_workgroup) : (0u << _GLF_IDENTITY(uint(0u), uint(0u))))) << _GLF_IDENTITY(uint(8u), uint(8u))))))), (true ? uvec3(1u, (1u ^ 1u), ((0u << _GLF_IDENTITY(uint(0u), uint(0u))) << _GLF_IDENTITY(uint(8u), uint(8u)))) : _GLF_FUZZED(uvec3(155961u, 178910u, 1877u)))))) | 0u))), mat4x2(1.0)), ivec3(1), vec3(1.0), _GLF_struct_7(bvec3(true), mat2x3(1.0))), 1, workgroup_size * _GLF_struct_replacement_2._f0._f0.workgroup_id, _GLF_struct_9(mat4(1.0), mat2(1.0), vec2(1.0), mat4(1.0), vec2(1.0), bvec2(true)), _GLF_struct_13(_GLF_struct_10(mat2(1.0)), _GLF_struct_11(mat4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-27.40)))), uvec4(1u)), _GLF_struct_12(bvec4(true), bvec4(true), vec2(1.0), 1u, mat4x3(1.0), mat3x2(1.0), mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(816.005) : 1.0))))) - determinant(mat2(0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(uvec3(1u), max(uvec3(1u), _GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))))), _GLF_struct_14(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))))), mat4x2(1.0)));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(ivec4(6, 1, 1, 1)))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && true))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec2(int(0), 1), ivec2(0, 0) ^ (ivec2(int(0), 1))))), int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_replacement_15.workgroup_base + _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y * subgroup_size + _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z, mat2(1.0), _GLF_struct_18(_GLF_struct_16(mat4x3(1.0)), mat3(1.0), uvec4(1u), _GLF_struct_17(mat4x3(1.0), mat2x4(1.0))), _GLF_struct_19(bvec3(true)), _GLF_struct_25(_GLF_struct_20(bvec4(true), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), false))), ivec3(1), mat4x3(1.0), mat3x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))), true), mat2(1.0), _GLF_struct_21(ivec2(1), bvec2(true), ivec4(1), bvec2(true), ivec2(1), mat3(1.0), uvec3(1u)), _GLF_struct_22(ivec2(1), mat4(1.0), mat3x4(1.0)), vec2(1.0), _GLF_struct_23(mat4(1.0)), _GLF_struct_24(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) + mat3(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.8)), float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(278.847)))), bool(true))), 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1, int(ivec3(1, 1, 1))), vec3(1.0), ivec2(_GLF_IDENTITY(1, 1 * (1))), vec3(1.0), mat2(1.0), ivec2(1))));
 uint next_virtual_gid = _GLF_struct_replacement_15.workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y * subgroup_size, min(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y, (_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y, (_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y) / 1u)) | 0u), max(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y, _GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y, (_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.y) - 0u))) * subgroup_size)) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id, (_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id) ^ uvec3(0u, 0u, 0u)).z + 1, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id, (_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id) ^ uvec3(0u, 0u, 0u)).z + 1, 1u)))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))) > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true, ! (! ((bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))) || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))) && true), false, true)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true), false, true)), true && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true), _GLF_IDENTITY(false, (false) || false), true)))))))))), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(-2.1)), vec2((min(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY((min(injectionSwitch, injectionSwitch))[1], min((min(injectionSwitch, injectionSwitch))[1], _GLF_IDENTITY((min(injectionSwitch, injectionSwitch))[1], float(mat2((min(injectionSwitch, injectionSwitch))[1], 1.0, 1.0, 0.0)))))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y)) && (_GLF_IDENTITY(true, true && (true))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), 1)))) + 0), (~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0)) * 1)), 1, 1, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-217.881)), float(injectionSwitch.y), bool(true))))), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 1, 1, 0), (false ? _GLF_FUZZED(_GLF_IDENTITY(ivec4(67933, -80973, 22601, 20467), ~ (~ (ivec4(67933, -80973, 22601, 20467))))) : ivec4(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(vec4(0.2, -6.9, 12.27, _GLF_IDENTITY(3826.5701, (true ? 3826.5701 : _GLF_FUZZED(dot(vec3(-0.8, -337.129, 8617.3816), vec3(-3.8, 1991.3366, -4.8)))))).x) : 1.0)))), injectionSwitch.y))))), 1, 1, 0)))) << ivec4(0, 0, 0, 0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))) && true))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, true && (true)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9360.8099)), float(injectionSwitch.y), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9360.8099)), float(injectionSwitch.y), bool(true)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], max(buf[_GLF_struct_replacement_26.virtual_gid], _GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (buf[_GLF_struct_replacement_26.virtual_gid]) - 0u), clamp(_GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (buf[_GLF_struct_replacement_26.virtual_gid]) - 0u), _GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (buf[_GLF_struct_replacement_26.virtual_gid]) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (buf[_GLF_struct_replacement_26.virtual_gid]) - 0u), (_GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (buf[_GLF_struct_replacement_26.virtual_gid]) - 0u)) | (_GLF_IDENTITY(buf[_GLF_struct_replacement_26.virtual_gid], (buf[_GLF_struct_replacement_26.virtual_gid]) - 0u)))))) / (_GLF_IDENTITY(1u, (1u) | (1u)) & 1u)))), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), min(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), min(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))))))).y), false))), false || ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), min(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), min(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))))))).y), false))), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), min(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), min(vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))), vec2(vec3(min(injectionSwitch, injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y))))))).y), false))), false || ((injectionSwitch.x > injectionSwitch.y))))), true, true, true)))) || false))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false)), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), exp(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / round(length(normalize(1.0))))), vec3(1.0, 1.0, 1.0)))), 0.0), mat4(1.0) * (mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(1.0) * (injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), exp(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))), 0.0))))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.1)), bool(false))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (-64729 & (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(radians(0.1)) : injectionSwitch.y))))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(1)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(1)))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0)))))), _GLF_IDENTITY(int(1), max(int(1), int(1)))), clamp(0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) + 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (true ? 0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(1, 1)))) : _GLF_FUZZED(_injected_loop_counter))), 0 << _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z + 1, min(_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z, (_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z, min(_GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z, (false ? _GLF_FUZZED(172139u) : _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z)), _GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z))) << 0u) + 1, _GLF_IDENTITY(_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z, (_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z) | (_GLF_struct_replacement_42.GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id.z)) + 1)) < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       int i = 0;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         atomicStore(checker[_GLF_struct_replacement_26.virtual_gid], read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
      }
     else
      {
       atomicStore(checker[_GLF_struct_replacement_26.virtual_gid], read, 4, _GLF_IDENTITY(64, (64) >> 0), _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) - 0))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(false, true, false)))) || false)), false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false)))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(false, true, false)))) || false)), false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, true && (true)), false)))) || false))))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (0 ^ 1), bool(bvec3(_injected_loop_counter < (0 ^ 1), false, true)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, length(vec2(0.0, 0.0)) + (injectionSwitch.y))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
