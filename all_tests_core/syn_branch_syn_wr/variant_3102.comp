#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), max(_injected_loop_counter, _injected_loop_counter)) != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u) * workgroup_id, _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u) * workgroup_id)), (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u) * workgroup_id) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u) * workgroup_id));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))))))))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)))))) ^ (0u & _GLF_IDENTITY(105577u, (105577u) | 0u))) + subgroup_local_id, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)))))) ^ (0u & _GLF_IDENTITY(105577u, (105577u) | 0u))) + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)))))) ^ (0u & _GLF_IDENTITY(105577u, (105577u) | 0u))) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)))))) ^ (0u & _GLF_IDENTITY(105577u, (105577u) | 0u))) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)))))) ^ (0u & _GLF_IDENTITY(105577u, (105577u) | 0u))) + subgroup_local_id)), 0u)));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), ((1 & 1)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), ((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) - vec2(0.0, 0.0))))))).y, injectionSwitch.y, injectionSwitch.y))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & -89612) & -92460)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1))))]), vec2(_GLF_FUZZED(-67.07), _GLF_FUZZED(-3.7)), bvec2(false, false))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(785.669), _GLF_FUZZED((-6865.6518))), vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, true && (true)), true)))), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), vec2(1.0, 1.0) * (_GLF_FUZZED(vec2(-3.2, -7.1)))) : _GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), _GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) / vec2(1.0, 1.0)), vec2(injectionSwitch)))) + vec2(0.0, 0.0))), mix(vec2(((false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch)))[0], _GLF_FUZZED(-32.05)), vec2(_GLF_FUZZED(-8.3), _GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), max(((false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), ((false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch)))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), vec2(injectionSwitch), vec2(injectionSwitch)))), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), min(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), max(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))))), vec2(injectionSwitch), vec2(injectionSwitch))))), (_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), _GLF_IDENTITY(vec2(mat4x3(_GLF_FUZZED(vec2(-3.2, -7.1)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0)), (vec2(mat4x3(_GLF_FUZZED(vec2(-3.2, -7.1)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0))) / vec2(1.0, 1.0))))) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), clamp(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))))))), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), min(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), max(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))))), vec2(injectionSwitch), vec2(injectionSwitch))))), (_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), _GLF_IDENTITY(vec2(mat4x3(_GLF_FUZZED(vec2(-3.2, -7.1)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0)), (vec2(mat4x3(_GLF_FUZZED(vec2(-3.2, -7.1)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0))) / vec2(1.0, 1.0))))) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), clamp(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), min(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), max(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))))), vec2(injectionSwitch), vec2(injectionSwitch))))), (_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.2, -7.1)), _GLF_IDENTITY(vec2(mat4x3(_GLF_FUZZED(vec2(-3.2, -7.1)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0)), (vec2(mat4x3(_GLF_FUZZED(vec2(-3.2, -7.1)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0))) / vec2(1.0, 1.0))))) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), clamp(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))))))))), mix(vec2((vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(vec4(0.6, 5.2, 7525.0731, 3.2).ww) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(vec4(0.6, 5.2, 7525.0731, 3.2).ww) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), vec2(mat3x4(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(vec4(0.6, 5.2, 7525.0731, _GLF_IDENTITY(3.2, clamp(3.2, _GLF_IDENTITY(3.2, (_GLF_IDENTITY(3.2, (true ? 3.2 : _GLF_FUZZED(9.9)))) / 1.0), _GLF_IDENTITY(3.2, (3.2) - 0.0)))).ww) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))) + vec2(0.0, 0.0))))))[0], _GLF_FUZZED(0.9)), vec2(_GLF_FUZZED(18.51), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch))), clamp(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-3.2, mix(float(-3.2), float(_GLF_FUZZED((-3.1 / -19.00))), bool(false))), -7.1)) : vec2(injectionSwitch))), vec2(injectionSwitch), vec2(injectionSwitch)))))[1]), bvec2(false, true))), vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(vec2(injectionSwitch), (true ? _GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch))) : _GLF_FUZZED(vec2(74.47, 4.5)))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch), (false ? _GLF_FUZZED(vec2(-11.66, -6.7)) : false ? _GLF_FUZZED(vec2(-3.2, -7.1)) : vec2(injectionSwitch))))), vec2(injectionSwitch), vec2(injectionSwitch))))))).x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))), (_injected_loop_counter != _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec2(0, 0)))); _injected_loop_counter --)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (false)))))) && true)))))
                    continue;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), 0 | (~ (int(1))))))))); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))) && true))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), bool(bvec4(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(subgroup_local_id))));
 uint read = _GLF_IDENTITY(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(71366))) ^ (0));
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, ~ (~ (1)))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
    {
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(false), ! (! (bool(false))))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), false || ((bool(false)) || false))))))))))
          break;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))) * 1.0)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), abs(0.0), 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec3(0.0, 0.0, 1.0)), (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))) * 1.0)), 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), abs(0.0), 1.0))))).y, injectionSwitch.y, injectionSwitch.y))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-884.781)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
          break;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))), (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), ((1 | 1)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), false, true, true))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))) < ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min((1 << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))))), (1 << _GLF_IDENTITY(int(5), int(5))))), (1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (5))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0)), (_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))) ^ 0), 0, 0)))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, (_GLF_IDENTITY((0) << 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (0) << 0))) << 0)))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min((1 << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (1 ^ 1) ^ (_GLF_IDENTITY(int(5), int(5))))))), (1 << _GLF_IDENTITY(int(5), int(5))))), (1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 + (5))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0)), max(_GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0)), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))))) | 0), (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), max((int(0)), (int(0)))) << _GLF_IDENTITY(0, (0) << 0))) ^ 0), 0, 0)))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, (_GLF_IDENTITY((0) << 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (0) << 0))) << 0))))))) + 0), _GLF_IDENTITY(max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)), 1, 0), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(0, 0, 0)), 1, 0)) - ivec3(0, 0, 0))))), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) - 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)))) | 0), 0, 1, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)))), ((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1))))) - ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) + 0)))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), clamp(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) << 0)), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) | ((int(0))), (((int(0))) | ((int(0)))) << 0)) << _GLF_IDENTITY(0, (0) << 0)))) << 0), (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) - 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), _GLF_IDENTITY(int(5), (true ? _GLF_IDENTITY(int(5), 0 | (int(5))) : _GLF_FUZZED(57308))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)))) | 0), 0, 1, _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)))), ((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), clamp(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))) - (0 | 0)), int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))) + 0)))), 0, 1, 1))))) - ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) + 0)))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), clamp(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) << 0)), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) | ((int(0))), (((int(0))) | ((int(0)))) << 0)) << _GLF_IDENTITY(0, (0) << 0)))) << 0)) - 0)), (_GLF_IDENTITY(max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)), 1, 0), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(0, 0, 0)), 1, 0)) - ivec3(0, 0, 0))))), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) - 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)))) | 0), 0, 1, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)))), ((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1))))) - ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) + 0)))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), clamp(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) << 0)), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) | ((int(0))), (((int(0))) | ((int(0)))) << 0)) << _GLF_IDENTITY(0, (0) << 0)))) << 0), (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) - 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), _GLF_IDENTITY(int(5), (true ? _GLF_IDENTITY(int(5), 0 | (int(5))) : _GLF_FUZZED(57308))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)))) | 0), 0, 1, _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)))), ((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), clamp(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))) - (0 | 0)), int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))) + 0)))), 0, 1, 1))))) - ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) + 0)))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), clamp(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) << 0)), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) | ((int(0))), (((int(0))) | ((int(0)))) << 0)) << _GLF_IDENTITY(0, (0) << 0)))) << 0)) - 0)), ~ (~ (max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) >> 0)) ^ 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)), 1, 0), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(0, 0, 0)), 1, 0)) - ivec3(0, 0, 0))))), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) + _GLF_IDENTITY(0, 0 ^ (0)))), (int(5)) - 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)))) | 0), 0, 1, 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)))) >> (ivec4(0, 0, 0, 0) | ivec4(0, 0, 0, 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1))), ~ (~ (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) | (0))))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1))))))) - ivec4(0, 0, 0, 0)))) - ivec4(0, 0, 0, 0)) << _GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(0, (0) << 0), 0, 0), ~ (~ (_GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(0, (0) << 0), 0, 0), (_GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(0, (0) << 0), 0, 0), ~ (~ (ivec4(0, _GLF_IDENTITY(0, (0) << 0), 0, 0))))) + ivec4(0, 0, 0, 0))))))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) + 0)))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), clamp(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) << 0)), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) | (_GLF_IDENTITY((int(0)), int(ivec2((int(0)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (((int(0))) | ((int(0)))) << 0)) << _GLF_IDENTITY(0, (0) << 0)))) << 0), (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) - 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, 0 | (5)))) ^ 0), _GLF_IDENTITY(int(5), (true ? _GLF_IDENTITY(int(5), 0 | (int(5))) : _GLF_FUZZED(57308))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << _GLF_IDENTITY(0, (0) << 0))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)))))) | 0), 0, 1, _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), 0, 1, 1)))), ((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), min(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), _GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) / _GLF_IDENTITY(1, max(1, 1))), 0))), 0, 1, 1)) | (ivec4(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), 1, 1))), 0)), clamp(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))) - (0 | 0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0))) | 0), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, (5) / 1), 0)), (int(ivec2(_GLF_IDENTITY(5, (5) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) - 0)))) | 0)))) + 0)))), 0, 1, 1))))) - ivec4(0, 0, 0, 0)) << ivec4(0, 0, _GLF_IDENTITY(0, (0) - 0), 0))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), (int(ivec3(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) + 0)))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), clamp(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) << 0)), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 0))), int(5)))))))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) | ((int(0))), (((int(0))) | ((int(0)))) << 0)) << _GLF_IDENTITY(0, (0) << 0)))) << 0)) - 0)))))) + 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec4((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, true && (true)))), true && (bool(bvec4((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))) && true)))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            break;
           do
            {
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))
          return;
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], 4, 64, 2);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 ^ 0))), int(ivec4(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 ^ 0))), 0, 1, 0))))) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))) || false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ((0 | 0) | 0) ^ (_injected_loop_counter)), max(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, true)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((8395.8120 / 436.999)), _GLF_FUZZED(-842.954)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   do
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 & 1))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          break;
                         return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1423.5207)), float(injectionSwitch.y), bool(true)))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), ! (! (! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), true)))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), false), true)))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), false), _GLF_IDENTITY(true, ! (! (true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), false), _GLF_IDENTITY(true, ! (! (true))))))))))), ! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), false), true))))))))), false)))))))))))))), true, false))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        break;
                       continue;
                      }
                    }
                   else
                    {
                    }
                  }
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-70.83)), bool(false))) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-70.83)), bool(false))) > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)));
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       read = atomicLoad(buf[virtual_gid], 4, 64, 2);
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                continue;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (true))), true))))), true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), true))))))) && (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (true))), true))))) && (false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (true))), true))))) && (false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), bool(bvec3(bool(bvec4((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (true))), true))))) && (false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), false || ((_GLF_IDENTITY(true, ! (! (true)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) || false), true), true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)))))))))))), true)))))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true)))))))))), true)))))))), false, false))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false)), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))), false, false)))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), true), true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)), (injectionSwitch.x > injectionSwitch.y)), true), true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))))), true, true))), true)))))) || false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 | 0))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                  }
                }
               return;
               if(_GLF_DEAD(false))
                return;
              }
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) + 0.0), 1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, sin(0.0), 0.0, 1.0))), 0.0, 0.0)), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0)), exp(0.0))))) > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false || (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bool(true)))), bool(bvec4(_GLF_DEAD(false), false, false, false)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))), false || (bool(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))))))))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))), true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), false, true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), false, true)))))) || false)) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY((-3199 & (0 | 0)), max(_GLF_IDENTITY((-3199 & (0 | 0)), ((-3199 & (0 | 0))) | 0), (-3199 & (0 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2226.5807)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(sign(-5.8)))), max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), false, false, false))))), false))));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x, mix(float(_GLF_FUZZED(376.510)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x), bool(true))))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), (false ? _GLF_FUZZED(5433.4467) : _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) - 0));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y) && true)))))))
    return;
  }
 else
  {
  }
}
