#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH(0))
    {
     case 80:
     for(     mat2x4(5096.6675, -6271.4841, -82.25, -4.0, 5.0, -5.6, -751.293, 28.99);
 (6.4 > fma(-76.35, 9.5, -86.08)); uintBitsToFloat(min(subgroup_size, subgroup_size)))
      {
       (mat4x3(-0.6, -8.4, -7.3, 607.227, 3239.6847, -196.075, -103.605, 787.426, -5.8, -667.913, -707.120, -6.4) - clamp(9935.0933, 41.79, 4865.2924));
       ivec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
       mat3x4(291.852, -22.23, 25.84, 33.62, 62.83, 653.322, 8713.8481, -6.0, -3.5, -8.2, -96.74, 479.990);
      }
     case 0:
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 29:
     subgroup_local_id;
     case 18:
     uint _GLF_SWITCH_1_0v[68];
     case 0:
     case 91:
     case 54:
     case 45:
     case 10:
     case 11:
     case 59:
     case 75:
     case 65:
     case 47:
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     break;
     case 67:
     for(uint _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v[60]; (mat4x3(-3.4, -8517.3107, -576.921, 839.335, -21.25, -1.6, -2.0, -109.604, -670.333, -592.452, -6.7, -2.3) == mat4x3(-3990.1839, 4.6, 2607.6725, 5.6, 4104.3164, 909.626, 6.2, -93.19, -22.46, 342.767, -230.578, -1.7)); ivec4(15731, -43002, 109, 50685))
      {
       subgroup_local_id;
       for(       uvec3(172445u, 66505u, 175964u);
 false; ivec3(-57798, 79768, -27779))
        {
         for(ivec3 _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v; (bvec2(false, true) != bvec2(false, false)); -33223)
          {
           mat3x2 _GLF_SWITCH_1_5v[85], _GLF_SWITCH_1_6v[14], _GLF_SWITCH_1_7v;
           mat2x3 _GLF_SWITCH_1_8v;
           mat2x4(mat4x3(-7.9));
           mat4x2 _GLF_SWITCH_1_9v;
           _GLF_SWITCH_1_3v;
           bvec3(true, false, true);
           mat3x2 _GLF_SWITCH_1_10v, _GLF_SWITCH_1_11v;
           true;
           mat2x4 _GLF_SWITCH_1_12v;
          }
         if((virtual_gid != read))
          {
           uvec2 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v[43];
           mat4x3(mat3x4(1.9, 2.1, -9.6, 21.15, 3998.0200, 7.7, 7.3, -410.851, -77.86, 4635.5146, 38.26, -5.4));
           mat4x3 _GLF_SWITCH_1_16v;
           ivec3(47383, -11858, 41511);
           uvec4 _GLF_SWITCH_1_17v;
           ;
           (-88515 | ivec2(-25393, -58630));
           mat2x3 _GLF_SWITCH_1_18v[35], _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v;
           mat4x3 _GLF_SWITCH_1_21v[48], _GLF_SWITCH_1_22v, _GLF_SWITCH_1_23v;
          }
         else
          {
          }
         (mat2(-0.8, -8806.8385, 59.54, 1.3) * mat3x2(-75.02, -7.4, 8173.6104, 402.684, 1132.9220, 766.670));
         if((vec4(304.871, -573.907, 4.9, -8.5) != mat3x4(60.09, 527.756, 632.300, -10.58, -6747.3128, 1.8, -8.2, -3.5, -96.98, -4.3, -156.760, 5730.2221)[1]))
          {
           mat2(3703.4763, 424.315, 600.311, -64.78);
           uvec3(118543u, 184365u, 193933u);
           bitfieldReverse(ivec2(79712, -22372));
           injectionSwitch;
           (uvec3(126984u, 174024u, 133188u) - uvec3(57930u, 186263u, 72182u));
           mat4x2(127.167, 6.4, -3092.1319, 0.3, -7.1, -3.7, 76.97, 4369.0902);
           ;
           findLSB((- ivec2(21196, -99262)));
           uvec4 _GLF_SWITCH_1_24v;
          }
        }
       mat2x3(-97.04, 50.03, 5.7, -62.46, -4.3, -1.9)[0];
       vec3 _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v, _GLF_SWITCH_1_27v;
       vec3 _GLF_SWITCH_1_28v, _GLF_SWITCH_1_29v;
       uvec3 _GLF_SWITCH_1_30v;
       mat4(-70.05, 8932.7997, -6106.0259, -66.36, 92.78, 3659.7939, -4.2, 9.1, 2.2, 92.58, -5358.0108, 8.4, 5.0, -4.8, -659.347, 9.8);
      }
     default:
     1;
    }
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
