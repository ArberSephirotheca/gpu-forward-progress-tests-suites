#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 bool _f0;
 uint num_workgroup;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_7 {
 uint workgroup_id;
 bvec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 mat3 _f1;
 bvec4 _f2;
 uint _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 int _f3;
 mat3 _f4;
 ivec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 uvec3 _f1;
 uvec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 mat2x3 _f1;
 bvec2 _f2;
 _GLF_struct_2 _f3;
 vec2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 mat4x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 ivec3 _f1;
 _GLF_struct_0 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 int _f1;
 uint subgroup_local_id;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 mat2x4 _f4;
 float _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z = subgroup_size;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_1(mat3(1.0), ivec3(1), _GLF_struct_0(bvec3(true), mat4x2(1.0), bvec2(true))), 1, gl_SubgroupInvocationID, _GLF_struct_4(uvec3(1u), mat2x3(1.0), bvec2(true), _GLF_struct_2(mat2x3(1.0), uvec3(1u), uvec3(1u), mat3x2(1.0)), vec2(1.0), _GLF_struct_3(ivec2(1), mat4x2(1.0), ivec3(1), 1, mat3(1.0), ivec2(1), mat2(1.0))), _GLF_struct_5(ivec4(1), mat3(1.0), bvec4(true), 1u, bvec3(true)), mat2x4(1.0), 1.0);
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.y = _GLF_struct_replacement_6.subgroup_local_id;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_8(true, gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.x = _GLF_struct_replacement_9._f0.num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(gl_WorkGroupID.x, bvec4(true), true);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_7.workgroup_id;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.y;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z + ((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z);
 do
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1 < GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_base.z)
  {
   int i = 0;
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
