#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) * 1) != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)), _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false)), bool(bvec3(false, true, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)), _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false)), bool(bvec3(false, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)), _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false)), bool(bvec3(false, true, true))))) || false), false, false, true))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true))) && true)) && true), _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false)), _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), bool(bvec2(_GLF_IDENTITY(((false)), false || (((false)))), false))) && true) || false) || (false)) || false)), bool(bvec3(false, true, true)))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))), (! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false)), bool(bvec3(false, true, true))))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), 0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), 0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (2281 & 0), 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-7.6)), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x))), bool(true))) > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.3)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y) && true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)) > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)) > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), false, false))))), ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)) > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93)), (distance(vec4(7.9, -6189.7492, 7.6, -18.37), vec4(-7.8, 2103.6185, 58.18, -94.93))) - 0.0)) : injectionSwitch.x)) > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), false, false)))))) && true)))))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))) || false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), max(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID))[1], _GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (false ? _GLF_FUZZED(44707) : 2))], clamp(_GLF_IDENTITY(gl_WorkGroupID[2], (gl_WorkGroupID[2]) >> 0u), _GLF_IDENTITY(gl_WorkGroupID[2], ~ (~ (_GLF_IDENTITY(gl_WorkGroupID[2], (gl_WorkGroupID[2]) ^ (0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (2u) / 1u)))))))), _GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(121167u, (121167u) | _GLF_IDENTITY((121167u), ~ (~ ((121167u))))), 157797u, 70375u)) : gl_WorkGroupID))) | (gl_WorkGroupID))) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) / 1u), 0u)), 0u, 0u))))[2], 0u, 1u, 0u)), 1u * (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(121167u, (121167u) | _GLF_IDENTITY((121167u), ~ (~ ((121167u))))), 157797u, 70375u)) : gl_WorkGroupID))) | (gl_WorkGroupID))) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) / 1u), 0u)), 0u, 0u))))[2], 0u, 1u, 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(121167u, (121167u) | _GLF_IDENTITY((121167u), ~ (~ ((121167u))))), 157797u, 70375u)) : gl_WorkGroupID))) | (gl_WorkGroupID))) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) / 1u), 0u)), 0u, 0u))))[2], 0u, 1u, 0u)))))))))))))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) / 1u)), ~ (~ ((_GLF_IDENTITY(0u, (0u) / 1u))))) << 0u), (false ? _GLF_FUZZED(subgroup_local_id) : (workgroup_size) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)))) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)) | (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (false ? _GLF_FUZZED(103925u) : ((workgroup_base)) | (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) ^ 0u) + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))), uint(uvec2(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicCompSwap(workgroup_size, num_workgroup, workgroup_base)))) ^ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicCompSwap(workgroup_size, num_workgroup, workgroup_base)))) ^ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), 1u))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))) | (subgroup_id * subgroup_size))))) | (subgroup_id * subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) / 1), int(ivec4(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), 1, 0, 1)))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53996))), (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))))))), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) << 0)))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (~ (1)) ^ 0)))), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (~ (1)) ^ 0)))), 1 * (~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (~ (1)) ^ 0))))))))), min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))))))), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size)) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u | (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size)) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))) * 1u)), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u))) | ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), max(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u))), _GLF_IDENTITY((((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u))) | ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u)))) ^ 0u, ((((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u))) | ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u)))) ^ 0u) | ((((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u))) | ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size) * 1u)))) ^ 0u)))) | 0u), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1))))) | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, 0), (ivec4(1, 0, 1, 0)) >> ivec4(0, 0, 0, 0)))), 1))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(virtual_gid))))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1)))), min(1, _GLF_IDENTITY(1, (1) / 1)))))) % subgroup_size, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1)))), min(1, _GLF_IDENTITY(1, (1) / 1)))))) % subgroup_size)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))), max(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, 1)), (_GLF_IDENTITY(1, 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)))))) | ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) >> 0u)))))))), 0u + (((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)))) | 0))) % subgroup_size, _GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), 0u ^ (_GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) ^ 0)))) % subgroup_size : _GLF_FUZZED(virtual_gid)), clamp((_GLF_IDENTITY(true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid), ~ (_GLF_IDENTITY(~ (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), clamp(~ (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), ~ (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), ~ (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))))))), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 1u))))) : _GLF_FUZZED(virtual_gid))))))))))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))) >> (0 << _GLF_IDENTITY(int(2), int(2))))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) >> 0u)))))))), 0u + (((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), ~ (~ (_GLF_IDENTITY(1, min(1, 1))))))), min(1, 1))))) % subgroup_size, _GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), 0 ^ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), 0u ^ (_GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), clamp((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) + (0 >> _GLF_IDENTITY(int(2), int(2))))))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))))))))))))))), ((_GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY((_GLF_FUZZED(virtual_gid)), uint(uvec4((_GLF_FUZZED(virtual_gid)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u)))))))), 0u + (((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))) % subgroup_size, _GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB((72078u & 57991u))) : 1)), 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), 0u ^ (_GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), clamp((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)))))))))))))))) - 0u), (_GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)), 1), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1)), 1)) / ivec2(1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) >> 0u)))))))), 0u + (((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1 * (1))) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))), min(1, 1))))) % subgroup_size, _GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), min(~ ((1)), ~ ((1)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), 0u ^ (_GLF_IDENTITY((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), clamp((true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid)), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> (0 | (0 << _GLF_IDENTITY(int(4), int(4))))), 1))))) % subgroup_size : _GLF_FUZZED(virtual_gid))))))))))))))))) | 0u) >> 0u), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(((1)) | 0, min(_GLF_IDENTITY(((1)) | 0, (((1)) | 0) + 0), ((1)) | 0))) | (_GLF_IDENTITY(1, min(1, 1))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))) : _GLF_FUZZED(-38444))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))) : _GLF_FUZZED(-38444)))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))))), (max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, min(1, 1)))), (false ? _GLF_FUZZED(69961) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(69961), (_GLF_FUZZED(69961)) | (_GLF_IDENTITY(_GLF_FUZZED(69961), int(ivec2(_GLF_FUZZED(69961), 1))))) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 | (1))))))), ~ (_GLF_IDENTITY(~ ((false ? _GLF_IDENTITY(_GLF_FUZZED(69961), (_GLF_FUZZED(69961)) | (_GLF_IDENTITY(_GLF_FUZZED(69961), int(ivec2(_GLF_FUZZED(69961), 1))))) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 | (1)))))))), min(~ ((false ? _GLF_IDENTITY(_GLF_FUZZED(69961), (_GLF_FUZZED(69961)) | (_GLF_IDENTITY(_GLF_FUZZED(69961), int(ivec2(_GLF_FUZZED(69961), 1))))) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 | (1)))))))), ~ ((false ? _GLF_IDENTITY(_GLF_FUZZED(69961), (_GLF_FUZZED(69961)) | (_GLF_IDENTITY(_GLF_FUZZED(69961), int(ivec2(_GLF_FUZZED(69961), 1))))) : _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 | (1))))))))))))) : _GLF_FUZZED(-38444))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, min(1, 1))), ((1) | (_GLF_IDENTITY(1, min(1, 1)))) | ((1) | (_GLF_IDENTITY(1, min(1, 1)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))))) >> 0))) % subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) | (_GLF_FUZZED(virtual_gid))))))))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size, (true ? (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(bitfieldExtract(subgroup_size, _GLF_IDENTITY(52006, max(_GLF_IDENTITY(52006, clamp(52006, 52006, _GLF_IDENTITY(52006, (52006) | 0))), 52006)), -15606)))), (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), (1) | (_GLF_IDENTITY(1, min(1, 1))))) % subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))) | (virtual_gid)))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(mix(_injected_loop_counter, -91606, true)))) != _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), min(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))))), _GLF_IDENTITY((0 | 0) + ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)))), ((_GLF_IDENTITY(0, (0) << 0) | 0) + ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))))) / 1))); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), clamp(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1)))) - 0u), _GLF_IDENTITY(uint(1), (uint(1)) - 0u), _GLF_IDENTITY(uint(1), (uint(1)) - 0u))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) + 0), _GLF_IDENTITY(64, (64) >> 0), 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) - 0), 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) >> ((0u & 129664u) & 178982u)) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (uint(2u)) << 0u), uint(_GLF_IDENTITY(2u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(2u, min(2u, 2u)))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(subgroup_local_id, 0u, 1u, 1u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))))) | (0u)), 1u, 1u)), (0u | 0u) | (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) | (0u)), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) | (0u))) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) | (0u)))), 1u, 1u)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) ? _GLF_FUZZED((subgroup_size - workgroup_size)) : _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), 1u * (_GLF_IDENTITY(0u, (0u) | (0u)))), 1u, 1u)), (0u | 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) | (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), max(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))))) | (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)))))), (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))) | (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), max(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))))) | (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))))))) >> (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))), (true ? (~ (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (0u | 0u) | (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 1u * (0u)))), 1u, 1u))) | (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), max(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u))))) | (uint(uvec4(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0u, (0u) >> 0u))), (0u) | (0u)), 1u, 1u)))))))))) : _GLF_FUZZED(next_virtual_gid))), ((~ (_GLF_IDENTITY(uint(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)), 1u, 1u)), (0u | 0u) | (uint(uvec4(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : (0u))) | (0u)), 1u, 1u))))))) >> 0u))))))) + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, (false) && true)), true, true))))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, (false) && true)), true, true))))), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, (false) && true)), true, true))))), false, false), false)), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), false))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) && true), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! _GLF_IDENTITY((false), ! (! ((false)))), false), true, true))))), false, false), false))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, ! (! (false)))), true, true))))), _GLF_IDENTITY(false, (false) || false), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(! (false), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(! (false), false), true, false)), false, false)))), true, true))))), false, _GLF_IDENTITY(false, true && (false))), false))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))))), false), _GLF_IDENTITY(true, false || (true)), true))))), _GLF_IDENTITY(false, true && (false)), false), false))))), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))) || false, ! (! ((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))) || false)))))), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), false), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), false))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), false), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), false))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), false), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, _GLF_IDENTITY(true, ! (! (true))))), false)))))))))), false, true)))))))), false, false), false))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(false, (false) || false)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), false), true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))))))))) || false), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), false))))), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, _GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))), ((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))) && true) || false))), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true)))), true && (bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), _GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true))))))), false, false), false))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), false), true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), true && ((false)))) || false), false), bvec2(bvec4(bvec2(! (false), false), true, true))))), false, false), false))))), true))))), true))), true)))))))), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), ! (! (_GLF_IDENTITY((false), false || ((false)))))))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-72526) : _GLF_IDENTITY(int(2), (int(2)) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-72526) : _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ~ (~ ((int(2))))) >> 0)))), int(int(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-72526) : _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, min(2, 2)))) >> 0)))))))) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) | (1))) | (1 ^ 1)))), ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-72526) : _GLF_IDENTITY(int(2), (int(2)) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), (false ? _GLF_FUZZED(-72526) : _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), ~ (~ ((int(2))))) >> 0)))), int(int(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-72526) : _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, max(2, 2)))) >> 0)))))))) * _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) | (1))) | (1 ^ 1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) | (1))) | (1 ^ 1)) | 0))))) << _GLF_IDENTITY(0, (0) + 0)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), ~ (~ (~ (_GLF_IDENTITY(0, ~ (~ (0))))))))) ^ 0), 1, 1)))))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, bool(bvec2(false, false))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             continue;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))), true))))))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))))))), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))))), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))))), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))))), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false)))), true))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))), true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))))))))))), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))))), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)))))), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)))) && true)))))), false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)))) && true)))))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)))) && true)))))), false)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)))) && true)))))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)))) && true)))))), false)))), true))))))))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))) && true)), true, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)), false || (bool(false)))))), ! (! (_GLF_WRAPPED_LOOP(false)))), true, true, true))) || false)));
     if(_GLF_DEAD(false))
      return;
     int i = 0;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     do
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))), (float(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0))))) / 1.0)) < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 13905)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), false || (_GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), ! (! ((! (true)))))) && true))))), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))) && true))
                  break;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), false || ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), false || ((false))), _GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), false)))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), false || ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), false || ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), true))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bvec4(_GLF_DEAD(false), false, true, false)))) || false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(dot(vec4(-4338.8594, 3.8, -5850.6286, -6344.0317), vec4(-8689.8078, 3.1, -8.0, -524.727))) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))) && true))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) || false)))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false), false), false)))))))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), true && (! (! (_GLF_IDENTITY(false, ! (! (false)))))))) || false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, log(cos(0.0)), 1.0, cos(0.0), 1.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, log(cos(0.0)), 1.0, cos(0.0), 1.0, 0.0, 0.0))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, log(cos(0.0)), 1.0, cos(0.0), 1.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, log(cos(0.0)), 1.0, cos(0.0), 1.0, 0.0, 0.0)))))))).y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), false, true))))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))))))))))))), false, false, false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              break;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(false || (_injected_loop_counter < 1), false || _GLF_IDENTITY((false || (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))), ((false || _GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), false || ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))))))) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || _GLF_IDENTITY((_injected_loop_counter < 1), false || ((_injected_loop_counter < 1))), false || (false || _GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (false ? _GLF_FUZZED(11967) : _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true)))))))))))))), true && (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || ((_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), (! (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) || false)) || false))))))), true && (bool(_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 | (1))), false || (_GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))), ((_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)))) && true))))))))))))))))))))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), bool(bvec4(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false)) || false)))))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false || (_injected_loop_counter < 1), false || (false || (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))))), true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), bool(bool(bool(bvec4(_GLF_DEAD(false), true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), bool(bool(bool(bvec4(_GLF_DEAD(false), true, false, true))))))))) || false)))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)))) && true), false || (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1723.2053)))))))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))
                  {
                   for(int _injected_loop_counter = (-22005 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 & -29694); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), true, true, false))))))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(8.1, 6508.3124)) : injectionSwitch)).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(8.1, 6508.3124)) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(8.1, 6508.3124)) : injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(8.1, 6508.3124)) : injectionSwitch)).x > injectionSwitch.y)))) && true))))), false, true))), true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(sin(0.0), float(mat3x2(_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(623.452)), float(sin(0.0)), bool(true))), abs(1.0), determinant(mat2(sqrt(0.0), 1.0, 0.0, 0.0)), 1.0, determinant(mat4(1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))).x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-37207) : int(5))))) >> _GLF_IDENTITY(int(5), int(5))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), (int(8)) << 0), int(_GLF_IDENTITY(8, (8) | 0))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
}
