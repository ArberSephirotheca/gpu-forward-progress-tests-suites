#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), ! (! (((false))))))) && true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED((_injected_loop_counter - ivec2(12527, -28055).y)))), (_injected_loop_counter ++) - 0)) / 1)) / 1))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(mat3x4(vec2(vec2(injectionSwitch)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(610.672) : 0.0))), float(_GLF_FUZZED(vec3(-6.1, -4028.1402, -9.2).s)), bool(false))))), 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat3x4(vec2(vec2(injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))))).x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(mat3x4(vec2(vec2(injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat3x4(vec2(vec2(injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(_GLF_IDENTITY(mat3x4(vec2(vec2(injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat3x4(vec2(vec2(injectionSwitch)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-29.80)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))))).x > injectionSwitch.y)))))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bool(true)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              continue;
            }
           else
            {
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != (1 ^ 1)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -78543)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))) - 0.0))).y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_ONE(1.0, injectionSwitch.y)) + sin(0.0)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(int(4)))))), min(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), ! (! (! ((_GLF_DEAD(false))))))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true, true))))))), true, true, false)), (bool(bvec4(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), true, true, false))) || false))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) - 0.0) : _GLF_FUZZED(4344.0343))), 0.0))) / 1.0), 0.0, sqrt(1.0))), (vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, sqrt(1.0)))) - vec2(0.0, 0.0)), (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0))), (vec2(mat3(injectionSwitch, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.1) : 0.0)) : _GLF_FUZZED(-67.89))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) - 0.0))))) - vec2(0.0, 0.0))) + _GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0), vec2(0.0, 0.0))))).y))))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(atomicAdd(subgroup_local_id, workgroup_id)) : workgroup_size)) * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-55143) : _injected_loop_counter)) != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u, max(1u, 1u)) ^ 0u), 1u, 0u)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), min((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, uint(uvec3((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))) - 0u, 0u, 1u)))), subgroup_local_id, subgroup_local_id)) + 1), uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))), (uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))) | (uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))))))) : _GLF_FUZZED(virtual_gid), ~ (~ (_GLF_IDENTITY(true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, uint(uvec3((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))) - 0u, 0u, 1u)))), subgroup_local_id, subgroup_local_id)) + 1), uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))), (uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))) | (uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))))))) : _GLF_FUZZED(virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, uint(uvec3((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))) - 0u, 0u, 1u)))), subgroup_local_id, subgroup_local_id)) + 1), uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))), (uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))) | (uvec4((subgroup_local_id + 1), (1u ^ 0u), _GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(virtual_gid))), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))))))) : _GLF_FUZZED(virtual_gid))))))))) >> 0u)), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_id) : 0u), ~ (~ ((false ? _GLF_FUZZED(workgroup_id) : 0u)))))), (uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_id) : 0u), ~ (~ ((false ? _GLF_FUZZED(workgroup_id) : 0u))))))) ^ (uvec4(0u, 0u, 0u, 0u) | uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), uint(uint((subgroup_local_id)))) - 0u), subgroup_local_id, subgroup_local_id)) + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u))))) : _GLF_FUZZED(virtual_gid)))) >> _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | 0u), 0u))))) * 1u) >> (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(_GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, uint(uvec4(4u, 1u, 0u, 0u))), 4u)), (true ? 4u : _GLF_FUZZED(95523u)))))), uint(4u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))))) + 1), ((subgroup_local_id + 1)) / _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), (1u) - 0u)))) % subgroup_size), max((_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id + 1, (0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, uint(uint(4u)))))) ^ (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | (1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0))), 1))), (1u ^ 0u), 1u, 0u)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u, 1u * (1u)) ^ 0u), 1u, 0u)))) >> 0u)) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (true ? (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u, 1u * (1u)) ^ 0u), 1u, 0u)))) >> 0u)) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) : _GLF_FUZZED((workgroup_id * workgroup_base))))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) >> 0, clamp((1) >> 0, _GLF_IDENTITY((1) >> 0, ((1) >> 0) | 0), (1) >> 0)), max((1) >> 0, _GLF_IDENTITY((1) >> 0, max((1) >> 0, (1) >> 0))))), 1)), max(1, 1)), int(ivec3(_GLF_IDENTITY(1, max(1, 1)), 1, 1)))))) | (1)))) / _GLF_IDENTITY(1u, (1u) - 0u)))) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1), (_GLF_IDENTITY(1u, ~ (~ (1u))) ^ 0u), 1u, 0u)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u)), clamp((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u)), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), clamp(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) >> 0), clamp(1, 1, 1), clamp(1, 1, 1)))), _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u)), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u)))) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, 0u ^ (1u ^ 0u))) - 0u)), 1u, 0u)))) >> 0u, 0u | ((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, 0u ^ (1u ^ 0u))) - 0u)), 1u, 0u)))) >> 0u)))) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) | ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, 0u ^ (1u ^ 0u))) - 0u), (_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, 0u ^ (1u ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (true ? uint(uint(0u)) : _GLF_FUZZED(subgroup_id))))))) - 0u)) | 0u)), 1u, 0u)))) >> 0u)) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)), (uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u))) * 1u))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, 0u ^ (1u ^ 0u))) - 0u)), 1u, 0u)))) >> 0u)) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, 0u ^ (1u ^ 0u))) - 0u)), 1u, 0u)))) >> 0u)) >> (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) | 0u)))) >> 0u)))) - 0u), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) >> 0u) - 0u)))) % subgroup_size), 0u ^ ((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(clamp((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (false ? _GLF_FUZZED(atomicMax(subgroup_base, subgroup_id)) : subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)), (clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0))) * 1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)), clamp(clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)), clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)), (clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0))) - 0))), clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)))))))))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))), (1u ^ 0u), 1u, 0u)))) >> _GLF_IDENTITY(0u, ~ (~ (0u))), clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), ~ (~ ((1u ^ 0u)))), 1u, 0u)))) >> 0u, ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), ~ (~ ((1u ^ 0u)))), 1u, 0u)))) >> 0u))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((false ? 178833u : 23414u) & 0u))), (uint(uvec4((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)), ~ (_GLF_IDENTITY(~ (uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u))), (~ (uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) ^ 0u))))) >> 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((false ? 178833u : 23414u) & 0u)))) | 0u))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), max(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec2(clamp(1, 1, 1), 0))), clamp(1, 1, 1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(uint(uvec2(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(uvec2(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(uvec2(subgroup_local_id, uint(_GLF_ONE(1.0, injectionSwitch.y))))))) + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (1u ^ 0u) << 0u)), 1u, 0u)))) >> _GLF_IDENTITY(0u, (0u) * 1u))) >> (_GLF_IDENTITY(0u, max(0u, 0u)) >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / _GLF_IDENTITY(1u, (1u) - 0u))), (_GLF_IDENTITY(clamp((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (false ? _GLF_FUZZED(atomicMax(subgroup_base, subgroup_id)) : subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))), 1u, 0u)))) >> 0u, clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), ~ (~ ((1u ^ 0u)))), 1u, 0u)))) >> 0u, 0u | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), ~ (~ ((1u ^ 0u)))), 1u, 0u)))) >> 0u, ((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), ~ (~ ((1u ^ 0u)))), 1u, 0u)))) >> 0u) / 1u))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), min((1u ^ 0u), (1u ^ 0u))), 1u, 0u)))) >> 0u, _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(false ? 178833u : 23414u, (false ? 178833u : 23414u) >> 0u)) & 0u))), (uint(uvec4((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((false ? 178833u : 23414u) & 0u)))) | 0u))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))), max(0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (1u ^ 0u) << _GLF_IDENTITY(0u, (0u) * 1u))), 1u, 0u)))) >> _GLF_IDENTITY(0u, (0u) * 1u))) >> (_GLF_IDENTITY(0u, max(0u, 0u)) >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / _GLF_IDENTITY(1u, (1u) - 0u))), 0u + (clamp((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (false ? _GLF_FUZZED(atomicMax(subgroup_base, subgroup_id)) : subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, _GLF_IDENTITY(1, (1) - 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, clamp((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), _GLF_IDENTITY((1u ^ 0u), ~ (~ ((1u ^ 0u)))), 1u, 0u)))) >> 0u, (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u, ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> 0u))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), uint(uvec4((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))), (1u ^ 0u), 1u, 0u)))) >> 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((false ? 178833u : 23414u) & 0u))), (uint(uvec4((_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (1u ^ 0u), 1u, 0u)))) >> _GLF_IDENTITY(0u, (0u) - ((180285u ^ 169227u) & 0u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((false ? 178833u : 23414u) & 0u, clamp((false ? 178833u : 23414u) & 0u, (false ? 178833u : 23414u) & 0u, (false ? 178833u : 23414u) & 0u)))))) | 0u))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec4((subgroup_local_id + 1), (_GLF_IDENTITY(1u ^ 0u, (1u ^ _GLF_IDENTITY(0u, 1u * (0u))) << 0u)), 1u, 0u)))) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, max(_GLF_IDENTITY((0u) * 1u, 0u + ((0u) * 1u)), (0u) * 1u))))) >> (_GLF_IDENTITY(0u, max(0u, 0u)) >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1)) / _GLF_IDENTITY(1u, (1u) - 0u)))))) - 0u)) % subgroup_size)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(95.51)), vec2(_GLF_FUZZED(945.689), (injectionSwitch)[1]), bvec2(false, true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.6))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))) || false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(95.51)), vec2(_GLF_FUZZED(945.689), (injectionSwitch)[1]), bvec2(false, true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.6))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))) || false))))) || false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-86.58) : _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) < injectionSwitch.y)), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))))) || false)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(53.23)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y)))), true, true))))))) || false)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), bool(bool(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))) || false))))))))) || false))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))) : _GLF_FUZZED(-38821))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(degrees(floor(-7.4))) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), _GLF_IDENTITY(vec3(mat4x2(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), (vec3(injectionSwitch.x, 0.0, 1.0)) / vec3(1.0, 1.0, 1.0)), 0.0, abs(tan(0.0)), 1.0, 0.0, 0.0)), vec3(mat2(vec3(mat4x2(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), (vec3(injectionSwitch.x, 0.0, 1.0)) / vec3(1.0, 1.0, 1.0)), 0.0, abs(tan(0.0)), 1.0, 0.0, 0.0)), 1.0))))))) + _GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 1.0)), max(float(vec3(injectionSwitch.x, 0.0, 1.0)), float(vec3(injectionSwitch.x, 0.0, 1.0)))))) + _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(59.24, 9083.6575).s), _GLF_FUZZED(-4.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x), float(mat4x2((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))) - 0.0), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(5004.0403) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-336.270)), bool(false))))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))) - 0.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-6.9)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) + _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))) - 0.0)))))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), mix(float(_GLF_FUZZED(-9145.0559)), float((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), bool(true))) / 1.0) > injectionSwitch.y))));
  }
 uint read = 0;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = ((-32127 * -34959) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1)))), (true ? _GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(workgroup_base))) : _GLF_FUZZED(workgroup_base)))) - 0u), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0))))) < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), vec4(mat2x4(vec4(1.0, 0.0, 0.0, 1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(float(_GLF_IDENTITY(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), vec4(mat2x4(vec4(1.0, 0.0, 0.0, 1.0), 0.0, 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), vec4(mat2x4(vec4(1.0, 0.0, 0.0, 1.0), 0.0, 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), vec4(mat2x4(vec4(1.0, 0.0, 0.0, 1.0), 0.0, 1.0, 1.0, 1.0))))))), injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (0 << _GLF_IDENTITY(int(8), int(8))) | (_injected_loop_counter ++)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
             return;
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(459.055))) > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), min(vec3(injectionSwitch.y, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), (vec3(injectionSwitch.y, 0.0, 0.0)) * vec3(1.0, 1.0, 1.0)), (vec3(injectionSwitch.y, 0.0, 0.0)) - vec3(0.0, 0.0, 0.0))))))))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         break;
        }
       break;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (-7957 & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) ^ 0)), int(_GLF_IDENTITY(5, max(5, 5))))) >> _GLF_IDENTITY(int(5), int(5))) & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, clamp(_GLF_IDENTITY(subgroup_local_id % 2, uint(_GLF_IDENTITY(uvec4(subgroup_local_id % 2, 0u, (_GLF_IDENTITY(1u ^ 0u, (1u ^ 0u) | (1u ^ 0u))), 0u), max(uvec4(subgroup_local_id % 2, 0u, (1u ^ 0u), 0u), uvec4(subgroup_local_id % 2, 0u, (1u ^ 0u), 0u))))), _GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) * 1u), _GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id % 2))))) == 0, ! (_GLF_IDENTITY(! _GLF_IDENTITY(((subgroup_local_id % 2) == 0), (((subgroup_local_id % 2) == 0)) || false), false || (! (_GLF_IDENTITY((subgroup_local_id % 2) == 0, true && _GLF_IDENTITY(((subgroup_local_id % 2) == 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((subgroup_local_id % 2) == 0))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, 4)), 64, 2);
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 read = atomicLoad(buf[virtual_gid], 4, 64, 2);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                break;
               continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ! (! (_GLF_IDENTITY((! (! (false))), ! (! ((! (! (false))))))))))) || false))), true, false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false)))), _GLF_IDENTITY(false, (false) && true) || ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false))))))) && true) || false)))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)) & (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   subgroupBarrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
