#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 vec2 _f0;
} ;

struct _GLF_struct_12 {
 mat3x2 _f0;
 uint _f1;
 mat4 _f2;
} ;

struct _GLF_struct_11 {
 ivec3 _f0;
 bvec4 _f1;
 uvec2 _f2;
 bvec4 _f3;
 mat3 _f4;
 vec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 mat3 _f1;
 bvec3 _f2;
 uvec3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_8 {
 int _f0;
 uvec2 _f1;
 uvec2 _f2;
 ivec4 _f3;
 mat3x4 _f4;
 uint workgroup_size;
 bvec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 bool _f1;
 bool _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 mat2 _f1;
 int _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 ivec2 _f1;
 int _f2;
 mat4x3 _f3;
 uvec3 _f4;
 vec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 mat4 _f1;
 bool _f2;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 uint subgroup_local_id;
 _GLF_struct_0 _f1;
 bool _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(bvec2(true), gl_SubgroupInvocationID, _GLF_struct_0(vec4(1.0)), true);
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(mat4x2(1.0), _GLF_struct_2(vec3(1.0), mat4(1.0), true), _GLF_struct_5(_GLF_struct_3(mat3(1.0)), _GLF_struct_4(mat4x2(1.0), ivec2(1), 1, mat4x3(1.0), uvec3(1u), vec2(1.0), vec2(1.0))), _GLF_struct_10(_GLF_struct_6(mat4x2(1.0), mat2(1.0), 1), _GLF_struct_7(mat4(1.0), true, true, mat2x3(1.0)), _GLF_struct_8(1, uvec2(1u), uvec2(1u), ivec4(1), mat3x4(1.0), gl_WorkGroupSize.x, bvec3(true), uvec3(1u)), _GLF_struct_9(ivec3(1), mat3(1.0), bvec3(true), uvec3(1u), vec4(1.0))), _GLF_struct_14(_GLF_struct_11(ivec3(1), bvec4(true), uvec2(1u), bvec4(true), mat3(1.0), vec3(1.0), ivec2(1)), _GLF_struct_12(mat3x2(1.0), 1u, mat4(1.0)), _GLF_struct_13(vec2(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_15._f3._f2.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_1.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_1.subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) | (int(8)))) << 0)))); _injected_loop_counter --)
        {
         if((_GLF_struct_replacement_1.subgroup_local_id % 2) == 0)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               read = atomicLoad(buf[virtual_gid], 4, 64, 2);
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               read = atomicLoad(buf[virtual_gid], 4, 64, 2);
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}
