#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 uvec4 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid;
 uvec4 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup;
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_size;
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gid;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = subgroup_size;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.x = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.w = num_workgroup;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.x = GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.w;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.z = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.z * workgroup_id;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = workgroup_base;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.y = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.w * GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.x;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.z = subgroup_base;
 uint virtual_gid = GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.y + GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.z + GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.y;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.z = virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.y + GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.z + ((GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.y + 1) % GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_sizeworkgroup_baseworkgroup_sizenum_workgroup.xyz.x);
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.w = next_virtual_gid;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.x = GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.w;
 uint read = 0;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.y = read;
 atomicStore(buf[GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.x], uint(1), 4, 64, 4);
 if((GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.y % 2) == 0)
  {
   GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.y = atomicLoad(buf[GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.z], 4, 64, 2);
  }
 else
  {
   GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.y = atomicLoad(buf[GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.z], 4, 64, 2);
  }
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       atomicStore(checker[GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnext_virtual_gid.xyz.z], GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basesubgroup_id.y, 4, 64, 4);
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
  }
}
