#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (-38304 & (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), false)))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true)))))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((23650 & 0) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, sin(sin(0.0)) + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (true ? _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u) : _GLF_FUZZED(subgroup_size)))) >> 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)) : _GLF_FUZZED(subgroup_id)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) << (0 << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))
      return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)))), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base, workgroup_base)), workgroup_base), 0u ^ (_GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base, workgroup_base)), workgroup_base), _GLF_IDENTITY((clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))), ((clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))), workgroup_base)), workgroup_base))) | 0u) * 1u)))) + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) << 0u), _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1))) % subgroup_size);
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(false, false, false)), true), bvec2(bvec3(bvec2(bool(bvec3(false, false, false)), true), true)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, true && (true)))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) - 0.0))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) - 0.0))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) - 0.0))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) - 0.0)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, 1 * (64)), min(64, 64)), 0 ^ (64)), _GLF_IDENTITY(4, (4) << 0));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (2)))) >> 0, ((_GLF_IDENTITY(2, ~ (~ (2)))) >> 0) | 0))))) == 0, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-367.640)), vec2(_GLF_FUZZED((_GLF_IDENTITY(false ? -5.1 : 4.3, min(_GLF_IDENTITY(false ? -5.1 : _GLF_IDENTITY(4.3, (4.3) / 1.0), max(_GLF_IDENTITY(false ? -5.1 : _GLF_IDENTITY(4.3, (4.3) / 1.0), (_GLF_IDENTITY(false ? _GLF_FUZZED(-877.500) : false ? -5.1 : _GLF_IDENTITY(4.3, (4.3) / 1.0), max(false ? _GLF_FUZZED(-877.500) : false ? -5.1 : _GLF_IDENTITY(4.3, (4.3) / 1.0), false ? _GLF_FUZZED(-877.500) : false ? -5.1 : _GLF_IDENTITY(4.3, (4.3) / 1.0))))), false ? -5.1 : _GLF_IDENTITY(4.3, (4.3) / 1.0))), false ? _GLF_IDENTITY(-5.1, max(-5.1, -5.1)) : 4.3)))), (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-10795) : _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(47640) : 1))))))]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))).x < injectionSwitch.y)) && ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) % _GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) - 0) - 0)) == 0)), true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id % 2, clamp(subgroup_local_id % 2, subgroup_local_id % 2, subgroup_local_id % 2))))) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((subgroup_local_id % 2) == 0)), true, _GLF_IDENTITY(false, true && (false))))), true && (! _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) && (_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(bool(bvec3((subgroup_local_id % 2) == 0, false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((subgroup_local_id % 2) == 0, false, true)), (bool(bvec3((subgroup_local_id % 2) == 0, false, true))) || false)), true && (! (_GLF_IDENTITY(bool(bvec3((subgroup_local_id % 2) == 0, false, true)), (bool(bvec3((subgroup_local_id % 2) == 0, false, true))) || false))))))))))), true, _GLF_IDENTITY(false, true && (false))))), bool(bvec2((bool(bvec3(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) && (_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(bool(bvec3((subgroup_local_id % 2) == 0, false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((subgroup_local_id % 2) == 0, false, true)), (bool(bvec3((subgroup_local_id % 2) == 0, false, true))) || false)), true && (! (_GLF_IDENTITY(bool(bvec3((subgroup_local_id % 2) == 0, false, true)), (bool(bvec3((subgroup_local_id % 2) == 0, false, true))) || false))))))))))), true, _GLF_IDENTITY(false, true && (false))))), false))))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(60.08, -5.6)))).y)) && ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), _GLF_IDENTITY(false, true && (false))))), true && (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((subgroup_local_id % 2), 1u), (false ? _GLF_FUZZED(uvec2(130638u, 135811u)) : uvec2((subgroup_local_id % 2), 1u)))), 0u ^ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2))), 1u), (false ? _GLF_FUZZED(uvec2(130638u, 135811u)) : _GLF_IDENTITY(uvec2((subgroup_local_id % 2), 1u), clamp(uvec2((subgroup_local_id % 2), 1u), uvec2((subgroup_local_id % 2), 1u), uvec2((subgroup_local_id % 2), 1u))))))))) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((subgroup_local_id % 2) == 0))), ((_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((subgroup_local_id % 2) == 0)))) && true)), true, _GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))))))))) && true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
            }
          }
        }
       return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, 0 | (2)))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(4), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) / 1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((int(5)), ((int(5))) | (_GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), ((int(5))) | ((int(5))))) | ((int(5))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))))) && true); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, max(2, 2)), 2))), _GLF_IDENTITY((_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, 2)))) ^ 0u)), (false ? _GLF_FUZZED(min(virtual_gid, num_workgroup)) : (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, 2)))) ^ 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.8)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.8)), float(injectionSwitch.y), bool(true)))), false, true, true)), (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.8)), float(injectionSwitch.y), bool(true)))), false, true, true))) || false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0), mat4x2(mat4x3(mat4x2(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0)))))).y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))))))), ((1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 1, (0 ^ 1))), 1 * (int(ivec3(int(6), 1, (0 ^ 1)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))))) / 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(bitfieldExtract(47493, int(193959u), -93146)) : _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (6) | 0), 6, 6)))) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), int(ivec2(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), 0))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (int(6)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, (6) ^ 0)))))))))) | _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), (0 >> _GLF_IDENTITY(int(7), int(7))) ^ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))))))))), ((1 ^ (_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(2), int(2))) | (1)))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 1, (0 ^ 1))), 1 * (int(ivec3(int(6), 1, (0 ^ 1)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) >> 0, int(_GLF_IDENTITY(ivec3((int(6)) >> 0, 1, _GLF_IDENTITY(0, clamp(0, 0, 0))), (ivec3((int(6)) >> 0, 1, _GLF_IDENTITY(0, clamp(0, 0, 0)))) | ivec3(0, 0, 0))))), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 + ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))) | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))))) / 1))) || false); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   subgroupBarrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))), true, false))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), (float(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.9, -651.808)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x))) - 0.0)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bool((false) && true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
