#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat3 _f0;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 bvec3 _f1;
 uint subgroup_local_id;
 mat2 _f2;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 ivec3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 bvec2 _f2;
 _GLF_struct_3 _f3;
 mat3x4 _f4;
 _GLF_struct_4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(mat2x4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), _GLF_struct_0(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, ((1) + 0) << 0))))), clamp(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) + 0)))), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) + 0)))), (false ? _GLF_FUZZED(bitfieldInsert(5417, (49735 | -35491), 98647, int(false))) : _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) + 0))))))))), bvec3(true), gl_SubgroupInvocationID, mat2(1.0)), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(ivec4(ivec3(1), 0)), ivec3(0, 0, _GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (ivec3(ivec4(ivec3(1), 0))))), max(ivec3(1), ivec3(1))), ivec3(1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, min(1, 1))), ~ (~ (ivec3(1))))))) | ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x))), bvec4(true)), _GLF_struct_2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY(min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), _GLF_IDENTITY(~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))), uvec4(1u, 1u, 1u, 1u) * (~ (~ (uvec4(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u)))), uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY((_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))))) : _GLF_FUZZED(uvec4(155759u, 78169u, 101755u, 108513u)))))) / uvec4(1u, 1u, 1u, 1u)))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u)))))) * uvec3(1u, 1u, 1u)), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))))))), uvec2(0u, 0u) ^ (min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), _GLF_IDENTITY(~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))), uvec4(1u, 1u, 1u, 1u) * (~ (~ (uvec4(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u)))), uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY((_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))))) : _GLF_FUZZED(uvec4(155759u, 78169u, 101755u, 108513u)))))) / uvec4(1u, 1u, 1u, 1u)))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), 0u)))))) * uvec3(1u, 1u, 1u)), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))))))))), (min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u)))))))), uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), 0u), ~ (~ (_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), (uvec4(uvec3(0u, 0u, 0u), 0u)) - (uvec4(0u, 0u, 0u, 0u) ^ uvec4(0u, 0u, 0u, 0u)))))))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))), uvec2(uvec3(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec2(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 1u * (1u)), 1u, _GLF_IDENTITY(1u, min(1u, 1u))))), 0u), (uvec3(uvec2(1u), 0u)) | (uvec3(uvec2(1u), 0u))), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), 0u + (uint(8u)))))))))), uvec2(uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), min(uvec4(uvec3(0u, 0u, 0u), 0u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(uvec3(0u, 0u, 0u), 0u))), (false ? _GLF_FUZZED(uvec4(9537u, 71504u, 100421u, 8626u)) : uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (~ (uvec3(0u, 0u, 0u)))))), 0u))))), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), min(uvec4(uvec3(0u, 0u, 0u), 0u), _GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), (false ? _GLF_FUZZED(uvec4(9537u, 71504u, 100421u, 8626u)) : uvec4(uvec3(0u, 0u, 0u), 0u))))), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u)))))) | uvec3(0u, 0u, 0u))))), uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))))), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))), 0u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))), 0u, 1u))))), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u), 0u), ~ (~ (uvec4(uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u))))), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) + 0u), 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | (0u))) + 0u)), 0u)))))))), uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ uvec3(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(_GLF_IDENTITY(0u, (0u) << 0u), 0u, 0u), 0u), ~ (~ (uvec4(uvec3(0u, 0u, 0u), 0u)))))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), max(_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (uvec3(uvec2(1u), 0u)) | uvec3(0u, 0u, 0u)), uvec3(uvec2(1u), 0u))), (_GLF_IDENTITY(uvec3(uvec2(1u), 0u), (_GLF_IDENTITY(uvec3(uvec2(1u), 0u), ~ (~ (uvec3(uvec2(1u), 0u))))) | (_GLF_IDENTITY(uvec3(uvec2(1u), 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(uvec2(1u), 0u), 1u)), (uvec3(uvec4(uvec3(uvec2(1u), 0u), 1u))) * uvec3(1u, 1u, 1u)))))) ^ uvec3(0u, 0u, 0u)))))) >> uvec2(0u, 0u))))))) ^ uvec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, false))), _GLF_struct_3(uvec4(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) >> 0u)))))))), mat3x4(1.0), _GLF_struct_4(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.3)), bool(false))))));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_injected_loop_counter ++)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(clamp(71641, 57798, 18775)) : _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_injected_loop_counter) : int(1)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true))))))))))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 break;
                }
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id));
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(0), int(0))) ^ (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0, _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(95630))) * (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(true, bool(bool(true))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec3(bool(bvec4(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(62.90, 2429.5004, true)) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 continue;
                }
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), max(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (false))) && true)))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))));
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_5._f0._f1.subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_struct_replacement_5._f0._f1.subgroup_local_id, (_GLF_struct_replacement_5._f0._f1.subgroup_local_id) >> 0u) + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size);
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, (true ? (1) - 0 : _GLF_FUZZED(93574)))), min(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, (true ? (1) - 0 : _GLF_FUZZED(93574)))), _GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, (true ? (1) - 0 : _GLF_FUZZED(93574)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) - 0)), 1 * (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) - 0)), int(int(clamp(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) - 0)))))))))), 0)), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))) ^ 0)), 0 | (_GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))) ^ 0)), int(ivec4(clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))) ^ 0)), 0, 1, 1)))))), (1) - _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) - 0) | (0))), 0))) | (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) - 0), 0)), _GLF_IDENTITY((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))), 1)), (1) - 0), 0))), (_GLF_IDENTITY((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))), 1)), (1) - 0), 0))), ((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))), 1)), (1) - 0), 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) | ((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))), 1)), max(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))), 1)), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1))), 1)))), (1) - 0), 0))))) | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))), (1) - 0), 0), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))), (1) - 0), 0), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))), (1) - 0), 0)) << ivec2(0, 0))))))))))), 4, 64, 4);
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-79856) : 0))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if((_GLF_struct_replacement_5._f0._f1.subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, sin(sin(0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.6))), 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(vec2(-5.6, -21.93)) : vec2(mat4x2(injectionSwitch, sin(sin(0.0)), 0.0, 1.0, 1.0, 1.0, 0.0))))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) * mat2(1.0))).y))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), (bool(_GLF_IDENTITY(false, true && (false)))) && true)))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), (bool(_GLF_IDENTITY(false, true && (false)))) && true))))))))))
            continue;
           continue;
          }
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), max(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-74217))))), 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (true ? buf[virtual_gid] : _GLF_FUZZED(subgroup_size))))), 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, 2))))), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])), 0u ^ (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])))), 4, 64, 2), ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), 4, 64, 2)), (~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid]) / 1u))), 4, 64, 2))) << 0u)), ((_GLF_IDENTITY(~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) - 0)) << 0), 64, 2)), (~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), 4, 64, 2))) << 0u))) / 1u), uint(uvec4((_GLF_IDENTITY(~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid], clamp(false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid], false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid], false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)), 4)), 64, 2)), (~ (_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), 4, 64, 2), 0u ^ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), 4, 64, 2))))) << 0u)), 1u, 0u, 1u)))), min(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY(min(2, 2), 0 ^ (min(2, 2))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)), clamp(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)), _GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)), min(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)), _GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2)))) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u))))))))), _GLF_IDENTITY((_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u))) | (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u, 0u | ((atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 + (64))) - (0 ^ 0)), 2)) >> 0u))), 0u + ((_GLF_IDENTITY(_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), ~ (~ ((atomicLoad(buf[virtual_gid], 4, 64, 2))))) >> 0u, _GLF_IDENTITY(0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u), (0u | ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)) - 0u))) | (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u, 0u | (_GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u, 0u ^ ((atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)))))))))))));
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.7, 451.185)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec3(injectionSwitch[1], 1.0, 1.0)))))[0], float(float(injectionSwitch[0]))), injectionSwitch[1])).y))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      continue;
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (0 >> _GLF_IDENTITY(int(8), int(8))) + (7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), true, false))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true, true)))));
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  return;
                 break;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), float(_GLF_FUZZED(3.8)), bool(false)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), _GLF_IDENTITY((bool(bvec4(false, true, false, true))) && true, bool(bvec4(_GLF_IDENTITY((bool(bvec4(false, true, false, true))) && true, ! (! (_GLF_IDENTITY((bool(bvec4(false, true, false, true))) && true, bool(bool((bool(bvec4(false, true, false, true))) && true)))))), true, false, true)))))) && true)));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_IDENTITY(true, (true) && true), false, false)), bool(bvec4(bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec2(bool(bvec4(true, false, false, false)), true))))), false, false)), false, true, true))))), false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec2(_GLF_DEAD(false), false))), true && (! (bool(bvec2(_GLF_DEAD(false), false)))))), true && (_GLF_IDENTITY((! (bool(bvec2(_GLF_DEAD(false), false)))), bool(bvec4(_GLF_IDENTITY((! (bool(bvec2(_GLF_DEAD(false), false)))), bool(bvec4((! (bool(bvec2(_GLF_DEAD(false), false)))), false, true, true))), true, true, false)))))), false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, sin(0.0), 1.0)), min(vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, sin(0.0), 1.0)), vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, sin(0.0), 1.0))))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              break;
             continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) : _GLF_FUZZED(injectionSwitch))).x))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.9, -4.5)))), 0.0))).x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec3(bvec3(true, false, false))))), true && (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false))))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             return;
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-89705))))))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             continue;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, max(1, 1))))) ^ 0))))), max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))))), (_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 | _GLF_IDENTITY((1 | 1), ~ (_GLF_IDENTITY(~ ((1 | 1)), (~ ((1 | 1))) - (0 >> _GLF_IDENTITY(int(3), int(3))))))), 0 ^ ((1 | (_GLF_IDENTITY(1, ~ (~ (1))) | 1)))), _GLF_IDENTITY(max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))), (_GLF_IDENTITY(max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))), (max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1)))))) | (max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1)))))))) | (_GLF_IDENTITY(max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))), max(_GLF_IDENTITY(max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))), min(max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))), max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))))), max(_GLF_IDENTITY((1 | (1 | 1)), 0 ^ ((1 | (1 | 1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 | (1 | 1), clamp(1 | (1 | 1), 1 | (1 | 1), _GLF_IDENTITY(1 | (1 | 1), 0 ^ (1 | (1 | 1)))))), 0 ^ ((1 | (1 | 1))))))))))) || false))) && true); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), ! (! (! (_GLF_DEAD(false))))))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) ^ 0u, uint(uvec4(_GLF_IDENTITY((virtual_gid) ^ 0u, ((virtual_gid) ^ 0u) | ((virtual_gid) ^ 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(2u, 0u + (2u)), 1u), (false ? _GLF_FUZZED((uvec2(40238u, 143085u) | 166932u)) : uvec2(_GLF_IDENTITY(2u, 0u + (2u)), 1u)))))), uint(2u)))))), min((virtual_gid) ^ 0u, (_GLF_IDENTITY(virtual_gid, 1u * _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))))) ^ _GLF_IDENTITY(0u, (0u) | (74070u & 0u)))))], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4)))), 64, 2), (_GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, min((virtual_gid) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))), _GLF_IDENTITY(0u | ((_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid)))), (_GLF_IDENTITY(0u | ((_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid)))), min(0u | ((_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid)))), _GLF_IDENTITY(0u | ((_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid)))), 0u ^ (0u | ((_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))))))))) - (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) ^ 0u)))], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(71610))), _GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (0))))), _GLF_IDENTITY(4, clamp(4, 4, 4)))), 64, 2), (read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) ^ 0u, min(_GLF_IDENTITY((virtual_gid), (false ? _GLF_FUZZED(uvec2(199721u, 145151u).y) : _GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u))) ^ 0u, (_GLF_IDENTITY(virtual_gid, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u))), uint(uvec2(virtual_gid, 1u)))))) ^ 0u)))], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (_GLF_IDENTITY(4, (4) << 0))), max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 1 * (4))) << _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))), (false ? _GLF_FUZZED(-37698) : _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))), ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0)))) ^ (0 | 0))))), 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) / 1) : _GLF_FUZZED(-39080)))), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), (true ? 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), max(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))))) : _GLF_FUZZED(atomicMin(_injected_loop_counter, -20639)))), 0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), 0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))))) ^ (4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))) ^ (4), ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))) ^ (4)) | (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))) ^ (4), 0 | (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))))))) ^ (4), ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))) ^ (4)) | ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-39080))))) ^ (4))))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(4, clamp(4, 4, 4)))), 64, 2)) / 1u)) - (0u | 0u));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0)))), min(vec2(1.0, determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0)))), _GLF_IDENTITY(vec2(1.0, determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0)))), (true ? vec2(1.0, determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0)))) : _GLF_FUZZED(vec2(15.58, -8.2)))))))), injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true), false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), true, false)))))))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                   break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || _GLF_IDENTITY((false || (_GLF_IDENTITY(true, (true) || false))), ! (! ((false || (_GLF_IDENTITY(true, (true) || false))))))))))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (4))) | (4))) | 0)), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
                return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) << 0), _injected_loop_counter))) << 0)) ^ 0) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(read, max(read, read)), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(read, max(read, read)), uint(uvec2(_GLF_IDENTITY(read, max(read, read)), 1u))))), read), (0u ^ 0u) | (max(_GLF_IDENTITY(_GLF_IDENTITY(read, max(read, read)), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(read, max(read, read)), uint(uvec2(_GLF_IDENTITY(read, max(read, read)), 1u))))), read)))), 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(865.736)), bvec2(true, false))).x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
}
