#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 uvec4 _f0;
 mat2x4 _f1;
 uvec2 _f2;
 uvec2 _f3;
 bvec2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_2 {
 bool _f0;
 bvec3 _f1;
 mat4 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
 vec2 _f5;
 bool _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 uint subgroup_size;
 mat4x2 _f1;
 bvec4 _f2;
 _GLF_struct_2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat3(1.0), gl_SubgroupSize, mat4x2(1.0), bvec4(true), _GLF_struct_2(true, bvec3(true), mat4(1.0), _GLF_struct_0(mat2x4(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), _GLF_struct_1(uvec4(1u), mat2x4(1.0), _GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) / uvec2(1u, 1u)), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))))), uvec2(1u), bvec2(true), mat3x4(1.0)), vec2(1.0), true));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_3.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_3.subgroup_size);
 uint read = 0;
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(_GLF_IDENTITY(1, (1) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), 4, 64, 4);
 do
  {
   if((subgroup_local_id % 2) == 0)
    {
     read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u)], 4, 64, 2);
    }
   else
    {
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, ((0 << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(4, 0 | (4)))), 64, 4);
}
