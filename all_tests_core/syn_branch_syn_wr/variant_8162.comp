#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && true), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), true && ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))) || false))), ! (! (bool(bvec4(false, false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), true && (((injectionSwitch.x < injectionSwitch.y)))))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false), true, true)), true, false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false))) && true), true && (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false)))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(smoothstep(0.3, log(19.03), round(-709.465))) : _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-81.49))), injectionSwitch.y, injectionSwitch.y)))) : _GLF_FUZZED(-43.69)))) - 0.0)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), false || (_GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false))))))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(60527))), 0 ^ (_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(60527))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(vec4(vec2(0.0, 0.0), 1.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), vec2(mat3(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), (true ? vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), vec2(mat3(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(vec2(-6656.7506, -7.4))))).y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec2(0.0, 1.0), vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-226.071)), bool(false))), 1.0, 1.0, abs(0.0), 1.0))), ! (! (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, false))))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), false || _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3((_GLF_DEAD(false)), true, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(int(_injected_loop_counter)), (int(int(_injected_loop_counter))) | (int(int(_injected_loop_counter))))), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(10.09)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(_GLF_IDENTITY(true, false || (true))))))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(false)))))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))) && true)))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = (0 & 19907); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2))))), ~ (~ (int(2))))))), (_GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))))) - 0) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, int(ivec3(7, 1, 1)))) >> 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, ~ (~ (2)))))))))))), (_GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), min(int(2), int(2)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), min(int(2), int(2)))), (~ (_GLF_IDENTITY(int(2), min(int(2), int(2))))) ^ 0)) ^ 0))))))) - 0) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, int(ivec3(7, 1, 1)))) >> 0), (true ? _GLF_IDENTITY(7, (_GLF_IDENTITY(7, int(ivec3(7, 1, 1)))) >> 0) : _GLF_FUZZED(-99609))))))) ^ 0) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = ((_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) << (0 >> _GLF_IDENTITY(int(3), int(3)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) ^ 0)) - 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) ^ 0)) - 0))) + (0 >> _GLF_IDENTITY(int(6), int(6)))) | 0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.557)), bool(false))), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat4((injectionSwitch), 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0))) * _GLF_IDENTITY(mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0) : _GLF_FUZZED(mat2(594.939, -6.5, 7.9, 2.1)))))))) - vec2(0.0, 0.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))) - vec2(0.0, 0.0)).y)) || false))));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) && (false)), false, true, false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2671.8778)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - tan(0.0))) / 1.0), 1.0, 1.0), min(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.2) : 1.0)), 0.0, 1.0, 1.0)))), min(float(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - tan(0.0))) / 1.0), 1.0, 1.0), min(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.2) : 1.0)), 0.0, 1.0, 1.0)))), float(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - tan(0.0))) / 1.0), 1.0, 1.0), min(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.2) : 1.0)), 0.0, 1.0, 1.0))))))), (false ? _GLF_FUZZED(49.42) : _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), min(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, 1.0), max(vec4(1.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0))), vec4(1.0, 0.0, 1.0, 1.0))))))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(2.5) : _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0)), float(mat3x4(float(mat4x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, tan(0.0))), max(float(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, tan(0.0))), float(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, tan(0.0)))))), 0.0, sin(0.0), 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- 7.4))), bool(false))), 0.0, 1.0)))))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(1u, (1u) * 1u)))), clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(1u, (1u) * 1u)))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(1u, (1u) * _GLF_IDENTITY(1u, ~ (~ (1u))))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(1u, (1u) * 1u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false, true))), true))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)) * _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (0u ^ _GLF_IDENTITY(0u, (0u) | (0u)))), workgroup_id, workgroup_id));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.4), _GLF_FUZZED(vec2(-5.4, -9.4).g)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) && (false)))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), ~ (~ ((1 & 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 0, 1)), ~ (~ (int(ivec4(0, 1, 0, 1))))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))) || false)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(1, 1, 1))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43))), (true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), _GLF_IDENTITY((1u | 0u), (false ? _GLF_FUZZED(num_workgroup) : (1u | 0u))), 1u, 0u), (uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), (uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u)) / uvec4(1u, 1u, 1u, 1u))))))) - 0u)), (_GLF_IDENTITY(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, _GLF_IDENTITY(0u, (0u) >> 0u)), (uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), _GLF_IDENTITY((1u | 0u), ((1u | 0u)) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), 1u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), (uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u)) / uvec4(1u, 1u, 1u, 1u))))))) - 0u))) | (_GLF_IDENTITY(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), (uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u)) / uvec4(1u, 1u, 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u), (uvec4(packSnorm4x8(vec4(2638.1311, 9.1, -627.331, -68.43)), (1u | 0u), 1u, 0u)) / uvec4(1u, 1u, 1u, 1u))))))) - 0u)))))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint read = _GLF_IDENTITY(0, _GLF_IDENTITY(0 + (_GLF_IDENTITY(0, (0) << 0)), ~ (_GLF_IDENTITY(~ (0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0))))), (~ (0 + (_GLF_IDENTITY(0, (0) << 0)))) >> 0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0), 1 * (_GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(1))) ^ 0))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((1 | _GLF_IDENTITY(1, (1) * 1)), 1 * ((1 | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1)) ^ 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(0), int(0)), 1, 1, 0)), (int(ivec4(_GLF_IDENTITY(int(0), int(0)), 1, 1, 0))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(ivec2(int(4), 0))), _GLF_IDENTITY((int(4)), int(ivec3(_GLF_IDENTITY((int(4)), ((int(4))) | ((int(4)))), 0, 0))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.8) : injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), max(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), clamp(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))))), _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))))], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 1 * (1))))), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 1 * (1))))), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 1 * (1))))), (uint(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 1 * (1)))))) ^ 0u), 0u, 0u, 0u))))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(1, 0 + (1)))), min(~ (uint(_GLF_IDENTITY(1, 0 + (1)))), ~ (uint(_GLF_IDENTITY(1, 0 + (1)))))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ (0), clamp(0 ^ (0), 0 ^ (0), 0 ^ (0))), min(0 ^ (0), _GLF_IDENTITY(0 ^ (0), int(ivec3(0 ^ (0), 1, 0)))))) | (0 ^ (0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))))) | (4)), 64, 4);
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
          barrier();
         for(int _injected_loop_counter = (1 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) / 1)) | (0))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (0) << _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) / 1), 0)))) / 1)) | (0)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) / 1)) | (0))))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))))) && true))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))))), false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if((subgroup_local_id % 2) == _GLF_IDENTITY(0, ~ (~ (0))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))), max((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))))))) / vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.04) : 1.0)), 1.0))) / vec2(1.0, 1.0)))) * mat2(1.0), (false ? _GLF_FUZZED((mat4x2(2.8, -1.7, 12.56, _GLF_IDENTITY(0.1, clamp(0.1, 0.1, _GLF_IDENTITY(0.1, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(0.1, max(0.1, 0.1)), 1.0, 0.0, tan(0.0), tan(0.0), sqrt(0.0), cos(0.0), 1.0), (mat2x4(_GLF_IDENTITY(0.1, max(0.1, 0.1)), 1.0, 0.0, tan(0.0), tan(0.0), sqrt(0.0), cos(0.0), 1.0)) * mat2(1.0)))))), _GLF_IDENTITY(93.76, max(_GLF_IDENTITY(93.76, 1.0 * (_GLF_IDENTITY(93.76, max(_GLF_IDENTITY(93.76, 1.0 * (93.76)), _GLF_IDENTITY(93.76, clamp(93.76, 93.76, 93.76)))))), 93.76)), 25.15, 7708.7431, 319.915) * _GLF_IDENTITY(vec4(_GLF_IDENTITY(-3592.8482, (-3592.8482) - 0.0), -929.618, -278.688, -7.5), min(vec4(-3592.8482, -929.618, -278.688, -7.5), vec4(-3592.8482, -929.618, -278.688, -7.5))))) : _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6265.6455) : 1.0)), 1.0, 1.0))), float(_GLF_FUZZED(-5.5)), bool(false))), 1.0) * (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))))) * mat2(1.0)))).y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(unpackHalf2x16(subgroup_local_id)) : _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))))).y)), false, false, false)))))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          barrier();
                        }
                      }
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))), int(2)))) != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY((1 ^ 0), max(_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), int(ivec2((1 ^ 0), 1))))), _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 0), min((1 ^ 0), (1 ^ 0))), (true ? _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), (1 ^ 0))) : _GLF_FUZZED(10803))))) | (_GLF_IDENTITY(1, 0 | (1)) ^ 0))) - 0))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), (mat2(1.0) * (vec2(mat2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))) * mat2(1.0)))).x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))) || false)))))
                        barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)) || false), true, true))));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, abs(0.0), 0.0, 1.0, 0.0))))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(6.2)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-211.998))), 0.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (true ? vec3(1.0, 1.0, 1.0) : _GLF_FUZZED(vec3(-4.6, 347.622, -179.015))))))))), tan(0.0), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0))).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 0.0)), 0.0, 1.0))) > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y, injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! ((! ((injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((! ((injectionSwitch.x < injectionSwitch.y)))))))))))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bool(bvec3(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((true), false)), bvec2(bvec4(bvec2(bvec2((true), false)), false, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec4((true), true, true, true)))) && true)), ! (! (! (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec4((true), true, true, true)))) && true))))))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), false || (! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec2(! ((false)), true), bvec2(bvec3(bvec2(! ((false)), true), false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (! (! (false))) && true)) && true)))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), bool(bvec2(false, true))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             barrier();
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec2(false, true))))))))
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec3(bool(! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), true, true, false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) && _GLF_IDENTITY(true, true && (true))))), (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(44.34)), float(1.0), bool(true))))), injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0))), 0.0, 1.0), mat3(mat3x4(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 0.0, 0.0, 1.0))))), max(float(_GLF_IDENTITY(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0))), 0.0, 1.0), mat3(mat3x4(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 0.0, 0.0, 1.0))))), float(_GLF_IDENTITY(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0))), 0.0, 1.0), mat3(mat3x4(mat3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 0.0, 0.0, 1.0))))))))))) * (injectionSwitch), min(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), mix(vec2(_GLF_IDENTITY((((injectionSwitch)))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (((injectionSwitch)))[0] : _GLF_FUZZED(353.153))), _GLF_FUZZED(0.5)), vec2(_GLF_FUZZED(5.9), (((injectionSwitch)))[1]), bvec2(false, true))))) / vec2(1.0, 1.0), max(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), mix(vec2(_GLF_IDENTITY((((injectionSwitch)))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (((injectionSwitch)))[0] : _GLF_FUZZED(353.153))), _GLF_FUZZED(0.5)), vec2(_GLF_FUZZED(5.9), (((injectionSwitch)))[1]), bvec2(false, true))))) / vec2(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), mix(vec2(_GLF_IDENTITY((((injectionSwitch)))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (((injectionSwitch)))[0] : _GLF_FUZZED(353.153))), _GLF_FUZZED(0.5)), vec2(_GLF_FUZZED(5.9), (((injectionSwitch)))[1]), bvec2(false, true))))) / vec2(1.0, 1.0), (_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), mix(vec2(_GLF_IDENTITY((((injectionSwitch)))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (((injectionSwitch)))[0] : _GLF_FUZZED(353.153))), _GLF_FUZZED(0.5)), vec2(_GLF_FUZZED(5.9), (((injectionSwitch)))[1]), bvec2(false, true))))) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))))), _GLF_IDENTITY(vec2(mat3(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), 1.0, determinant(mat3(1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(38960))), bool(false))), 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 1.0), transpose(transpose(mat2x3(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 1.0))))))), dot(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec2(1.7, -2.1).x)), bool(false))), 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(247.764)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.7)), bool(false))), injectionSwitch.y))), bool(true)))), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(984.657) : 0.0)), 1.0, abs(0.0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(12.83, -6.3), mat2(1.0) * (vec2(12.83, -6.3)))) : vec2(mat3(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(injectionSwitch.y), bool(true))))) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), 1.0, determinant(mat3(1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-482.335)), float(0.0), bool(true))), 0.0), mix(float(_GLF_FUZZED(-67.75)), float(max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-482.335)), float(0.0), bool(true))), 0.0)), bool(true)))), 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.7)), float(0.0), bool(true))), 0.0, 1.0))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, abs(0.0)))))), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), min(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))))).y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), _GLF_IDENTITY(clamp(~ (0), ~ (0), ~ (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(clamp(~ (0), ~ (0), ~ (0)), (clamp(~ (0), ~ (0), ~ (0))) >> 0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-89376) : _GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (_GLF_IDENTITY(0, (0) * 1))))))))))))), bool(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), _GLF_IDENTITY(clamp(~ (0), ~ (0), ~ (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(clamp(~ (0), ~ (0), ~ (0)), (clamp(~ (0), ~ (0), ~ (0))) >> 0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-89376) : _GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (_GLF_IDENTITY(0, (0) * 1))))))))))))))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), true)))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(_GLF_IDENTITY(23246u, max(23246u, 23246u)), 23246u)))), 2578u, 190747u).r & 0u), ~ (~ ((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(_GLF_IDENTITY(23246u, max(23246u, 23246u)), 23246u)))), 2578u, 190747u).r & 0u)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u), ~ (~ ((virtual_gid) >> (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), max(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), _GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), uint(uint(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(_GLF_IDENTITY(23246u, (23246u) << 0u), max(23246u, 23246u))))))))), 2578u, 190747u).r & _GLF_IDENTITY(0u, max(0u, 0u)))))), clamp((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, _GLF_IDENTITY(max(23246u, 23246u), 0u ^ (max(23246u, 23246u)))))), 2578u, 190747u).r & 0u), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) >> (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), (_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u))))) + 0u), 2578u, 190747u).r & _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), max((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), (_GLF_IDENTITY(0u, (0u) << 0u)) | (0u))))), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u))) : _GLF_FUZZED(num_workgroup), max(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u), ~ (~ ((virtual_gid) >> (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), max(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), _GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), uint(uint(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(_GLF_IDENTITY(23246u, (23246u) << 0u), max(_GLF_IDENTITY(23246u, (23246u) ^ 0u), 23246u))))))))), 2578u, 190747u).r & _GLF_IDENTITY(0u, max(0u, 0u)))))), clamp((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, _GLF_IDENTITY(max(23246u, 23246u), _GLF_IDENTITY(0u ^ (max(23246u, 23246u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(0u ^ (max(23246u, 23246u)), ~ (~ (0u ^ (max(23246u, 23246u))))))))))), _GLF_IDENTITY(2578u, min(_GLF_IDENTITY(2578u, max(2578u, 2578u)), 2578u)), 190747u).r & 0u), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), _GLF_IDENTITY(2578u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(2578u), (uint(2578u)) - 0u)), (uint(_GLF_IDENTITY(uint(2578u), (uint(2578u)) - 0u))) | (uint(_GLF_IDENTITY(uint(2578u), (uint(2578u)) - 0u))))), 190747u).r & _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), max((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), (_GLF_IDENTITY(0u, (0u) << 0u)) | (0u))))), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u))) : _GLF_FUZZED(num_workgroup), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((901.369 - 283.642))), float(injectionSwitch.y), bool(true))))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u), ~ (~ ((virtual_gid) >> (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), max(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), _GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), uint(uint(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(_GLF_IDENTITY(23246u, (23246u) << 0u), max(23246u, 23246u))))))))), 2578u, 190747u).r & _GLF_IDENTITY(0u, max(0u, 0u)))))), clamp((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, _GLF_IDENTITY(max(23246u, 23246u), 0u ^ (max(23246u, 23246u)))))), 2578u, 190747u).r & 0u), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), max((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), (_GLF_IDENTITY(0u, (0u) << 0u)) | (0u))))), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u), ~ (~ ((virtual_gid) >> (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), max(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), _GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), uint(uint(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(_GLF_IDENTITY(23246u, (23246u) << 0u), max(23246u, 23246u))))))))), 2578u, 190747u).r & _GLF_IDENTITY(0u, max(0u, 0u)))))), clamp((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, _GLF_IDENTITY(max(23246u, 23246u), 0u ^ (max(23246u, 23246u)))))), 2578u, 190747u).r & 0u), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), max((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), (_GLF_IDENTITY(0u, (0u) << 0u)) | (0u))))), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u))), _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u), ~ (~ ((virtual_gid) >> (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), max(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), _GLF_IDENTITY(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), uint(uint(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(_GLF_IDENTITY(23246u, (23246u) << 0u), max(23246u, 23246u))))))))), 2578u, 190747u).r & _GLF_IDENTITY(0u, max(0u, 0u)))))), clamp((virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, _GLF_IDENTITY(max(23246u, 23246u), 0u ^ (max(23246u, 23246u)))))), 2578u, 190747u).r & 0u), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), max((_GLF_IDENTITY(0u, (0u) << 0u)) | (0u), (_GLF_IDENTITY(0u, (0u) << 0u)) | (0u))))), (virtual_gid) >> (uvec3(_GLF_IDENTITY(23246u, min(23246u, _GLF_IDENTITY(23246u, max(23246u, 23246u)))), 2578u, 190747u).r & 0u))))) : _GLF_FUZZED(num_workgroup))))))], max(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), (false ? _GLF_IDENTITY(_GLF_FUZZED(uaddCarry(next_virtual_gid, virtual_gid, next_virtual_gid)), (_GLF_FUZZED(uaddCarry(next_virtual_gid, virtual_gid, next_virtual_gid))) ^ 0u) : (virtual_gid))) >> (uvec3(_GLF_IDENTITY(23246u, _GLF_IDENTITY((0u | 0u), ((0u | 0u)) << 0u) | (23246u)), 2578u, 190747u).r & 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) >> (_GLF_IDENTITY(uvec3(23246u, 2578u, 190747u).r, (uvec3(23246u, 2578u, 190747u).r) >> 0u) & _GLF_IDENTITY(0u, (0u) | (0u)))) : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (_GLF_IDENTITY(uvec3(23246u, 2578u, 190747u).r & _GLF_IDENTITY(0u, (0u) / (1u & 1u)), clamp(uvec3(23246u, 2578u, 190747u).r & 0u, _GLF_IDENTITY(uvec3(23246u, 2578u, 190747u).r & 0u, clamp(uvec3(23246u, 2578u, 190747u).r & 0u, uvec3(_GLF_IDENTITY(23246u, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) + (23246u)), 2578u, 190747u).r & 0u, uvec3(23246u, 2578u, 190747u).r & 0u)), uvec3(23246u, 2578u, 190747u).r & 0u))))))], buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (_GLF_IDENTITY(uvec3(23246u, _GLF_IDENTITY(2578u, clamp(_GLF_IDENTITY(2578u, (false ? _GLF_FUZZED(atomicCompSwap(subgroup_local_id, subgroup_local_id, read)) : 2578u)), 2578u, 2578u)), _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(_GLF_IDENTITY(190747u, (190747u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(190747u, (190747u) - 0u), (_GLF_IDENTITY(190747u, (190747u) - 0u)) | (_GLF_IDENTITY(190747u, (190747u) - 0u)))) | (148942u & 0u))))).r, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), max(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, _GLF_IDENTITY((190747u), uint(uint((190747u)))) - 0u)))).r), uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r)))), min(uint(_GLF_IDENTITY(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), max(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(_GLF_IDENTITY(190747u, 0u ^ (190747u)), (_GLF_IDENTITY(_GLF_IDENTITY(190747u, 0u ^ (190747u)), clamp(_GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(_GLF_IDENTITY(190747u, 0u ^ (190747u)), (_GLF_IDENTITY(190747u, 0u ^ (190747u))) >> 0u)))) - 0u), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, _GLF_IDENTITY((190747u) - 0u, min((190747u) - 0u, (190747u) - 0u)))))).r)))), uint(_GLF_IDENTITY(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), max(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r))))))) & 0u)), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u))), ((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u)))) >> 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u & (_GLF_IDENTITY(55180u, clamp(55180u, 55180u, _GLF_IDENTITY(55180u, 0u ^ (55180u)))) + 60285u))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (_GLF_IDENTITY(uvec3(23246u, _GLF_IDENTITY(2578u, clamp(_GLF_IDENTITY(2578u, (false ? _GLF_FUZZED(atomicCompSwap(subgroup_local_id, subgroup_local_id, read)) : 2578u)), 2578u, 2578u)), _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(_GLF_IDENTITY(190747u, (190747u) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(190747u, (190747u) - 0u), (_GLF_IDENTITY(190747u, (190747u) - 0u)) | (_GLF_IDENTITY(190747u, (190747u) - 0u)))) | (148942u & 0u))))).r, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), max(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, _GLF_IDENTITY((190747u), uint(uint((190747u)))) - 0u)))).r), uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r)))), min(uint(_GLF_IDENTITY(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), max(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(_GLF_IDENTITY(190747u, 0u ^ (190747u)), (_GLF_IDENTITY(_GLF_IDENTITY(190747u, 0u ^ (190747u)), clamp(_GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(_GLF_IDENTITY(190747u, 0u ^ (190747u)), (_GLF_IDENTITY(190747u, 0u ^ (190747u))) >> 0u)))) - 0u), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, _GLF_IDENTITY((190747u) - 0u, min((190747u) - 0u, (190747u) - 0u)))))).r)))), uint(_GLF_IDENTITY(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), max(uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r), uint(uvec3(23246u, 2578u, _GLF_IDENTITY(190747u, clamp(190747u, _GLF_IDENTITY(190747u, 0u ^ (190747u)), _GLF_IDENTITY(190747u, (190747u) - 0u)))).r))))))) & 0u)), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u))), ((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (uvec3(23246u, 2578u, 190747u).r & 0u)))) >> 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u & (_GLF_IDENTITY(55180u, clamp(55180u, 55180u, _GLF_IDENTITY(55180u, 0u ^ (55180u)))) + 60285u)))) ^ 0u)])), 4, _GLF_IDENTITY(64, (64) - 0), 2);
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-977.687), _GLF_FUZZED(8030.9576)), bvec2(false, false))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-977.687), _GLF_FUZZED(8030.9576)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-977.687), _GLF_FUZZED(8030.9576)), bvec2(false, false))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-977.687), _GLF_FUZZED(8030.9576)), bvec2(false, false))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-977.687), _GLF_FUZZED(8030.9576)), bvec2(false, false))).x) * 1.0))) > injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                        {
                        }
                       else
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true, false))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(false, true && (false)), false))) && true)) && true)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))) && true)) && true)))))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-18.48) : 0.0)))).x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-18.48) : 0.0)))).x < injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-18.48) : 0.0)))).x < injectionSwitch.y)))), ! (! (! ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-18.48) : 0.0)))).x < injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), (bool(bvec4(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), true), false)), true, true)))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true))), bool(_GLF_IDENTITY(bvec2(bool(false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(bvec2(bool(false), false), true))), false))), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), true))), false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true, false)), (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true, false))) && true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, ! (! (false)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false))))))))), false), true))), false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(bvec2(bool(false), false), _GLF_IDENTITY(true, true && (true))))), false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(bvec2(bool(false), false), _GLF_IDENTITY(true, ! (! (true)))))), false))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))))))), true, true))))))))))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))))) && true)))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true)))))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))], 4, 64, 2);
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (1 ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), bool(bvec3(false || (false), false, true)))))))) && true)))
      barrier();
     barrier();
    }
   subgroupBarrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ((true)) || false)))), ((! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ((true)) || false))))) || false))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! _GLF_IDENTITY((true), false || (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), ! (! (_GLF_IDENTITY((true), ((true)) || false))))))), ((! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ((true)) || false))))) || _GLF_IDENTITY(false, bool(bool(false)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(18899) : _GLF_IDENTITY(int(6), max(int(6), int(6))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3))), min(~ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3)), 3))), int(3))), ~ ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0))))), 0 ^ (int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0))))), 0 ^ (int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0)))))))), int(ivec2(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0))))), 0 ^ (int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0)))))))), 0)))) | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0))))), 0 ^ (int(ivec4(int(3), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))) >> _GLF_IDENTITY(int(3), int(3)))))))), ! (! _GLF_IDENTITY((_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 ^ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) / (1 | 1)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), max(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), int(ivec3(1 << _GLF_IDENTITY(int(3), int(3)), 0, 1)))) / 1)))) >> _GLF_IDENTITY(int(3), int(3))), min(~ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), int(3))), ~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((15463 - _injected_loop_counter)) : int(3))))), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((15463 - _injected_loop_counter)) : int(3))))), (true ? (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((15463 - _injected_loop_counter)) : int(3))))) : _GLF_FUZZED((27725)))) : _GLF_FUZZED(min(81975, _injected_loop_counter)))) >> _GLF_IDENTITY(int(3), int(3))))))))), ((_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), min(~ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), int(3))), ~ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 ^ (3))), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))))) && true)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_DEAD(false))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY((_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true)))), ! (! ((_GLF_IDENTITY((! (false)), bool(bvec2((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), true))))))) || false))))
      {
       do
        {
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
}
