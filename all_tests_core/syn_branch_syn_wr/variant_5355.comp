#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), bool(bvec4(! (_injected_loop_counter != 1), false, true, true)))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 0)), (int(ivec3(0, 0, 0))) ^ (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), clamp(min(1, 1), min(1, 1), min(1, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), clamp(min(1, 1), min(1, 1), min(1, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), clamp(min(1, 1), min(1, 1), min(1, 1)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), clamp(min(1, 1), min(1, 1), min(1, 1))))) / 1)) | 0)) | 0)), int(1))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), clamp(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) + 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, min(0, 0))))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, int(int(0)))))))), clamp(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), clamp(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) + 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, min(0, 0))))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, int(int(0)))))))), clamp(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), clamp(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) + 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, min(0, 0))))), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, int(int(0)))))))), clamp(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(0, int(ivec3(0, 0, 0))), _GLF_IDENTITY(0, int(ivec3(0, 0, 0))))))))))) - 0)))) << 0), int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 0)), int(ivec4(int(ivec3(0, 0, 0)), 0, 0, 0)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-95181)))), (int(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-95181))))) | (int(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-95181))))))), int(ivec3(0, 0, 0))))), (_GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))))) << 0), (false ? _GLF_FUZZED(int(false)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY(0, (0) | (0))) ^ 0), int(ivec3(0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), ((~ (0))) - 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86366))), _GLF_IDENTITY(0, 0 ^ (0)))), int(ivec3(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, _GLF_IDENTITY(0, 0 ^ (0)))), 0, 0))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), ((~ (0))) - 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86366))), _GLF_IDENTITY(0, 0 ^ (0)))), int(ivec3(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, _GLF_IDENTITY(0, 0 ^ (0)))), 0, 0)))))), min(~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), ((~ (0))) - 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86366))), _GLF_IDENTITY(0, 0 ^ (0)))), int(ivec3(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, _GLF_IDENTITY(0, 0 ^ (0)))), 0, 0)))))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), ((~ (0))) - 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86366))), _GLF_IDENTITY(0, 0 ^ (0)))), int(ivec3(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, _GLF_IDENTITY(0, 0 ^ (0)))), 0, 0)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), int(ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), max(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, _GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, _GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0))))))), 0 ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, _GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (_GLF_IDENTITY(~ (~ (0)), ~ (~ (~ _GLF_IDENTITY((~ (0)), ((~ (0))) * 1))))) | (~ (~ (0))))), int(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), clamp(0 ^ (0), _GLF_IDENTITY(_GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (0), max(0 ^ (0), 0 ^ (0)))), ~ (~ ((_GLF_IDENTITY(0 ^ (0), max(0 ^ (0), 0 ^ (0))))))) * 1)))))))), _GLF_IDENTITY(max((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), _GLF_IDENTITY(((0)), (((0))) << 0) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(int(0 << _GLF_IDENTITY(int(6), int(6))))))))), int(ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 1 * (0)) : _GLF_FUZZED(ivec2(-97238, 11779)[1]))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((0), 0 | ((0))), clamp(0 ^ (0), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), clamp(0 ^ _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), (false ? _GLF_FUZZED((~ _injected_loop_counter)) : (0))), (0), (0))), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1))))))))), (_GLF_IDENTITY(max((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), _GLF_IDENTITY(((0)), (((0))) << 0) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(int(0 << _GLF_IDENTITY(int(6), int(6))))))))), int(ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 1 * (0)) : _GLF_FUZZED(ivec2(-97238, 11779)[1]))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((0), 0 | ((0))), clamp(0 ^ (0), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), clamp(0 ^ _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), (false ? _GLF_FUZZED((~ _injected_loop_counter)) : (0))), (0), (0))), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1))))))))), min(max((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), _GLF_IDENTITY(((0)), (((0))) << 0) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(int(0 << _GLF_IDENTITY(int(6), int(6))))))))), int(ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 1 * (0)) : _GLF_FUZZED(ivec2(-97238, 11779)[1]))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((0), 0 | ((0))), clamp(0 ^ (0), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), clamp(0 ^ _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), (false ? _GLF_FUZZED((~ _injected_loop_counter)) : (0))), (0), (0))), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1))))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), _GLF_IDENTITY(((0)), (((0))) << 0) - (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(int(0 << _GLF_IDENTITY(int(6), int(6))))))))), int(ivec3(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 1 * (0)) : _GLF_FUZZED(ivec2(-97238, 11779)[1]))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((0), 0 | ((0))), clamp(0 ^ (0), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), clamp(0 ^ _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), (false ? _GLF_FUZZED((~ _injected_loop_counter)) : (0))), (0), (0))), _GLF_IDENTITY(0 ^ (0), (true ? 0 ^ (0) : _GLF_FUZZED(46306))), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) * 1)))))))))))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY((_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))), ivec3(0, 0, 0) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), ((0)) << (0 | (0 | 0))))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))), (_GLF_IDENTITY(true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503)), _GLF_IDENTITY(ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503))), clamp(ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503))), _GLF_IDENTITY(ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503))), clamp(ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503))), ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503))), ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503))))), ivec3(0, 0, 0) | (true ? (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))))))) : _GLF_FUZZED(ivec3(-19393, 55557, -53503)))))))))) / ivec3(1, 1, 1)))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) | ((0)))))))))) << 0))))))) << 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0 & -27006, 0 ^ (_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED((true ? _injected_loop_counter : 60806))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0 & -27006, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 & -27006))), clamp((_GLF_IDENTITY(0 & -27006, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 & -27006))), (_GLF_IDENTITY(0 & -27006, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 & -27006))), (_GLF_IDENTITY(0 & -27006, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 & -27006)))))))))) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, clamp(0, 0, 0)) & -27006))))))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006))))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((0 & -27006), 0 ^ ((0 & _GLF_IDENTITY(-27006, (-27006) ^ 0))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), (_GLF_IDENTITY(((0 & -27006)), min(((0 & -27006)), ((0 & -27006))))) | 0), 0 ^ (((0 & -27006))))) / 1)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))), (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1))))))) >> 0))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))))))), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), clamp(((0 & -27006)), ((0 & -27006)), ((0 & -27006))))))), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) & -27006))))) / 1))), (1 & 1) * (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), clamp(((0 & -27006)), ((0 & -27006)), ((0 & -27006))))))), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) & -27006))))) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))))))))), (true ? _GLF_IDENTITY((1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), clamp(((0 & -27006)), ((0 & -27006)), ((0 & -27006))))))), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) & -27006))))) / 1))), (1 & 1) * (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), clamp(((0 & -27006)), ((0 & -27006)), ((0 & -27006))))))), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) & -27006))))) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))))))))), ((1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), clamp(((0 & -27006)), ((0 & -27006)), ((0 & -27006))))))), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) & -27006))))) / 1))), (1 & 1) * (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(((0 & -27006)), clamp(((0 & -27006)), ((0 & -27006)), ((0 & -27006))))))), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) & -27006))))) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))))))))))) | 0) : _GLF_FUZZED(_injected_loop_counter)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (1 ^ (0 & -27006))))))))), (! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), max(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))))), _GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), min((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), max((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter))))) + 0)))))), 0 ^ (((0 & -27006)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) / 1))))))), ~ (_GLF_IDENTITY(~ ((1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), max(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))))), _GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), min((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), max((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter))))) + 0)))))), 0 ^ (((0 & -27006)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) / 1)))))))), 0 | (~ ((1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), max(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))))), _GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), min((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), max((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(0 & -27006, (true ? 0 & -27006 : _GLF_FUZZED(_injected_loop_counter))))) + 0)))))), 0 ^ (((0 & -27006)))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) / 1))))))))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))))))))) && true))), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (_GLF_IDENTITY(bool(bvec4(false, false, false, true)), false || (bool(bvec4(false, false, false, true))))) || false)), (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, (_GLF_IDENTITY(0 & -27006, (0 & -27006) | (0 & -27006))) | (_GLF_IDENTITY(_GLF_IDENTITY(0 & -27006, (0 & -27006) << 0), clamp(0 & -27006, _GLF_IDENTITY(0 & -27006, (0 & -27006) / 1), 0 & -27006))))), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))), ((_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ _GLF_IDENTITY((((0 & -27006))), max(_GLF_IDENTITY((((0 & -27006))), 1 * (_GLF_IDENTITY((((0 & -27006))), min((((0 & -27006))), (((0 & -27006))))))), (((0 & -27006))))))) / 1)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006))))))))), (! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(_GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))), clamp(_GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))), _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))), _GLF_IDENTITY(_GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))), ~ (~ (_GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1))))))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ (0 & -27006)), true && (_injected_loop_counter != (1 ^ (0 & -27006)))))))))))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(_GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))), (_GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1))), 0 + (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1))))))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006))))))))), (! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(0 & -27006, (0 & -27006) >> (0 << _GLF_IDENTITY(int(8), int(8)))))), 0 ^ _GLF_IDENTITY((((_GLF_IDENTITY(0, (0) << 0) & -27006))), min((((_GLF_IDENTITY(0, (0) << 0) & -27006))), (((_GLF_IDENTITY(0, (0) << 0) & -27006)))))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))))))))) && true)), true && (! (_GLF_IDENTITY(! (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((0 & -27006), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), _GLF_IDENTITY((_GLF_IDENTITY(((0 & _GLF_IDENTITY(-27006, max(_GLF_IDENTITY(-27006, (-27006) / 1), -27006)))), 0 ^ (((0 & _GLF_IDENTITY(-27006, (-27006) / ((1 | 0) | 1))))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(((0 & _GLF_IDENTITY(-27006, max(_GLF_IDENTITY(-27006, (-27006) / 1), -27006)))), 0 ^ (((0 & _GLF_IDENTITY(-27006, (-27006) / ((1 | 0) | 1))))))), ((_GLF_IDENTITY(((0 & _GLF_IDENTITY(-27006, max(_GLF_IDENTITY(-27006, (-27006) / 1), -27006)))), 0 ^ (((0 & _GLF_IDENTITY(-27006, (-27006) / ((1 | 0) | 1)))))))) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(((0 & _GLF_IDENTITY(-27006, max(_GLF_IDENTITY(-27006, (-27006) / 1), -27006)))), 0 ^ (((0 & _GLF_IDENTITY(-27006, (-27006) / ((1 | 0) | 1))))))), ((_GLF_IDENTITY(((0 & _GLF_IDENTITY(-27006, max(_GLF_IDENTITY(-27006, (-27006) / 1), -27006)))), 0 ^ (((0 & _GLF_IDENTITY(-27006, (-27006) / ((1 | 0) | 1)))))))) / 1), int(_GLF_ONE(1.0, injectionSwitch.y))))) + 0)) / 1)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006))))))))), (! (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, int(int(0 & -27006)))), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1))) >> 0))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))))))), false || (((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY((_GLF_IDENTITY(0 & -27006, int(int(0 & -27006)))), ~ (~ _GLF_IDENTITY(((0 & -27006)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006)))), (_GLF_IDENTITY(((0 & -27006)), 0 ^ (((0 & -27006))))) / 1))) >> 0))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 & -27006)))))))))))) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))) || false))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1)) | 0))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       for(int _injected_loop_counter = (0 & 43640); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), injectionSwitch), max(injectionSwitch, injectionSwitch))))), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY((max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-179.133), _GLF_FUZZED(-0.5)), vec2(((max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))[0], ((max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))))))) - vec2(0.0, 0.0)).y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y) / 1.0) : _GLF_FUZZED(5.1))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(acosh(injectionSwitch)) : injectionSwitch)).y)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(acosh(injectionSwitch)) : injectionSwitch)).y)))))), false))))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, 1.0)))).y))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, false)))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true)))))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), true, true)))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.8) : injectionSwitch.y))))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), true, true)))))))), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))) > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), true, true)))))))), true)), true, false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))) > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), true, true)))))))), true)), true, false)), true), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))) > injectionSwitch.y))), false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true)), true, true)))))))), true)), true, false)), true))))))))))))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED((true ? 49.43 : 3238.5417)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3((injectionSwitch), _GLF_IDENTITY(dot(vec3(length(vec2(0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(length(vec2(0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, abs(0.0), 0.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(mat3((injectionSwitch), _GLF_IDENTITY(dot(vec3(length(vec2(0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(length(vec2(0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, abs(0.0), 0.0, 1.0, 0.0, 1.0))))) * vec2(1.0, 1.0)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) : _GLF_FUZZED(frexp(-8816.4438, _injected_loop_counter)))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))))))))) || (bool(bvec4(_GLF_DEAD(false), true, false, true))))))
                      break;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    return;
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), float(_GLF_FUZZED(1.4)), bool(false))), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) * mat2(1.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), float(_GLF_FUZZED(1.4)), bool(false))))))))));
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))) | 0))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(2), int(2))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) > (0 ^ 0)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0))))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))));
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), (true ? float(injectionSwitch.x) : _GLF_FUZZED(determinant(mat2(-0.1, 4.9, -790.553, 84.58))))))))) + 0.0)), injectionSwitch.x)), cos(0.0), 1.0, 1.0, cos(0.0), 1.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, 1.0))) < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), (int(_GLF_IDENTITY(0, ~ (~ (0))))) / 1), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) << 0))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))));
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)), (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), log(1.0), 0.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), log(1.0), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), log(1.0), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), log(1.0), 0.0, 0.0, 0.0, 0.0))), min(_GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), log(1.0), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), log(1.0), 0.0, 0.0, 0.0, 0.0))))))) + 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.7) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))), (injectionSwitch.y), (injectionSwitch.y))), (injectionSwitch.y), (injectionSwitch.y)))))))), float(mat3(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6002.4758)), bool(false))), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(417.084))), 0.0)), min(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(mat2x4(vec4(1.0, 0.0, 0.0, 0.0), exp(0.0), 0.0, 1.0, 1.0)), (vec4(mat2x4(vec4(1.0, 0.0, 0.0, 0.0), exp(0.0), 0.0, 1.0, 1.0))) / vec4(1.0, 1.0, 1.0, 1.0)))))), dot(vec4(1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0)))))))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), clamp(ivec4(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), ivec4(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), ivec4(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))) + (1)), (_GLF_IDENTITY(1, 0 + (1))) / 1)) % subgroup_size), uint(uint(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), max((1), (1))))) / _GLF_IDENTITY(1, max(1, 1)))) % subgroup_size))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, bool(bvec4((injectionSwitch.x < injectionSwitch.y) && true, true, true, false)))))))), bool(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))), bool(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))), true, false, false))))))))), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((mat3x2(-8.0, 8.8, 7493.2552, -86.08, 9.0, 949.364) * vec3(-61.86, 1.1, -423.808))))).y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
      return;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), false || (_GLF_DEAD(false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(! (! (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, 1), clamp(ivec4(1, 0, 1, 1), ivec4(1, 0, 1, 1), ivec4(1, 0, 1, 1))))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), bool(bool(! (! (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, 1), clamp(ivec4(1, 0, 1, 1), ivec4(1, 0, 1, 1), ivec4(1, 0, 1, 1))))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (! (! (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 1, 1), clamp(ivec4(1, 0, _GLF_IDENTITY(1, (1) ^ 0), 1), ivec4(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) + 0), 1, 1), ivec4(1, 0, 1, 1))))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))))))))
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, false))))))) && true)))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        continue;
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
                              return;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       do
                        {
                         for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), max((0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(6), int(6))))) ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))) || false)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), true, true))), false, false))), true, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false))), true, true)))), ! (! (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y) && true)), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false))), true, true))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false))), true, _GLF_IDENTITY(true, false || (true)))))), true, false, true)))) || false)))))
                              {
                               atomicStore(checker[virtual_gid], read, 4, 64, 4);
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), (false ? _GLF_FUZZED(vec2(-171.378, 3.2)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))), injectionSwitch)).x > injectionSwitch.y))))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), false, false, true)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_IDENTITY((false), ((false)) && true), (false || _GLF_IDENTITY((false), ((false)) && true)) && true)) && true))))
          continue;
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
