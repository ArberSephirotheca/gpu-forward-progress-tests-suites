#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 uint _f0;
 mat3x4 _f1;
 uint _f2;
 mat4 _f3;
 int _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_16 {
 bool _f0;
 mat4x3 _f1;
 _GLF_struct_15 _f2;
 float _f3;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 uvec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_12 {
 float _f0;
 mat4 _f1;
} ;

struct _GLF_struct_14 {
 float _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 ivec4 _f1;
 ivec4 _f2;
 uvec2 _f3;
 float _f4;
 vec3 _f5;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 float _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_6 {
 bool _f0;
 mat3 _f1;
 uint subgroup_base;
 mat4x3 _f2;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat4x2 _f1;
 mat3 _f2;
 mat4x2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_4 {
 int _f0;
 mat2x4 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 mat4x3 _f1;
 uint _f2;
 vec4 _f3;
 mat2x3 _f4;
 mat3 _f5;
 uint _f6;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 vec3 _f1;
 bvec3 _f2;
 _GLF_struct_1 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 uint _f2;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0)), 0.0 + (float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))))))) > injectionSwitch.y)))))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))), false, false, false))) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((((((_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), (_GLF_IDENTITY(1, 1 * (1))) / 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(99268) : int(4))), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(74805) : _GLF_IDENTITY(5, (5) | 0)))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(int(int((((((_GLF_IDENTITY(1, 1 * _GLF_IDENTITY((1), ((1)) | 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-36431) : 4)), 0), ~ (~ (ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-36431) : 4)), 0))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-36431) : 4)), 0), ~ (~ (ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-36431) : 4)), 0)))))) << 0))), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))))), (int(int((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), (_GLF_IDENTITY(int(5), min(int(5), int(5)))) | (_GLF_IDENTITY(int(5), min(int(5), int(5))))), _GLF_IDENTITY(int(5), min(int(5), int(5))), _GLF_IDENTITY(int(5), min(int(5), int(5))))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6)))))) << 0))) | (_GLF_IDENTITY(((((_GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4)))) - 0) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), ((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, ~ (~ (5)))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6)))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY((((((_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), (0 | 0) ^ (_GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(1, 1 * (1)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(5, 1, 1), (ivec3(5, 1, 1)) ^ ivec3(0, 0, 0))), max(int(_GLF_IDENTITY(ivec3(5, 1, 1), (ivec3(5, 1, 1)) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(5, 1, 1), (ivec3(5, 1, 1)) ^ ivec3(0, 0, 0))))))) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), int(5))) << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(int(4), int(int(int(4))))))), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6)))), 0 + (int((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))))))), (int(int((((((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6)))))) << 0))) | (_GLF_IDENTITY((((_GLF_IDENTITY(((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (false ? _GLF_FUZZED(67655) : ~ (((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), ((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) << _GLF_IDENTITY(int(6), int(6)))) | 0))), (_GLF_IDENTITY((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(int(int((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))))), (int(int((((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-75717))), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6)))))) << 0))) | (_GLF_IDENTITY((((((_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << 0))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)), (false ? _GLF_FUZZED(-8357) : _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))), ((((((_GLF_IDENTITY(1, 1 * _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (false ? _GLF_FUZZED(5474) : (1)))) / 1)) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4))))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6)))) | 0)))) | 0)) << 0) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-20061) : _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY((((_GLF_IDENTITY(1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) - _GLF_IDENTITY(0, (0) + 0)), (true ? (((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) * 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(int(5), int(5)))))) : _GLF_FUZZED(82230)))), (true ? (_GLF_IDENTITY((((_GLF_IDENTITY(1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) - _GLF_IDENTITY(0, (0) + 0)), (true ? (((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) * 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(int(5), int(5)))))) : _GLF_FUZZED(82230)))) : _GLF_FUZZED(-70189))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6)))) : _GLF_FUZZED(-86925)))) >> _GLF_IDENTITY(int(6), int(6))), ((((_GLF_IDENTITY((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4))))))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))), 0 ^ (_GLF_IDENTITY((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> 0)), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(int(int((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))))), 0 | (int(int((((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), int(4))) << _GLF_IDENTITY(int(5), int(5)))))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, max(6, 6)), 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, max(6, 6)), 1), (ivec2(_GLF_IDENTITY(6, max(6, 6)), 1)) ^ ivec2(0, 0))) | (ivec2(_GLF_IDENTITY(6, max(6, 6)), 1)))), int(int(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, max(6, 6)), 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, max(6, 6)), 1), (ivec2(_GLF_IDENTITY(6, max(6, 6)), 1)) ^ ivec2(0, 0))) | (ivec2(_GLF_IDENTITY(6, max(6, 6)), 1)))))))))))) + 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (false))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 | (6))) >> 0), 0, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(42067) : int(8))))))), (int(ivec3(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 | (6))) >> 0), 0, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(42067) : int(8)))))))) / (0 ^ 1)))), (int(6)) | (int(6)))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(bvec2(bool(bool(! (_GLF_DEAD(false)))), false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, (injectionSwitch.x) - sqrt(sin(0.0))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), 1.0, 1.0, 1.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(597.680) : injectionSwitch.y, (false ? _GLF_FUZZED(597.680) : injectionSwitch.y) * 1.0)))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1.0, -9.4)))).x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -98825)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (true ? int(ivec2(1, 0)) : _GLF_FUZZED(16763)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0 | 0)) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, ! (! (false))))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, true && (false))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), mix(vec2((vec2(injectionSwitch.x, 0.0))[0], _GLF_FUZZED(16.67)), vec2(_GLF_FUZZED(-7.8), (vec2(injectionSwitch.x, 0.0))[1]), bvec2(false, true)))) / vec2(1.0, 1.0))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), mix(vec2((vec2(injectionSwitch.x, 0.0))[0], _GLF_FUZZED(16.67)), vec2(_GLF_FUZZED(-7.8), (vec2(injectionSwitch.x, 0.0))[1]), bvec2(false, true)))) / vec2(1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), mix(vec2((vec2(injectionSwitch.x, 0.0))[0], _GLF_FUZZED(16.67)), vec2(_GLF_FUZZED(-7.8), (vec2(injectionSwitch.x, 0.0))[1]), bvec2(false, true)))) / vec2(1.0, 1.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), mix(vec2((vec2(injectionSwitch.x, 0.0))[0], _GLF_FUZZED(16.67)), vec2(_GLF_FUZZED(-7.8), (vec2(injectionSwitch.x, 0.0))[1]), bvec2(false, true)))) / vec2(1.0, 1.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), mix(vec2((vec2(injectionSwitch.x, 0.0))[0], _GLF_FUZZED(16.67)), vec2(_GLF_FUZZED(-7.8), (vec2(injectionSwitch.x, 0.0))[1]), bvec2(false, true)))) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), mix(vec2((vec2(injectionSwitch.x, 0.0))[0], _GLF_FUZZED(16.67)), vec2(_GLF_FUZZED(-7.8), (vec2(injectionSwitch.x, 0.0))[1]), bvec2(false, true)))) / vec2(1.0, 1.0)))))) < injectionSwitch.y)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(-53.25), _GLF_FUZZED(26.05)), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))))[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1]))))))[1]), bvec2(true, true))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y) && true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(7445.4816))), injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (false), (false || (false)) && true), true, true, true)), (bool(bvec4(_GLF_IDENTITY(false || (false), (false || (false)) && true), true, true, true))) && true)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-754.578), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-6.6, max(_GLF_IDENTITY(-6.6, min(-6.6, -6.6)), -6.6)), 8.0)))).y) * (_GLF_IDENTITY(_GLF_FUZZED(-754.578), min(_GLF_FUZZED(_GLF_IDENTITY(-754.578, clamp(-754.578, -754.578, -754.578))), _GLF_FUZZED(-754.578)))))), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(730.257) : injectionSwitch.x, (true ? _GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(730.257) : injectionSwitch.x : _GLF_FUZZED(-41.20)))))), bool(true))) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) >> 0)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-60.53)), bool(false))) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-691.517))) > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(true, true && (true)))), (bool(bvec4(false, true, true, _GLF_IDENTITY(true, true && (true))))) && true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, 0 ^ (0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, sqrt(_GLF_IDENTITY(0.0, (0.0) - sin(0.0))), 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true)) && true))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(determinant(mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(9557.5041)), bool(false))), 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch.t) : _GLF_IDENTITY(determinant(mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(9557.5041)), bool(false))), 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0)), mix(float(determinant(mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(9557.5041)), bool(false))), 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0))), float(_GLF_FUZZED(-9.7)), bool(false))))) * (1.0))), clamp(vec3(_GLF_IDENTITY(1.0, determinant(mat4(abs(1.0), 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))))), 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), clamp(length(normalize(vec3(1.0, 1.0, 1.0))), length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9613.7218)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(683.805) : 1.0))), bool(true))), (1.0) - 0.0), 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0)))) + 0.0), 1.0))), _GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.4)), bool(false)))))), max(length(normalize(vec3(1.0, 1.0, 1.0))), length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), mix(vec3((normalize(vec3(1.0, 1.0, 1.0)))[0], (normalize(vec3(1.0, 1.0, 1.0)))[1], _GLF_FUZZED((-7.1 / -1.3))), vec3(_GLF_FUZZED(-71.21), _GLF_FUZZED(vec2(268.150, 5.9).r), (normalize(vec3(1.0, 1.0, 1.0)))[2]), bvec3(false, false, true))))))))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), 1.0)), injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0)) * (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0)))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0)))))))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, determinant(_GLF_IDENTITY(mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0), (true ? mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4(mat4x2(-8.2)))))) * _GLF_IDENTITY((1.0), min((1.0), (1.0)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(determinant(mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-92.06 - -5210.5672))), bool(false))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0)) * (1.0), (determinant(mat4(abs(1.0), 0.0, _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY((-92.06 - -5210.5672), max((-92.06 - -5210.5672), _GLF_IDENTITY((-92.06 - -5210.5672), ((-92.06 - -5210.5672)) + 0.0))))), bool(false))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2886.9217)), bool(false))), 1.0, 0.0, 1.0)) * (1.0)) - 0.0))) * 1.0)), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0)))) * determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), determinant(mat4(abs(1.0), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(5.0), 1.0 * (_GLF_FUZZED(5.0)))), bool(false))), _GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), (_GLF_IDENTITY((1.0), float(vec2((1.0), 1.0)))) / 1.0), (1.0))) + 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, cos(determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, determinant(mat4(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))) : _GLF_FUZZED(-208.588))), 0.0, 0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(-79.91, -6.3, 686.857, -223.299, -39.62, 2479.7165, 185.136, -924.792, 3692.7942, -4.5, 2281.1669, 27.37, 76.67, 9898.1522, -0.1, -1.1)) : mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))) : _GLF_FUZZED(-208.588))), 0.0, 0.0, 0.0, 0.0, 0.0))))) / 1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-68.62)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))))), 0.0, sin(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, log(1.0), sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), sqrt(1.0)))), _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - _GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 1.0) * (vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), vec2(mat3(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8189.4811)), float(0.0), bool(true))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, abs(0.0), 1.0, cos(0.0), sqrt(1.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, abs(0.0), 1.0, cos(0.0), sqrt(1.0), 0.0, 1.0)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), mat2(1.0) * (min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, abs(0.0), 1.0, cos(0.0), sqrt(1.0), 0.0, 1.0), mat4x3(mat4x3(mat4x3(0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, abs(0.0), 1.0, cos(0.0), sqrt(1.0), 0.0, 1.0)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))).y), 0.0, 1.0, 1.0, 0.0, 1.0)) * (1.0))))), gl_SubgroupInvocationID);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8))), ! (! (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))))), true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(false, (false) || false)), true, false))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-3189.7813, -6.6)))).y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y = _GLF_struct_replacement_7.subgroup_local_id;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), (true && (_GLF_IDENTITY(false, ! (! (false))))) || false)), bool(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true, false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), 1, 0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, clamp(0, 0, 0))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_2(_GLF_struct_0(ivec2(1), bvec2(_GLF_IDENTITY(true, ! (! (true))))), vec3(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), _GLF_struct_1(uvec3(1u), mat4x3(1.0), 1u, vec4(1.0), mat2x3(1.0), mat3(1.0), 1u), bvec3(true)), _GLF_struct_4(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (1))))), mat2x4(1.0), _GLF_struct_3(ivec3(1), mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat3(1.0), mat4x2(1.0), vec4(1.0))), 1u, gl_NumWorkGroups.x);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-939.263)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-939.263)), bvec2(true, false))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))).y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-87.26)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) | ((gl_WorkGroupSize))), (gl_WorkGroupSize), (gl_WorkGroupSize))) + uvec3(0u, 0u, 0u)))), (uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u))))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)), ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))) << uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u))))).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u)), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u)), (_GLF_FUZZED(_GLF_IDENTITY(uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u), (uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u)) | (_GLF_IDENTITY(uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u), min(uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u), uvec3(193180u, _GLF_IDENTITY(137331u, (_GLF_IDENTITY(137331u, min(137331u, 137331u))) >> 0u), 166270u))))))) | uvec3(0u, 0u, 0u))))) : _GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * _GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) << uvec3(0u, 0u, 0u)), (gl_WorkGroupID))))))) >> uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(asinh(-8.5)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(925.468)), bool(false))) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, false, true)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6344.1589)), bool(false))), ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6344.1589)), bool(false)))), bool(bvec2(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6344.1589)), bool(false)))), true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(true)))))))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base, ~ (~ (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base)))), ~ (~ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base, ~ (~ (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base))))))) * 1u), 0u ^ (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base), (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : ~ (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base)))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), uint(6u)), (1u << _GLF_IDENTITY(uint(6u), uint(6u))) * 1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(uint(6u), uint(6u))))))) / 1u)) << (0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), 0u | (uint(8u))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0)), float(_GLF_IDENTITY(vec3(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0)), 1.0, 0.0), (vec3(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0)), 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_IDENTITY(true, false || (true)), mat3(1.0), subgroup_id * subgroup_size, mat4x3(1.0));
 GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x = _GLF_struct_replacement_6.subgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(mat3x4(1.0), 1.0, _GLF_struct_9(_GLF_struct_8(mat3x2(1.0), mat4x2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])).x, min(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base) | uvec4(_GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(0u, (0u) | (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 0u)).w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x)) + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y) / 1u)), _GLF_struct_11(_GLF_struct_10(mat4(1.0), ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-33332) : 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (ivec4(_GLF_IDENTITY(1, (1) | (1)))) | (_GLF_IDENTITY(ivec4(1), (ivec4(1)) - ivec4(0, 0, 0, 0)))), (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))) ? _GLF_IDENTITY(ivec4(1), (ivec4(1)) | (_GLF_IDENTITY(ivec4(1), (ivec4(1)) - ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(32095)))))) / 1), 0, 0, 0)))) : _GLF_FUZZED(sign(ivec4(-85448, -90496, -81804, _GLF_IDENTITY(27767, ~ (~ (27767)))))))), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(1, 1, 1, 1), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) >> ivec4(0, 0, 0, 0)) | (ivec4(_GLF_IDENTITY(1, (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) & 1) * (_GLF_IDENTITY(1, 0 | (1)))), 1, 1, 1))) ^ ivec4(1, 1, 1, 1)) ^ (ivec4(1)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, 0, 0, 0) | (ivec4(1, 1, 1, 1))) ^ ivec4(1, 1, 1, 1)) ^ (ivec4(1)), ((_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, 1, 1), (_GLF_IDENTITY(ivec4(1, 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1, 1))))) << ivec4(0, 0, 0, 0)), ivec4(0, _GLF_IDENTITY(0, min(0, 0)), 0, 0) | (ivec4(1, 1, _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, 0 | (1))))), 1))) ^ ivec4(1, 1, 1, 1)) ^ (ivec4(1))) >> ivec4(0, 0, 0, 0)))))), uvec2(1u), 1.0, vec3(1.0)), ivec3(1)), _GLF_struct_14(1.0, _GLF_struct_12(1.0, mat4(1.0)), _GLF_struct_13(vec4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), uvec3(1u), mat2x4(1.0))), _GLF_struct_16(true, mat4x3(1.0), _GLF_struct_15(1u, mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3965.6953) : 1.0))), 1u, mat4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(58.26)))), 1, mat3x4(1.0)), 1.0));
 GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.z = _GLF_struct_replacement_17._f2.virtual_gid;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x) | 0u), uint(uint(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x))) + ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size), clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u)).w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + _GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size), max(((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size), ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size))))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (true ? GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base : _GLF_FUZZED(uaddCarry(uvec4(61644u, 22336u, 52690u, 31113u), uvec4(62779u, 121740u, 66233u, 36071u), GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base)))).w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(6519)))) % subgroup_size, ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(6519)))) % subgroup_size) | ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(6519)))) % subgroup_size)))) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x) >> 0u) + ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y + 1) % subgroup_size)) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.x + ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, min(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base)).y + 1) % subgroup_size)))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = 0;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(93114))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), 0 + (int(int(1)))), (true ? int(int(1)) : _GLF_FUZZED(-5605))))))), uint(1))), 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(-34410))), _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(1), int(1))) + _GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), clamp((4), (4), (4))), 1 * (_GLF_IDENTITY((4), clamp((4), (4), (4)))))) + 0)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2, uint(uvec3(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2) | 0u), 1u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) | (uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), ~ (~ ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2)))), clamp((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3]), ~ (~ (uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])))))) | uvec4(0u, 0u, 0u, 0u)).y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), ~ (~ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y)) % 2)))), clamp((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3]), ~ (~ (uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])))))) | uvec4(0u, 0u, 0u, 0u)).y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), ~ (~ ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), min(~ (3), ~ (3)))))]), ~ (~ (uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])))))) | uvec4(0u, 0u, 0u, 0u)).y % 2), min((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), min(~ (3), ~ (3)))))]), ~ (~ (uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])))))) | uvec4(0u, 0u, 0u, 0u)).y % 2), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), min(~ (3), ~ (3)))))]), ~ (~ (uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])))))) | uvec4(0u, 0u, 0u, 0u)).y % 2))), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y)) % 2)), max(((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y)) % 2)), _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y)) % 2)), (((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y) | (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y)) % 2))) | 0u))))), clamp((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base))[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3], (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3]) << 0u)), ~ (~ (uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])))))) | uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))).y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2)))))) + 0u), _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2), ((GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.y % 2)) / 1u)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])).y % 2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])).y % 2, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base, uvec4(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[0], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[1], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[2], GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base[3])).y % 2) | 0u))))))) == 0)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), min((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(53396))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))))))
                barrier();
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(abs(1.0)), tan(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, log(1.0))), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, log(1.0)))), 0.0, 1.0, 1.0, 1.0, log(1.0)))).y)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(abs(1.0)), tan(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, log(1.0))), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, log(1.0)))), 0.0, 1.0, 1.0, 1.0, log(1.0)))).y)))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(abs(1.0)), tan(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, log(1.0))), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, log(1.0)))), 0.0, 1.0, 1.0, 1.0, log(1.0)))).y)))))), false, true), true))))))
      {
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0, bool(bool(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | 0) - 0) > 0)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, true))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
              {
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (0 | 0), ((int(7)) | (0 | 0)) * (((0 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.z, 1u * (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.z))], 4, 64, 2);
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false)), (bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false))) || false)));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) || (_GLF_IDENTITY(false, bool(bool(false)))))))), bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))), bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ((_GLF_IDENTITY(false, bool(bool(false))))) && true)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)))))), _GLF_IDENTITY(! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))), true && (_GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_IDENTITY(bool(bool((! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), (bool(bool((! (! (_GLF_IDENTITY(false, bool(bool(false))))))))) || false)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))) && (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))), true && ((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(false, ! (! (false))) || (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (false) && true))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec2(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.z, (GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.z) - 0u)], 4, 64, 2);
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true)))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), true, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
    {
     subgroupBarrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)), true && (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true) || (_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y), tan(0.0) + (_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y))))))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 do
  {
   atomicStore(checker[GLF_merged4_0_1_13_1_1_17_2_1_11_3_1_14subgroup_basesubgroup_local_idvirtual_gidworkgroup_base.z], _GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(subgroup_size))), 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-1443 & 0) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0) - 0.0)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), true && (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))), ! (! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), true && (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))))))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(int(3), max(int(3), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(bitCount(read))))))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))) && true))), true, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), (bool(bool(_GLF_IDENTITY(false, (false) && true)))) || false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))) * 1.0), injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             for(int _injected_loop_counter = (0 & (94856 & -34628)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1)))) && true)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(vec4(-29.47, 869.785, 0.2, -231.312).w)), vec2(_GLF_FUZZED((-36.57)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y), false, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0), (mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), false, true), bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, true)))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (true))))), bvec3(bvec4(bvec3(bvec4(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, true), true)), true)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) - 0)) ^ 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(709.850), _GLF_FUZZED(float(56636))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)), clamp(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)), min(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0)))))).y) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))) || false) ? _GLF_FUZZED(-13438) : int(2)))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
