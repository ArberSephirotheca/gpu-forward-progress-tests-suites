#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u)))) >> 0u);
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(uintBitsToFloat(180469u)) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))) ^ (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true)))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec2(! (_GLF_IDENTITY(false, false || (false))), true)))) && true)))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-903.513, -1.1)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2092.7844)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.7), _GLF_FUZZED(115.907)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(15.98))) > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (true ? ~ (_injected_loop_counter ++) : _GLF_FUZZED(atomicMin(_injected_loop_counter, _injected_loop_counter)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 0.0, 1.0, 0.0, sqrt(0.0), 1.0), mat3x2(mat4x3(mat3x2(injectionSwitch.y, 0.0, 1.0, 0.0, sqrt(0.0), 1.0))))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))) || false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, tan(0.0), 1.0))))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, ! (! (((injectionSwitch.x > injectionSwitch.y)) || false))))) && true) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.25)), vec2(_GLF_FUZZED(-7.0), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)) || false)) && true) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true) || false)))))))))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(30.06) : injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true) || false)))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))), ! (! (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), (bool(bvec4(((injectionSwitch.x > injectionSwitch.y)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) || false)))) && true) || false))))))))))))))))
    barrier();
  }
 for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, sqrt(1.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-83.94)), float(injectionSwitch.y), bool(true)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, bool(bool(_GLF_IDENTITY((! (false)) || false, bool(bvec2((! (false)) || false, true)))))))))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, bool(bool(_GLF_IDENTITY((! (false)) || _GLF_IDENTITY(false, bool(bvec3(false, true, true))), bool(bvec2((! (false)) || false, true))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ ((0)))) ^ 0))))); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (_GLF_IDENTITY(! ((_GLF_DEAD(false)) && true), (! (_GLF_IDENTITY((_GLF_DEAD(false)) && true, true && _GLF_IDENTITY((_GLF_IDENTITY((_GLF_DEAD(false)) && true, true && ((_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))), bool(bvec3((_GLF_IDENTITY((_GLF_DEAD(false)) && true, true && ((_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))), true, true)))))) || _GLF_IDENTITY(false, false || (false)))))), bool(bool(! (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) && true), (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-56.09))), injectionSwitch.x)) > injectionSwitch.y)), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-60779) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-89913))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))))))))))))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, max(1 & 1, 1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1))), (true ? max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(ivec3(86186, -74390, -24805)[1]))))) << _GLF_IDENTITY(int(0), int(0))), int(_GLF_IDENTITY(ivec2(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))))) << _GLF_IDENTITY(int(0), int(0))), 0), (_GLF_IDENTITY(ivec2((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, max(1, 1)))))), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (0 ^ 1) * (1)), 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) | 0)) - 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec2(ivec3(-59363, 40852, 46130))) : _GLF_IDENTITY(ivec2((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, max(1, 1)))))), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (0 ^ 1) * (1)), 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) | 0)) - 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(bitfieldInsert(ivec2(-72290, 99530), ivec2(77037, -39256), 95366, 79122)) : ivec2((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, max(1, 1)))))), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (0 ^ 1) * (1)), 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) | 0)) - 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), int(0))), 0)))))) | (ivec2((((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), 1 * (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)))), _GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), _GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-24645)))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), int(0))), 0))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 1 * (_GLF_IDENTITY(int(0), int(0))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))), clamp((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1)))))) << 0), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))), min(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))), max((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) ^ 0)) >> _GLF_IDENTITY(int(1), int(1))))))))) << _GLF_IDENTITY(int(0), int(0))), 0), (ivec2((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ 0), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))), int(1)), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (1) >> 0), 0, 1))), 1, 1))), int(1)), 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) | 0)) - 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec2((((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))), 0))))), 1, 1, 0), min(ivec4(_GLF_IDENTITY(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1)))), min((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1)))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) / 1), _GLF_IDENTITY(int(0), int(0))))), int(_GLF_IDENTITY(ivec2(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), max(int(1), int(1))))))))) << _GLF_IDENTITY(int(0), int(0))), 0), (ivec2((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) | 0), _GLF_IDENTITY(int(1), min(int(1), int(1))), int(1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | (1))))), int(1)), 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), int(_GLF_IDENTITY(ivec3(clamp(1, 1, 1), 1, 0), (ivec3(clamp(1, 1, 1), 1, 0)) * (ivec3(1, 1, 1) | ivec3(0, 0, 0))))))), int(_GLF_IDENTITY(1, ~ (~ (1)))))) | 0)) - 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec2((((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), int(0))), 0))))), 1, 1, 0), ivec4(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) + (-89538 & 0))))), int(1)), int(ivec4(_GLF_IDENTITY(int(1), int(1)), 0, 1, 0))), _GLF_IDENTITY(int(1), int(1))))) << _GLF_IDENTITY(int(0), int(0))), int(_GLF_IDENTITY(ivec2(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) / 1)), int(1)), max((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) << 0), 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))))) << _GLF_IDENTITY(int(0), int(0))), 0), (ivec2((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)), 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), min(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))) >> 0)), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), 1))), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 + (1))))), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) | 0)) - 0)))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | 0)), 0)) | (ivec2(_GLF_IDENTITY((((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) >> 0))), int(_GLF_IDENTITY(0, clamp(0, 0, 0))))), 0 | ((((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) >> 0))), int(_GLF_IDENTITY(0, clamp(0, 0, 0))))))), 0))))), 1, 1, 0))))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint read = 0;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false || (_GLF_IDENTITY(false, (false) || false)))) && true)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0)) ^ 0))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, true))))))))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-41.67, -3.5)) : injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))))), true)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-41.67, -3.5)) : injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))))), true))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, log(1.0), 1.0, 0.0, 0.0)), max(vec2(mat3x2(injectionSwitch, log(1.0), 1.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, log(1.0), 1.0, 0.0, 0.0))))).y)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(max(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), next_virtual_gid), min(_GLF_IDENTITY(max(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), next_virtual_gid), clamp(max(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), next_virtual_gid), max(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), next_virtual_gid), max(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), next_virtual_gid))), max(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), next_virtual_gid))))], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, mix(float(_GLF_FUZZED(-0.5)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, tan(0.0)))).x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, 1.0, 0.0)))))) + 0.0)), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) / vec2(1.0, 1.0)).y))), false, false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))), false)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) && true))), false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-5.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false, false))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), false || (_GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false))))) || false))))), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) && true))), false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-5.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false, false))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), false || (_GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false))))) || false))))), false, false, true))), (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) && true))), false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-5.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false, false))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), false || (_GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false))))) || false))))), false, false, true)))) && true)))))), bool(bool((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))), false)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) && true))), false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-5.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false, false))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), false || (_GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false))))) || false))))), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) && true))), false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-5.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false, false))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), false || (_GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false))))) || false))))), false, false, true))), (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) && true))), false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false), true)))), bool(bool(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(-5.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))), false, false))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), false || (_GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false)))), (bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))) || false)))), false))))) || false))))), false, false, true)))) && true))))))))))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, true)), false || (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(186537u, (true ? 186537u : _GLF_FUZZED(next_virtual_gid)))), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(186537u, (true ? 186537u : _GLF_FUZZED(next_virtual_gid)))))) : buf[virtual_gid])), 4, 64, 2);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 | 0))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), mix(vec2((vec2(vec2(injectionSwitch)))[0], (vec2(vec2(injectionSwitch)))[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1)))))]), vec2(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), clamp(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), mix(float(_GLF_IDENTITY(_GLF_FUZZED(7321.4766), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9.9) : _GLF_FUZZED(7321.4766)))), float(_GLF_FUZZED(4118.0589)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(4118.0589), mix(float(_GLF_FUZZED(2.0)), float(_GLF_FUZZED(4118.0589)), bool(true))), _GLF_FUZZED(4118.0589))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0 + (_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), clamp(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), mix(float(_GLF_FUZZED(7321.4766)), float(_GLF_FUZZED(4118.0589)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(4118.0589), mix(float(_GLF_FUZZED(2.0)), float(_GLF_FUZZED(4118.0589)), bool(true))), _GLF_FUZZED(4118.0589))), 1.0, _GLF_IDENTITY(sqrt(0.0), clamp(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) - 0.0), _GLF_IDENTITY(sqrt(0.0), min(sqrt(0.0), sqrt(0.0))), sqrt(0.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(6.1)), bool(false))))), 0.0, 1.0, 0.0, 0.0, 0.0)), (true ? float(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), mix(float(_GLF_IDENTITY(_GLF_FUZZED(4118.0589), (_GLF_FUZZED(4118.0589)) - 0.0)), float(_GLF_FUZZED(float(-89581))), bool(false))), mix(float(_GLF_FUZZED(7321.4766)), float(_GLF_FUZZED(4118.0589)), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(4118.0589), mix(float(_GLF_FUZZED(2.0)), float(_GLF_FUZZED(4118.0589)), bool(true))), _GLF_FUZZED(4118.0589))), 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2801.6065) : 1.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(6.1)))))), _GLF_FUZZED(-73.77)), bvec2(false, false)))).y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0, tan(0.0), 0.0, 0.0, 0.0))) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, tan(0.0), 0.0, tan(0.0), 0.0, 0.0, 0.0))) > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, virtual_gid, virtual_gid), min(clamp(virtual_gid, virtual_gid, virtual_gid), clamp(virtual_gid, virtual_gid, virtual_gid))))], read, 4, _GLF_IDENTITY(64, 0 ^ (64)), 4);
}
