#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 31:
     if(true)
      {
       bvec4 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
      }
     else
      {
       ;
       vec3 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v;
       bool _GLF_SWITCH_0_4v;
       for(       mat4x3(873.818, 306.145, -92.75, -3984.6402, 2.2, 9.7, -7.1, -288.384, -391.513, -120.513, 414.857, 33.22);
 (_GLF_SWITCH_0_4v); mat2(57.96, -163.149, 1313.3074, -843.879))
        {
         while((ivec4(23674, -68839, -35227, -23348) != ivec4(-48564, -19106, 86713, -85753)))
          {
           bvec4(false, true, true, false);
           ;
           mat4 _GLF_SWITCH_0_5v;
           vec2(5435.5411, 8.0);
           float _GLF_SWITCH_0_6v;
          }
         mat2x3 _GLF_SWITCH_0_7v[53];
         if(false)
          {
           ivec3 _GLF_SWITCH_0_8v[90], _GLF_SWITCH_0_9v;
           uvec4 _GLF_SWITCH_0_10v;
           uvec2 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v[98], _GLF_SWITCH_0_13v;
           mat3x2(90.78);
           ;
           mat2x4(8.9, -5.3, -6362.9712, 4119.2467, 6.6, -94.91, -93.80, -82.61);
           float _GLF_SWITCH_0_14v;
           float _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v;
           bvec3 _GLF_SWITCH_0_18v;
          }
        }
       do
        {
         while(_GLF_SWITCH_0_4v)
          {
           mat3 _GLF_SWITCH_0_19v;
           mat4(5.1, 387.308, -8.5, -5453.6162, 7.2, -3.0, 1212.8089, -4.1, 4249.8078, 6.3, 3.0, 198.785, 491.797, 0.5, 3.4, 1.9);
           mat4x2 _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v[2];
           mat4(-6.6, -7.8, 2.6, 1.0, 9.7, -99.38, 8061.1531, -2.7, 6861.7388, 5886.7419, 133.331, -2857.9481, 3486.9763, -15.31, -1.9, 5.6);
           ;
           vec3(153.748, 6.0, -3939.5380);
           bvec2(true, false);
          }
         for(         vec2(vec4(-6.5, -510.584, -9162.7637, -3.2));
 (mat3x2(-6349.7198, -7.8, 4.5, 1.8, 2747.3684, -0.1) == mat3x2(-484.943, 193.661, -448.815, 39.62, 8871.6006, 6.6)); ivec4(86565, -44753, 70102, 61020))
          {
           uvec3(187991u, 84827u, 24471u);
           uvec2 _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v[42];
           ;
           bvec2 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v[61];
           uvec3 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v;
          }
         while((mat2x3(9067.5440, 6.1, -84.59, -6.7, 5121.2634, 79.72) == mat2x3(-8.5, 831.693, -815.814, -292.418, -5503.0890, -37.75)))
          {
           (-4.1 + mat4x3(85.64, 775.799, -687.668, 117.192, 25.60, -3755.8936, -0.1, 5.5, -258.945, -931.237, 2.3, 3999.4763));
           mat3x4(-8251.4404, 9.4, 665.759, -68.21, -0.8, -76.12, 4.3, -262.901, 15.90, -64.86, -23.87, -854.991);
           (ivec3(93535, -83746, 12574) + findMSB(105141u));
           ((_GLF_SWITCH_0_4v ? mat3(mat4(-103.293, -1.9, 5.7, 87.24, 1918.5147, -818.666, 6.3, 271.558, 7.2, 5522.8737, -760.249, -5.1, 1366.5295, 3333.7979, -98.79, 312.015)) : mat3(6.5, -7.5, 14.78, -92.00, 4.1, 2.8, -445.222, 6.3, 814.977)) / mat3(-11.14, -4149.4490, -3.7, 66.99, -4.1, -0.4, 5.3, 2.5, -768.873));
           ivec2(87038, -1855);
          }
        }
       while(false);
      }
     case 52:
     true;
     case 0:
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     break;
     case 85:
     bvec4 _GLF_SWITCH_0_29v, _GLF_SWITCH_0_30v, _GLF_SWITCH_0_31v;
     case 45:
     ivec3 _GLF_SWITCH_0_32v[60], _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v[42];
     default:
     1;
    }
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
