#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 mat3x4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 bvec4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 ivec4 _f1;
 bvec4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 mat4 _f3;
 uvec4 _f4;
 bvec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 mat4 _f3;
 _GLF_struct_7 _f4;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 bool _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 mat3x2 _f1;
 _GLF_struct_1 _f2;
 ivec4 _f3;
 mat4x3 _f4;
 _GLF_struct_2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_10 {
 uint subgroup_local_id;
 vec2 _f0;
 _GLF_struct_3 _f1;
 float _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.z = subgroup_size;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(gl_SubgroupInvocationID, vec2(1.0), _GLF_struct_3(_GLF_struct_0(mat4x2(1.0)), mat3x2(1.0), _GLF_struct_1(bvec3(true), mat4x3(1.0)), ivec4(1), mat4x3(1.0), _GLF_struct_2(vec2(1.0), true, ivec2(1)), ivec4(1)), 1.0, _GLF_struct_8(_GLF_struct_4(ivec4(1), uvec4(1u), mat3x2(1.0), mat4(1.0), uvec4(1u), bvec3(true), uvec4(1u)), _GLF_struct_5(uvec2(1u)), _GLF_struct_6(mat3x4(1.0), ivec4(1), bvec4(true), mat3x4(1.0)), mat4(1.0), _GLF_struct_7(vec3(1.0), bvec4(true), ivec4(1))), _GLF_struct_9(mat3x4(1.0), mat2x3(1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.w = workgroup_base;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.w;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.z;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.y = subgroup_base;
 uint virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.y + _GLF_struct_replacement_10.subgroup_local_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.y + ((_GLF_struct_replacement_10.subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.z);
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidsubgroup_basesubgroup_sizeworkgroup_base.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((_GLF_struct_replacement_10.subgroup_local_id % 2) == 0)
  {
   read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], 4, 64, 2);
  }
 else
  {
   read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], 4, 64, 2);
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
}
