#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 bvec2 _f0;
 bool _f1;
 int _f2;
 mat4 _f3;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 vec2 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_10 {
 bvec3 _f0;
 mat3x2 _f1;
 mat3 _f2;
 mat3x4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 uint workgroup_id;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 vec3 _f1;
 ivec2 _f2;
 int _f3;
 vec4 _f4;
 uvec4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 mat2x3 _f1;
 vec3 _f2;
 bool _f3;
 bool _f4;
} ;

struct _GLF_struct_6 {
 bool _f0;
 vec3 _f1;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat2 _f1;
 mat3x2 _f2;
 int _f3;
 vec3 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 bvec3 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_4 _f0;
 _GLF_struct_9 _f1;
 uvec2 _f2;
 _GLF_struct_12 _f3;
 mat2x4 _f4;
 _GLF_struct_15 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uint _f1;
 float _f2;
 ivec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 ivec2 _f1;
 _GLF_struct_1 _f2;
 uvec2 _f3;
 float _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 uint workgroup_size;
 mat2x3 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_4_1_1_17readsubgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(2.9) : injectionSwitch.x), ((false ? _GLF_FUZZED(2.9) : injectionSwitch.x)) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), max((_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(2.9) : injectionSwitch.x), (false ? _GLF_FUZZED(2.9) : injectionSwitch.x))), clamp((false ? _GLF_FUZZED(2.9) : injectionSwitch.x), (false ? _GLF_FUZZED(2.9) : injectionSwitch.x), _GLF_IDENTITY((false ? _GLF_FUZZED(2.9) : injectionSwitch.x), ((false ? _GLF_IDENTITY(_GLF_FUZZED(2.9), float(mat3x4(_GLF_FUZZED(2.9), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-2.3))), sqrt(0.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4.1)), bool(false))), exp(0.0), 0.0, 0.0, 1.0, 1.0))) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5813.0620)), bool(false))))) + 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x)) : _GLF_FUZZED(3.0))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x)))), sqrt(exp(0.0)), log(1.0), 1.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)), min(_GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)), _GLF_IDENTITY(_GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)), (_GLF_IDENTITY(_GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)), min(_GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)), _GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1))))) / vec4(1.0, 1.0, 1.0, 1.0)))) : vec4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(2.9) : injectionSwitch.x, 1.0 * (false ? _GLF_FUZZED(2.9) : injectionSwitch.x)))), sqrt(exp(0.0)), log(1.0), 1.0)))), min(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(2.9) : injectionSwitch.x)), sqrt(_GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0)))), log(1.0), 1.0), (false ? _GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)) : vec4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(2.9) : injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x) + log(1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(2.9) : injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x) + log(1.0)), float(vec4(_GLF_IDENTITY(false ? _GLF_FUZZED(2.9) : injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x) + log(1.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0))), _GLF_IDENTITY(false ? _GLF_FUZZED(2.9) : injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x) + log(1.0)), _GLF_IDENTITY(false ? _GLF_FUZZED(2.9) : injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x) + log(1.0)))))), sqrt(exp(0.0)), log(1.0), 1.0)))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : injectionSwitch.x)), sqrt(exp(0.0)), log(1.0), 1.0), (false ? _GLF_FUZZED(vec4(8286.7483, -9.4, 7302.8889, -8.1)) : _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x)), sqrt(exp(0.0)), log(1.0), 1.0), (vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.9) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x)), sqrt(exp(0.0)), log(1.0), 1.0)) * mat4(1.0)))))))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) : _GLF_IDENTITY(_GLF_FUZZED(8.3), min(_GLF_FUZZED(8.3), _GLF_IDENTITY(_GLF_FUZZED(8.3), (_GLF_IDENTITY(_GLF_FUZZED(8.3), min(_GLF_FUZZED(8.3), _GLF_FUZZED(8.3)))) / 1.0))))) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false)))))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec3 GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id.xy = GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = (0 & -3455); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy = _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id, uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id, uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id) : GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id)))))).xy;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), false || ((_GLF_IDENTITY(true, ! (! (true)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, true)))), true && (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, true)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), false)))))) || false)))))) || false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -55.33)), _GLF_FUZZED(6883.4858)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -55.33)), _GLF_FUZZED(6883.4858)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), false, true, true))))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0, 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0, 1)) | (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0, 1)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) && true)))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(214.538, -9.1).r), _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(float((injectionSwitch)[1]), (float((injectionSwitch)[1])) - 0.0)))), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-9.9, -1.8).x)), bvec2(true, false))).x > injectionSwitch.y)))) || false))))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))) && true)), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), ! (! ((bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))), bool(bool(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(56.97)))))))) && true), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.0)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true)))))) && true)))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
       return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   _GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y = subgroup_id, (GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y = subgroup_id) - 0u);
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id.w = subgroup_local_id;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y = GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id.w;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        barrier();
       break;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id.z = num_workgroup, (GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id.z = num_workgroup) | 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.x = GLF_merged3_0_2_49_2_1_13_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnum_workgroupsubgroup_local_id.z;
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec3(1.0), gl_WorkGroupSize.x, mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(8163.4963) : _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(5.4)))))), _GLF_struct_2(_GLF_struct_0(uvec4(1u), 1u, 1.0, ivec4(1), bvec2(true)), ivec2(1), _GLF_struct_1(bvec3(true)), uvec2(1u), 1.0, _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), (1), (1))) ^ 0)))), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) - 0)), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))) / (1 & (1 & 1)), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), 0)) ^ ((_GLF_IDENTITY(1, int(int(1)))) / (1 & (1 & 1))))))) * _GLF_IDENTITY(ivec2(1, 1), ivec2(1, 1) * (ivec2(1, 1)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_4(bvec3(true)), _GLF_struct_9(_GLF_struct_5(mat2(1.0), mat2(1.0), mat3x2(1.0), 1, vec3(1.0)), _GLF_struct_6(true, vec3(1.0)), _GLF_struct_7(_GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(mod(vec3(-8.6, 4.8, -5.9), vec3(-5.0, 46.96, -5.3))) : vec3(1.0))), mat2x3(1.0), vec3(1.0), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), true), bvec3(bvec4(bvec3(bvec2(true, false), true), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), true), bvec3(bvec4(bvec3(bvec2(true, false), true), false)))), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, true))), true, false))), bvec2(bvec4(bvec2(true, false), false, false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec3(true), _GLF_struct_8(mat2x4(1.0), vec3(1.0), ivec2(1), 1, vec4(1.0), uvec4(1u), mat4x3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(-57.35, -33.56, 3.4).x)), bool(false)))))), uvec2(1u), _GLF_struct_12(_GLF_struct_10(bvec3(true), mat3x2(1.0), mat3(1.0), mat3x4(1.0), bvec4(true)), gl_WorkGroupID.x, _GLF_struct_11(mat4x3(1.0), _GLF_IDENTITY(vec2(1.0), max(vec2(1.0), vec2(1.0))))), mat2x4(1.0), _GLF_struct_15(_GLF_struct_13(mat2x4(1.0)), vec2(1.0), mat4x3(1.0), mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(intBitsToFloat(_GLF_IDENTITY(-80491, (_GLF_IDENTITY(-80491, int(ivec2(-80491, 1)))) << 0))) : 1.0)) : _GLF_FUZZED(-2921.0554), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), (false ? _GLF_FUZZED(intBitsToFloat(-80491)) : 1.0)) : _GLF_FUZZED(-2921.0554), (false ? _GLF_FUZZED(atan(78.41)) : true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(intBitsToFloat(-80491)) : 1.0)) : _GLF_FUZZED(-2921.0554)))) + _GLF_IDENTITY(0.0, 0.0 + (0.0)))))), _GLF_struct_14(bvec2(true), true, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))))), mat4(1.0))), ivec2(1));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)), (false) && true)))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_3.workgroup_size * _GLF_struct_replacement_16._f3.workgroup_id, (true ? _GLF_struct_replacement_3.workgroup_size * _GLF_struct_replacement_16._f3.workgroup_id : _GLF_FUZZED(subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size + GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size + GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(~ (~ (workgroup_base)), (~ (~ (workgroup_base))) * 1u)), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size + GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size + GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), clamp((workgroup_base), (workgroup_base), (workgroup_base))))), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size + GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size + GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size, ~ (~ (GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.xy.y * subgroup_size))) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, max(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)))).y + 1) % subgroup_size, max((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)), (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))).y + 1) % subgroup_size, min((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size))) | ((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, max(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)))).y + 1) % subgroup_size, max((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)), (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))).y + 1) % subgroup_size, min((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size))) | ((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size)))), min(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, max(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)))).y + 1) % subgroup_size, max((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)), (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))).y + 1) % subgroup_size, min((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size))) | ((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, max(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)))).y + 1) % subgroup_size, max((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id, uvec2(0u, 0u) ^ (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id)), (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))).y + 1) % subgroup_size, min((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size))) | ((GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1) % subgroup_size))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))
  {
   do
    {
     GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.z = next_virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false), false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false), false)))))), true && (bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, false), false))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, (true ? injectionSwitch.x : _GLF_FUZZED(abs(-65.29)))) : _GLF_FUZZED(7.6))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid.z, min(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, ~ (~ (GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid))).z, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), min(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u)))))), min(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), min(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u)))))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), min(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u), uvec4(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, max(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid)), 1u))))))))), (_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, clamp(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, _GLF_IDENTITY((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u), ((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, _GLF_IDENTITY((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u), ((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(58830u, 51252u, 6346u)) : (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, _GLF_IDENTITY((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u), ((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid, _GLF_IDENTITY((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u), ((GLF_merged2_0_2_49_2_1_16GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_idnext_virtual_gid) ^ uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u)))))).z))], uint(1), 4, 64, 4);
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_IDENTITY(true, _GLF_IDENTITY((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.x = read;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.y + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-51894)))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     int i = 0;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), min(_GLF_IDENTITY((1 & 1), ~ _GLF_IDENTITY((~ ((1 & 1))), int(ivec3((~ ((1 & 1))), 0, 1)))), (1 & 1))), (_GLF_IDENTITY(1 & 1, (1 & 1) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(83.95))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), min(_GLF_IDENTITY(int(4), (int(4)) | _GLF_IDENTITY(_GLF_IDENTITY((int(4)), ((int(4))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY((int(4)), min((int(4)), (int(4))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(checker[virtual_gid], GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.x, 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-81437 ^ 83001) & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.2)), bool(false))) > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             return;
             if(_GLF_DEAD(false))
              break;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)))))))), true, true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-634.211)), bvec2(true, false))).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     atomicStore(checker[virtual_gid], GLF_merged2_0_1_4_1_1_17readsubgroup_local_id.x, 4, 64, 4);
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), (~ (int(2))) / 1))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) + 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, false, true, false))), false))))) && true); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
              barrier();
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true) && (_GLF_DEAD(false))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             break;
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
}
