#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-95672 & 0)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), 1)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (_GLF_IDENTITY(~ (_injected_loop_counter --), _GLF_IDENTITY(_GLF_IDENTITY((~ (_injected_loop_counter --)), (_GLF_IDENTITY((~ (_injected_loop_counter --)), (true ? (~ (_injected_loop_counter --)) : _GLF_FUZZED(-56879)))) ^ 0), ((~ (_injected_loop_counter --))) >> 0) << 0)) ^ 0))))
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))), (bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))) && true))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), max(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), clamp(vec3(injectionSwitch.x, 0.0, 0.0), vec3(injectionSwitch.x, 0.0, 0.0), vec3(injectionSwitch.x, 0.0, 0.0))), vec3(injectionSwitch.x, 0.0, 0.0))))) < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))), _injected_loop_counter))) - 0) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), false), bvec3(bvec3(bvec3(bvec2(false, true), false))))))), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, true)), true, false)), (bool(_GLF_IDENTITY(bvec3(bool(bvec2(false, true)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), false), bvec3(bvec4(bvec3(bool(bvec2(false, _GLF_IDENTITY(true, (true) || false))), true, false), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))) && true))), true), bvec2(bvec3(bvec2(false, true), false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u);
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))) * workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))) * workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, _GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, uint(uvec3(workgroup_size, 1u, 1u)))) | 0u), workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) / 1u)))))))) * workgroup_id, 1u, 1u))), _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(3u, 3u, _GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) ^ 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY((_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(3u, 3u, _GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) ^ 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), uint(uint((_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(3u, 3u, _GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) ^ 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))) : _GLF_FUZZED(num_workgroup))))) * workgroup_id, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(min(workgroup_size, workgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(min(workgroup_size, workgroup_size), (_GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))) * workgroup_id))) - (0u ^ 0u));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))))), _GLF_IDENTITY(0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8))))), max(_GLF_IDENTITY(0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8))))), (0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8)))))) | (0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8))))))), 0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8))))))))) | (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(8), int(8))))))))), _GLF_IDENTITY(0u, 0u | (0u)) + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1), (_GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) >> 0)), (true ? min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))) + 1), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1))))))), uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1), (_GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) >> 0)), (true ? min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))) + 1), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1))))))), 1u, 0u), uvec3(uvec4(uvec3((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1), (_GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) >> 0)), (true ? min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(min(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u))) + 1), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1))))))), 1u, 0u), 1u)))))), min(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1)))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1)))) >> 0u))), 0u + (~ (((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) / 1)))))))))), 0u + (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)))) + 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1)))) >> 0u))), 0u + (~ (((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) / 1)))))))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1)))) >> 0u))), 0u + (~ (((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) / 1))))))))) << 0u)))))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-25901 & (0 >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
        {
         return;
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
      }
    }
  }
 else
  {
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u)) << 0u)), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u), 1u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))))), 0u))))))))) + 0u), 1u)))))) - 0u)) << 0u)), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), min((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))], uint(uint(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), (virtual_gid) | _GLF_IDENTITY(0u, 0u ^ (0u)))]))), 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             return;
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && _GLF_IDENTITY(_GLF_IDENTITY(((false)), ! (_GLF_IDENTITY(! (((false))), ! (! (! (((false)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(((false)), (((false))) || false))), ! (! (bool(bool(_GLF_IDENTITY(((false)), (((false))) || false))))))))))))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).y))))
                        break;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(false, false)))))), bool(bool(false)))))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), ~ (~ ((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), ~ (~ ((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))))), 0u | (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), ~ (~ ((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))))))))))) - _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (16504u & 0u) + (0u)), 0u))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) * 1u), 0u)))))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, false))) ? _GLF_IDENTITY(_GLF_FUZZED(read), clamp(_GLF_FUZZED(read), _GLF_FUZZED(read), _GLF_IDENTITY(_GLF_FUZZED(read), (_GLF_FUZZED(_GLF_IDENTITY(read, max(_GLF_IDENTITY(read, 0u ^ (read)), read)))) / 1u))) : (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))))))), clamp((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), uint(_GLF_IDENTITY(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u), min(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u), uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), uint(_GLF_IDENTITY(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u), min(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u), uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u)))))), (~ (_GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), uint(_GLF_IDENTITY(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u), min(uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u), uvec4((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)), 0u, 0u, 0u))))))) ^ 0u))), (subgroup_local_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (subgroup_local_id) ^ 0u)))))))))) << (0u | 0u))) << 0u), 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_local_id) : 0u))) << 0u), 0u), uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) | (0u)) ^ (0u)), 0u, 0u) | (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (false ? _GLF_FUZZED(floatBitsToUint(-7.4)) : ~ (0u)))))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) ^ 0u)))))))))) | uvec3(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) ^ 0u) : _GLF_FUZZED(bitfieldInsert(num_workgroup, workgroup_base, -27196, -61989)))), 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(24.28)), vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]), bvec2(false, true))))).x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id))), ((subgroup_local_id)) | 0u) << 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u))) << 0u), 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_size))), ~ (~ (0u)))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), uint(uvec2((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), 1u))) << 0u), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(read) : 0u)), (0u) | (0u)), 0u)), 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) * 1u), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicMax(workgroup_size, workgroup_size)) : 0u)), 0u))) | (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u)))) | uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u)) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u)) - 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u)) - 0u)))))) ^ 0u) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | (_GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(62274u) : (subgroup_local_id))))), ((subgroup_local_id)) | 0u) << 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)) : 0u))) << 0u), 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << _GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u))), uvec3(uvec4(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u))), 1u)))) | uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u))) << 0u), 0u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u))) << 0u), 0u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u) << 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u))) << 0u), 0u)))) ^ (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), (true ? _GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(34628u, 30831u, 138127u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))) : _GLF_FUZZED(uvec3(66309u, _GLF_IDENTITY(147981u, min(147981u, 147981u)), 141135u)))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u)), (_GLF_IDENTITY((uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u)), ~ (~ ((uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u)))))) | ((uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u)))))) | uvec3(0u, 0u, 0u)))))))) >> uvec3(0u, 0u, 0u)))) + 1 < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), ! (! ((true))))), _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7.6)))) / 1.0))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, sqrt(1.0) * (injectionSwitch.x)), injectionSwitch.x)), (false ? _GLF_FUZZED(-3.1) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true), false)), false)))))), true)), ! (! (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && (true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))))) && (true)), (_GLF_IDENTITY(true, true && (true))) && true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))), false)), (bool(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))), false))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))))))))) || false), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (true) && true) && ((false) || false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)) > injectionSwitch.y), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)), 1.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, cos(0.0), 1.0)), mix(float(float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)), 1.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, cos(0.0), 1.0))), float(_GLF_FUZZED(6.1)), bool(false)))) > injectionSwitch.y) || false)))), ! (! ((! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)), 1.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, cos(0.0), 1.0)), mix(float(float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), max((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))))), injectionSwitch.x)), 1.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, cos(0.0), 1.0))), float(_GLF_FUZZED(6.1)), bool(false)))) > injectionSwitch.y) || false))))))))))), ! (! (bool(bvec3(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0) < _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec3(! (true), _GLF_IDENTITY(true, (true) || false), true))), true, false, true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), false || (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3196.2422)), bool(false)))))), float(_GLF_FUZZED(-6.6)), bool(false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-6.6)), bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))), float(_GLF_FUZZED(-6.6)), bool(false)))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3196.2422)), bool(false)))))), float(_GLF_FUZZED(-6.6)), bool(false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-6.6)), bool(_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))))))), float(_GLF_FUZZED(-6.6)), bool(false)))) || false))))))), _GLF_IDENTITY(bool(bool(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3196.2422)), bool(false)))))), float(_GLF_FUZZED(-6.6)), bool(false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-6.6)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))))) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), min(vec2(vec4(injectionSwitch, 1.0, 0.0)), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(mat3(vec2(vec4(injectionSwitch, 1.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))).y, injectionSwitch.y))))))), float(_GLF_FUZZED(-6.6)), bool(false)))) || false))))))))), bool(bool(bool(bool(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3196.2422)), bool(false)))))), float(_GLF_FUZZED(-6.6)), bool(false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-6.6)), _GLF_IDENTITY(bool(false), true && (bool(false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))))))), float(_GLF_FUZZED(-6.6)), bool(false)))) || false))))))))))))))), true)), ! (! (bool(bvec3((_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)))))))) || false)), _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true)))))))))))) || false), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))), injectionSwitch.x)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))), injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-90.63))), injectionSwitch.x)), float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(105.378) : injectionSwitch.x)))) : _GLF_FUZZED(-90.63))), injectionSwitch.x)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-90.63)), ((true ? injectionSwitch.x : _GLF_FUZZED(-90.63))) / 1.0)), injectionSwitch.x)))))) > injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1 < subgroup_size, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), true && (! (true)))))))), true && ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), false || (! (! _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY((true), ! (! ((true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), (! (! (true))) && true))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), bool(bvec4(_GLF_IDENTITY(! (true), true && (! (true))), true, true, true))), _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || false)))), ((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(cos(0.0), 1.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(cos(0.0), 1.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) || false))))))))), ! (! (bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), (_GLF_IDENTITY(! (true), true && (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), bool(bvec4(_GLF_IDENTITY(! (true), true && (! (true))), true, true, true))), _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || false)))), ((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(cos(0.0), 1.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(cos(0.0), 1.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) || false))))))))), ! (! (bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), (_GLF_IDENTITY(! (true), true && (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), false, false, false))), ! (! (bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), _GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), false, true, true)), (bool(bvec4(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false || ((_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))), false, true, true))) && true)))))))))))) && (true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))) && true)))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), false || ((_GLF_IDENTITY(! (true), true && (! (true)))))))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(bvec4((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) && _GLF_IDENTITY(true, true && (true)))))), false, false, true))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true && (! (true)))), false, false, true))), true, true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(bvec4((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) && _GLF_IDENTITY(true, true && (true)))))), false, false, true))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true && (! (true)))), false, false, true))), true, true)))))))))))))), ! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))))))))) && (true)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), bvec3(bvec3(bvec3(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), (! (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), (! (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false)))) && true)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec3(_GLF_IDENTITY(true, (true) && true), false, false)))))), (! (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false)))) && true)))))))))), true && (! (true))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) || false), _GLF_IDENTITY(true && (! (true)), (_GLF_IDENTITY(true && (! (true)), ! (! (_GLF_IDENTITY(true && (! (true)), true && (true && (! (true)))))))) || false)))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), false || (! (_GLF_IDENTITY(! (true), true && (! (true))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) && true)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) && true))))))))) || false) || false)))))))), ! (! (bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bool(_GLF_IDENTITY(! (true), (! (true)) || false)))), true && (! (true)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true)))))) && true), true && (! (true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! _GLF_IDENTITY((true), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true)))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true)))), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true), true && (! (true)))))))))))), bool(bvec4((_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! _GLF_IDENTITY(_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true))))), ! (! (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true))))))))) && true), true && (! (true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec2(! (_GLF_IDENTITY((true), ! (! ((true))))), true)))))) && true), true && (! (true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))))))))) && (true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), false)))))) || false)))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (_GLF_IDENTITY(true, ! (! (true)))))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true, (true) && true) && (! (true))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), ! (! (! (true)))))), true && (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), ! (! (! (true)))))), true && (! (true))))))))))), ! (! (bool(bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))))))))) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))), false || ((_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), ((_GLF_IDENTITY(! (true), true && (! (true))))) || false)))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), ! (! ((_GLF_IDENTITY(! (true), true && (! (true)))))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || false)))), bool(bvec2((_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || false)))), false)))))))), ! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bool(! (true)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) && (! (true))))))))))))))))) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u))), min(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) / 1u))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u))), 0u | (uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))))) + 1 < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (true), true && (! (true)))), true && ((_GLF_IDENTITY(! (true), true && (! (true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), _GLF_IDENTITY(! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))), (! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))) && true))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ((! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), _GLF_IDENTITY(! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))), (! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))) && true)))))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), _GLF_IDENTITY(! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))), (! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))) && true))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ((! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), _GLF_IDENTITY(! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))), (! (! (bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))) && true))))))))) || false))) && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(! (true), true && (! (true)))), false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(! (true), true && (! _GLF_IDENTITY((true), ((true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false)), (bool(bvec3(! (_GLF_IDENTITY(! (true), true && (! (true)))), false, false))) && true), true, true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, float(mat4(1.0, exp(0.0), 1.0, log(1.0), 0.0, 0.0, 0.0, sqrt(1.0), sin(0.0), 0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0))))).y)) && ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))), false || (bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false || (_GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))) && _GLF_IDENTITY((! (true)), bool(bvec2(_GLF_IDENTITY((! (true)), ((! (true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec2(bvec2(bvec2(bvec2(true, true))))))))), ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), true && (! (true))))))))), ! (! (bool(bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))), true && (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))))))))))))) && (true)), _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))))))), true)))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))))
                    continue;
                   int i = 0;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true))))))))
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                                    return;
                                   return;
                                  }
                                }
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                              return;
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = (1 | _GLF_IDENTITY(1, max(1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & _GLF_IDENTITY(54708, ~ (~ (54708))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
                                  {
                                  }
                                 else
                                  {
                                   return;
                                  }
                                }
                               break;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(false))
                                break;
                               continue;
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false)), true && (bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false)))))));
                    }
                   do
                    {
                     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-34829)))) / _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(i) : 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(i) : 0, (false ? _GLF_FUZZED(i) : 0) << 0))), 0 ^ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(i) : 0)))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(i) : 0))))), max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0), (false ? _GLF_FUZZED(5116) : clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0), (clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0)) * 1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, min(0, 0)), 0)))))))))), int(1))), (((_GLF_IDENTITY(1, 0 ^ (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, min((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1))) ^ 0, (1) ^ 0))), max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ 0)))), int(1)))) << 0)));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, true)))))))));
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) || false))))) || false)))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8802.8982)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false, false))) || false)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))
                          return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           continue;
                          }
                         break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-1.4, floor(-1.8)), vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(vec2(-1.4, floor(-1.8)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(-1.4, floor(-1.8)))), 1.0, 1.0), (false ? _GLF_FUZZED((vec4(-1565.3672, -6.4, -9.0, -895.534) * -2636.4034)) : vec4(_GLF_IDENTITY(vec2(-1.4, floor(-1.8)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(-1.4, floor(-1.8)))), 1.0, 1.0)))))))).x, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1.4, floor(_GLF_IDENTITY(-1.8, _GLF_IDENTITY((-1.8) - 0.0, ((-1.8) - 0.0) - 0.0))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-1.4, floor(-1.8))))).x)) > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, false))))))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 break;
                                }
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))], read, 4, 64, 4);
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))), ! (! ((_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))))))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))), ! (! ((_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))))))))) && true)));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bvec2(! (! (true)), true)))))) || false)), true && (! (_GLF_IDENTITY(! (true), (! (true)) || false))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && true)))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), true, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false)), true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), (bool(bvec4(true, true, true, _GLF_IDENTITY(false, (false) || false)))) || false))))))), false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (bool(bvec4(true, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)))))))), false))), ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (bool(bvec4(true, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)))))))), false)))) && true), false, _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec3(bvec3((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, true, false)))))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), false, true))))))), false, false, false)))) || false)))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       for(int _injected_loop_counter = ((62705 & 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5)))))))), 0 | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) - 0) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5)))))))), 0 | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) - 0) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5))))))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5)))))))), 0 | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) - 0) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5))))))))))))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5)))))))), 0 | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) - 0) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5))))))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5)))))))), 0 | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) - 0) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), min(int(5), int(5))))))))))))), false, true))))); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      return;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))) || false))), false, false)))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / 1.0))), max(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))) * (_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(9.3)), bool(false)))) - 0.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-10758, ~ (~ (-10758)))) : int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (true)))) || false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (true)), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (true)), false, false, false))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))), false, false, false))), false)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3722.0773, -55.17)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3722.0773, -55.17)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y)) && true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
}
