#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-639.622)), _GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), _GLF_IDENTITY(float(injectionSwitch.y), float(mat3(float(injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), bool(true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], mix(float(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0]), float(_GLF_FUZZED(-3694.5791)), bool(false))), _GLF_FUZZED(4779.7637)), vec2(_GLF_FUZZED((-56.59)), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), bvec2(false, true)))).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))))) || (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), (mat4x3(injectionSwitch.y, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))), bool(bool(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.2)), bool(false))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bool(bool(bool(false)))), ! (! (bool(bool(bool(bool(false))))))))), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))) || false)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false))))))), ! (! (! (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false))), false || (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false)))))))))))))), ! (! (bool(false))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.8) : injectionSwitch.x)) > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, true, false))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1295.6944, 21.20)))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), (_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size))) ^ 0u) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(984.342), _GLF_FUZZED(-75.87)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(984.342), _GLF_FUZZED(-75.87)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(309.138), _GLF_FUZZED(9.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), false)))), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), (! (bool(bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))) && true))))))) && true))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (_GLF_IDENTITY(! (! (true)), bool(bvec4(! (! (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))))))), (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, sqrt(1.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3x4(-34.24, 5297.3039, -9.7, -8.2, -4.3, 1526.7613, 1286.9799, 1910.4257, 45.85, 322.308, 5.0, 959.935)) : mat3x4(injectionSwitch.y, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))), (float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3x4(_GLF_IDENTITY(-34.24, (-34.24) - 0.0), 5297.3039, -9.7, _GLF_IDENTITY(-8.2, (false ? _GLF_FUZZED((1714.1304 + 538.656)) : -8.2)), -4.3, 1526.7613, _GLF_IDENTITY(_GLF_IDENTITY(1286.9799, (1286.9799) + 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(1286.9799, (1286.9799) + 0.0), max(_GLF_IDENTITY(1286.9799, (1286.9799) + 0.0), _GLF_IDENTITY(1286.9799, (1286.9799) + 0.0)))) - 0.0), 1910.4257, 45.85, 322.308, 5.0, _GLF_IDENTITY(959.935, (true ? 959.935 : _GLF_FUZZED(-3.8))))) : mat3x4(injectionSwitch.y, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4276.0766)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, abs(0.0) + (0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) * abs(1.0)))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5079.1615), _GLF_FUZZED(-8.1)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))).y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(56.83) : injectionSwitch.x)), (false ? _GLF_FUZZED(distance(-2.9, determinant(mat4(_GLF_IDENTITY(-0.9, (_GLF_IDENTITY(-0.9, 0.0 + (-0.9))) * 1.0), 9.7, -50.33, -305.068, 55.17, -5.1, _GLF_IDENTITY(-6228.4364, float(float(_GLF_IDENTITY(-6228.4364, (-6228.4364) - 0.0)))), 736.377, -98.14, 2930.5921, 3832.3676, -87.40, -8.8, _GLF_IDENTITY(1070.1128, min(1070.1128, _GLF_IDENTITY(1070.1128, clamp(_GLF_IDENTITY(1070.1128, max(1070.1128, 1070.1128)), 1070.1128, 1070.1128)))), 4022.6118, -2.9)))) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(56.83) : injectionSwitch.x)))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(56.83) : injectionSwitch.x)), (false ? _GLF_FUZZED(distance(-2.9, determinant(mat4(-0.9, 9.7, _GLF_IDENTITY(-50.33, clamp(-50.33, -50.33, -50.33)), -305.068, 55.17, -5.1, _GLF_IDENTITY(-6228.4364, float(float(-6228.4364))), 736.377, -98.14, 2930.5921, 3832.3676, -87.40, -8.8, _GLF_IDENTITY(1070.1128, min(1070.1128, _GLF_IDENTITY(1070.1128, clamp(_GLF_IDENTITY(1070.1128, max(1070.1128, 1070.1128)), 1070.1128, 1070.1128)))), 4022.6118, -2.9)))) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(56.83) : injectionSwitch.x)))) > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(56.83) : injectionSwitch.x)), (false ? _GLF_FUZZED(distance(-2.9, determinant(mat4(-0.9, 9.7, -50.33, -305.068, 55.17, -5.1, _GLF_IDENTITY(-6228.4364, float(float(-6228.4364))), 736.377, _GLF_IDENTITY(-98.14, mix(float(_GLF_FUZZED(-4.0)), float(-98.14), bool(true))), 2930.5921, 3832.3676, -87.40, -8.8, _GLF_IDENTITY(1070.1128, min(_GLF_IDENTITY(1070.1128, float(vec3(_GLF_IDENTITY(1070.1128, (_GLF_IDENTITY(1070.1128, (true ? 1070.1128 : _GLF_FUZZED(82.14)))) - log(1.0)), 1.0, 1.0))), _GLF_IDENTITY(1070.1128, clamp(_GLF_IDENTITY(1070.1128, max(1070.1128, 1070.1128)), 1070.1128, 1070.1128)))), 4022.6118, -2.9)))) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(56.83) : injectionSwitch.x, mix(float(_GLF_FUZZED(-961.549)), float(false ? _GLF_FUZZED(56.83) : injectionSwitch.x), bool(true))))))) > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch * 4.7)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1.2, 5.5)))).y)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)))))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = 0;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y)))), false, false)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 1.0, 0.0, 0.0)))) + sin(0.0)) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   return;
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u | (uint(1)), (0u | (uint(1))) ^ 0u), (_GLF_IDENTITY(0u | (uint(1)), (0u | (uint(1))) ^ 0u)) | 0u), (0u | (uint(1))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) * 1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)), mix(float(_GLF_FUZZED(149.381)), float(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)) * 1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), uint(1))), _GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, ((4) - 0) >> 0)), _GLF_IDENTITY(64, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))) ? 64 : _GLF_FUZZED(-4364))), 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true, false), bvec3(bvec3(bvec3((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, (_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bvec4((subgroup_local_id % 2) == 0, false, true, true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(68272, clamp(68272, 68272, _GLF_IDENTITY(68272, max(_GLF_IDENTITY(68272, 0 | (68272)), _GLF_IDENTITY(68272, min(_GLF_IDENTITY(68272, 0 ^ (_GLF_IDENTITY(68272, (68272) | (68272)))), 68272)))))))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), max(_GLF_FUZZED(68272), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(68272, (68272) ^ 0)), max(_GLF_FUZZED(68272), _GLF_FUZZED(68272))))))))))), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(68272, clamp(68272, 68272, _GLF_IDENTITY(68272, max(_GLF_IDENTITY(68272, 0 | (68272)), _GLF_IDENTITY(68272, min(_GLF_IDENTITY(68272, 0 ^ (_GLF_IDENTITY(68272, (68272) | (68272)))), 68272)))))))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), max(_GLF_FUZZED(68272), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(68272, (68272) ^ 0)), max(_GLF_FUZZED(68272), _GLF_FUZZED(68272))))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(68272, clamp(68272, 68272, _GLF_IDENTITY(68272, max(_GLF_IDENTITY(68272, 0 | (68272)), _GLF_IDENTITY(68272, min(_GLF_IDENTITY(68272, 0 ^ (_GLF_IDENTITY(68272, (68272) | (68272)))), 68272)))))))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), max(_GLF_FUZZED(68272), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(68272, (68272) ^ 0)), max(_GLF_FUZZED(68272), _GLF_FUZZED(68272))))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(68272, clamp(68272, 68272, _GLF_IDENTITY(68272, max(_GLF_IDENTITY(68272, 0 | (68272)), _GLF_IDENTITY(68272, min(_GLF_IDENTITY(68272, 0 ^ (_GLF_IDENTITY(68272, (68272) | (68272)))), 68272)))))))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), max(_GLF_FUZZED(68272), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(68272, (68272) ^ 0)), max(_GLF_FUZZED(68272), _GLF_FUZZED(68272)))))))))))))), (6468 & 0) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ((true ? 64 : _GLF_FUZZED(68272))) >> 0), (true ? 64 : _GLF_FUZZED(68272)))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), 0 | (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (false ? _GLF_FUZZED(98792) : (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), clamp(true ? 64 : _GLF_FUZZED(68272), true ? 64 : _GLF_FUZZED(68272), _GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), max(true ? 64 : _GLF_FUZZED(68272), true ? 64 : _GLF_FUZZED(68272)))))), ((_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), clamp(true ? 64 : _GLF_FUZZED(68272), true ? 64 : _GLF_FUZZED(68272), _GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), max(true ? 64 : _GLF_FUZZED(68272), true ? 64 : _GLF_FUZZED(68272))))))) | 0))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ((true ? 64 : _GLF_FUZZED(68272))) >> 0), (true ? 64 : _GLF_FUZZED(68272)))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ((true ? _GLF_IDENTITY(64, (64) ^ 0) : _GLF_FUZZED(68272))) >> 0), (true ? 64 : _GLF_FUZZED(68272)))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), ~ (~ (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), clamp((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ((true ? 64 : _GLF_FUZZED(68272))) >> 0), (true ? 64 : _GLF_FUZZED(68272)))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ((true ? 64 : _GLF_FUZZED(68272))) >> 0), (true ? 64 : _GLF_FUZZED(68272)))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), (_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), clamp((true ? 64 : _GLF_FUZZED(68272)), _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ~ (~ ((true ? 64 : _GLF_FUZZED(68272))))), (true ? 64 : _GLF_FUZZED(68272))))) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true)) ? 64 : _GLF_FUZZED(68272)), max(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true)) ? 64 : _GLF_FUZZED(68272)), ((_GLF_IDENTITY(true, false || (true)) ? 64 : _GLF_FUZZED(68272))) * 1), (_GLF_IDENTITY(true, false || (true)) ? 64 : _GLF_FUZZED(68272)))))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) * 1), (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), _GLF_IDENTITY(((true ? 64 : _GLF_FUZZED(68272))), int(_GLF_IDENTITY(ivec2(((true ? 64 : _GLF_FUZZED(68272))), 0), (ivec2(((true ? 64 : _GLF_FUZZED(68272))), 0)) ^ ivec2(0, 0)))) >> 0), (true ? 64 : _GLF_FUZZED(68272)))))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(true, ! (! (true))) ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), clamp(_GLF_FUZZED(68272), _GLF_FUZZED(68272), _GLF_FUZZED(68272))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))), _GLF_IDENTITY(64, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), _GLF_IDENTITY(0, (0) ^ 0) | (~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), (true ? 64 : _GLF_FUZZED(68272)) ^ 0))))))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), _GLF_IDENTITY(0, (0) ^ 0) | (~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), (true ? 64 : _GLF_FUZZED(68272)) ^ 0))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), _GLF_IDENTITY(0, (0) ^ 0) | (~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), (true ? 64 : _GLF_FUZZED(68272)) ^ 0))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), int(int(_GLF_FUZZED(68272))))), min(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(68272)), ((true ? 64 : _GLF_FUZZED(68272))) >> 0), (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(68272), 0 + (_GLF_FUZZED(68272)))))))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(int(0))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86886))), 0))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))), max(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 + ((_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272))))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) / (1 | (1 ^ 1))), (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), int(ivec2(true ? 64 : _GLF_FUZZED(68272), (1 ^ (1 | 0))))))))), ((~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))) - 0)) | ((~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(68272), ~ (~ (true ? 64 : _GLF_FUZZED(68272))))))))))))), _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))), 0 | (~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68272)))))))))))))) ^ _GLF_IDENTITY(0, min(0, 0)))), 2);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))), bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))), true)))), ! (! ((_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))))) && true)) || false), true)))))))))), (false) || false))))), true, true))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, ~ (~ (64))), 2);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, 0 + (4)))), 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
