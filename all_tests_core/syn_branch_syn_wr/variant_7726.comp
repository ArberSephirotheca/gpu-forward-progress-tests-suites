#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   switch(_GLF_SWITCH(0))
    {
     case 40:
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     ;
     case 0:
     case 49:
     if(_GLF_DEAD(false))
      barrier();
     case 21:
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           switch(_GLF_SWITCH(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), 0 | ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 | (_GLF_IDENTITY(int(8), int(8)))))))) - (0 << _GLF_IDENTITY(int(3), int(3))))))
            {
             case 99:
             for(mat3x4 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v[5]; false; vec2(8368.0692, -5.8))
              {
              }
             case 5:
             float _GLF_SWITCH_3_2v[75];
             case 0:
             case 27:
             case 56:
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             break;
             case 4:
             ivec2 _GLF_SWITCH_3_3v, _GLF_SWITCH_3_4v;
             case 75:
             GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id;
             default:
             1;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     case 53:
     if(_GLF_DEAD(false))
      barrier();
     case 37:
     case 24:
     case 29:
     case 35:
     case 79:
     case 8:
     barrier();
     break;
     case 96:
     ;
     case 86:
     if(_GLF_DEAD(false))
      barrier();
     bvec2 _GLF_SWITCH_2_0v[22], _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v[48];
     default:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (false)))))
      barrier();
     1;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z = subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(int(int(0))), (true ? int(int(int(0))) : _GLF_FUZZED(38131)))), _GLF_IDENTITY(int(0), (int(0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), min(_GLF_IDENTITY((_injected_loop_counter), clamp((_injected_loop_counter), (_injected_loop_counter), (_injected_loop_counter))), _GLF_IDENTITY((_injected_loop_counter), _GLF_IDENTITY(int(int((_injected_loop_counter))), ~ (~ (int(int((_injected_loop_counter))))))))) + 0) != (1 & 1)); _injected_loop_counter ++)
    {
     do
      {
       switch(_GLF_SWITCH(0))
        {
         case 55:
         (mix(uvec4(141515u, 48420u, 29618u, 177261u), GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id, bvec4(true, false, false, _GLF_IDENTITY(false, ! (! (false))))) , uvec3(122666u, 184727u, 48456u));
         case 0:
         case 34:
         case 52:
         case 83:
         case 21:
         if(_GLF_DEAD(false))
          barrier();
         break;
         default:
         1;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y = subgroup_local_id;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))), true, false, false)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))), true, false, false)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false), true, false, false)))), true, false, false)))))))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 30:
         case 10:
         case 2:
         case 61:
         case 76:
         case 88:
         case 27:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         case 83:
         case 38:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
         break;
         case 71:
         while(true)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           bool _GLF_SWITCH_2_0v[77], _GLF_SWITCH_2_1v;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              barrier();
            }
           else
            {
            }
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              while(_GLF_IDENTITY((-7.8 >= -809.163), false || ((-7.8 >= -809.163))))
               {
                bvec4(true, true, _GLF_IDENTITY(true, true && (true)), true);
                uvec3 _GLF_SWITCH_2_2v[92];
                uvec4 _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v;
                mat4x2 _GLF_SWITCH_2_5v[59];
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                 }
                else
                 {
                 }
                mat2x4(mat4(2004.4360, -8416.6415, -28.82, 6.5, 8090.4678, -5.0, 4.8, -25.21, -9.4, -9.4, 33.09, 7333.7533, 3.5, 706.012, 4.4, _GLF_IDENTITY(2.3, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0, (_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0, (_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7.7)), bool(false)))) - 0.0)))), float(_GLF_FUZZED(float(113563u))), bool(_GLF_IDENTITY(false, (false) && true)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), transpose(transpose(mat4x2(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), float(mat3x4(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, 1.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), transpose(transpose(mat4x2(_GLF_IDENTITY(2.3, float(mat4x3(2.3, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, length(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-3.9 - 4.2))), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), _GLF_IDENTITY(bool(true), (bool(true)) && true))), 1.0, 0.0, 1.0))))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat4x3(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.2) : 0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), min(vec2(mat4x3(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), vec2(mat4x3(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))))))), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))));
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                bvec4(false, true, true, false);
               }
             }
            else
             {
             }
            if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (true && (_GLF_DEAD(false))), false || (! (true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))))))))))))
             barrier();
            for(mat3x4 _GLF_SWITCH_2_6v, _GLF_SWITCH_2_7v[89], _GLF_SWITCH_2_8v[76]; _GLF_SWITCH_2_1v; findLSB(subgroup_local_id))
             {
              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
               }
              else
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              findMSB(92488);
              (-15.94 + injectionSwitch);
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
           }
           if(_GLF_DEAD(false))
            barrier();
           uvec2(101605u, 15918u);
           for(mat2x4 _GLF_SWITCH_2_9v[6]; true; mat2x3(mat3x2(6.9, 6.6, _GLF_IDENTITY(-2.9, (-2.9) - 0.0), 87.66, 2.3, -2.7)))
            {
             (_GLF_IDENTITY(_GLF_IDENTITY(++ GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.xzy, ~ (~ (_GLF_IDENTITY(++ GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.xzy, ~ (~ (++ GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.xzy)))))), (++ GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.xzy) | (uvec3(49388u, 33738u, 166384u) & (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))));
             {
              mat2x4 _GLF_SWITCH_2_10v[25], _GLF_SWITCH_2_11v[68];
              ;
              uvec3(113182u, 56199u, 107924u);
              if(_GLF_DEAD(false))
               barrier();
             }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             min(ivec3(-84548, 7696, 97069), floatBitsToInt(vec3(79.18, 389.176, 4.2)));
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
              barrier();
             bvec4 _GLF_SWITCH_2_12v[67];
             for(             vec3(_GLF_IDENTITY(vec4(3.6, 293.613, 492.656, -143.050), min(vec4(3.6, 293.613, 492.656, -143.050), _GLF_IDENTITY(vec4(3.6, 293.613, 492.656, -143.050), (false ? _GLF_FUZZED(vec4(8.2, 1.4, 5861.8149, 3839.5762)) : vec4(3.6, 293.613, 492.656, -143.050))))));
 false; mat4x2((+ mat3(-425.243, 9033.0582, -65.89, -7.1, 4.9, 14.76, 29.30, -904.151, -3.0))))
              {
               mat2x3(8.7, -7557.9036, -48.89, -6.1, 4074.5778, 6027.7782);
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               (3.0 + mat3(2.2, -33.88, 92.77, -51.36, 3.9, 9350.1403, 454.129, 82.84, _GLF_IDENTITY(131.026, float(float(131.026)))));
               mat2x4(-9.3, 47.40, -6035.3002, _GLF_IDENTITY(-83.06, mix(float(-83.06), float(_GLF_FUZZED(_GLF_IDENTITY(7.7, (7.7) / 1.0))), bool(false))), 24.81, -2.8, -175.615, -5.2);
               mat3x2(mat2x4(7.3, 3.6, 75.57, -3.1, -83.98, 5.1, 8.4, -4.5));
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
                barrier();
               ((bvec4(false, true, true, true) != bvec4(true, true, false, true)) ? subgroup_size : _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)));
              }
             if(_GLF_DEAD(false))
              barrier();
             for(mat4x2 _GLF_SWITCH_2_13v, _GLF_SWITCH_2_14v[97]; bool(-19740); mat3x4(792.525, 44.70, -3.1, 85.88, -0.0, 12.68, -29.48, 4.6, 6283.1875, 6.5, -865.032, 3.2))
              {
               if(_GLF_DEAD(false))
                barrier();
               greaterThan(uvec4(_GLF_IDENTITY(12672u, 0u ^ (_GLF_IDENTITY(12672u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(12672u, 0u | (12672u)))))), 74046u, 57133u, 178387u), GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id);
               bool _GLF_SWITCH_2_15v, _GLF_SWITCH_2_16v, _GLF_SWITCH_2_17v[76];
               if(_GLF_DEAD(false))
                barrier();
               bvec4(false, true, true, false);
               if(_GLF_DEAD(false))
                barrier();
               (+ uvec3(25479u, 33576u, 73697u));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 bvec3(true, false, false);
                }
               ivec4 _GLF_SWITCH_2_18v, _GLF_SWITCH_2_19v, _GLF_SWITCH_2_20v;
               mat2(387.221, 3.5, -69.46, -6471.0086);
              }
             bvec2 _GLF_SWITCH_2_21v, _GLF_SWITCH_2_22v;
             {
              switch(_GLF_SWITCH((0 | 0)))
               {
                case 77:
                uint _GLF_SWITCH_3_0v[9], _GLF_SWITCH_3_1v[60], _GLF_SWITCH_3_2v;
                case 0:
                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                 barrier();
                true;
                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
                 {
                 }
                else
                 {
                  (ivec3(52469, -18663, 22604) == ivec3(80178, 96231, -54123));
                 }
                if(_GLF_DEAD(false))
                 barrier();
                case 96:
                mat4 _GLF_SWITCH_2_23v[5], _GLF_SWITCH_2_24v;
                mat4x2 _GLF_SWITCH_2_25v[91], _GLF_SWITCH_2_26v, _GLF_SWITCH_2_27v[77];
                mat3x2(_GLF_IDENTITY(-14.62, _GLF_IDENTITY(float(mat3(-14.62, exp(0.0), 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), float(mat2(float(mat3(-14.62, exp(0.0), 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), 1.0, 0.0, 0.0)))), 8.8, -4.2, -5.5, 66.80, -60.65);
                (ivec2(-15907, -42704) & min(12011, -45466));
                do
                 {
                  (-844.923 / mat3x2((mat3x2(-2548.5395, _GLF_IDENTITY(-7050.6570, min(-7050.6570, -7050.6570)), 3166.2025, -90.01, -4.4, -5.5) * mat4x3(474.929, _GLF_IDENTITY(-57.77, float(mat3(_GLF_IDENTITY(-57.77, (false ? _GLF_FUZZED(7666.4337) : -57.77)), 0.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 1.0, 1.0, exp(0.0)))), 57.94, 9.1, -1.7, -679.603, -62.07, 265.884, 8.8, -9.7, -646.845, 0.7))));
                 }
                while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
                (_GLF_SWITCH_2_1v ? mat3x2(9.1, 9639.0322, 9.8, -344.697, -5389.7149, 9.6) : mat3x2(901.768, 2.2, -7491.4939, 398.638, -576.348, 121.301));
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                case 37:
                _GLF_SWITCH_2_24v;
                break;
                case 46:
                -68.55;
                case 66:
                bvec4(false, false, true, false);
                default:
                1;
               }
             }
             if(_GLF_SWITCH_2_1v)
              {
               uvec2 _GLF_SWITCH_2_28v;
               ivec4(abs(ivec3(17602, -49115, 93731)).g);
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 mat2x3(-545.762, 5.6, 89.25, -9.9, 4.9, 2.1);
                }
               -32521;
               _GLF_IDENTITY(vec3(-7.1, -8773.6355, _GLF_IDENTITY(-538.457, float(float(-538.457)))), min(_GLF_IDENTITY(vec3(-7.1, -8773.6355, -538.457), max(_GLF_IDENTITY(vec3(-7.1, -8773.6355, -538.457), _GLF_IDENTITY(mix(vec3((vec3(-7.1, -8773.6355, -538.457))[0], (vec3(-7.1, -8773.6355, -538.457))[1], (vec3(-7.1, -8773.6355, -538.457))[2]), vec3(_GLF_FUZZED(744.155), _GLF_FUZZED(-11.92), _GLF_FUZZED(6.6)), bvec3(false, false, false)), vec3(1.0, 1.0, 1.0) * (mix(vec3((vec3(-7.1, -8773.6355, -538.457))[0], (vec3(-7.1, -8773.6355, -538.457))[1], (vec3(-7.1, -8773.6355, -538.457))[2]), vec3(_GLF_FUZZED(744.155), _GLF_FUZZED(-11.92), _GLF_FUZZED(6.6)), bvec3(false, false, false))))), vec3(-7.1, -8773.6355, -538.457))), vec3(-7.1, -8773.6355, -538.457)));
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               ;
               ivec3 _GLF_SWITCH_2_29v[9], _GLF_SWITCH_2_30v;
               mat2x3(-1.0, -98.63, -3.6, 84.17, -267.712, 7973.9319);
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               mat2(-91.47, -7.1, 15.63, -241.671)[0];
               _GLF_SWITCH_2_22v.xyx;
               faceforward(vec3(-563.611, _GLF_IDENTITY(4158.8157, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(4158.8157, (false ? _GLF_FUZZED(3819.1216) : 4158.8157)), 1.0, abs(sqrt(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, cos(0.0), 1.0)), clamp(float(mat4x2(_GLF_IDENTITY(4158.8157, (false ? _GLF_FUZZED(3819.1216) : 4158.8157)), 1.0, abs(sqrt(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4067.9220)), float(0.0), bool(true))), 0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, cos(0.0), 1.0)), float(mat4x2(_GLF_IDENTITY(4158.8157, (false ? _GLF_FUZZED(3819.1216) : 4158.8157)), 1.0, abs(sqrt(0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, cos(0.0), 1.0)), float(mat4x2(_GLF_IDENTITY(4158.8157, (false ? _GLF_FUZZED(3819.1216) : 4158.8157)), 1.0, abs(sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-614.554)), bool(false))))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, cos(0.0), 1.0))))), 9.6), vec3(3.6, 305.279, 8233.8238), vec3(-3.9, 36.05, 4207.4952));
              }
            }
           {
            if(true)
             {
              mat3x4 _GLF_SWITCH_2_31v, _GLF_SWITCH_2_32v[63];
              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              ivec3(61285, -58450, -12289);
              mat4x3 _GLF_SWITCH_2_33v, _GLF_SWITCH_2_34v[22];
              if(_GLF_DEAD(false))
               barrier();
              bvec4 _GLF_SWITCH_2_35v, _GLF_SWITCH_2_36v;
              if(_GLF_DEAD(false))
               barrier();
              ;
              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              (_GLF_IDENTITY((+ subgroup_local_id), (_GLF_IDENTITY((+ subgroup_local_id), max((+ subgroup_local_id), (+ subgroup_local_id)))) | (_GLF_IDENTITY((+ subgroup_local_id), 0u | ((+ subgroup_local_id))))) < subgroup_size);
              uvec3 _GLF_SWITCH_2_37v[47];
              if(_GLF_DEAD(false))
               {
                for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, true, true)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, true, true)))))); _injected_loop_counter --)
                 {
                  barrier();
                 }
               }
              uvec2(145204u, 150401u);
             }
            else
             {
              GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id;
              uint _GLF_SWITCH_2_38v;
              if(_GLF_DEAD(false))
               barrier();
             }
            {
             ivec2(-32539, -1576);
             bvec4 _GLF_SWITCH_2_39v, _GLF_SWITCH_2_40v[51], _GLF_SWITCH_2_41v;
             mat3(mat4x2(-8698.1639, -4.4, 6186.4935, 9.8, 6.6, -466.186, -65.22, -0.4));
             mat2 _GLF_SWITCH_2_42v, _GLF_SWITCH_2_43v;
            }
            mat4x2(-86.39, -77.70, -911.379, -60.42, 9.6, 1081.0279, -80.57, -37.62);
            while(true)
             {
              uvec2(169314u, 104523u).rg;
             }
            for(            mat2x3(mat2x4(385.569, 3.7, -1.2, 618.619, -0.6, _GLF_IDENTITY(-11.85, (_GLF_IDENTITY(-11.85, _GLF_IDENTITY(float(float(-11.85)), (true ? float(float(-11.85)) : _GLF_FUZZED(-550.795))))) / 1.0), 5996.4655, 441.900));
 _GLF_SWITCH_2_1v; mat2x3(mat3x2(7.8, _GLF_IDENTITY(2.0, (true ? 2.0 : _GLF_FUZZED((_GLF_SWITCH_2_1v ? 874.410 : -1.7)))), 4009.9159, -60.79, 0.9, 8.4)))
             {
              if(_GLF_DEAD(false))
               barrier();
              _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).rrgr;
              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / (0 ^ 1)))
               {
                mat2x3(1.1, -8.5, 7449.9404, 5.0, -8149.1450, 11.31);
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              do
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              mat3x4(768.705, -2.2, 43.76, -8.0, 6979.6189, 466.792, 0.0, -57.61, -3.9, -334.712, -9464.4572, 0.2);
              _GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))));
              GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id;
              _GLF_SWITCH_2_1v;
              ivec4 _GLF_SWITCH_2_44v[26], _GLF_SWITCH_2_45v, _GLF_SWITCH_2_46v;
              radians(pow(sinh(injectionSwitch), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))));
             }
            {
             switch(_GLF_SWITCH(0))
              {
               case 0:
               case 97:
               case 63:
               case 78:
               uvec4 _GLF_SWITCH_2_47v, _GLF_SWITCH_2_48v[67], _GLF_SWITCH_2_49v;
               case 32:
               case 51:
               case 31:
               case 99:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
               case 87:
               vec2(-57.85, 338.467);
               case 24:
               mat2x4(mat3x4(-2262.0248, -7.6, 9.0, 3.6, -158.861, -93.06, 108.154, -52.11, -76.62, _GLF_IDENTITY(-7983.8019, mix(float(-7983.8019), float(_GLF_FUZZED(88.74)), bool(_GLF_IDENTITY(false, false || (false))))), -5389.5723, 0.3));
               default:
               _GLF_IDENTITY(1, (1) | 0);
              }
            }
            if(_GLF_DEAD(false))
             barrier();
            vec4 _GLF_SWITCH_2_50v[62], _GLF_SWITCH_2_51v;
            mat2x3(mat3(-76.57, 8864.4620, 20.60, 7071.8253, -4.3, -0.7, -4.7, -7.4, -254.818));
            vec4 _GLF_SWITCH_2_52v, _GLF_SWITCH_2_53v;
           }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               switch(_GLF_SWITCH(0))
                {
                 case 92:
                 bvec4 _GLF_SWITCH_3_0v;
                 case 0:
                 case 48:
                 case 18:
                 mat4 _GLF_SWITCH_2_54v, _GLF_SWITCH_2_55v, _GLF_SWITCH_2_56v;
                 case 57:
                 bvec3(true, true, false);
                 case 9:
                 case 34:
                 if(_GLF_DEAD(false))
                  barrier();
                 case 46:
                 if(_GLF_SWITCH_2_1v)
                  {
                   ivec2 _GLF_SWITCH_2_57v;
                   (+ uvec2(175163u, 82882u));
                   mat3x4(6.4, -254.318, -45.08, -22.03, 1.0, -63.50, -9309.7071, 20.99, -289.232, 7976.8108, -8755.4233, 6841.2348);
                   mat2(-5.7, 9.1, -4831.8717, _GLF_IDENTITY(-796.468, mix(float(-796.468), float(_GLF_FUZZED((346.280 + -5.3))), bool(false))));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 break;
                 case 76:
                 atan(143.203, 424.457);
                 default:
                 1;
                }
              }
             while(true);
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           while(true)
            {
             if((ivec2(-63121, 86813) == ivec2(_GLF_IDENTITY(87148, int(int(87148))), 58144)))
              {
               vec2 _GLF_SWITCH_2_58v;
              }
             else
              {
               bvec3(false, false, _GLF_IDENTITY(false, (false) && true));
               mat4x3(1.6, -1567.7337, 1.1, 5.0, -616.048, _GLF_IDENTITY(-5.1, max(_GLF_IDENTITY(-5.1, min(-5.1, -5.1)), -5.1)), -822.521, -0.9, -301.235, 345.145, -526.055, 41.48);
               bvec3(false, false, false);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               injectionSwitch;
               uvec2 _GLF_SWITCH_2_59v[3], _GLF_SWITCH_2_60v;
               bvec2(true, false);
               uvec4 _GLF_SWITCH_2_61v;
               ((mat2x3(9.7, -767.253, -8639.5506, _GLF_IDENTITY(45.88, max(45.88, 45.88)), 7.9, -4.6) / 492.366) * mat4x2(751.959, 6864.4248, 0.5, -691.128, 6856.3853, _GLF_IDENTITY(-0.4, (true ? -0.4 : _GLF_FUZZED(2.0))), 4.5, -4.9));
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             {
             }
             ivec2(-85432, -10651);
             _GLF_IDENTITY(uvec4(15386u, 53007u, 150958u, 59739u).st, (uvec4(15386u, 53007u, 150958u, 59739u).st) / uvec2(1u, 1u));
             if(_GLF_DEAD(false))
              barrier();
             ivec2(-68662, 99723);
             mat4 _GLF_SWITCH_2_62v[85], _GLF_SWITCH_2_63v[86];
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             (bitfieldExtract(_GLF_IDENTITY(ivec2(8272, -49162), (_GLF_IDENTITY(ivec2(8272, -49162), (true ? ivec2(8272, -49162) : _GLF_FUZZED(ivec2(22530, 42956))))) | (ivec2(8272, -49162))), -86803, -84732) - ivec2(-43734, -48711));
            }
          }
         default:
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
          {
           1;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 & -77170); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, false)))))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.w;
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z;
 uint virtual_gid = workgroup_base + subgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), 0 + (int(int(4))))), 64, 4);
  }
 if((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.y) ^ 0u) % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             switch(_GLF_SWITCH((_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(int(7), int(7)))))
              {
               case 30:
               uint _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v[90], _GLF_SWITCH_2_2v[86];
               case 0:
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                barrier();
               case 31:
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               case 3:
               case 19:
               case 40:
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               case 45:
               case 7:
               case 2:
               if(_GLF_DEAD(false))
                barrier();
               case 77:
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               break;
               case 67:
               mat4x2(-4744.6543, -242.518, 2466.7430, 95.38, _GLF_IDENTITY(89.46, max(89.46, 89.46)), 4462.4479, 48.20, -4514.2813);
               if(_GLF_DEAD(false))
                barrier();
               default:
               1;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         switch(_GLF_SWITCH((0 ^ 0)))
          {
           case 0:
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               switch(_GLF_SWITCH(0))
                {
                 case 79:
                 lessThanEqual(vec4(0.1, 8.6, -0.6, -8370.5278), vec4(18.87, 85.79, -600.667, 5.8)).sq;
                 if(_GLF_DEAD(false))
                  barrier();
                 case 20:
                 uvec2 _GLF_SWITCH_2_0v[51], _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
                 case 0:
                 case 60:
                 case 30:
                 case 89:
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true, true, false)))))
                  barrier();
                 case 45:
                 case 62:
                 case 58:
                 case 2:
                 case 14:
                 barrier();
                 break;
                 case 54:
                 bvec4 _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v;
                 case 57:
                 mat2x4(-9.7, -28.63, 2250.2222, 66.03, -6.3, 58.45, -4.8, 4091.8503);
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 default:
                 1;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           read = atomicLoad(buf[virtual_gid], 4, 64, 2);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
           case 61:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(false)
            {
             notEqual(bvec4(false, true, true, false), bvec4(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, true, false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               findLSB(uvec4(3135u, 128758u, 58394u, 130934u));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             bvec2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[66];
             vec2 _GLF_SWITCH_0_2v[5], _GLF_SWITCH_0_3v;
             _GLF_IDENTITY(any(greaterThanEqual(ivec4(-75373, 29290, -52001, _GLF_IDENTITY(-74401, (-74401) | (-74401))), _GLF_IDENTITY(ivec4(35297, _GLF_IDENTITY(_GLF_IDENTITY(-88412, ~ (_GLF_IDENTITY(~ (-88412), clamp(~ _GLF_IDENTITY((-88412), (true ? (-88412) : _GLF_FUZZED(-6357))), ~ (-88412), ~ (-88412))))), (_GLF_IDENTITY(_GLF_IDENTITY(-88412, ~ (_GLF_IDENTITY(~ (-88412), clamp(~ (-88412), ~ (-88412), ~ (-88412))))), int(ivec2(_GLF_IDENTITY(-88412, ~ (_GLF_IDENTITY(~ (-88412), clamp(~ (-88412), ~ (-88412), ~ (-88412))))), 1)))) >> 0), 84371, -44102), _GLF_IDENTITY((ivec4(35297, _GLF_IDENTITY(-88412, ~ (_GLF_IDENTITY(~ (-88412), clamp(~ (-88412), ~ (-88412), ~ (-88412))))), 84371, -44102)), ((ivec4(35297, _GLF_IDENTITY(-88412, ~ (_GLF_IDENTITY(~ (-88412), clamp(~ (-88412), ~ (-88412), ~ (-88412))))), 84371, -44102))) ^ ivec4(0, 0, 0, 0)) ^ ((96308 & ivec4(-70568, 17942, 84817, 50127)) & ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))))), ! (! (any(greaterThanEqual(ivec4(-75373, 29290, -52001, -74401), ivec4(35297, -88412, 84371, -44102))))));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               do
                {
                 for(ivec4 _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[20], _GLF_SWITCH_0_6v; false; _GLF_IDENTITY(mat4(-9626.5375, 590.479, _GLF_IDENTITY(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-1.6) : -7.2)), (-7.2) / 1.0), 418.077, 4327.7760, -8.0, 0.0, 9818.5029, -6.4, -68.02, 34.52, -2.0, -611.782, 2550.6068, -5.5, 8.5), transpose(transpose(mat4(-9626.5375, 590.479, _GLF_IDENTITY(_GLF_IDENTITY(-7.2, 1.0 * (-7.2)), (-7.2) / 1.0), 418.077, 4327.7760, -8.0, 0.0, 9818.5029, -6.4, -68.02, 34.52, -2.0, -611.782, 2550.6068, -5.5, 8.5)))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(false, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(false, false))))), true && (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(false, false))))))))) || false), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_IDENTITY(false, ! (! (false))))))
                    {
                    }
                   else
                    {
                     if(false)
                      {
                       vec2 _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, (true ? injectionSwitch.x : _GLF_FUZZED(vec3(-12.56, -6423.7785, -7.5).t))) > injectionSwitch.y))))
                        {
                         switch(_GLF_SWITCH((0 | 0)))
                          {
                           case 9:
                           mat3 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v[55], _GLF_SWITCH_3_2v[26];
                           case 0:
                           case 19:
                           case 38:
                           case 53:
                           case 22:
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                           break;
                           default:
                           1;
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))
                        barrier();
                       -90757;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        barrier();
                       mat4(-45.18, 4.4, 1.1, 4172.7899, 1960.3865, 45.02, 9821.3755, -1078.8325, -5.4, 5.1, 34.90, -441.888, -2.8, 2.1, -8.4, 87.62);
                       asin(vec4(-743.004, 5.4, 939.794, -7568.9260));
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       do
                        {
                         _GLF_IDENTITY(matrixCompMult(mat3(-404.487, _GLF_IDENTITY(-263.943, clamp(-263.943, -263.943, _GLF_IDENTITY(-263.943, clamp(_GLF_IDENTITY(-263.943, max(_GLF_IDENTITY(-263.943, (true ? -263.943 : _GLF_FUZZED(-14.73))), -263.943)), -263.943, -263.943)))), 0.2, 5447.1506, 185.497, 12.47, -34.80, -0.0, -9.5), mat3(-85.31, 568.021, 3707.2993, 6.8, 60.72, -7503.7759, -0.4, -932.130, _GLF_IDENTITY(_GLF_IDENTITY(-635.076, (true ? _GLF_IDENTITY(-635.076, mix(float(_GLF_FUZZED((-25.53 - 25.02))), float(-635.076), bool(true))) : _GLF_FUZZED(4.3))), float(mat2x4(_GLF_IDENTITY(-635.076, (true ? _GLF_IDENTITY(-635.076, mix(float(_GLF_FUZZED((-25.53 - 25.02))), float(-635.076), bool(true))) : _GLF_FUZZED(4.3))), sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec4(tan(0.0), log(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)))), dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec4(tan(0.0), log(1.0), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))))))), _GLF_IDENTITY(mat3(mat4x3(matrixCompMult(mat3(-404.487, -263.943, 0.2, 5447.1506, 185.497, 12.47, -34.80, -0.0, -9.5), mat3(-85.31, 568.021, 3707.2993, 6.8, 60.72, -7503.7759, -0.4, -932.130, _GLF_IDENTITY(-635.076, 1.0 * (_GLF_IDENTITY(-635.076, min(-635.076, -635.076)))))))), (mat3(mat4x3(matrixCompMult(mat3(-404.487, -263.943, 0.2, 5447.1506, 185.497, 12.47, -34.80, -0.0, -9.5), mat3(-85.31, 568.021, 3707.2993, 6.8, 60.72, -7503.7759, -0.4, -932.130, -635.076))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                       _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))));
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
                            barrier();
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                            barrier();
                           mat3x2(7.2, -7284.9049, -955.745, -364.711, -6.6, _GLF_IDENTITY(-94.52, max(-94.52, -94.52)));
                          }
                         else
                          {
                          }
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) || false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3((_GLF_DEAD(false)) || false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))) && true)))))))
                              barrier();
                            }
                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
                                {
                                 mat3(3019.4487, -39.70, -2.2, -965.081, 5.0, 321.775, _GLF_IDENTITY(-79.16, float(float(-79.16))), -4520.6619, -9859.9760);
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -80649)); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       (+ mat3x2(-34.07, 75.27, -454.553, 30.51, 2578.7682, 7.1));
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     for(ivec3 _GLF_SWITCH_0_10v[46], _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v; false; vec4(-9.5, -6818.4893, -93.46, -850.810))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
                          barrier();
                         barrier();
                        }
                       outerProduct(max(_GLF_SWITCH_0_3v, -3.7), vec2(-663.493, 9.6));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       uvec4 _GLF_SWITCH_0_13v;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              {
                               switch(_GLF_SWITCH(0))
                                {
                                 case 5:
                                 mat2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v;
                                 case 0:
                                 case 71:
                                 case 44:
                                 case 51:
                                 case 86:
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 case 95:
                                 case 69:
                                 barrier();
                                 break;
                                 default:
                                 1;
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           switch(_GLF_SWITCH(0))
                            {
                             case 0:
                             case 34:
                             case 16:
                             case 47:
                             case 1:
                             case 53:
                             case 12:
                             case 27:
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             break;
                             case 36:
                             uvec2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v;
                             default:
                             1;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           ((mat3x2(7590.6283, _GLF_IDENTITY(-25.20, clamp(-25.20, -25.20, -25.20)), _GLF_IDENTITY(-7.2, (-7.2) / 1.0), -66.11, -839.790, -8.9) == mat3x2(mat4x2(-0.8, 5.4, 674.014, -7819.1219, -3.0, -5.4, -237.327, 73.92))) ? (mat2(16.94, -3.3, -1.5, 4.9) / mat2(335.047, -72.18, 4.7, 915.572)) : mat2(-753.976, -66.13, 422.010, -7830.8723));
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         exp2(vec4(-7.7, 69.63, 692.349, 1.8));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_IDENTITY(bvec3(false, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, false)), bvec3(bvec4(bvec3(bvec3(false, false, false)), true))))).r)
                    {
                     ;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || false)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || false)))))), (bool(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || false))))))) && true))) || false))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         uvec2 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v;
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         matrixCompMult(mat2x4(236.933, 303.819, 0.5, 390.820, 8.9, -470.941, 620.140, -2.8), mat2x4(2653.7142, 874.419, -4.3, 1.4, 0.0, -70.66, 58.06, -38.83));
                         ;
                         isnan(refract(vec4(77.61, -12.95, -9.5, -441.480), vec4(5.9, 7.9, 8477.7617, -5.6), 5517.0758));
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             switch(_GLF_SWITCH(0))
                              {
                               case 74:
                               vec3 _GLF_SWITCH_1_0v[66], _GLF_SWITCH_1_1v;
                               case 0:
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               case 55:
                               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), clamp(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), (max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)) * mat2(1.0))))))).x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-3115.1037)), bool(false)))))))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                                {
                                }
                               else
                                {
                                 switch(_GLF_SWITCH(0))
                                  {
                                   case 45:
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                                    {
                                    }
                                   else
                                    {
                                     bvec4(true, false, false, true);
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0))))))
                                    barrier();
                                   case 0:
                                   case 68:
                                   barrier();
                                   break;
                                   case 52:
                                   false;
                                   case 25:
                                   mat3x2 _GLF_SWITCH_2_0v;
                                   default:
                                   1;
                                  }
                                }
                               break;
                               default:
                               if(_GLF_DEAD(false))
                                barrier();
                               1;
                              }
                            }
                           else
                            {
                            }
                          }
                         int _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[40], _GLF_SWITCH_0_18v;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                         pow(-3946.9945, (-104.946 / 8.6));
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), true, true)))))))))
                          barrier();
                         bool _GLF_SWITCH_0_19v[67], _GLF_SWITCH_0_20v;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             switch(_GLF_SWITCH(0))
                              {
                               case 65:
                               mat2(7.7, 8.7, -0.6, 66.98);
                               case 0:
                               case 16:
                               case 89:
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))) && true))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                               break;
                               case 49:
                               ;
                               case 12:
                               clamp(uvec3(78424u, 113798u, 181239u), subgroup_size, _GLF_IDENTITY(11996u, (_GLF_IDENTITY(11996u, min(11996u, 11996u))) | (11996u)));
                               default:
                               1;
                              }
                            }
                          }
                        }
                       while((subgroup_id == workgroup_size));
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while((-4183.3790 != 1.0))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               mat3x4(3.0, -2.5, -582.596, 4.3, _GLF_IDENTITY(_GLF_IDENTITY(-757.100, _GLF_IDENTITY((_GLF_IDENTITY(-757.100, clamp(-757.100, -757.100, -757.100))) / 1.0, ((_GLF_IDENTITY(-757.100, clamp(-757.100, _GLF_IDENTITY(-757.100, mix(float(-757.100), float(_GLF_FUZZED(-56.02)), bool(_GLF_IDENTITY(false, (false) && true)))), -757.100))) / 1.0) / 1.0)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(-757.100, min(-757.100, -757.100)), _GLF_IDENTITY((_GLF_IDENTITY(-757.100, clamp(-757.100, -757.100, -757.100))) / 1.0, ((_GLF_IDENTITY(-757.100, clamp(-757.100, -757.100, -757.100))) / _GLF_IDENTITY(1.0, float(mat4x2(1.0, determinant(mat3(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(75.49)), float(0.0), bool(true)))), float(_GLF_FUZZED(463.704)), bool(false))), 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(cos(0.0), min(cos(0.0), _GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))))), log(1.0))))) / 1.0)))), 9449.4415, -46.26, 0.2, 35.59, 16.53, 17.43, -93.16);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(true)
                      {
                       GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id.z;
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))))))
                        {
                         switch(_GLF_SWITCH(0))
                          {
                           case 19:
                           bvec2 _GLF_SWITCH_3_0v;
                           case 36:
                           mat2x3 _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v, _GLF_SWITCH_3_3v[22];
                           case 0:
                           if(_GLF_DEAD(false))
                            barrier();
                           case 28:
                           do
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                           break;
                           case 32:
                           mat4x3 _GLF_SWITCH_3_4v;
                           default:
                           1;
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                        barrier();
                       uvec3(90411u, 147498u, 78099u);
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(4), int(4)))))
                    {
                     case 0:
                     case 35:
                     case 65:
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)))))))))
                      barrier();
                     case 93:
                     case 92:
                     case 63:
                     if(_GLF_DEAD(false))
                      barrier();
                     case 55:
                     barrier();
                     case 96:
                     case 34:
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                     break;
                     default:
                     1;
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, cos(0.0))), max(_GLF_IDENTITY(float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, cos(0.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(65.82) : float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, cos(0.0))))), float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, cos(0.0)))))))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float((mat4x3(-6.4, -75.05, -73.18, 946.147, -3211.7696, 855.500, 4.6, 218.858, -0.3, -2.7, -2.0, -7.8) == mat4x3(-9431.3668, -64.00, -7651.2913, 6.2, -6.3, 5.5, 9643.1367, -27.09, -421.431, 3.0, -993.260, -3.5))))), bool(false))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 mat4x3(-8094.8706, -5312.0469, -0.4, 4.9, 8.4, -420.724, _GLF_IDENTITY(644.003, clamp(644.003, 644.003, 644.003)), -8.3, -7.9, _GLF_IDENTITY(4305.2493, min(4305.2493, 4305.2493)), -8707.2676, -7.9);
                }
               while(_GLF_WRAPPED_LOOP(false));
               _GLF_SWITCH_0_3v.g;
              }
             float _GLF_SWITCH_0_21v;
            }
           default:
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-125.084) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))) - 0.0) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) || false)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(6.3)), bool(false)), (false ? _GLF_FUZZED(log(7923.1086)) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(6.3)), _GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(false), true && (bool(false))))))))) > injectionSwitch.y))))))) && true))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             1;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))
      {
       case 23:
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))) && true)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       _GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(95350u, 190831u), min(uvec2(95350u, 190831u), uvec2(95350u, 190831u))), (_GLF_IDENTITY(uvec2(30487u, 64490u) + uvec2(199960u, 197861u), (true ? uvec2(30487u, 64490u) + uvec2(199960u, 197861u) : _GLF_FUZZED(uvec2(_GLF_IDENTITY(63884u, 0u | (63884u)), 73781u)))))), (uvec4(uvec2(95350u, 190831u), (_GLF_IDENTITY(uvec2(30487u, 64490u) + uvec2(199960u, 197861u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(uvec2(30487u, 64490u), uvec2(uvec4(uvec2(30487u, 64490u), 1u, 1u))) + uvec2(199960u, 197861u) : _GLF_FUZZED(uvec2(_GLF_IDENTITY(63884u, 0u | (63884u)), 73781u)), max(true ? _GLF_IDENTITY(uvec2(30487u, 64490u), uvec2(uvec4(uvec2(30487u, 64490u), 1u, 1u))) + uvec2(199960u, 197861u) : _GLF_FUZZED(uvec2(_GLF_IDENTITY(63884u, 0u | (63884u)), 73781u)), true ? _GLF_IDENTITY(uvec2(30487u, 64490u), uvec2(uvec4(uvec2(30487u, 64490u), 1u, 1u))) + uvec2(199960u, 197861u) : _GLF_FUZZED(uvec2(_GLF_IDENTITY(63884u, 0u | (63884u)), 73781u))))))))) ^ uvec4(0u, 0u, 0u, 0u)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (injectionSwitch)))).y)) ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_12num_workgroupsubgroup_local_idsubgroup_sizeworkgroup_id) : uvec4(uvec2(95350u, 190831u), (uvec2(30487u, 64490u) + uvec2(199960u, 197861u)))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                    barrier();
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       case 0:
       case 42:
       case 26:
       case 90:
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       case 74:
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           read = atomicLoad(buf[virtual_gid], 4, 64, 2);
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec3(550.815, 0.3, 694.520), vec3(-6067.4985, -164.281, 0.8))) : float(injectionSwitch.x))), mix(float(_GLF_FUZZED(7.2)), float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(distance(vec3(550.815, 0.3, 694.520), vec3(-6067.4985, -164.281, 0.8))) : float(injectionSwitch.x)))), bool(true))), float(injectionSwitch.x), float(injectionSwitch.x))), float(_GLF_FUZZED(2412.2451)), bool(false)))) / 1.0) > injectionSwitch.y))))
            barrier();
          }
        }
       break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       default:
       _GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(8), int(8))));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) && _GLF_IDENTITY(true, ! (! (true)))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
