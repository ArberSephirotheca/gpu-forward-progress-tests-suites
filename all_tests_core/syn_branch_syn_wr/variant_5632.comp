#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false, false, false)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((- 47280) & 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), 0.0, 1.0)), float(_GLF_IDENTITY(mat4(float(mat2x3(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))), (_GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))), mix(float(_GLF_FUZZED(-1.4)), float(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0))))), bool(true)))) * 1.0), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), 0.0, 1.0)), 0.0, 0.0, sin(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3738.8694) : 0.0))) / 1.0)) + 0.0), 1.0), mat4(1.0) * (_GLF_IDENTITY(mat4(float(mat2x3(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))), dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), mix(vec2(_GLF_FUZZED(3.6), _GLF_FUZZED((621.551 + -16.72))), vec2((vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))[0], (vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))[1]), bvec2(true, true))))), 0.0, 1.0)), 0.0, 0.0, sin(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-42.78) : 0.0)), 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), (mat4(float(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), 0.0, 1.0)), 0.0, 0.0, sin(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)) * mat4(1.0))))))), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(839.367))) > injectionSwitch.y))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(839.367))) > injectionSwitch.y))))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), tan(0.0), 1.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0))))) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0) : _GLF_FUZZED(32854)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != (1 & 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = ((0 | 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) | (_GLF_IDENTITY(1, 0 | (1))))], min(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], max(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-55.02, 2.2)), (_GLF_FUZZED(vec2(-55.02, 2.2))) / vec2(1.0, 1.0)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0))))])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(0, max(0, 0))))]))) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) - 0))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], min(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], max(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))))), (false ? _GLF_FUZZED(vec2(-55.02, 2.2)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(0, max(0, 0))), int(ivec4(_GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(0, max(0, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0))))])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, 0 | (1))])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))[0], 1.0 * ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))[0])), _GLF_FUZZED(117.268)), vec2(_GLF_FUZZED((4.8 / -2811.0930)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))[1]), bvec2(false, true))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], min(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], max(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), _GLF_IDENTITY(0, 0 | (0)) | (1))])))))), (false ? _GLF_FUZZED(vec2(-55.02, 2.2)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.9), _GLF_FUZZED(84.83)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))[_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(0, max(0, 0))))])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, 0 | (1))], float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, 0 | (1))], length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, 0 | (1))], length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0)))))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], min(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], max(injectionSwitch[_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) ^ (0 ^ 0))))], injectionSwitch[_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (~ (1)))))])))), mix(float(_GLF_FUZZED(-64.48)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], min(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], max(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))]))))), (true ? float(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], min(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], max(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))]))))) : _GLF_FUZZED(0.2))), bool(true))))), (false ? _GLF_FUZZED(vec2(-55.02, 2.2)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(0, max(0, 0))))])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, 0 | (1))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 | (1))])))))).x)) > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-748.949), _GLF_FUZZED(3969.9746)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5217.0854) : injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))))))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) / 1.0, mix(_GLF_IDENTITY(float((0.0) / 1.0), mix(float(_GLF_FUZZED(float(66918))), float(float((0.0) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(_GLF_FUZZED(-9.6)), bool(false)))), injectionSwitch.x)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(8)))))), (int(8)) >> 0)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (45037 & (0 << _GLF_IDENTITY(int(7), int(7))))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != (45037 & (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | _GLF_IDENTITY((int(7)), (_GLF_IDENTITY((int(7)), max((int(7)), (int(7))))) | 0)))))))), true && (_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != (45037 & (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | _GLF_IDENTITY((int(7)), (_GLF_IDENTITY((int(7)), max((int(7)), (int(7))))) | 0)))))))), ! (! ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != (45037 & (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | _GLF_IDENTITY((int(7)), (_GLF_IDENTITY((int(7)), max((int(7)), (int(7))))) | 0)))))))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_IDENTITY(false, true && (false)) || (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false || (bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))) || false)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))), injectionSwitch), (min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))), injectionSwitch)) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, tan(0.0)))), injectionSwitch.y, injectionSwitch.y))))))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))))
                    barrier();
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) + 0.0) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) + 0.0) > injectionSwitch.y))), false, true, true))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x) >> 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x) >> 0u)) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x) >> 0u)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(22631))), (true ? ~ (_injected_loop_counter) : _GLF_FUZZED(6814))))) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(max((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(50781u) : (subgroup_local_id)))), _GLF_IDENTITY(0u ^ (max((subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), 0u | (_GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), (subgroup_local_id), (subgroup_local_id))))), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id)) | (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id)) | (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))))) - 0u))))), 0u | (0u ^ (max((subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), 0u | (_GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u), (subgroup_local_id), (subgroup_local_id))))), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id)) | (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (subgroup_local_id)) | (false ? _GLF_FUZZED(_GLF_IDENTITY(50781u, (50781u) | (50781u))) : (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))))) - 0u))))))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), mix(vec2((vec2(vec2(injectionSwitch)))[0], _GLF_FUZZED(1.4)), vec2(_GLF_FUZZED(-9374.3368), (vec2(vec2(injectionSwitch)))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))) || false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0)) | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), clamp(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) * 1), 0 >> _GLF_IDENTITY(int(7), int(7)), 0 >> _GLF_IDENTITY(int(7), int(7))))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), (int(ivec3(1, 1, 1))) | 0))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | _GLF_IDENTITY((buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))]), min((buf[_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))]), _GLF_IDENTITY((buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) + _GLF_IDENTITY(0u, (0u) << 0u))]), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (true ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), _GLF_IDENTITY((_GLF_FUZZED(workgroup_size)), (_GLF_IDENTITY((_GLF_FUZZED(workgroup_size)), max(_GLF_IDENTITY((_GLF_FUZZED(workgroup_size)), ((_GLF_FUZZED(workgroup_size))) ^ 0u), (_GLF_FUZZED(workgroup_size))))) | ((_GLF_FUZZED(workgroup_size)))) >> 0u) : _GLF_FUZZED(subgroup_size))) : (buf[virtual_gid]))))), (_GLF_IDENTITY((buf[virtual_gid]) | _GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], uint(uvec4(buf[virtual_gid], 1u, 0u, 0u))), buf[virtual_gid], buf[virtual_gid])), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(87841u), max(_GLF_FUZZED(87841u), _GLF_FUZZED(87841u))) : buf[virtual_gid], uint(_GLF_IDENTITY(uint(false ? _GLF_FUZZED(87841u) : buf[virtual_gid]), max(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(87841u) : buf[virtual_gid], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicExchange(workgroup_size, next_virtual_gid)) : false ? _GLF_FUZZED(87841u) : buf[_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, (0u | 1u))))]))), uint(false ? _GLF_FUZZED(_GLF_IDENTITY(87841u, (true ? 87841u : _GLF_FUZZED(workgroup_base)))) : buf[virtual_gid])))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])), ((false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) : (buf[virtual_gid]))) | ((false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid]))))), (uint(false) & 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], uint(uvec4(buf[virtual_gid], 1u, 0u, 0u))), buf[virtual_gid], buf[virtual_gid])), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(87841u), max(_GLF_FUZZED(87841u), _GLF_FUZZED(87841u))) : buf[virtual_gid], uint(_GLF_IDENTITY(uint(false ? _GLF_FUZZED(87841u) : _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))), max(uint(_GLF_IDENTITY(false ? _GLF_FUZZED(87841u) : buf[virtual_gid], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicExchange(workgroup_size, next_virtual_gid)) : false ? _GLF_FUZZED(87841u) : _GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid]))))), uint(false ? _GLF_IDENTITY(_GLF_FUZZED(87841u), (_GLF_FUZZED(87841u)) * 1u) : _GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid]))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])), ((false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) : (buf[virtual_gid]))) | ((_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid]))))))))), ((buf[virtual_gid]) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid]))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid]))))), 0u | (_GLF_IDENTITY((buf[virtual_gid]), min(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) ^ 0u), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))))))))) - (0u << _GLF_IDENTITY(uint(6u), uint(6u))))) | (_GLF_IDENTITY((buf[virtual_gid]) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ~ (~ (_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) << 0u), (1u | 0u), 0u, 1u)), (true ? uint(uvec4(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) << 0u), (1u | 0u), 0u, 1u)) : _GLF_FUZZED(workgroup_id))))))))), _GLF_IDENTITY(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), clamp(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), min(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) << 0u), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))), true, false)))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) | (workgroup_size)))), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : workgroup_size)), workgroup_size))) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid]))))))), clamp(_GLF_IDENTITY((buf[virtual_gid]) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ~ (~ (_GLF_IDENTITY((buf[virtual_gid]), min((buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))]), (buf[virtual_gid])))))), _GLF_IDENTITY(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), clamp(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)))) && true, ((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)))) && true) || false)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))), ((workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)))) << 0u)), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : workgroup_size)), workgroup_size))) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((buf[virtual_gid]), ~ (_GLF_IDENTITY(~ ((buf[virtual_gid])), max(~ ((buf[virtual_gid])), ~ ((buf[virtual_gid])))))))))))), ((buf[virtual_gid]) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ~ (~ (_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), (buf[virtual_gid])))))), _GLF_IDENTITY(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), clamp(min((buf[virtual_gid]), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))), max((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))), _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))))))), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), _GLF_IDENTITY(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true))))))), true, false)))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)))), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : workgroup_size)), workgroup_size))) : (buf[virtual_gid])))), max(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) | _GLF_IDENTITY((workgroup_size), ((workgroup_size)) << 0u)))), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : workgroup_size)), workgroup_size))) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)))), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : workgroup_size)), workgroup_size))) : (_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (true ? ~ (buf[virtual_gid]) : _GLF_FUZZED(subgroup_local_id))))))))))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))))))) | 0u), (buf[virtual_gid]) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ~ (~ (_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), (buf[virtual_gid])))))), _GLF_IDENTITY(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), clamp(min((buf[virtual_gid]), _GLF_IDENTITY((buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), true, _GLF_IDENTITY(false, ! (! (false))))))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)))), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))), workgroup_size))) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid]))))))), (buf[virtual_gid]) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), ~ (~ (_GLF_IDENTITY((buf[virtual_gid]), min((buf[virtual_gid]), (buf[virtual_gid])))))), _GLF_IDENTITY(min(_GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(((buf[virtual_gid])) ^ 0u, clamp(_GLF_IDENTITY(((buf[virtual_gid])) ^ 0u, (((buf[virtual_gid])) ^ 0u) ^ 0u), ((buf[virtual_gid])) ^ 0u, ((buf[virtual_gid])) ^ 0u))), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))), clamp(min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((buf[virtual_gid]), max(_GLF_IDENTITY((buf[virtual_gid]), clamp((buf[virtual_gid]), (buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), ~ (~ ((buf[virtual_gid])))))), (buf[virtual_gid])))))), min(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) - 0u), _GLF_IDENTITY((buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 1u, 0u)))]), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false)))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(89835u) : workgroup_size))) | (workgroup_size)))), _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uint(85819)) : workgroup_size)), workgroup_size))) : (buf[virtual_gid])))), min((buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : (buf[virtual_gid])))))))))))), 4, 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))))))
        barrier();
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true))) && true));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true))))) && true)), false)), true, false))))))), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bool(false || (true))))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, false || (true)), false))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), false || _GLF_IDENTITY((true), ((true)) || false)), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) && true) || (true)), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(true, false || (true)))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, false || (true)), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0))).y)))))))))))))) || false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), injectionSwitch, injectionSwitch)).y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), (bool(bvec3(_GLF_DEAD(false), true, false))) || false))))))
      barrier();
     int i = 0;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)))), (! (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)))), true, true, true))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || false))), false, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), true)), true && (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)))), true, true, true)))) && true)))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (0) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0))), injectionSwitch))) / vec2(1.0, 1.0)).y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), (4) ^ 0));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), bool(bvec4(_GLF_IDENTITY((false), true && ((false))), false, false, false))), false, false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))), true)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))), true)), false, true, true)))))))))), false, true, true)))));
}
