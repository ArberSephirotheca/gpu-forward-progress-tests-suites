#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
 uint subgroup_base = subgroup_id * GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.z;
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.x = subgroup_base, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.x = subgroup_base), 1u * (~ (GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.x = subgroup_base)))));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id) >> uvec2(0u, 0u)).x + GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.x + GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.y;
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size, _GLF_IDENTITY(uvec3(uvec4(GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size, 1u)), (uvec3(uvec4(GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size, 1u))) >> uvec3(0u, 0u, 0u))).x + ((GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.y + 1) % _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.z, uint(uvec3(GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.z, 1u, 1u))));
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if((GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size.y % _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2))))) == 0)
  {
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
