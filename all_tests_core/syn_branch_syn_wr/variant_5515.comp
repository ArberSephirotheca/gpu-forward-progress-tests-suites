#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)), bool(bvec2(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)), true))))))))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(0, min(0, 0)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))) && true)))))))))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((true ? -1671.0884 : -2.5)), _GLF_FUZZED(3405.6531)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_TRUE(true)) || false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_TRUE(true)) || false, true, true), bvec3(bvec3(bvec3((_GLF_WRAPPED_IF_TRUE(true)) || false, true, true)))), false)))), (bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_TRUE(true)) || false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_TRUE(true)) || false, true, true), bvec3(bvec3(bvec3((_GLF_WRAPPED_IF_TRUE(true)) || false, true, true)))), false))))) && true)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)) || false, true && _GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(true)) || false), ! (! (_GLF_IDENTITY(((_GLF_WRAPPED_IF_TRUE(true)) || false), ! (! (((_GLF_WRAPPED_IF_TRUE(true)) || false)))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) || false)))) || (false))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, log(cos(0.0)), 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), ! (_GLF_IDENTITY(! (! (! (! (false)))), false || (_GLF_IDENTITY(! (! (! (! (false)))), (! (! (! (! (false))))) && true)))))), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), ! (_GLF_IDENTITY(! (! (! (! (false)))), false || (_GLF_IDENTITY(! (! (! (! (false)))), (! (! (! (! (false))))) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-79.04) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), injectionSwitch[1])))).y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 ^ 1) | 0), (((1 ^ 1) | 0)) - (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(2829.2776) : injectionSwitch.x, (false ? _GLF_FUZZED(2829.2776) : injectionSwitch.x) * cos(0.0)))) > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(2829.2776) : injectionSwitch.x, (false ? _GLF_FUZZED(2829.2776) : injectionSwitch.x) * cos(0.0)))) > injectionSwitch.y))))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)) >> 0u)), ~ (~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)), max((_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 1u, 0u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), 0u, 0u, 1u), ~ (~ (uvec4(_GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 1u, 0u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), 0u, 0u, 1u))))), (uint(uvec4(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, 0u + (_GLF_IDENTITY(workgroup_size, (workgroup_size) + (1u ^ 1u)))), workgroup_size))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))), (~ (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))) + 0u)) ^ 0u))), 0u, 0u, 1u))) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)), ((_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u))) << 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), _GLF_IDENTITY((uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u, ((uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u) | ((uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)))), min((_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)), (_GLF_IDENTITY(uint(uvec4(workgroup_size, 0u, 0u, 1u)), (uint(uvec4(workgroup_size, 0u, 0u, 1u))) << 0u)))))))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) ^ (0u ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), 0u))), workgroup_id, workgroup_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), workgroup_id, workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), workgroup_id, workgroup_id)), max(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), workgroup_id, workgroup_id))))) | (_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), workgroup_id, workgroup_id)))), _GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), workgroup_id, workgroup_id))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, (false) && true)), true, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat2(1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec3(-4654.3666, -546.905, 6263.9878).r)), float(0.0), bool(true))), 1.0)) * (injectionSwitch.x)) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) || false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(distance(injectionSwitch, vec2(-36.79, 3.9))) : injectionSwitch.y)), injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), abs(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(sin(vec2(0.0, 0.0)))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8944.3816)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(-8944.3816)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)), (mix(float(_GLF_FUZZED(-8944.3816)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))) / 1.0)) - _GLF_ZERO(0.0, injectionSwitch.x)))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0)))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, log(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0)))) > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, false || (false)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))), false, true), true))), true))))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(_GLF_IDENTITY(vec4((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), 0.0, 1.0), vec4(vec4(vec4((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), 0.0, 1.0)))))) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(6542.4318), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true)))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))) || false), true)))))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-828.460))), 1.0, 1.0))), (_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(! (true), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) ? 0.0 : _GLF_FUZZED(-828.460))), 1.0, 1.0)))) - 0.0), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), mix(float(_GLF_FUZZED(88.82)), float(abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), bool(true))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)))))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec3(5.0, 8993.9054, -944.800).x)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(513.598)), bvec2(true, false))))).y, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(513.598)), bvec2(true, false))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(513.598)), bvec2(true, false))))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(513.598)), bvec2(true, false))))).y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(513.598)), bvec2(true, false))))).y)))), 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0))))))) / 1.0)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))) || false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0)))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false), true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))))))))) || false)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)) && true)))) || false)) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, sqrt(1.0), 0.0, 0.0)), clamp(float(mat2(1.0, sqrt(1.0), 0.0, 0.0)), float(mat2(1.0, sqrt(1.0), 0.0, 0.0)), float(mat2(1.0, sqrt(1.0), 0.0, 0.0)))))), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0)), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(6542.4318), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)))))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), (vec4(0.0, 0.0, 1.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.43)), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0))))))) / 1.0)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false), true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))))))))) || false), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-99.77, 48.25)) : injectionSwitch)).y))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(false))), true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.9)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)) && true)))) || false)) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))) * mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(float(mat2(1.0, sqrt(1.0), 0.0, 0.0)), clamp(float(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), sqrt(1.0), 0.0, 0.0)), float(mat2(1.0, sqrt(1.0), 0.0, 0.0)), float(mat2(1.0, sqrt(1.0), 0.0, 0.0)))))), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0)), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(6542.4318), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7351.3348)), float(1.0), bool(true)))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, sin(0.0))), dot(vec2(1.0, 0.0), vec2(1.0, sin(0.0)))))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)))))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.9)), bool(false))), 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), (vec4(0.0, 0.0, 1.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.43)), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.43)), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0), (false ? _GLF_FUZZED(mat3x4(-118.250, -8.2, 8.3, 1.6, -5.1, 1.9, -2.9, 473.956, -9.1, 32.75, 6.2, -98.05)) : mat3x4(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.43)), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0)))), (float(_GLF_IDENTITY(mat3x4(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.43)), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0), (false ? _GLF_FUZZED(mat3x4(-118.250, -8.2, 8.3, 1.6, -5.1, 1.9, -2.9, 473.956, -9.1, 32.75, 6.2, -98.05)) : mat3x4(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.43)), float(1.0), bool(true))), 1.0), vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0))))) - determinant(mat2(0.0, 0.0, 1.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0))))))) / 1.0)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false), true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))))))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(_GLF_IDENTITY(6542.4318, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(6542.4318, cos(0.0)), (true ? vec2(6542.4318, cos(0.0)) : _GLF_FUZZED(vec2(-5637.6402, -759.504))))), clamp(float(_GLF_IDENTITY(vec2(6542.4318, cos(0.0)), (true ? vec2(6542.4318, cos(0.0)) : _GLF_FUZZED(vec2(-5637.6402, -759.504))))), float(_GLF_IDENTITY(vec2(6542.4318, cos(0.0)), (true ? vec2(6542.4318, cos(0.0)) : _GLF_FUZZED(vec2(-5637.6402, -759.504))))), float(_GLF_IDENTITY(vec2(6542.4318, cos(0.0)), (true ? vec2(6542.4318, cos(0.0)) : _GLF_FUZZED(vec2(-5637.6402, -759.504))))))))), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(6542.4318), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true)))))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))) || false), true)))), false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(6542.4318), ((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))[1]), bvec2(false, true)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-326.742)), vec2(_GLF_FUZZED(6542.4318), ((injectionSwitch) * mat2(1.0))[1]), bvec2(_GLF_IDENTITY(false, (false) && true), true)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))), false))))))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0), vec2(0.0, 0.0)), float(_GLF_IDENTITY(mat3x2(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0, 1.0), (mat3x2(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.2) : 0.0)), 0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(401.603))), 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), 1.0 * ((_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))))) / round(length(normalize(vec2(1.0, 1.0))))) / 1.0), sin(0.0), 1.0, 1.0))), 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.7) : 1.0)), 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(83.15)))), bool(true))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0), (mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), clamp(dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(83.15)))), bool(true))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0), (mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(83.15)))), bool(true))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0), (mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), dot(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(83.15)))), bool(true))), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0), (mat4x2(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0))), exp(0.0), 0.0, 0.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - determinant(mat3(0.0, 0.0, length(0.0), 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0))), 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)))))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 0.0), clamp(vec4(1.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 0.0), max(vec4(1.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 0.0, 0.0))))), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.5) : 0.0)), 0.0, 1.0, 1.0))), 1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3x4(mat3(1.0)), mat3x4(mat4(_GLF_IDENTITY(mat3x4(mat3(1.0)), (false ? _GLF_FUZZED(mat3x4(-83.97, 952.136, -25.21, 2.6, -449.393, -1.9, 8.7, 83.78, 69.21, -71.47, -9.5, -6500.2626)) : mat3x4(mat3(1.0)))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0), _GLF_IDENTITY(mat3(mat4x3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0), _GLF_IDENTITY(mat3(mat4(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0))), (mat3(mat4(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), mat3(mat3x4(mat3(mat4x3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0), _GLF_IDENTITY(mat3(mat4(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0))), (mat3(mat4(mat3(_GLF_IDENTITY(-172.413, min(-172.413, -172.413)), 6.2, 0.8, 372.312, -5348.4057, -84.43, -2157.3392, -8.0, 3.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))) : mat3(_GLF_IDENTITY(mat3x4(mat3(1.0)), mat3x4(mat4(_GLF_IDENTITY(mat3x4(mat3(1.0)), (false ? _GLF_FUZZED(mat3x4(-83.97, 952.136, -25.21, 2.6, -449.393, -1.9, 8.7, 83.78, 69.21, -71.47, -9.5, -6500.2626)) : mat3x4(mat3(1.0))))))))))) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), max(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), clamp(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), clamp(dot(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-41.83))), 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0)), mat3(1.0) * (mat3(1.0) * (mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED((48.36 - -763.711)), _GLF_FUZZED(5.9), (vec4(0.0, 0.0, 1.0, 1.0))[2], (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))[3]), vec4((vec4(0.0, 0.0, 1.0, 1.0))[0], (vec4(0.0, 0.0, 1.0, 1.0))[1], _GLF_FUZZED(925.385), _GLF_FUZZED(0.9)), bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0))))))) / 1.0)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) || false), true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))))))))) || _GLF_IDENTITY(false, ! (! (false))))), true))))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
          {
          }
         else
          {
           return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-27096)))) - 0), uint(uvec4(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-27096)))) - 0), 0u, 1u, 1u)))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-27096)))) - 0)) % subgroup_size), max(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-27096)))) - 0)) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-27096)))) - 0)) % subgroup_size)))) ^ 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7116.6508) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.7) : injectionSwitch.x))))) * 1.0) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))], uint(1), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    continue;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))
      continue;
     if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), 1)), (subgroup_local_id + 1) | (subgroup_local_id + 1)) < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))), true, true))))), true, false)), false)))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       int i = 0;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec3(8.7, _GLF_IDENTITY(-90.48, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(-90.48, (true ? -90.48 : _GLF_FUZZED(floor(1022.0815)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat3x4(float(mat2x4(_GLF_IDENTITY(-90.48, (true ? -90.48 : _GLF_FUZZED(floor(1022.0815)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, log(1.0)), mat3x4(mat3x4(mat3x4(float(mat2x4(_GLF_IDENTITY(-90.48, (true ? -90.48 : _GLF_FUZZED(floor(1022.0815)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, log(1.0)))))))), -4.5).g)), bool(false))) > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), false))))
            continue;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true, false)), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true, false))) || false)))))
                return;
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.8)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
