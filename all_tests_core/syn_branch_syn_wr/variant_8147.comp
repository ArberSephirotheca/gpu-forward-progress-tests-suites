#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 vec3 _f0;
 mat2x4 _f1;
 int _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 _GLF_struct_2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 uint _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 mat4 _f1;
 bvec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 uint num_workgroup;
 _GLF_struct_1 _f1;
 uvec4 _f2;
 _GLF_struct_3 _f3;
 ivec3 _f4;
 uint _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3802.0862)), bool(false))) > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (0 | (0 & 67152)) ^ (3)))))); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       return;
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                  }
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((- 9630.3695))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0)).y))))).x)))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6816.3638, -7.0)))).y))))
          {
           for(int _injected_loop_counter = (-72527 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0), transpose(transpose(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0)))))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-11187) : 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      return;
                    }
                   return;
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))), true)))), bool(bvec3(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), false, true))))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                             else
                              {
                               return;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         do
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                                        {
                                         return;
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    break;
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           do
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), false, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), false, false)))))));
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            continue;
          }
         for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), clamp(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), max(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(_GLF_IDENTITY(8, clamp(8, 8, 8))), 0, 1, 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), clamp(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0))), int(ivec2(_GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0))), 0)))) << 0)), clamp(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0)))))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 1, 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                return;
              }
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> (0 << _GLF_IDENTITY(int(1), int(1))))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(747.432)), float(injectionSwitch.x), bool(true)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))))))
                  return;
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 ^ (_GLF_IDENTITY(-19015, (-19015) ^ 0) & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = subgroup_local_id;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_0(bvec4(true), mat4(1.0), bvec4(true), 1u), gl_NumWorkGroups.x, _GLF_struct_1(bvec4(true), 1u, mat2x3(1.0)), uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) / 1u)), _GLF_struct_3(mat3x2(1.0), _GLF_struct_2(_GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), vec3(1.0))), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) + vec3(0.0, 0.0, 0.0)))), mat2x4(1.0), 1, ivec4(1)), vec3(1.0)), ivec3(1), 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), (_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), (_injected_loop_counter > (1 ^ 1)) && true)) || false), false, false)), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), (_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), (_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, clamp(1, 1, 1)))) && true)) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), (_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), _GLF_IDENTITY((_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, 1 * (1)))) && true, false || ((_injected_loop_counter > (1 ^ 1)) && true)))) || false), false, false), false)))), true, false))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec2(true && (false), false))))))
    {
    }
   else
    {
     GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.z = workgroup_size;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.z * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      break;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_base = subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (workgroup_base + subgroup_base + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x) | 0u), max(workgroup_base + subgroup_base + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, workgroup_base + subgroup_base + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) << 0u), uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)) | (uvec4(workgroup_base, 0u, 0u, 0u)))) | uvec4(0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)))))) + subgroup_base + ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) - 0)) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.x = next_virtual_gid;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
  }
 else
  {
  }
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-66342)))); _injected_loop_counter --)
  {
   GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.y = read;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec2(0, 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))))
          {
          }
         else
          {
           do
            {
             atomicStore(buf[GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.x], uint(1), 4, 64, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, clamp(4, 4, 4)))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-66113) : 0)), _GLF_IDENTITY(0, (0) | 0))), 0), (ivec3(_GLF_IDENTITY(1, 0 | (1)), 0, 0)) / ivec3(1, 1, 1))))))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     break;
    }
   do
    {
     if((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2, (true ? _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, 0u | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, 1u * (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x)))) % 2 : _GLF_FUZZED(GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.x)))) / 1u), (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2) << 0u)) == 0)
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bool(_injected_loop_counter < 1), bool(bool(bool(_injected_loop_counter < 1))))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)), (true ? mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)) : _GLF_FUZZED(mat3x2(-4053.2393, -77.67, 48.74, 1.4, -7229.8444, -6254.9009))))), max(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(_GLF_IDENTITY(0.0, 1.0 * (0.0)))), (true ? mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)) : _GLF_FUZZED(mat3x2(-4053.2393, -77.67, 48.74, 1.4, -7229.8444, -6254.9009))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)), (true ? mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)) : _GLF_FUZZED(mat3x2(-4053.2393, -77.67, _GLF_IDENTITY(48.74, (48.74) / abs(1.0)), 1.4, -7229.8444, -6254.9009))))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)), (true ? mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)) : _GLF_FUZZED(mat3x2(-4053.2393, -77.67, 48.74, 1.4, -7229.8444, -6254.9009))))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)), (true ? mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)) : _GLF_FUZZED(mat3x2(-4053.2393, -77.67, 48.74, 1.4, -7229.8444, -6254.9009))))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)), (true ? mat3x2(injectionSwitch, exp(0.0), abs(0.0), 0.0, exp(0.0)) : _GLF_FUZZED(mat3x2(-4053.2393, -77.67, 48.74, 1.4, -7229.8444, -6254.9009)))))))))).y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4))))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-720 & 0)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-2.1) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, false))), bool(bvec4(! (bool(bvec3(true, false, false))), false, true, true)))))), (injectionSwitch.x < injectionSwitch.y)))) && true)) && true)))))), false, false, _GLF_IDENTITY(true, ! (! (true))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-49.87)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0), mat3x2(mat3x2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))))).y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, log(1.0), 0.0, 1.0, 0.0, tan(0.0), 0.0, 0.0))) + 0.0)), bool(true))))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-49.87)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0), mat3x2(mat3x2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))))).y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(245.986))), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), float(vec3(float(vec2(1.0, 1.0)), 0.0, 1.0)))))), 0.0, tan(0.0), 0.0, 0.0))) + 0.0)), bool(true))))))), ! (! ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-49.87)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0), mat3x2(mat3x2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0)))))).y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, log(1.0), 0.0, 1.0, 0.0, tan(0.0), 0.0, 0.0))) + 0.0)), bool(true)))))))))), true, true)))), false, false, _GLF_IDENTITY(true, ! (! (true)))))), (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, _GLF_IDENTITY(true, ! (! (true))))))) || false)))) && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))))))))), bool(bvec4((false), true, false, _GLF_IDENTITY(false, ! (! (false)))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                    }
                   else
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) - 0) - 0)), (int(_GLF_IDENTITY(2, (2) - 0))) | 0), int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0))))) | (0)))), _GLF_IDENTITY((int(ivec3(2, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1), 0))) | (int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))), ((int(ivec3(2, int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.8)), bool(false))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + log(1.0)), 1.0, 0.0, 1.0, 1.0))), 0.0)), injectionSwitch.x)), 0))) | (int(ivec3(2, int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0))], injectionSwitch[1])).x)), 0)))) - 0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))), int(int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))))), 1 * (2)), 2))), int(2)), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))), int(int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))))), 1 * (2)), 2))), int(2))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
                continue;
               break;
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.y = atomicLoad(buf[virtual_gid], 4, 64, 2);
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (true)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     else
      {
       GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.y = atomicLoad(buf[virtual_gid], 4, 64, 2);
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))), true, false))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false))))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), clamp(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) / 1)))), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / 1), 4))), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) ^ 0) >> (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) - (-6918 & 0))) - 0) : _GLF_FUZZED(-59616))))) << _GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? int(4) : _GLF_FUZZED(-59616))))) << _GLF_IDENTITY(int(5), int(5)), 0 | (((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? int(4) : _GLF_FUZZED(-59616))))) << _GLF_IDENTITY(int(5), int(5))))))))); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        continue;
                                       break;
                                      }
                                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         return;
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          return;
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                          continue;
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), max(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), clamp(dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0)))))), dot(vec2(0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(6.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.1)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), vec2(0.0, 1.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-560.381) : 0.0)), 1.0, 0.0, 0.0))) > injectionSwitch.y))))
                                        break;
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           break;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), false || (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((! (false)) || false, false), bvec2(bvec2(bvec2((! (false)) || false, false))))), false || (bool(_GLF_IDENTITY(bvec2((! (false)) || false, false), bvec2(bvec2(bvec2((! (false)) || false, false)))))))))))))))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, int(ivec2(1, 0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             continue;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     subgroupBarrier();
    }
  }
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.y, (GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size.y) ^ 0u), 4, 64, _GLF_IDENTITY(4, 0 ^ (4)));
}
