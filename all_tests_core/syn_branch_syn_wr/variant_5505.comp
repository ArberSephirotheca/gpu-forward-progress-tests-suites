#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (! ((! (! (_GLF_IDENTITY(false, ! (! (false))))))))), false, false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (! ((! (! (_GLF_IDENTITY(false, ! (! (false))))))))), false, false, true)), false), bvec2(bvec4(bvec2(bool(bvec4(_GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (! ((! (! (_GLF_IDENTITY(false, ! (! (false))))))))), false, false, true)), false), false, false)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))).y)), false, false, false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))))))))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))))))))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))), (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false))))))) || false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))))))))))))))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))), (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false))))))) || false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))))))))))))))))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false), false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)))))), (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false)), ! (! (bool(bvec2((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), false))))))) || false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false))), bool(bool((bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false)))))))))))))))))))))), true, false)))), true))), true))))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-15.22) : injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-841.406), clamp(_GLF_FUZZED(-841.406), _GLF_FUZZED(-841.406), _GLF_FUZZED(-841.406)))), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || _GLF_IDENTITY(false, ! (! (false)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.8))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-841.406), clamp(_GLF_FUZZED(-841.406), _GLF_FUZZED(-841.406), _GLF_FUZZED(-841.406)))), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), (injectionSwitch)[1]), bvec2(false, true)))) + vec2(0.0, 0.0)).y))) || false), true)))), bool(bvec2(_GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3((injectionSwitch) * mat2(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), clamp(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0))), clamp(0.0, 0.0, 0.0))))) + 0.0), 1.0)))))))[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), (injectionSwitch)[1]), bvec2(false, true)))) + vec2(0.0, 0.0)).y))) || false), true)))), bool(bvec4((! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-0.9, -68.46)) : injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 0.0, 1.0, 0.0, 0.0, 1.0)))))), bvec2(false, true))), mix(vec2(_GLF_FUZZED(vec3(-67.88, 6126.9746, 291.361).x), _GLF_FUZZED(77.29)), vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 0.0, 1.0, 0.0, 0.0, 1.0)))))), bvec2(false, true))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 0.0, 1.0, 0.0, 0.0, 1.0)))))), bvec2(false, true))))[1], clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 0.0, 1.0, 0.0, 0.0, 1.0)))))), bvec2(false, true))))[1], (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 0.0, 1.0, 0.0, 0.0, 1.0)))))), bvec2(false, true))))[1], (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8142.6398)), vec2(_GLF_FUZZED(60.46), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - tan(0.0)), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], 0.0, 1.0, 0.0, 0.0, 1.0)))))), bvec2(false, true))))[1]))), bvec2(true, true)))) + vec2(0.0, 0.0)).y))) || false), true)))), true, true, true))), false)))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))), false))))))
        return;
      }
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) && true)), (! (_GLF_IDENTITY((false), ((false)) && true))) || false)) || false)))))))), (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) && true)), (! (_GLF_IDENTITY((false), ((false)) && true))) || false)) || false)))))))), (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true)))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-0.5)), bool(false))) > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! _GLF_IDENTITY((! ((false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! ((false))), false || ((! ((false)))))), true && (! (_GLF_IDENTITY((! ((false))), false || ((! ((false)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))), false || (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), _GLF_IDENTITY(true, (true) && true), false, false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec3(-3.7, 860.124, -2.1).xy))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0))) > injectionSwitch.y) && true))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))) << _GLF_IDENTITY(_GLF_IDENTITY(uvec3(3u), uvec3(3u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(3u, (3u) / 1u)), uvec3(3u))) - uvec3(0u, 0u, 0u))) + (gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true))))))), (injectionSwitch.x > injectionSwitch.y))), true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, sqrt(1.0))), 0.0 + (float(vec2(injectionSwitch.x, sqrt(1.0)))))), injectionSwitch.x))))), float(_GLF_FUZZED(-306.950)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), true))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) ^ 0u)) / 1u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u))) + ((subgroup_local_id + _GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_IDENTITY(_GLF_FUZZED(25346), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2383) : _GLF_FUZZED(25346))) : clamp(1, 1, 1))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, 1, 1)))) ^ 0), max(~ (1), ~ _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), min((1), (1)))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(25346, ~ (~ (25346)))) : clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, 1, 1)))) ^ 0), max(~ (1), ~ (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(25346) : clamp(1, 1, 1))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)), ~ (~ (1))), clamp(1, 1, 1)))) ^ 0), max(~ (1), ~ (_GLF_IDENTITY(1, ~ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(25346) : clamp(1, 1, 1))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, 1, 1)))) ^ 0, (_GLF_IDENTITY(false ? _GLF_FUZZED(findLSB(workgroup_size)) : (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, 1, 1)))) ^ 0, (false ? _GLF_FUZZED(findLSB(workgroup_size)) : (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, 1, 1)))) ^ 0) | 0)))), max(~ (1), ~ (1)))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  return;
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(1.0))), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(1.0))), 0.0, 0.0))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0), transpose(transpose(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(1.0))), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(round(length(normalize(1.0))), 0.0, 0.0))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0)))))).y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0), (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0)))) - tan(0.0))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0), (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0)))) - tan(0.0))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0), (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0))), injectionSwitch.y))) * 1.0)))) - tan(0.0)))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   int i = 0;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true))), bool(bvec3(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true)), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))) || false), true))))), bool(bool((_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), false)))))
    return;
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(0u ^ (read), max(0u ^ (read), _GLF_IDENTITY(0u ^ (read), (0u ^ (read)) * 1u)))), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))), false))), false, true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))))))) || false)))) && true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)))) && true))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false)))) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false)))) && true)))))), true)))) && true))
        return;
       return;
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) >> _GLF_IDENTITY(0, (0) >> 0)));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, (false) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true && (! (_GLF_IDENTITY((false) && true, bool(bvec3(_GLF_IDENTITY((false) && true, ((false) && true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))), true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
}
