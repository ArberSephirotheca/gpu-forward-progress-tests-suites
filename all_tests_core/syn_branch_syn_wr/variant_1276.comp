#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9.1) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) + 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id * subgroup_size))) ^ 0u), 0u ^ (subgroup_id * subgroup_size)), (subgroup_id * subgroup_size) >> 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), workgroup_base + subgroup_base)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((subgroup_base), (true ? (subgroup_base) : _GLF_FUZZED(workgroup_base))))), (uint(uint(_GLF_IDENTITY((subgroup_base), (true ? (subgroup_base) : _GLF_FUZZED(workgroup_base)))))) - 0u)) * 1u)))) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), clamp(((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), ((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size))), (_GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) * 1))), max(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))))) + 1, (subgroup_local_id + 1) | 0u)))) % subgroup_size), min(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY((uint(7u)) - 0u, 0u | (_GLF_IDENTITY((uint(7u)), ((uint(7u))) / 1u) - _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), (uint(7u)) | 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), 1u * (uint(4u)))))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), clamp(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> 0u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(uint(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)), (_GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY((uint(7u)) - 0u, 0u | (_GLF_IDENTITY((uint(7u)), ((uint(7u))) / 1u) - _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), (uint(7u)) | 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), 1u * (uint(4u)))))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), clamp(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> 0u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(uint(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)), ((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY((uint(7u)) - 0u, 0u | (_GLF_IDENTITY((uint(7u)), ((uint(7u))) / 1u) - _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), (uint(7u)) | 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), 1u * (uint(4u)))))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), clamp(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> 0u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(uint(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY((uint(7u)) - 0u, 0u | (_GLF_IDENTITY((uint(7u)), ((uint(7u))) / 1u) - _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), (uint(7u)) | 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), 1u * (uint(4u)))))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), clamp(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> 0u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(uint(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)), ((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY((uint(7u)) - 0u, 0u | (_GLF_IDENTITY((uint(7u)), ((uint(7u))) / 1u) - _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), (uint(7u)) | 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), 1u * (uint(4u)))))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), clamp(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> 0u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(uint(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) | ((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))))))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY((uint(7u)) - 0u, 0u | (_GLF_IDENTITY((uint(7u)), ((uint(7u))) / 1u) - _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_base)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), (uint(7u)) | 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), 1u * (uint(4u)))))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), clamp(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec3(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))) - 0u), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))) >> 0u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(uint(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ 0u))))))))) * (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))))))) ^ 0u))), workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u)))) % subgroup_size)))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), 0u ^ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (~ ((subgroup_local_id + 1))) | (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (~ ((subgroup_local_id + 1))) - 0u))), clamp(_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((subgroup_local_id + 1)), ~ ((subgroup_local_id + 1)))), ~ ((subgroup_local_id + 1)), ~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 : _GLF_FUZZED(num_workgroup))))))) : _GLF_FUZZED(workgroup_id))))))), (_GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), 0u ^ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (true ? _GLF_IDENTITY(~ ((subgroup_local_id + 1)), clamp(_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((subgroup_local_id + 1)), ~ ((subgroup_local_id + 1)))), ~ ((subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup))))), uint(uint(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(num_workgroup)))))))))) : _GLF_FUZZED(workgroup_id)))))))) ^ (0u | 0u)) % subgroup_size), (workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)) << 0u)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-493.123) : injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-493.123) : injectionSwitch.y)))) || false))));
  }
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(70787))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) : _GLF_FUZZED(_injected_loop_counter))) > 0); _injected_loop_counter --)
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ((_GLF_DEAD(false))) || false)))) || false)), false || ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(((_GLF_DEAD(false))) || false, ! (! (((_GLF_DEAD(false))) || false))))))) || false))))), (_GLF_DEAD(false)) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     do
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false, false))))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false, false))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(asinh(-927.181))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0))), clamp(float(_GLF_IDENTITY(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0)), (_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0))) / mat2(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0))), float(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0)))))) + 0.0), injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(asinh(-927.181))))))), true, true), bvec3(bvec3(bvec3(false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0))), clamp(float(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0))), float(_GLF_IDENTITY(mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0))), float(_GLF_IDENTITY(mat2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), clamp(vec2(mat4(injectionSwitch, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), vec2(mat4(injectionSwitch, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), min(vec2(mat4(injectionSwitch, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), vec2(mat4(injectionSwitch, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))))))).y), sqrt(1.0), 0.0, 1.0), (mat2((injectionSwitch.y), sqrt(1.0), 0.0, 1.0)) * mat2(1.0)))))) + 0.0), injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(asinh(-927.181))))))), true, true)))), bvec3(bvec4(bvec3(false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), cos(0.0), 1.0)), vec2(mat4x2(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), cos(0.0), 1.0)), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 0.0)))).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, true && (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y) && true))))) ? injectionSwitch.y : _GLF_FUZZED(asinh(-927.181))))))), true, true), true)))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))) / _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), float(vec3(_GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4950.5129)), float(1.0), bool(true))), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0)))), injectionSwitch.x)), mix(float(_GLF_FUZZED(-304.961)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), injectionSwitch.x)), mix(float(_GLF_FUZZED(5.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), injectionSwitch.x), float(mat2x4(min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0)))), injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, cos(sqrt(0.0)), 0.0, exp(0.0)))))), bool(true)))), bool(true))) > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
            }
           else
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), bool(bvec2(true, true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(int(0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 62558)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) + 0) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, injectionSwitch.x))), float(_GLF_FUZZED(15.87)), bool(false))))) > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) - log(1.0)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0))), (mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0))), (mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, cos(0.0), 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, cos(0.0), 0.0), vec3(0.0, 1.0, 0.0))) * (injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0))), (mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0))), (mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(44.40) : injectionSwitch.x)))), injectionSwitch.x)), 1.0, 0.0, 1.0, _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 1.0))), (mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.0)), bool(false))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) * 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0, 0.0), (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0))), (mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, sqrt(0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) > injectionSwitch.y))) && true), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, exp(0.0), 1.0), mat3(1.0) * (vec3(injectionSwitch.y, exp(0.0), 1.0)))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(64.95) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-321.001)), float(injectionSwitch.y), bool(true)))))), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))), true))))))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), ! (! (bool(bool(bool(false)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), ! (! (bool(bool(bool(false)))))))), bool(bool(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), ! (! (bool(bool(bool(false)))))))))))) && true))), ! (! (! (false))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(139.134) : injectionSwitch[1])))).x, (false ? _GLF_FUZZED(1.9) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(false ? _GLF_FUZZED(139.134) : injectionSwitch[1], min(false ? _GLF_FUZZED(139.134) : injectionSwitch[1], false ? _GLF_FUZZED(139.134) : injectionSwitch[1])))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(139.134) : injectionSwitch[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)))))])))).x) * 1.0))))) ^ 1), clamp((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if((subgroup_local_id % 2) == 0)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, false))))));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (~ -41210))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, 0)))), clamp(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) - 0), _GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                    {
                                     for(int _injected_loop_counter = (-23123 & (27509 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       do
                                        {
                                         do
                                          {
                                           for(int _injected_loop_counter = ((1 ^ 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                                    barrier();
                                                   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                          }
                                        }
                                       do
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false, false, false)))))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                              {
                                               if(_GLF_DEAD(false))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                  {
                                                   barrier();
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                            }
                                           else
                                            {
                                             barrier();
                                            }
                                          }
                                        }
                                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
              barrier();
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false)))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false)))))), true)))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupBarrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))), true)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true))), true))), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, true))), false, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, true))), false, false)))), bool(bool(bool(bool(bool(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, true))), false, false))))))))))), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))), true))))) || false), true, false)))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(366.279)), bool(false))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! (bool(bvec3(false, true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(false, true, true))), _GLF_IDENTITY(((bool(bvec3(false, true, true)))) && true, bool(bool(((bool(bvec3(false, true, true)))) && true)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true), false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true), false)), false, false)), bool(bvec4(bool(bvec3(bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), true, true)))) && true), false)), false, false)), true, false, true))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec3(false, true, true))), bool(bvec2((bool(bvec3(false, true, true))), false))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY((bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(bvec2((bool(bvec3(false, true, true))), false)), true && (_GLF_IDENTITY(bool(bvec2((bool(bvec3(false, true, true))), false)), false || (bool(bvec2((bool(bvec3(false, true, true))), false))))))), false, false)), false, false, true)))), ((bool(bvec3(false, true, true)))) && true)))) && true, ! (! ((_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true)))) && true))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! (bool(bvec3(false, true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(false, true, true))), _GLF_IDENTITY(((bool(bvec3(false, true, true)))) && true, bool(bool(((bool(bvec3(false, true, true)))) && true)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true), false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true), false)), false, false)), bool(bvec4(bool(bvec3(bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true), false)), false, false)), true, false, true))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(false, true, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((bool(bvec3(false, true, true))), bool(bvec2((bool(bvec3(false, true, true))), false))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY((bool(bvec3(false, true, true))), bool(bvec2(_GLF_IDENTITY((bool(bvec3(false, true, true))), ! (_GLF_IDENTITY(! ((bool(bvec3(false, true, true)))), (! ((bool(bvec3(false, true, true))))) && true))), false))), false, false)), false, false, true)))), ((bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))))) && true)))) && true, ! (! ((_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! _GLF_IDENTITY((bool(bvec3(false, true, true))), ((bool(bvec3(false, true, true)))) && true)))) && true))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (25781 & 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), clamp(int(int(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), int(int(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), int(int(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, _GLF_IDENTITY((4), 1 * ((4))) / 1), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (true ? ~ _GLF_IDENTITY((4), max((4), (4))) : _GLF_FUZZED(-91937))))))), 64, 4);
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         do
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-995.692))) > injectionSwitch.y))));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))) || false)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6595.9695))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).x, (true ? injectionSwitch.x : _GLF_FUZZED(6595.9695))) > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(6595.9695)), clamp((true ? injectionSwitch.x : _GLF_FUZZED(6595.9695)), (true ? injectionSwitch.x : _GLF_FUZZED(6595.9695)), (true ? injectionSwitch.x : _GLF_FUZZED(6595.9695))))) > injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6595.9695))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6595.9695))) > injectionSwitch.y))))))))) || false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), 0 + (int(3))), 0)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), 0 + (int(3))), 0))))))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) || false)), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)), true, false))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)) || false)), true))), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), false)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(35575))), vec2(_GLF_FUZZED(-969.677), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(35575))), vec2(_GLF_FUZZED(-969.677), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], 1.0 * (_GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(4899.6149)), float((injectionSwitch)[1]), bool(true))))), max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x > injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) > injectionSwitch.y)) || false)), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ((injectionSwitch.x > injectionSwitch.y)) || false)))), false))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))) && true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))).x > injectionSwitch.y))) || false)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
  }
}
