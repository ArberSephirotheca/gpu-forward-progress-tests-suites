#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_78 {
 mat3 _f0;
 mat4x3 _f1;
 int _injected_loop_counter;
 uvec2 _f2;
} ;

struct _GLF_struct_79 {
 mat3x4 _f0;
 _GLF_struct_78 _f1;
} ;

struct _GLF_struct_76 {
 mat4x2 _f0;
} ;

struct _GLF_struct_77 {
 mat2x4 _f0;
 _GLF_struct_76 _f1;
} ;

struct _GLF_struct_80 {
 _GLF_struct_77 _f0;
 _GLF_struct_79 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_75 {
 bvec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_72 {
 vec3 _f0;
 float _f1;
 mat4x2 _f2;
 uvec3 _f3;
 mat2x4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_71 {
 mat2x3 _f0;
 mat3x4 _f1;
 vec4 _f2;
 uvec2 _f3;
 uint _f4;
 vec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_70 {
 bvec3 _f0;
 mat3 _f1;
 mat2x4 _f2;
 mat4x3 _f3;
 mat4 _f4;
 vec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_73 {
 bvec2 _f0;
 _GLF_struct_70 _f1;
 uint _f2;
 _GLF_struct_71 _f3;
 _GLF_struct_72 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_68 {
 bvec4 _f0;
 uvec2 _f1;
 mat2x4 _f2;
 uvec2 _f3;
 mat4 _f4;
 mat4x3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_69 {
 _GLF_struct_68 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_67 {
 bvec2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_74 {
 _GLF_struct_67 _f0;
 vec3 _f1;
 mat4x3 _f2;
 float _f3;
 ivec3 _f4;
 int _injected_loop_counter;
 _GLF_struct_69 _f5;
 _GLF_struct_73 _f6;
} ;

struct _GLF_struct_66 {
 uvec4 _f0;
 uvec3 _f1;
 uint subgroup_base;
} ;

struct _GLF_struct_64 {
 vec4 _f0;
} ;

struct _GLF_struct_62 {
 uvec3 _f0;
 uvec4 _f1;
 uvec4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_61 {
 bvec3 _f0;
} ;

struct _GLF_struct_60 {
 mat2x4 _f0;
 float _f1;
} ;

struct _GLF_struct_63 {
 vec4 _f0;
 _GLF_struct_60 _f1;
 _GLF_struct_61 _f2;
 _GLF_struct_62 _f3;
} ;

struct _GLF_struct_58 {
 ivec4 _f0;
 ivec2 _f1;
 bool _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_57 {
 mat3x4 _f0;
 bool _f1;
 vec4 _f2;
 bool _f3;
} ;

struct _GLF_struct_59 {
 _GLF_struct_57 _f0;
 _GLF_struct_58 _f1;
 bool _f2;
} ;

struct _GLF_struct_55 {
 int _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_54 {
 uvec3 _f0;
 uvec2 _f1;
 uint _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_56 {
 _GLF_struct_54 _f0;
 uvec4 _f1;
 _GLF_struct_55 _f2;
 vec4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_65 {
 _GLF_struct_56 _f0;
 _GLF_struct_59 _f1;
 mat2 _f2;
 _GLF_struct_63 _f3;
 bvec4 _f4;
 _GLF_struct_64 _f5;
 mat2 _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_51 {
 mat2x3 _f0;
 float _f1;
 ivec3 _f2;
 mat2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_52 {
 _GLF_struct_51 _f0;
} ;

struct _GLF_struct_49 {
 uvec2 _f0;
 bvec3 _f1;
 mat3x2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_48 {
 mat2x4 _f0;
 uvec4 _f1;
 mat3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_47 {
 vec4 _f0;
} ;

struct _GLF_struct_50 {
 mat4x3 _f0;
 _GLF_struct_47 _f1;
 mat2 _f2;
 _GLF_struct_48 _f3;
 _GLF_struct_49 _f4;
 bvec4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_46 {
 uint _f0;
} ;

struct _GLF_struct_53 {
 mat3x2 _f0;
 uint virtual_gid;
 _GLF_struct_46 _f1;
 ivec4 _f2;
 vec4 _f3;
 _GLF_struct_50 _f4;
 _GLF_struct_52 _f5;
} ;

struct _GLF_struct_45 {
 int _injected_loop_counter;
 mat2x3 _f0;
} ;

struct _GLF_struct_42 {
 mat3x4 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 ivec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_41 {
 ivec4 _f0;
 ivec4 _f1;
 uvec4 _f2;
 mat2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_43 {
 _GLF_struct_41 _f0;
 uvec3 _f1;
 ivec4 _f2;
 _GLF_struct_42 _f3;
} ;

struct _GLF_struct_39 {
 bvec3 _f0;
 ivec4 _f1;
 vec3 _f2;
 uvec2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_38 {
 uvec2 _f0;
 ivec2 _f1;
 bvec3 _f2;
 uint _f3;
 bvec4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_40 {
 mat4 _f0;
 uvec3 _f1;
 _GLF_struct_38 _f2;
 _GLF_struct_39 _f3;
} ;

struct _GLF_struct_36 {
 bool _f0;
 uvec4 _f1;
 vec3 _f2;
 ivec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_35 {
 mat3x4 _f0;
 int _f1;
 uvec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_34 {
 bvec2 _f0;
 bool _f1;
 mat2 _f2;
 bvec3 _f3;
 float _f4;
 int _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_33 {
 int _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_32 {
 mat4x2 _f0;
 mat4x3 _f1;
 bvec3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_37 {
 _GLF_struct_32 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_34 _f2;
 int _injected_loop_counter;
 _GLF_struct_35 _f3;
 _GLF_struct_36 _f4;
} ;

struct _GLF_struct_30 {
 bool _f0;
 bvec3 _f1;
 mat2x3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_31 {
 _GLF_struct_30 _f0;
} ;

struct _GLF_struct_44 {
 _GLF_struct_31 _f0;
 vec4 _f1;
 _GLF_struct_37 _f2;
 _GLF_struct_40 _f3;
 _GLF_struct_43 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_27 {
 vec4 _f0;
 uint workgroup_id;
 mat4x3 _f1;
 uint _f2;
 uvec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_28 {
 mat2x4 _f0;
 _GLF_struct_27 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_29 {
 _GLF_struct_28 _f0;
 mat4x3 _f1;
 int _f2;
} ;

struct _GLF_struct_24 {
 mat2x3 _f0;
 bvec2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_25 {
 _GLF_struct_24 _f0;
} ;

struct _GLF_struct_22 {
 bool _f0;
} ;

struct _GLF_struct_21 {
 ivec2 _f0;
 bvec2 _f1;
 float _f2;
 mat3x4 _f3;
 bvec3 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_20 {
 vec2 _f0;
 ivec4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_23 {
 mat2 _f0;
 vec3 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_21 _f3;
 _GLF_struct_22 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_18 {
 vec4 _f0;
 mat2 _f1;
 bvec4 _f2;
 bvec2 _f3;
 vec2 _f4;
 float _f5;
 uint _f6;
} ;

struct _GLF_struct_17 {
 mat2x4 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 mat3x2 _f3;
 bvec4 _f4;
 float _f5;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 mat3x2 _f1;
 int _f2;
 uvec3 _f3;
 mat2 _f4;
 bvec4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 vec2 _f1;
 mat4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_26 {
 mat2x4 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_23 _f3;
 mat2x4 _f4;
 int _injected_loop_counter;
 _GLF_struct_25 _f5;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 vec4 _f1;
 uint _f2;
 uvec4 _f3;
 uvec2 _f4;
 vec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 int _f1;
 float _f2;
 mat3x4 _f3;
 uvec4 _f4;
 int _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 ivec4 _f1;
 mat3 _f2;
 bool _f3;
} ;

struct _GLF_struct_4 {
 int _f0;
 mat2x3 _f1;
 uvec2 _f2;
 mat4 _f3;
 mat4x3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 _GLF_struct_4 _f1;
 mat3x2 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_12 {
 uint workgroup_size;
 _GLF_struct_6 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_11 _f3;
 uvec4 _f4;
 uvec2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_1 {
 uint num_workgroup;
 mat2 _f0;
 vec2 _f1;
 ivec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 mat4 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 bvec3 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_0 {
 float _f0;
 mat3x4 _f1;
 mat4 _f2;
 uint workgroup_base;
 ivec3 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 for(_GLF_struct_44 _GLF_struct_replacement_44 = _GLF_struct_44(_GLF_struct_31(_GLF_struct_30(true, bvec3(true), mat2x3(1.0), mat4x2(1.0))), vec4(1.0), _GLF_struct_37(_GLF_struct_32(mat4x2(1.0), mat4x3(1.0), bvec3(true), mat4(1.0)), _GLF_struct_33(1, uvec2(1u)), _GLF_struct_34(bvec2(true), true, mat2(1.0), bvec3(true), 1.0, 1, bvec3(true)), 0, _GLF_struct_35(mat3x4(1.0), 1, uvec2(1u), uvec2(1u)), _GLF_struct_36(true, uvec4(1u), vec3(1.0), ivec2(1), mat3x4(1.0))), _GLF_struct_40(mat4(1.0), uvec3(1u), _GLF_struct_38(uvec2(1u), ivec2(1), bvec3(true), 1u, bvec4(true), mat4x3(1.0)), _GLF_struct_39(bvec3(true), ivec4(1), vec3(1.0), uvec2(1u), mat3x2(1.0))), _GLF_struct_43(_GLF_struct_41(ivec4(1), ivec4(1), uvec4(1u), mat2(1.0), mat2x3(1.0)), uvec3(1u), ivec4(1), _GLF_struct_42(mat3x4(1.0), ivec2(1), mat4x2(1.0), ivec2(1), bvec3(true))), mat4x2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_44._f2._injected_loop_counter != 1); _GLF_struct_replacement_44._f2._injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-28523 & 0) ^ (1 ^ 1))); _injected_loop_counter --)
        {
         barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(bvec2(true), bvec3(true), _GLF_struct_2(mat4x3(1.0), mat4(1.0), _GLF_struct_1(gl_NumWorkGroups.x, mat2(1.0), vec2(1.0), ivec3(1), uvec4(1u))));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_WorkGroupSize.x, _GLF_struct_6(uvec3(1u), _GLF_struct_4(1, mat2x3(1.0), uvec2(1u), mat4(1.0), mat4x3(1.0), mat2(1.0)), mat3x2(1.0), _GLF_struct_5(mat4x3(1.0), ivec4(1), mat3(1.0), true)), _GLF_struct_8(_GLF_struct_7(vec4(1.0), 1, 1.0, mat3x4(1.0), uvec4(1u), 1, ivec2(1))), _GLF_struct_9(mat4x3(1.0)), _GLF_struct_11(_GLF_struct_10(vec2(1.0), vec4(1.0), 1u, uvec4(1u), uvec2(1u), vec3(1.0), bvec4(true))), uvec4(1u), uvec2(1u), mat2x3(1.0));
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_28(mat2x4(1.0), _GLF_struct_27(vec4(1.0), gl_WorkGroupID.x, mat4x3(1.0), 1u, uvec2(1u), ivec3(1)), vec4(1.0)), mat4x3(1.0), 1);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(1.0, mat3x4(1.0), mat4(1.0), _GLF_struct_replacement_12.workgroup_size * _GLF_struct_replacement_29._f0._f1.workgroup_id, ivec3(1));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 | 0) ^ (0 << _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(_GLF_struct_45 _GLF_struct_replacement_45 = _GLF_struct_45((0 & 38963), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._injected_loop_counter < (1 | 0)); _GLF_struct_replacement_45._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
            }
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 _GLF_struct_66 _GLF_struct_replacement_66 = _GLF_struct_66(uvec4(1u), uvec3(1u), subgroup_id * subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   barrier();
  }
 _GLF_struct_53 _GLF_struct_replacement_53 = _GLF_struct_53(mat3x2(1.0), _GLF_struct_replacement_0.workgroup_base + _GLF_struct_replacement_66.subgroup_base + subgroup_local_id, _GLF_struct_46(1u), ivec4(1), vec4(1.0), _GLF_struct_50(mat4x3(1.0), _GLF_struct_47(vec4(1.0)), mat2(1.0), _GLF_struct_48(mat2x4(1.0), uvec4(1u), mat3(1.0), uvec2(1u)), _GLF_struct_49(uvec2(1u), bvec3(true), mat3x2(1.0), bvec3(true)), bvec4(true), mat3x4(1.0)), _GLF_struct_52(_GLF_struct_51(mat2x3(1.0), 1.0, ivec3(1), mat2(1.0), mat2x4(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_0.workgroup_base + _GLF_struct_replacement_66.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = 0;
 do
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(_GLF_struct_74 _GLF_struct_replacement_74 = _GLF_struct_74(_GLF_struct_67(bvec2(true), ivec4(1)), vec3(1.0), mat4x3(1.0), 1.0, ivec3(1), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_struct_69(_GLF_struct_68(bvec4(true), uvec2(1u), mat2x4(1.0), uvec2(1u), mat4(1.0), mat4x3(1.0), mat3x2(1.0)), mat4x2(1.0)), _GLF_struct_73(bvec2(true), _GLF_struct_70(bvec3(true), mat3(1.0), mat2x4(1.0), mat4x3(1.0), mat4(1.0), vec3(1.0), uvec3(1u)), 1u, _GLF_struct_71(mat2x3(1.0), mat3x4(1.0), vec4(1.0), uvec2(1u), 1u, vec3(1.0), mat3x2(1.0)), _GLF_struct_72(vec3(1.0), 1.0, mat4x2(1.0), uvec3(1u), mat2x4(1.0), ivec4(1)), mat3x2(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_74._injected_loop_counter != (1 ^ 1)); _GLF_struct_replacement_74._injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if((subgroup_local_id % 2) == 0)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             read = atomicLoad(buf[_GLF_struct_replacement_53.virtual_gid], 4, 64, 2);
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
         else
          {
           do
            {
             read = atomicLoad(buf[_GLF_struct_replacement_53.virtual_gid], 4, 64, 2);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(_GLF_struct_65 _GLF_struct_replacement_65 = _GLF_struct_65(_GLF_struct_56(_GLF_struct_54(uvec3(1u), uvec2(1u), 1u, bvec3(true)), uvec4(1u), _GLF_struct_55(1, ivec3(1)), vec4(1.0), bvec4(true)), _GLF_struct_59(_GLF_struct_57(mat3x4(1.0), true, vec4(1.0), true), _GLF_struct_58(ivec4(1), ivec2(1), true, ivec3(1)), true), mat2(1.0), _GLF_struct_63(vec4(1.0), _GLF_struct_60(mat2x4(1.0), 1.0), _GLF_struct_61(bvec3(true)), _GLF_struct_62(uvec3(1u), uvec4(1u), uvec4(1u), ivec3(1))), bvec4(true), _GLF_struct_64(vec4(1.0)), mat2(1.0), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_65._injected_loop_counter != 0); _GLF_struct_replacement_65._injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(_GLF_struct_75 _GLF_struct_replacement_75 = _GLF_struct_75(bvec4(true), (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 + (int(1)))))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_75._injected_loop_counter != 1); _GLF_struct_replacement_75._injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         break;
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 for(_GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(mat2x4(1.0), _GLF_struct_15(_GLF_struct_13(mat4x3(1.0), vec2(1.0), mat4(1.0), vec3(1.0)), _GLF_struct_14(bvec4(true), mat3x2(1.0), 1, uvec3(1u), mat2(1.0), bvec4(true), mat2x3(1.0))), _GLF_struct_19(_GLF_struct_16(ivec3(1), bvec4(true), mat2x4(1.0), mat3x2(1.0), bvec4(true), 1.0), _GLF_struct_17(mat2x4(1.0), mat4x2(1.0), bvec2(true), mat2(1.0)), _GLF_struct_18(vec4(1.0), mat2(1.0), bvec4(true), bvec2(true), vec2(1.0), 1.0, 1u)), _GLF_struct_23(mat2(1.0), vec3(1.0), _GLF_struct_20(vec2(1.0), ivec4(1), ivec4(1)), _GLF_struct_21(ivec2(1), bvec2(true), 1.0, mat3x4(1.0), bvec3(true), mat3x4(1.0), mat3x2(1.0)), _GLF_struct_22(true), mat2(1.0)), mat2x4(1.0), 0, _GLF_struct_25(_GLF_struct_24(mat2x3(1.0), bvec2(true), ivec3(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_26._injected_loop_counter < 1); _GLF_struct_replacement_26._injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(checker[_GLF_struct_replacement_53.virtual_gid], read, 4, 64, 4);
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 & ivec4(-18906, 37033, -59000, -30819).s); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   for(_GLF_struct_80 _GLF_struct_replacement_80 = _GLF_struct_80(_GLF_struct_77(mat2x4(1.0), _GLF_struct_76(mat4x2(1.0))), _GLF_struct_79(mat3x4(1.0), _GLF_struct_78(mat3(1.0), mat4x3(1.0), 1, uvec2(1u))), bvec2(true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_80._f1._f1._injected_loop_counter > 0); _GLF_struct_replacement_80._f1._f1._injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
