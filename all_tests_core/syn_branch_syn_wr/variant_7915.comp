#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_30 {
 vec4 _f0;
 mat2 _f1;
 bool _f2;
 uint _f3;
} ;

struct _GLF_struct_31 {
 vec3 _f0;
 _GLF_struct_30 _f1;
 mat3x4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_28 {
 mat3x2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_27 {
 mat2x4 _f0;
 bvec4 _f1;
 bool _f2;
 int _f3;
 uvec3 _f4;
 mat3x2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_26 {
 ivec2 _f0;
 mat4 _f1;
 ivec4 _f2;
 uint _f3;
 mat2x4 _f4;
 int _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_25 {
 mat2x4 _f0;
 float _f1;
} ;

struct _GLF_struct_29 {
 _GLF_struct_25 _f0;
 vec2 _f1;
 _GLF_struct_26 _f2;
 _GLF_struct_27 _f3;
 _GLF_struct_28 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_23 {
 mat4x3 _f0;
 bool _f1;
 uvec2 _f2;
 vec2 _f3;
 mat4x3 _f4;
 bvec4 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_22 {
 uvec4 _f0;
 mat3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_24 {
 _GLF_struct_22 _f0;
 ivec2 _f1;
 mat3x2 _f2;
 bvec2 _f3;
 bool _f4;
 _GLF_struct_23 _f5;
} ;

struct _GLF_struct_20 {
 bvec4 _f0;
 mat2x4 _f1;
 mat4 _f2;
 vec4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_19 {
 ivec3 _f0;
 uvec3 _f1;
 uvec2 _f2;
 mat3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_18 {
 bvec4 _f0;
 mat3x2 _f1;
 int _f2;
 mat4x3 _f3;
 int _f4;
 uvec2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_21 {
 ivec4 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
} ;

struct _GLF_struct_32 {
 _GLF_struct_21 _f0;
 ivec2 _f1;
 uint virtual_gid;
 _GLF_struct_24 _f2;
 _GLF_struct_29 _f3;
 _GLF_struct_31 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_15 {
 vec2 _f0;
 uint _f1;
 uvec2 _f2;
 uvec2 _f3;
 bvec3 _f4;
 int _f5;
} ;

struct _GLF_struct_14 {
 float _f0;
 float _f1;
} ;

struct _GLF_struct_16 {
 uint _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 mat2 _f1;
 ivec2 _f2;
 mat3 _f3;
 uint _f4;
 ivec4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_11 {
 ivec3 _f0;
 mat2x4 _f1;
 float _f2;
 ivec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 mat3x4 _f3;
 mat4x3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_13 {
 _GLF_struct_9 _f0;
 bool _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 float _f4;
 _GLF_struct_12 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_13 _f0;
 mat4x3 _f1;
 _GLF_struct_16 _f2;
 bool _f3;
 uint subgroup_base;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 ivec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_5 {
 bvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 int _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 mat3 _f1;
 vec3 _f2;
 mat4x3 _f3;
 vec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 ivec4 _f1;
 mat3x2 _f2;
 mat2x3 _f3;
 uint _f4;
 vec2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 uint subgroup_local_id;
 _GLF_struct_7 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_1(vec3(1.0), _GLF_struct_0(mat4x2(_GLF_IDENTITY(1.0, (1.0) + 0.0)), ivec4(1), mat3x2(1.0), mat2x3(1.0), 1u, vec2(1.0), bvec3(_GLF_IDENTITY(true, false || (true))))), _GLF_struct_3(ivec2(1), _GLF_struct_2(ivec4(1), mat3(1.0), vec3(1.0), mat4x3(1.0), vec2(1.0), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) | 0u), _GLF_IDENTITY(1u, _GLF_IDENTITY(0u ^ (1u), (0u ^ (1u)) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), _GLF_IDENTITY(1u, ~ (~ (1u))))))), gl_SubgroupInvocationID, _GLF_struct_7(_GLF_struct_4(bvec4(true), mat4x2(1.0), bvec4(true), 1), _GLF_struct_5(bvec3(true), mat2(1.0)), _GLF_struct_6(mat2(1.0), ivec3(1), ivec2(1))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))), true))))), ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED((- -4.1)), _GLF_FUZZED(-0.9)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (gl_WorkGroupSize[0]) * 1u), gl_WorkGroupSize[1], gl_WorkGroupSize[2])))), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u))[1], gl_WorkGroupSize[2]))))) - uvec3(0u, 0u, 0u)).x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), true, true, true)), false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u | _GLF_IDENTITY((workgroup_size * workgroup_id), clamp((workgroup_size * workgroup_id), _GLF_IDENTITY((workgroup_size * workgroup_id), clamp((workgroup_size * workgroup_id), _GLF_IDENTITY((workgroup_size * workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : (workgroup_size * workgroup_id))), (workgroup_size * workgroup_id))), (workgroup_size * workgroup_id))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), length(0.0), 1.0, 0.0, 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_13(_GLF_struct_9(mat4x2(1.0), ivec3(1), mat2x3(1.0), mat3x4(1.0), mat4x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) | (ivec3(1))), (_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))) | ivec3(0, 0, 0), max(_GLF_IDENTITY(_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))), ivec3(ivec3(_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))), min((ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))), (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0))))))))) | ivec3(0, 0, 0), max((ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))) | ivec3(0, 0, 0), (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))) | ivec3(0, 0, 0))), (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) | (0 & (-4662 + 47449))))), (int(ivec2(1, 0))) | 0)))) | ivec3(0, 0, 0))))) ^ _GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, min(0, 0))), (ivec3(0, 0, 0)) | (_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) / 1), 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(0, 0, 0) : _GLF_FUZZED(ivec3(-44639, _GLF_IDENTITY(31239, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(31239, (31239) | 0), 0, 1, 0)), max(int(ivec4(_GLF_IDENTITY(31239, (31239) | 0), 0, 1, 0)), int(ivec4(_GLF_IDENTITY(31239, (31239) | 0), 0, 1, 0))))), 71512)))))))), true, _GLF_struct_10(uvec2(1u), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) + vec3(0.0, 0.0, 0.0))), _GLF_struct_11(_GLF_IDENTITY(ivec3(1), max(ivec3(1), _GLF_IDENTITY(ivec3(1), clamp(ivec3(1), ivec3(1), ivec3(1))))), mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float((1.0)), float(_GLF_FUZZED(182.869)), bool(false))) - 0.0)), 1.0, ivec4(1), _GLF_IDENTITY(1u, (1u) | 0u)), 1.0, _GLF_struct_12(bvec4(true), mat2(1.0), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec2(1)), clamp((ivec2(1)), (ivec2(1)), (ivec2(1)))), (_GLF_IDENTITY((ivec2(1)), clamp((ivec2(1)), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)), (ivec2(1))))) / ivec2(1, 1)), ((ivec2(1))) - _GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) >> (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(8), ivec2(8))))) << ivec2(0, 0))) : _GLF_FUZZED(ivec2(-58373, 87963)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY((ivec2(1)), (_GLF_IDENTITY((ivec2(1)), clamp((ivec2(1)), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)), _GLF_IDENTITY((ivec2(1)), ivec2(0, 0) + ((ivec2(1))))))) / ivec2(1, 1)), ((ivec2(1))) - _GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) >> (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(8), ivec2(8))))) << ivec2(0, 0))) : _GLF_FUZZED(ivec2(-58373, 87963)), ivec2(0, 0) | (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec2(1)), (_GLF_IDENTITY((ivec2(1)), clamp((ivec2(1)), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)), (ivec2(1))))) / ivec2(1, 1)), ((ivec2(1))) - _GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) >> (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(8), ivec2(8))))) << ivec2(0, 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((ivec2(1)), (_GLF_IDENTITY((ivec2(1)), clamp((ivec2(1)), _GLF_IDENTITY(_GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)), (_GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0))) | (_GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)))), (ivec2(1))))) / ivec2(1, 1)), ((ivec2(1))) - _GLF_IDENTITY(_GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) | (ivec2(0, 0))), (_GLF_IDENTITY(ivec2(0, 0), (ivec2(_GLF_IDENTITY(0, (0) << 0), 0)) >> (ivec2(0, 0) >> _GLF_IDENTITY(ivec2(8), ivec2(8))))) << ivec2(0, 0)))))) : _GLF_FUZZED(ivec2(-58373, 87963))))) + ivec2(0, 0)))) * ivec2(1, 1)), mat3(1.0), 1u, ivec4(1), mat2(1.0))), mat4x3(1.0), _GLF_struct_16(1u, _GLF_struct_14(1.0, 1.0), _GLF_struct_15(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), float(_GLF_FUZZED(39.48)), bool(false)))), 1u, uvec2(1u), uvec2(1u), bvec3(true), 1), bvec3(true)), true, subgroup_id * subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(_GLF_struct_21(ivec4(1), _GLF_struct_18(bvec4(true), mat3x2(1.0), 1, mat4x3(1.0), 1, uvec2(1u), vec3(1.0)), _GLF_struct_19(ivec3(_GLF_IDENTITY(1, (1) ^ 0)), uvec3(1u), uvec2(1u), mat3(1.0), bvec4(true)), _GLF_struct_20(bvec4(true), mat2x4(1.0), _GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-43.65)), float(1.0), bool(true))), sin(0.0)), max(vec4(1.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 0.0, 1.0, sin(0.0))))))), (mat4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, sin(0.0)), max(vec4(1.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 0.0, 1.0, sin(0.0)))), max(vec4(1.0, 0.0, 1.0, sin(0.0)), vec4(1.0, 0.0, 1.0, sin(0.0)))))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), vec4(1.0), bvec4(true))), ivec2(1), workgroup_base + _GLF_struct_replacement_17.subgroup_base + _GLF_struct_replacement_8.subgroup_local_id, _GLF_struct_24(_GLF_struct_22(_GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), mat3(1.0), vec2(1.0)), ivec2(1), mat3x2(1.0), bvec2(true), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_struct_23(mat4x3(1.0), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! _GLF_IDENTITY((true), bool(bvec2((true), true)))))))))), uvec2(1u), vec2(1.0), mat4x3(1.0), bvec4(true), mat2x4(1.0))), _GLF_struct_29(_GLF_struct_25(mat2x4(1.0), 1.0), vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-31.20)))), _GLF_struct_26(ivec2(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(1, 1))))), mat4(1.0), ivec4(1), _GLF_IDENTITY(1u, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) || false)) ? _GLF_FUZZED(88158u) : 1u)), mat2x4(1.0), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (1)))), max(~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (_GLF_IDENTITY(1, (1) | (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (1)))), min((_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (1)))), (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (1)))))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), clamp(~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (1)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ _GLF_IDENTITY((1), 0 | ((1))), (~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (1) | (1)))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (1) | (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))))))) >> 0, (true ? ((_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))))))) >> 0 : _GLF_FUZZED(-21972)))), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), int(_GLF_IDENTITY(int(0), (int(0)) * 1)))), ~ (1))), ~ (1)))), (true ? ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (1)), min((~ (1)), _GLF_IDENTITY((~ (1)), ~ (~ ((~ (1))))))), ~ (~ ((~ (1)))))) - 0) ^ 0), ~ (1))), ~ (1)))) : _GLF_FUZZED(-4461))), ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ _GLF_IDENTITY((1), int(int((1)))))), ~ _GLF_IDENTITY((1), ((1)) >> 0)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))))) ^ 0), ~ (1))), ~ (1)))), int(ivec3(~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), (~ (1)) ^ 0), ~ (1))), ~ (1)))), 1, 1)))))), mat3x4(1.0)), _GLF_struct_27(mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) ? _GLF_IDENTITY(1.0, (1.0) - 0.0) : _GLF_FUZZED(-476.026)))), bvec4(true), true, 1, uvec3(1u), mat3x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.7)), bool(false))), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-340.493)))))), mat2x4(1.0)), _GLF_struct_28(mat3x2(1.0), vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - sqrt(0.0)))), mat4x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_struct_31(vec3(1.0), _GLF_struct_30(vec4(1.0), mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false || _GLF_IDENTITY(_GLF_IDENTITY((true), bool(bvec4((true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((true)) && true)), 1u), mat3x4(1.0), bvec4(true)), ivec2(1));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.5)), bool(false))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), (workgroup_base) | 0u)) ^ 0u) + _GLF_struct_replacement_17.subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id + 1, min(_GLF_struct_replacement_8.subgroup_local_id + 1, _GLF_struct_replacement_8.subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY(min((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id + 1))))) / ((_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), ~ (_GLF_IDENTITY(~ (uint(6u)), 0u ^ (~ (uint(6u)))))), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u)))), (1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(clamp(uint(6u), uint(6u), uint(6u)), (clamp(uint(6u), uint(6u), uint(6u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0u), (1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))) ^ 0u)) >> _GLF_IDENTITY(uint(6u), uint(6u)))) % subgroup_size), min(min(_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size, min((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size, (_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1)), uint(_GLF_IDENTITY(uvec3(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1), ~ (~ ((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1))))), 0u, 0u), max(uvec3(~ _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1)), min(((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1)), ((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1)))), 0u, 0u), uvec3(~ ((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_struct_replacement_8.subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u)) - 0u)) + 1)), 0u, 0u)))))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (true ? _GLF_IDENTITY(6u, (6u) / (0u | 1u)) : _GLF_FUZZED(num_workgroup)))) / 1u)), 0u ^ (uint(6u))), clamp(uint(6u), uint(6u), uint(6u)))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))))) << 0u, 0u ^ ((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))))) << 0u)))) - 0u) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))) ^ 0u)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) >> 0u), uint(6u)))) % subgroup_size), min((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, min(_GLF_struct_replacement_8.subgroup_local_id, _GLF_struct_replacement_8.subgroup_local_id)) + 1), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id + 1))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u)))), (1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))) ^ 0u)) >> _GLF_IDENTITY(uint(6u), uint(6u))), clamp((_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id + 1))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u)))), (1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))) ^ 0u)) >> _GLF_IDENTITY(uint(6u), uint(6u))), (_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id + 1))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u)))), (1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))) ^ 0u)) >> _GLF_IDENTITY(uint(6u), uint(6u))), (_GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id + 1), ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id + 1))))) / ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u)))), (1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))) ^ 0u)) >> _GLF_IDENTITY(uint(6u), uint(6u)))))) % subgroup_size)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), true && (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (injectionSwitch.y)))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), injectionSwitch.y)), injectionSwitch.y)))))))), true, true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 0.0))), injectionSwitch.x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    return;
   return;
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u), next_virtual_gid)))), next_virtual_gid, next_virtual_gid))) | (next_virtual_gid))], uint(1), 4, _GLF_IDENTITY(64, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(64, max(64, 64))), min((_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), (false ? _GLF_FUZZED(-75303) : _GLF_IDENTITY(64, max(64, 64))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), max(_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), 0 | (_GLF_IDENTITY(64, max(64, 64)))), _GLF_IDENTITY(64, max(64, 64)))))))), 0 ^ _GLF_IDENTITY(((~ (_GLF_IDENTITY(64, max(64, 64))))), (_GLF_IDENTITY(((~ (_GLF_IDENTITY(64, _GLF_IDENTITY(max(64, 64), (max(64, 64)) * 1))))), (((~ (_GLF_IDENTITY(64, max(64, 64)))))) / 1)) + 0))), _GLF_IDENTITY(4, (_GLF_IDENTITY(true, ! (! (true))) ? 4 : _GLF_FUZZED(83303))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if((_GLF_struct_replacement_8.subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, (_GLF_IDENTITY((_GLF_DEAD(false)) && true, bool(bvec3((_GLF_DEAD(false)) && true, false, true)))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   read = atomicLoad(buf[_GLF_struct_replacement_32.virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4(-6737.8033, -0.5, 543.488, -4.9, 587.981, -8997.8415, 31.08, 6402.6649, -7.8, -4.7, 323.942, -12.41, 7.6, -5.6, -62.33, -4.2)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0), (true ? mat4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.y) / 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4(-6737.8033, -0.5, 543.488, -4.9, 587.981, -8997.8415, 31.08, 6402.6649, -7.8, -4.7, 323.942, -12.41, 7.6, -5.6, -62.33, -4.2)))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   read = atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_32.virtual_gid], clamp(_GLF_IDENTITY(buf[_GLF_struct_replacement_32.virtual_gid], uint(uvec4(buf[_GLF_struct_replacement_32.virtual_gid], 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), buf[_GLF_struct_replacement_32.virtual_gid], buf[_GLF_struct_replacement_32.virtual_gid])), 4, 64, 2);
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(0.8)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(86.82, -632.430)) : injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (injectionSwitch)).y)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              barrier();
             barrier();
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true)))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.4, -9.3)) : injectionSwitch)))).y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(checker[_GLF_struct_replacement_32.virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
}
