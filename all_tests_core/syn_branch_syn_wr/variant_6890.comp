#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), 0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5))), ! (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (0 << _GLF_IDENTITY(int(5), int(5))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) / 1)) >> 0)) >> 0), (int(1)) << 0)))) > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 9415)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true))))))))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) ^ 0) < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          break;
                         for(int _injected_loop_counter = (((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, 5))) ^ 0), 0 | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, 5))) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, 5))) ^ 0), 0 | (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, 5))) ^ 0)))) + 0)), int(5))) ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), true, true, false))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) + 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) + 0u)), ~ (~ ((_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) + 0u))))), (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) + 0u)))) | (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(_GLF_DEAD(false)), false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(bool(_GLF_DEAD(false)), false, true)), false || (bool(bvec3(bool(_GLF_DEAD(false)), false, true)))), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(bool(_GLF_DEAD(false)), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), bool(bvec3(bool(_GLF_DEAD(false)), false, true))))))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], injectionSwitch[0]))), (_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), float(mat4(float(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) / 1.0)), (float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), (_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), float(mat4(float(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) / 1.0))) / 1.0))) + 0.0), injectionSwitch[1]))) - vec2(0.0, 0.0)).y), true && ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), vec2(_GLF_IDENTITY(mat3x2(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), (mat3x2(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9021.5833)), bool(false))))) * _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8980.1833)), float(1.0), bool(true)))), (false ? _GLF_FUZZED(mat3(525.710, 16.43, -5707.9387, -81.50, 0.6, -7815.6334, -2.3, -9771.4469, 0.8)) : _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) * mat3(1.0))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), (vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1])) - tan(vec2(0.0, 0.0))))))) - vec2(0.0, 0.0)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), vec2(_GLF_IDENTITY(mat3x2(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), (mat3x2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[0], injectionSwitch[0])))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8802.0710), _GLF_FUZZED(2898.0574)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true), true)))))[0]) + 0.0), injectionSwitch[1]), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)) * mat3(1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), (vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1])) - tan(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2281.1841)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), 0.0))))))) - vec2(0.0, 0.0)).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch[0]) + 0.0, mix(float((injectionSwitch[0]) + 0.0), float(_GLF_FUZZED((-4.8 + 5010.8420))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((injectionSwitch[0]) + 0.0, mix(float((injectionSwitch[0]) + 0.0), float(_GLF_IDENTITY(_GLF_FUZZED((-4.8 + 5010.8420)), clamp(_GLF_FUZZED((-4.8 + 5010.8420)), _GLF_FUZZED((-4.8 + 5010.8420)), _GLF_IDENTITY(_GLF_FUZZED((-4.8 + 5010.8420)), (_GLF_FUZZED((-4.8 + 5010.8420))) - sin(0.0))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - 0.0)), injectionSwitch[1]), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), vec2(_GLF_IDENTITY(mat3x2(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), (mat3x2(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED((+ -67708)) : 0))]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / round(length(normalize(1.0)))), injectionSwitch[1]))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)) * mat3(1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), max(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), mix(float(_GLF_FUZZED(3.8)), float(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0)), bool(true))))), injectionSwitch[1])) - tan(vec2(0.0, 0.0))))))) - vec2(0.0, 0.0)).y)))))))))));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) + (68780u & 0u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(0 ^ (_injected_loop_counter ++), (_GLF_IDENTITY(0 ^ (_injected_loop_counter ++), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 ^ (_injected_loop_counter ++)))) << 0)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        continue;
      }
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_base, uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_base, 1u), max(uvec2(workgroup_base + subgroup_base, 1u), uvec2(workgroup_base + subgroup_base, 1u))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
  }
 uint read = 0;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))), uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u)), ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))) | ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(ivec3(-59049, -48159, -13954), -60661)[0]))))), 1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), min(uint(1), uint(_GLF_IDENTITY(1, (1) >> 0))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1))))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), 0u | (uint(1))))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, (_GLF_IDENTITY((1) | 0, ((1) | 0) - 0)) - 0)), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1))) >> 0), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2)))), (1) | 0)) << 0)) | (1)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))), _GLF_IDENTITY((~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))))), 0u ^ (_GLF_IDENTITY((~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))))), ((~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))))) ^ (1u ^ 1u)))) >> 0u))), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), min(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(2u), uint(2u))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, ~ (~ (1)))), uint(1)))), ~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), uint(1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)))), (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(_GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(1), int(1)))), 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1))), _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0), 1)))))))), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1))), _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0), 1)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1))), _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0), 1)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1))), _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0), 1)))))))))), min(uint(1), uint(1))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))) | (1)), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), uint(1)))))))))) >> 0u))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(1), ~ (~ (uint(_GLF_IDENTITY(1, max(1, 1)))))))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), min((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), ((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u)))) | 0u)), 0u | ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u)), ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))) | ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(ivec3(-59049, -48159, -13954), -60661)[0]))))), 1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), min(uint(1), uint(_GLF_IDENTITY(1, (1) >> 0))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | 0), 1))), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1))))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), uint(1)))), (~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), uint(1))))) / 1u), clamp(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), 0u | (uint(1))))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, (_GLF_IDENTITY((1) | 0, (false ? _GLF_FUZZED(-20423) : _GLF_IDENTITY((1) | 0, ((1) | 0) ^ 0)))) | 0)), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) ^ (0 | 0)) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1))) >> 0), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))), (~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))))) >> 0u))), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) * 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), uint(1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), uint(1))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, _GLF_IDENTITY(1, 0 ^ (1)), 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1), max(clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), uint(1)))))))))) >> 0u))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ _GLF_IDENTITY((uint(1)), max((uint(1)), (uint(1)))))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, 1u))) * (1u & 1u)))) | (uvec3(_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), (min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (_GLF_IDENTITY(~ (uint(1)), ~ (~ (~ (uint(1))))))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), ((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ _GLF_IDENTITY((~ (uint(1))), ((~ (uint(1)))) | ((~ (uint(1)))))), uint(1))))) << 0u)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u)), 0u | ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))))))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u)), ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))) | ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(ivec3(-59049, -48159, -13954), -60661)[0]))))), 1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), min(uint(1), uint(_GLF_IDENTITY(1, (1) >> 0))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1))))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), 0u | (uint(1))))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1))) >> 0), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))), (~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))))) >> 0u))), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), uint(1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), uint(1))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), uint(1)))))))))) >> 0u))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), ((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u)), 0u | ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) - 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u)), ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))) | ((uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), _GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(ivec3(-59049, -48159, -13954), -60661)[0]))))), 1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), min(uint(1), uint(_GLF_IDENTITY(1, (1) >> 0))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1))))))), 0u ^ (_GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(ivec3(-59049, -48159, -13954), -60661)[0]))))), 1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), min(uint(1), uint(_GLF_IDENTITY(1, (1) >> 0))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1))))))), ~ (~ (clamp(~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(ivec3(-59049, -48159, -13954), -60661)[0]))))), 1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | (uint(1))), min(uint(1), uint(_GLF_IDENTITY(1, (1) >> 0))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1)))))))))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), 0u | (uint(1))))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1))) >> 0), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0)) | (1)))))) >> int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), 1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))), (~ (~ ((_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))))) >> 0u))), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (~ ((_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, (1) / 1)), uint(1)))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), clamp(1, _GLF_IDENTITY(1, (1) << 0), 1))), min(uint(1), uint(1))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-81411))))))) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(1)))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, 0 ^ (_GLF_IDENTITY((1) | 0, min(_GLF_IDENTITY((1) | 0, ((1) | 0) + 0), _GLF_IDENTITY((1) | 0, 0 ^ ((1) | 0))))))), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), uint(1))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))) : _GLF_FUZZED(int(false))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), max(_GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))), _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, (0u) | (0u))))), uint(_GLF_IDENTITY(1, (1) | 0))))), clamp(~ (_GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, 0 | (1))), uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | 0), (_GLF_IDENTITY(1, (1) | 0)) << 0), (false ? _GLF_FUZZED(52957) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), min((1), (1))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 0 | (1))))) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0)))))) | 0)) << 0)))) | (1)), 1)))))), ~ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), 1)), ~ (~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) ^ (0 | 0)), _GLF_IDENTITY(1, (1) << 0), 1)))))))), min(uint(1), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uvec2(uint(1), 0u), ~ (~ (uvec2(uint(1), 0u))))))))))))))) >> 0u))), _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u), (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u)) | 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) ^ 0), 1))), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u), (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u)) | (uvec3(min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)), 1u, 1u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u, 0u ^ (((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) << 0u)))), (false ? _GLF_FUZZED(workgroup_size) : (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1)))), ((_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(1))))) << 0u)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1)))) / 1u)), 0u | ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), min(uint(1), uint(1))))))))) + 0u))))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))) && true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8))), int(8)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((true) && true, false || ((true) && true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), _GLF_IDENTITY(int(ivec2((0 | 0), int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), _GLF_IDENTITY((true ? _GLF_IDENTITY((0 | _GLF_IDENTITY(0, min(0, 0))), ((0 | 0)) * 1) : _GLF_FUZZED(-83578)), clamp((true ? _GLF_IDENTITY((0 | 0), ((0 | 0)) * 1) : _GLF_FUZZED(-83578)), (true ? _GLF_IDENTITY((0 | 0), ((0 | 0)) * 1) : _GLF_FUZZED(-83578)), (true ? _GLF_IDENTITY((0 | 0), ((0 | 0)) * _GLF_IDENTITY(1, (0 ^ 0) | (1))) : _GLF_FUZZED(-83578))))), (_GLF_IDENTITY((0 | 0), (true ? _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (0) / 1)), ((0 | 0)) * 1) : _GLF_FUZZED(-83578)))) << 0), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2((0 | 0), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2((_GLF_IDENTITY(0 | 0, int(ivec4(0 | 0, ((-50075 % 22971) & int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))).x))), 1, 0)))), int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)))) << 0))) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))); _injected_loop_counter ++)
        {
         if((subgroup_local_id % _GLF_IDENTITY(2, 1 * (2))) == 0)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      break;
                     read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (false ? _GLF_FUZZED(-1620) : 2)));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))), (_GLF_WRAPPED_LOOP(false)) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))), (_GLF_WRAPPED_LOOP(false)) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))), (_GLF_WRAPPED_LOOP(false)) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), true)))))), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true))), true)))))), true))))))))))))))))) || false))));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))
                    continue;
                   for(int _injected_loop_counter = (_GLF_IDENTITY(1, 0 ^ (1)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true, false)), false || (bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                      continue;
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false, true)))) && true))))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), true, false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, int(ivec3(64, 1, 1))), 2);
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), int(5)))) << (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), clamp(0 << _GLF_IDENTITY(int(5), int(5)), 0 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), max(0 << _GLF_IDENTITY(int(5), int(5)), 0 << _GLF_IDENTITY(int(5), int(5)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                break;
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), 0 | ((1 << _GLF_IDENTITY(int(0), int(0)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))), bool(bvec3(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), (_GLF_IDENTITY((int(0)), clamp((int(0)), _GLF_IDENTITY((int(0)), (true ? (int(0)) : _GLF_FUZZED(_injected_loop_counter))), (int(0))))) | 0) ^ 0), int(0))))), true, false)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))))))))); _injected_loop_counter ++)
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false, false || ((bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(read, uint(uint(read))), _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u) - 0u, ((1u) - 0u) * 1u), 0u | (_GLF_IDENTITY((1u) - 0u, ((1u) - 0u) * 1u)))), 1u, 0u)), max(uint(uvec4(_GLF_IDENTITY(read, uint(uint(read))), _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u) - 0u, ((1u) - 0u) * 1u), 0u | (_GLF_IDENTITY((1u) - 0u, ((1u) - 0u) * 1u)))), 1u, 0u)), uint(uvec4(_GLF_IDENTITY(read, uint(uint(read))), _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u) - 0u, ((1u) - 0u) * 1u), 0u | (_GLF_IDENTITY((1u) - 0u, ((1u) - 0u) * 1u)))), 1u, 0u))))), 4, 64, 4);
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
}
