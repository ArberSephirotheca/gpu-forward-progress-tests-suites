#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_145 {
 int _injected_loop_counter;
 mat4x2 _f0;
 uvec2 _f1;
 uint _f2;
 vec3 _f3;
} ;

struct _GLF_struct_142 {
 vec2 _f0;
 mat2x3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_143 {
 _GLF_struct_142 _f0;
} ;

struct _GLF_struct_140 {
 ivec2 _f0;
 ivec2 _f1;
 ivec4 _f2;
 vec2 _f3;
 vec2 _f4;
 vec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_139 {
 float _f0;
 uvec3 _f1;
 bvec2 _f2;
 mat2 _f3;
 vec2 _f4;
 uint _f5;
 mat2 _f6;
} ;

struct _GLF_struct_138 {
 vec4 _f0;
 mat3x2 _f1;
 mat2x4 _f2;
 ivec4 _f3;
 bvec3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_137 {
 mat4x2 _f0;
 mat2 _f1;
 vec3 _f2;
 mat4x3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_136 {
 float _f0;
 ivec3 _f1;
 mat3x4 _f2;
 mat3 _f3;
 ivec4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_141 {
 _GLF_struct_136 _f0;
 _GLF_struct_137 _f1;
 _GLF_struct_138 _f2;
 _GLF_struct_139 _f3;
 _GLF_struct_140 _f4;
} ;

struct _GLF_struct_134 {
 ivec3 _f0;
 ivec4 _f1;
 vec2 _f2;
 int _f3;
} ;

struct _GLF_struct_135 {
 _GLF_struct_134 _f0;
 int _f1;
 vec4 _f2;
} ;

struct _GLF_struct_144 {
 _GLF_struct_135 _f0;
 _GLF_struct_141 _f1;
 int _injected_loop_counter;
 _GLF_struct_143 _f2;
} ;

struct _GLF_struct_131 {
 vec2 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_130 {
 mat2x4 _f0;
 vec3 _f1;
 mat3 _f2;
 mat2x3 _f3;
 vec2 _f4;
 float _f5;
} ;

struct _GLF_struct_132 {
 int _f0;
 _GLF_struct_130 _f1;
 _GLF_struct_131 _f2;
 bvec2 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_128 {
 mat4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_127 {
 mat4x2 _f0;
 uvec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_126 {
 uvec3 _f0;
 bvec3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_129 {
 _GLF_struct_126 _f0;
 _GLF_struct_127 _f1;
 ivec3 _f2;
 _GLF_struct_128 _f3;
} ;

struct _GLF_struct_133 {
 _GLF_struct_129 _f0;
 mat4 _f1;
 int _f2;
 _GLF_struct_132 _f3;
} ;

struct _GLF_struct_123 {
 mat4x3 _f0;
 bvec3 _f1;
 bvec3 _f2;
 vec3 _f3;
 bool _f4;
 uvec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_124 {
 ivec2 _f0;
 _GLF_struct_123 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_121 {
 vec4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_120 {
 ivec4 _f0;
 bool _f1;
 mat3x4 _f2;
 vec2 _f3;
 mat2x4 _f4;
 uvec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_122 {
 int _f0;
 _GLF_struct_120 _f1;
 mat4 _f2;
 _GLF_struct_121 _f3;
 bvec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_125 {
 _GLF_struct_122 _f0;
 _GLF_struct_124 _f1;
 int _injected_loop_counter;
 vec4 _f2;
 uvec3 _f3;
 bvec2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_119 {
 int _injected_loop_counter;
 mat3x4 _f0;
} ;

struct _GLF_struct_116 {
 vec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_115 {
 mat2x4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_117 {
 mat4x2 _f0;
 _GLF_struct_115 _f1;
 _GLF_struct_116 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_113 {
 bvec4 _f0;
 bool _f1;
 mat4 _f2;
 ivec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_112 {
 vec3 _f0;
 vec3 _f1;
 uint _f2;
 mat4 _f3;
 vec4 _f4;
 bool _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_111 {
 mat2 _f0;
 bool _f1;
 bvec4 _f2;
 bvec3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_110 {
 bvec4 _f0;
} ;

struct _GLF_struct_114 {
 _GLF_struct_110 _f0;
 vec2 _f1;
 _GLF_struct_111 _f2;
 uvec2 _f3;
 _GLF_struct_112 _f4;
 uvec2 _f5;
 uint read;
 _GLF_struct_113 _f6;
} ;

struct _GLF_struct_118 {
 _GLF_struct_114 _f0;
 _GLF_struct_117 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_107 {
 int _f0;
 mat3x4 _f1;
 bool _f2;
 mat3x4 _f3;
 mat4 _f4;
 int _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_106 {
 uvec4 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_105 {
 mat2x4 _f0;
 mat3x4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_104 {
 uvec3 _f0;
 mat2x3 _f1;
 ivec3 _f2;
 uvec2 _f3;
 mat3x4 _f4;
 ivec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_108 {
 _GLF_struct_104 _f0;
 _GLF_struct_105 _f1;
 bvec2 _f2;
 _GLF_struct_106 _f3;
 mat3x4 _f4;
 _GLF_struct_107 _f5;
 bool _f6;
} ;

struct _GLF_struct_102 {
 bvec2 _f0;
} ;

struct _GLF_struct_101 {
 int _injected_loop_counter;
 vec2 _f0;
} ;

struct _GLF_struct_100 {
 ivec2 _f0;
 ivec3 _f1;
 uint _f2;
 vec4 _f3;
} ;

struct _GLF_struct_99 {
 vec4 _f0;
 bvec2 _f1;
 ivec2 _f2;
 mat2x3 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_103 {
 _GLF_struct_99 _f0;
 _GLF_struct_100 _f1;
 _GLF_struct_101 _f2;
 _GLF_struct_102 _f3;
} ;

struct _GLF_struct_109 {
 _GLF_struct_103 _f0;
 ivec3 _f1;
 uvec3 _f2;
 _GLF_struct_108 _f3;
 mat3x4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_96 {
 bvec3 _f0;
 vec4 _f1;
 uvec2 _f2;
 mat3 _f3;
 ivec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_95 {
 vec3 _f0;
 bvec3 _f1;
 uvec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_97 {
 _GLF_struct_95 _f0;
 bvec2 _f1;
 bvec4 _f2;
 _GLF_struct_96 _f3;
} ;

struct _GLF_struct_94 {
 bvec2 _f0;
} ;

struct _GLF_struct_92 {
 mat2x4 _f0;
 ivec2 _f1;
 vec3 _f2;
 vec2 _f3;
 ivec3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_93 {
 _GLF_struct_92 _f0;
 uvec3 _f1;
 uvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_98 {
 _GLF_struct_93 _f0;
 uint num_workgroup;
 _GLF_struct_94 _f1;
 bvec4 _f2;
 _GLF_struct_97 _f3;
} ;

struct _GLF_struct_89 {
 mat4x2 _f0;
 float _f1;
 vec3 _f2;
 ivec3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_88 {
 ivec2 _f0;
 uvec3 _f1;
 int _f2;
} ;

struct _GLF_struct_90 {
 ivec4 _f0;
 _GLF_struct_88 _f1;
 uvec3 _f2;
 bvec4 _f3;
 _GLF_struct_89 _f4;
} ;

struct _GLF_struct_86 {
 vec3 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_87 {
 uvec3 _f0;
 _GLF_struct_86 _f1;
} ;

struct _GLF_struct_84 {
 mat3x4 _f0;
 uint _f1;
} ;

struct _GLF_struct_83 {
 mat3x4 _f0;
 ivec2 _f1;
 vec2 _f2;
 mat4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_82 {
 uvec2 _f0;
} ;

struct _GLF_struct_81 {
 ivec4 _f0;
 mat4x3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_85 {
 mat4 _f0;
 _GLF_struct_81 _f1;
 _GLF_struct_82 _f2;
 mat2x3 _f3;
 _GLF_struct_83 _f4;
 mat2 _f5;
 _GLF_struct_84 _f6;
} ;

struct _GLF_struct_79 {
 int _f0;
 ivec2 _f1;
 uvec2 _f2;
 bool _f3;
 uint _f4;
 float _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_78 {
 bool _f0;
 vec3 _f1;
} ;

struct _GLF_struct_77 {
 mat2x3 _f0;
 ivec3 _f1;
 vec4 _f2;
 mat4x2 _f3;
 uvec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_80 {
 _GLF_struct_77 _f0;
 _GLF_struct_78 _f1;
 mat2 _f2;
 uvec3 _f3;
 mat4 _f4;
 _GLF_struct_79 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_91 {
 uvec2 _f0;
 _GLF_struct_80 _f1;
 _GLF_struct_85 _f2;
 _GLF_struct_87 _f3;
 uint _f4;
 _GLF_struct_90 _f5;
} ;

struct _GLF_struct_74 {
 mat4x2 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 vec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_75 {
 _GLF_struct_74 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_72 {
 ivec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_71 {
 uvec3 _f0;
} ;

struct _GLF_struct_70 {
 uvec2 _f0;
 mat3x2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_73 {
 _GLF_struct_70 _f0;
 bvec2 _f1;
 _GLF_struct_71 _f2;
 mat4 _f3;
 _GLF_struct_72 _f4;
} ;

struct _GLF_struct_68 {
 bvec2 _f0;
 mat2 _f1;
 bool _f2;
 mat2x4 _f3;
 bvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_69 {
 bvec4 _f0;
 _GLF_struct_68 _f1;
 int _f2;
} ;

struct _GLF_struct_66 {
 bool _f0;
 uvec3 _f1;
 ivec3 _f2;
 ivec3 _f3;
 bvec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_65 {
 mat3x4 _f0;
 uvec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_64 {
 mat4x2 _f0;
 vec2 _f1;
 float _f2;
 uvec2 _f3;
 bvec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_63 {
 uvec4 _f0;
} ;

struct _GLF_struct_67 {
 _GLF_struct_63 _f0;
 _GLF_struct_64 _f1;
 _GLF_struct_65 _f2;
 vec4 _f3;
 vec4 _f4;
 _GLF_struct_66 _f5;
 int _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_62 {
 bvec2 _f0;
 ivec4 _f1;
 mat4 _f2;
 ivec2 _f3;
 mat3x4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_76 {
 _GLF_struct_62 _f0;
 _GLF_struct_67 _f1;
 _GLF_struct_69 _f2;
 bool _f3;
 _GLF_struct_73 _f4;
 _GLF_struct_75 _f5;
 uint _f6;
} ;

struct _GLF_struct_60 {
 ivec2 _f0;
} ;

struct _GLF_struct_58 {
 mat3 _f0;
 ivec4 _f1;
 mat2x3 _f2;
 bvec2 _f3;
 uvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_57 {
 uvec3 _f0;
 mat2x3 _f1;
 vec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_56 {
 mat4x2 _f0;
 ivec4 _f1;
 ivec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_55 {
 mat4x2 _f0;
} ;

struct _GLF_struct_59 {
 _GLF_struct_55 _f0;
 uvec4 _f1;
 _GLF_struct_56 _f2;
 _GLF_struct_57 _f3;
 float _f4;
 _GLF_struct_58 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_61 {
 _GLF_struct_59 _f0;
 uint workgroup_size;
 _GLF_struct_60 _f1;
} ;

struct _GLF_struct_54 {
 bvec3 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_51 {
 mat2 _f0;
 int _f1;
} ;

struct _GLF_struct_50 {
 uvec2 _f0;
 int _f1;
 uvec4 _f2;
 mat3 _f3;
 ivec3 _f4;
 mat3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_49 {
 mat2x4 _f0;
 float _f1;
 bvec4 _f2;
 bvec2 _f3;
 bvec3 _f4;
 ivec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_52 {
 _GLF_struct_49 _f0;
 _GLF_struct_50 _f1;
 bool _f2;
 _GLF_struct_51 _f3;
} ;

struct _GLF_struct_48 {
 float _f0;
 mat4x2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_46 {
 uvec3 _f0;
 mat4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_45 {
 mat3x2 _f0;
 uint _f1;
} ;

struct _GLF_struct_44 {
 bvec3 _f0;
 vec3 _f1;
 float _f2;
 mat3x4 _f3;
 vec4 _f4;
 mat3x4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_47 {
 bool _f0;
 _GLF_struct_44 _f1;
 float _f2;
 _GLF_struct_45 _f3;
 _GLF_struct_46 _f4;
 bool _f5;
} ;

struct _GLF_struct_42 {
 bool _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_41 {
 ivec4 _f0;
 vec2 _f1;
 int _injected_loop_counter;
 uvec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_40 {
 bvec2 _f0;
 ivec2 _f1;
 vec2 _f2;
 mat3x4 _f3;
 vec3 _f4;
 bvec4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_43 {
 bvec4 _f0;
 _GLF_struct_40 _f1;
 _GLF_struct_41 _f2;
 mat3x4 _f3;
 _GLF_struct_42 _f4;
 uvec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_39 {
 mat3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_37 {
 vec3 _f0;
 vec3 _f1;
 ivec2 _f2;
 bvec3 _f3;
 bvec2 _f4;
 mat3x2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_36 {
 vec2 _f0;
 uvec4 _f1;
 bool _f2;
 mat4x3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_35 {
 mat3x2 _f0;
 bvec4 _f1;
 vec4 _f2;
 bvec2 _f3;
 vec2 _f4;
 bvec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_34 {
 bool _f0;
 bvec3 _f1;
 mat3x4 _f2;
 bvec2 _f3;
 mat4x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_38 {
 vec3 _f0;
 ivec2 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_35 _f3;
 _GLF_struct_36 _f4;
 ivec4 _f5;
 _GLF_struct_37 _f6;
} ;

struct _GLF_struct_53 {
 _GLF_struct_38 _f0;
 _GLF_struct_39 _f1;
 _GLF_struct_43 _f2;
 _GLF_struct_47 _f3;
 mat2x4 _f4;
 _GLF_struct_48 _f5;
 _GLF_struct_52 _f6;
} ;

struct _GLF_struct_32 {
 ivec4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_31 {
 float _f0;
} ;

struct _GLF_struct_33 {
 mat2x3 _f0;
 _GLF_struct_31 _f1;
 _GLF_struct_32 _f2;
 mat2 _f3;
 int _injected_loop_counter;
 float _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_30 {
 mat4 _f0;
 uint subgroup_base;
 bvec3 _f1;
 float _f2;
} ;

struct _GLF_struct_27 {
 bool _f0;
 uvec3 _f1;
 bvec4 _f2;
 int _f3;
 vec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_26 {
 ivec4 _f0;
 mat3 _f1;
 mat4x2 _f2;
 mat2x3 _f3;
 mat3x4 _f4;
 mat2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_28 {
 _GLF_struct_26 _f0;
 vec2 _f1;
 _GLF_struct_27 _f2;
} ;

struct _GLF_struct_29 {
 bvec2 _f0;
 int _injected_loop_counter;
 _GLF_struct_28 _f1;
} ;

struct _GLF_struct_25 {
 int _injected_loop_counter;
 mat3x4 _f0;
} ;

struct _GLF_struct_22 {
 uvec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_21 {
 mat3x2 _f0;
 bvec2 _f1;
 mat4x2 _f2;
 float _f3;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 _GLF_struct_22 _f1;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_18 {
 vec4 _f0;
 mat3 _f1;
 mat3x4 _f2;
 mat4x2 _f3;
 mat4 _f4;
 mat2x4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 mat2 _f1;
 _GLF_struct_19 _f2;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 uvec2 _f1;
 bvec3 _f2;
 ivec4 _f3;
 bvec3 _f4;
 vec2 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 uvec4 _f1;
 vec3 _f2;
 int _f3;
 mat4x3 _f4;
 mat4x2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_17 {
 float _f0;
 vec4 _f1;
 bvec4 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
 uint _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_24 {
 _GLF_struct_17 _f0;
 _GLF_struct_20 _f1;
 ivec3 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 _GLF_struct_23 _f5;
 int _f6;
} ;

struct _GLF_struct_11 {
 float _f0;
 vec3 _f1;
 uvec3 _f2;
 uvec4 _f3;
 mat2x4 _f4;
 vec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 int _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id;
 bvec3 _f1;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 mat3 _f1;
 uvec2 _f2;
 mat4x2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_6 {
 bool _f0;
 mat3x2 _f1;
 mat4 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 _GLF_struct_8 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_4 {
 int _f0;
 mat3 _f1;
 vec3 _f2;
 uvec4 _f3;
 bvec3 _f4;
 mat3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 ivec4 _f1;
 mat4x2 _f2;
 mat4x3 _f3;
 uvec4 _f4;
 uvec2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 bvec2 _f1;
 bool _f2;
 ivec3 _f3;
 uvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat3 _f1;
 bvec4 _f2;
 bool _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_2 _f0;
 _GLF_struct_5 _f1;
 uint virtual_gid;
 _GLF_struct_9 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_24 _GLF_struct_replacement_24;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13;
 _GLF_struct_91 _GLF_struct_replacement_91 = _GLF_struct_91(uvec2(1u), _GLF_struct_80(_GLF_struct_77(mat2x3(1.0), ivec3(1), vec4(1.0), mat4x2(1.0), uvec2(1u), mat4x3(1.0)), _GLF_struct_78(true, vec3(1.0)), mat2(1.0), uvec3(1u), mat4(1.0), _GLF_struct_79(1, ivec2(1), uvec2(1u), true, 1u, 1.0, uvec2(1u)), uvec2(1u)), _GLF_struct_85(mat4(1.0), _GLF_struct_81(ivec4(1), mat4x3(1.0), mat4x2(1.0)), _GLF_struct_82(uvec2(1u)), mat2x3(1.0), _GLF_struct_83(mat3x4(1.0), ivec2(1), vec2(1.0), mat4(1.0), uvec2(1u)), mat2(1.0), _GLF_struct_84(mat3x4(1.0), 1u)), _GLF_struct_87(uvec3(1u), _GLF_struct_86(vec3(1.0), gl_SubgroupID)), 1u, _GLF_struct_90(ivec4(1), _GLF_struct_88(ivec2(1), uvec3(1u), 1), uvec3(1u), bvec4(true), _GLF_struct_89(mat4x2(1.0), 1.0, vec3(1.0), ivec3(1), bvec3(true))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z = _GLF_struct_replacement_91._f3._f1.subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) && true)))
      {
       _GLF_struct_replacement_24._f5.GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = subgroup_size;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_98 _GLF_struct_replacement_98 = _GLF_struct_98(_GLF_struct_93(_GLF_struct_92(mat2x4(1.0), ivec2(1), vec3(1.0), vec2(1.0), ivec3(1), bvec2(true)), uvec3(1u), uvec3(1u), 1u), gl_NumWorkGroups.x, _GLF_struct_94(bvec2(true)), bvec4(true), _GLF_struct_97(_GLF_struct_95(vec3(1.0), bvec3(true), uvec2(1u), ivec3(1)), bvec2(true), bvec4(true), _GLF_struct_96(bvec3(true), vec4(1.0), uvec2(1u), mat3(1.0), ivec2(1), uvec3(1u))));
 _GLF_struct_61 _GLF_struct_replacement_61 = _GLF_struct_61(_GLF_struct_59(_GLF_struct_55(mat4x2(1.0)), uvec4(1u), _GLF_struct_56(mat4x2(1.0), ivec4(1), ivec4(1), mat2(1.0)), _GLF_struct_57(uvec3(1u), mat2x3(1.0), vec3(1.0), mat3x2(1.0)), 1.0, _GLF_struct_58(mat3(1.0), ivec4(1), mat2x3(1.0), bvec2(true), uvec3(1u), vec2(1.0)), mat4x3(1.0)), gl_WorkGroupSize.x, _GLF_struct_60(ivec2(1)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_61.workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(7860) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     _GLF_struct_replacement_24._f5.GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = workgroup_base;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(_GLF_struct_119 _GLF_struct_replacement_119 = _GLF_struct_119((int(_GLF_ONE(1.0, injectionSwitch.y)) | (1 | 0)), mat3x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_119._injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _GLF_struct_replacement_119._injected_loop_counter --)
  {
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      barrier();
     barrier();
    }
  }
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(mat4(1.0), _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.z * _GLF_struct_replacement_24._f5.GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, bvec3(true), 1.0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(_GLF_struct_109 _GLF_struct_replacement_109 = _GLF_struct_109(_GLF_struct_103(_GLF_struct_99(vec4(1.0), bvec2(true), ivec2(1), mat2x3(1.0), mat2x3(1.0)), _GLF_struct_100(ivec2(1), ivec3(1), 1u, vec4(1.0)), _GLF_struct_101(0, vec2(1.0)), _GLF_struct_102(bvec2(true))), ivec3(1), uvec3(1u), _GLF_struct_108(_GLF_struct_104(uvec3(1u), mat2x3(1.0), ivec3(1), uvec2(1u), mat3x4(1.0), ivec4(1), mat3x2(1.0)), _GLF_struct_105(mat2x4(1.0), mat3x4(1.0), uvec2(1u)), bvec2(true), _GLF_struct_106(uvec4(1u), mat3x4(1.0), mat4x3(1.0)), mat3x4(1.0), _GLF_struct_107(1, mat3x4(1.0), true, mat3x4(1.0), mat4(1.0), 1, uvec2(1u)), true), mat3x4(1.0), mat3x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_109._f0._f2._injected_loop_counter != 1); _GLF_struct_replacement_109._f0._f2._injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(72947) : int(3))))) | 0)); _injected_loop_counter --)
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_2(mat3x4(1.0), _GLF_struct_0(1, mat3(1.0), bvec4(true), true, bvec3(true)), _GLF_struct_1(bvec4(true), bvec2(true), true, ivec3(1), uvec3(1u), vec2(1.0))), _GLF_struct_5(_GLF_struct_3(ivec3(1), ivec4(1), mat4x2(1.0), mat4x3(1.0), uvec4(1u), uvec2(1u), mat2x3(1.0)), _GLF_struct_4(1, mat3(1.0), vec3(1.0), uvec4(1u), bvec3(true), mat3(1.0), mat2x4(1.0))), _GLF_struct_replacement_24._f5.GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_30.subgroup_base + subgroup_local_id, _GLF_struct_9(_GLF_struct_6(true, mat3x2(1.0), mat4(1.0), ivec4(1)), _GLF_struct_7(mat4x3(1.0), mat3(1.0), uvec2(1u), mat4x2(1.0), ivec3(1)), mat4x3(1.0), mat4x2(1.0), _GLF_struct_8(mat4x2(1.0)), mat2(1.0)));
 uint next_virtual_gid = _GLF_struct_replacement_24._f5.GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_30.subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_24._f5.GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x);
 _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.x = next_virtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(_GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(mat2x3(1.0), _GLF_struct_31(1.0), _GLF_struct_32(ivec4(1), bvec2(true)), mat2(1.0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, ivec3(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_33._injected_loop_counter != 1); _GLF_struct_replacement_33._injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     for(_GLF_struct_53 _GLF_struct_replacement_53 = _GLF_struct_53(_GLF_struct_38(vec3(1.0), ivec2(1), _GLF_struct_34(true, bvec3(true), mat3x4(1.0), bvec2(true), mat4x3(1.0), mat3x4(1.0)), _GLF_struct_35(mat3x2(1.0), bvec4(true), vec4(1.0), bvec2(true), vec2(1.0), bvec3(true), uvec3(1u)), _GLF_struct_36(vec2(1.0), uvec4(1u), true, mat4x3(1.0), mat4x2(1.0)), ivec4(1), _GLF_struct_37(vec3(1.0), vec3(1.0), ivec2(1), bvec3(true), bvec2(true), mat3x2(1.0), mat2x3(1.0))), _GLF_struct_39(mat3(1.0), mat2x3(1.0)), _GLF_struct_43(bvec4(true), _GLF_struct_40(bvec2(true), ivec2(1), vec2(1.0), mat3x4(1.0), vec3(1.0), bvec4(true), vec4(1.0)), _GLF_struct_41(ivec4(1), vec2(1.0), (12707 & 0), uvec2(1u), uvec2(1u)), mat3x4(1.0), _GLF_struct_42(true, mat3x4(1.0)), uvec4(1u), bvec3(true)), _GLF_struct_47(true, _GLF_struct_44(bvec3(true), vec3(1.0), 1.0, mat3x4(1.0), vec4(1.0), mat3x4(1.0), vec4(1.0)), 1.0, _GLF_struct_45(mat3x2(1.0), 1u), _GLF_struct_46(uvec3(1u), mat4(1.0), mat2(1.0)), true), mat2x4(1.0), _GLF_struct_48(1.0, mat4x2(1.0), ivec2(1)), _GLF_struct_52(_GLF_struct_49(mat2x4(1.0), 1.0, bvec4(true), bvec2(true), bvec3(true), ivec4(1), uvec2(1u)), _GLF_struct_50(uvec2(1u), 1, uvec4(1u), mat3(1.0), ivec3(1), mat3(1.0), uvec4(1u)), true, _GLF_struct_51(mat2(1.0), 1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_53._f2._f2._injected_loop_counter < (0 ^ 1)); _GLF_struct_replacement_53._f2._f2._injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       for(_GLF_struct_54 _GLF_struct_replacement_54 = _GLF_struct_54(bvec3(true), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_54._injected_loop_counter != 1); _GLF_struct_replacement_54._injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             for(_GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25((1 ^ 0), mat3x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_25._injected_loop_counter > 0); _GLF_struct_replacement_25._injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -58236)); _injected_loop_counter --)
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               barrier();
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         else
                                          {
                                          }
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     barrier();
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                            }
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               do
                                                {
                                                 barrier();
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                              }
                                             if(_GLF_DEAD(false))
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                {
                                                 barrier();
                                                }
                                               if(_GLF_DEAD(false))
                                                barrier();
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         barrier();
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(_GLF_struct_125 _GLF_struct_replacement_125 = _GLF_struct_125(_GLF_struct_122(1, _GLF_struct_120(ivec4(1), true, mat3x4(1.0), vec2(1.0), mat2x4(1.0), uvec3(1u), mat4(1.0)), mat4(1.0), _GLF_struct_121(vec4(1.0), ivec2(1)), bvec2(true), bvec2(true)), _GLF_struct_124(ivec2(1), _GLF_struct_123(mat4x3(1.0), bvec3(true), bvec3(true), vec3(1.0), true, uvec2(1u), uvec4(1u)), mat3x2(1.0)), (1 & 1), vec4(1.0), uvec3(1u), bvec2(true), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_125._injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(4), int(4))))); _GLF_struct_replacement_125._injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 _GLF_struct_118 _GLF_struct_replacement_118 = _GLF_struct_118(_GLF_struct_114(_GLF_struct_110(bvec4(true)), vec2(1.0), _GLF_struct_111(mat2(1.0), true, bvec4(true), bvec3(true), uvec4(1u)), uvec2(1u), _GLF_struct_112(vec3(1.0), vec3(1.0), 1u, mat4(1.0), vec4(1.0), true, mat4x2(1.0)), uvec2(1u), 0, _GLF_struct_113(bvec4(true), true, mat4(1.0), ivec3(1), uvec2(1u))), _GLF_struct_117(mat4x2(1.0), _GLF_struct_115(mat2x4(1.0), mat4(1.0)), _GLF_struct_116(vec3(1.0), mat3x2(1.0)), mat4x3(1.0)), mat4x2(1.0));
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 | 0))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y = _GLF_struct_replacement_118._f0.read;
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) * 1))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), int(3))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.x], uint(1), 4, 64, 4);
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       do
        {
         if((subgroup_local_id % 2) == 0)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y = atomicLoad(buf[_GLF_struct_replacement_10.virtual_gid], 4, 64, 2);
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(_GLF_struct_133 _GLF_struct_replacement_133 = _GLF_struct_133(_GLF_struct_129(_GLF_struct_126(uvec3(1u), bvec3(true), uvec4(1u)), _GLF_struct_127(mat4x2(1.0), uvec4(1u), bvec2(true)), ivec3(1), _GLF_struct_128(mat4(1.0), mat3x2(1.0))), mat4(1.0), 1, _GLF_struct_132(1, _GLF_struct_130(mat2x4(1.0), vec3(1.0), mat3(1.0), mat2x3(1.0), vec2(1.0), 1.0), _GLF_struct_131(vec2(1.0), mat2x3(1.0)), bvec2(true), 0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_133._f3._injected_loop_counter < 1); _GLF_struct_replacement_133._f3._injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y = atomicLoad(buf[_GLF_struct_replacement_10.virtual_gid], 4, 64, 2);
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               barrier();
                                               if(_GLF_DEAD(false))
                                                barrier();
                                              }
                                             else
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                          }
                                        }
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                                          barrier();
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       do
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                          barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       barrier();
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(_GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(bvec2(true), 0, _GLF_struct_28(_GLF_struct_26(ivec4(1), mat3(1.0), mat4x2(1.0), mat2x3(1.0), mat3x4(1.0), mat2(1.0), mat4x3(1.0)), vec2(1.0), _GLF_struct_27(true, uvec3(1u), bvec4(true), 1, vec2(1.0), uvec3(1u)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_29._injected_loop_counter != 1); _GLF_struct_replacement_29._injected_loop_counter ++)
      {
       atomicStore(checker[_GLF_struct_replacement_10.virtual_gid], _GLF_struct_replacement_13.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadsubgroup_id.y, 4, 64, 4);
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(_GLF_struct_144 _GLF_struct_replacement_144 = _GLF_struct_144(_GLF_struct_135(_GLF_struct_134(ivec3(1), ivec4(1), vec2(1.0), 1), 1, vec4(1.0)), _GLF_struct_141(_GLF_struct_136(1.0, ivec3(1), mat3x4(1.0), mat3(1.0), ivec4(1), mat3x4(1.0)), _GLF_struct_137(mat4x2(1.0), mat2(1.0), vec3(1.0), mat4x3(1.0), mat4x3(1.0)), _GLF_struct_138(vec4(1.0), mat3x2(1.0), mat2x4(1.0), ivec4(1), bvec3(true), mat4x3(1.0)), _GLF_struct_139(1.0, uvec3(1u), bvec2(true), mat2(1.0), vec2(1.0), 1u, mat2(1.0)), _GLF_struct_140(ivec2(1), ivec2(1), ivec4(1), vec2(1.0), vec2(1.0), vec4(1.0), vec3(1.0))), (0 & 9197), _GLF_struct_143(_GLF_struct_142(vec2(1.0), mat2x3(1.0), vec2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_144._injected_loop_counter != (0 | 1)); _GLF_struct_replacement_144._injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(_GLF_struct_145 _GLF_struct_replacement_145 = _GLF_struct_145((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(-98198) : int(7))))), mat4x2(1.0), uvec2(1u), 1u, vec3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_145._injected_loop_counter != 1); _GLF_struct_replacement_145._injected_loop_counter ++)
    {
     for(_GLF_struct_76 _GLF_struct_replacement_76 = _GLF_struct_76(_GLF_struct_62(bvec2(true), ivec4(1), mat4(1.0), ivec2(1), mat3x4(1.0), bvec2(true)), _GLF_struct_67(_GLF_struct_63(uvec4(1u)), _GLF_struct_64(mat4x2(1.0), vec2(1.0), 1.0, uvec2(1u), bvec2(true), mat4x3(1.0)), _GLF_struct_65(mat3x4(1.0), uvec3(1u), ivec2(1)), vec4(1.0), vec4(1.0), _GLF_struct_66(true, uvec3(1u), ivec3(1), ivec3(1), bvec4(true), bvec4(true)), 1, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_struct_69(bvec4(true), _GLF_struct_68(bvec2(true), mat2(1.0), true, mat2x4(1.0), bvec3(true), vec2(1.0)), 1), true, _GLF_struct_73(_GLF_struct_70(uvec2(1u), mat3x2(1.0), ivec4(1)), bvec2(true), _GLF_struct_71(uvec3(1u)), mat4(1.0), _GLF_struct_72(ivec3(1), vec2(1.0))), _GLF_struct_75(_GLF_struct_74(mat4x2(1.0), mat3x4(1.0), uvec2(1u), mat2x4(1.0), vec4(1.0), vec3(1.0)), vec2(1.0)), 1u); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_76._f1._injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _GLF_struct_replacement_76._f1._injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
