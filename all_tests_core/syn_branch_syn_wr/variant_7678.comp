#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (false))))))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(_GLF_IDENTITY(vec4(injectionSwitch[1], 1.0, 1.0, 0.0), (true ? vec4(injectionSwitch[1], 1.0, 1.0, 0.0) : _GLF_FUZZED(vec4(-7412.8448, -944.692, -79.97, 1.7)))))))).x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(_GLF_IDENTITY(vec4(injectionSwitch[1], 1.0, 1.0, 0.0), (true ? vec4(injectionSwitch[1], 1.0, 1.0, 0.0) : _GLF_FUZZED(vec4(-7412.8448, -944.692, -79.97, 1.7)))))))).x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) && (injectionSwitch.x < injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch[1] : _GLF_FUZZED(-1.5))))).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 & 19907); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) - 0.0) > injectionSwitch.y)))), false || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), min(float(vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(float(vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), (float(vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) - _GLF_ZERO(0.0, injectionSwitch.x))))) > injectionSwitch.y) && true)))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (! (true))))) || false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))) || (false))))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = (0 & (- (-54014 & 92415))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
    }
   else
    {
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), 0u ^ (~ (gl_NumWorkGroups.x)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << 0) << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))) >> 0))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), true))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true, false))))
        {
         do
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))) - 0))
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u)))) / 1u))) + 1, 0u), uvec2(uvec4(uvec2(subgroup_local_id + 1, 0u), 0u, 0u)))))) % subgroup_size), uint(uint(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u)))) / 1u))) + 1, 0u), uvec2(uvec4(uvec2(subgroup_local_id + 1, 0u), 0u, 0u)))))) % subgroup_size)))), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), 0u))), 0u, 1u, 1u))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) / 1u)) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))) % subgroup_size), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-50354) : 1))), (int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-50354) : 1)))) | (0 | 0))), (int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-50354) : _GLF_IDENTITY(1, (1) + 0)))))) / 1)), 0u)))) % subgroup_size)))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (64)), (false ? _GLF_FUZZED((-71836 & 57876)) : (~ (64)))), (_GLF_IDENTITY(~ (~ (64)), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0))))), min(int(ivec4((_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0, 0, 1)))), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2))))))), max((_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0))))), min(int(ivec4((_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0, 0, 1)))), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0))))), min(int(ivec4((_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0, 0, 1)))), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2))))))), clamp((_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0))))), min(int(ivec4((_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0, 0, 1)))), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2))))))), (_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0))))), min(int(ivec4((_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0, 0, 1)))), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2))))))), (_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0), ~ (~ (ivec4(_GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), ivec3(ivec4(ivec3(_GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(-4798) : (int(2))))) >> (0 | 0)), 0, 0), 1))))), 1, 1, 0))))), min(int(ivec4((_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0, 0, 1)))), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2)))))))))))), (~ (~ (_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (64), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4((int(_GLF_IDENTITY(2, (2) / 1))), 1, 1, 0)), min(int(ivec4((int(2)), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), int(2))))))))) | (~ (~ (_GLF_IDENTITY(~ (~ (64)), int(ivec3(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, min(64, 64))), (~ (64)) - 0)), 0, ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4((int(2)), 1, 1, 0)), min(int(ivec4((int(2)), 1, 1, 0)), int(ivec4((int(2)), 1, 1, 0)))), int(ivec4(int(ivec4((int(2)), 1, 1, 0)), 0, 0, 0))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) * 1)))))))))))) >> 0)), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(826.182)), bvec2(true, false))).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED(2.1), _GLF_FUZZED(-824.217)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec4((injectionSwitch)[1], sin(0.0), 1.0, 1.0)))), bvec2(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec2(! (_GLF_WRAPPED_LOOP(false)), true))))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ((false)) || false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), false, true, true)), (_GLF_IDENTITY(bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), false, true, true)), false || (bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), false, true, true))))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))))))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), max(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(float(76282)))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.1)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))), 0.0, 1.0, 1.0, 1.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))) - 0.0))))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((bvec4(true, false, true, false).a ? vec2(-7.7, 746.053) : vec2(-7.2, 1.9)))), ((_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, log(round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, _GLF_IDENTITY(dot(vec3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))) < injectionSwitch.y)))), false || (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((bvec4(true, false, _GLF_IDENTITY(true, (true) || false), false).a ? vec2(-7.7, 746.053) : vec2(-7.2, 1.9))))) - vec2(0.0, 0.0))).x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, false)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bool(true))), false))) || false))) || false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_IDENTITY(true, ! (! (true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), false, true, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), false, true, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), false, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), false, true, false))))))), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 96.12))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(atanh(vec2(0.6, -3401.4305))))).y, ! (! (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false))))))))))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), false, true, false))))), false))), bool(bool(! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2((_GLF_FUZZED(injectionSwitch))[0], (_GLF_FUZZED(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2640.9972), _GLF_FUZZED(vec3(6.0, -0.3, -8.1).s)), bvec2(false, false))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2((_GLF_FUZZED(injectionSwitch))[0], (_GLF_FUZZED(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2640.9972), _GLF_FUZZED(vec3(6.0, -0.3, -8.1).s)), bvec2(false, false)))) * mat2(1.0), ((true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2((_GLF_FUZZED(injectionSwitch))[0], (_GLF_FUZZED(injectionSwitch))[1]), vec2(_GLF_FUZZED(-2640.9972), _GLF_FUZZED(vec3(6.0, -0.3, -8.1).s)), bvec2(false, false)))) * mat2(1.0)) - vec2(0.0, 0.0))))).x > injectionSwitch.y))), false, true, false))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x), float(_GLF_FUZZED(5419.4815)), bool(false))) > injectionSwitch.y))), false, true, false))))), false)))))))))) && true)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-47580) : int(0))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false), false, false, true))), ((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))) || false) || false))))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))))))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(4.3, -2514.6134, 147.992).t), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-132.349)), bvec2(true, false)))) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))) * 1u) - 0u), subgroup_size))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (false))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -39444) | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (true) || false), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false)))) && true)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))), injectionSwitch)).x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), ! (! ((! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), clamp(mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), 1.0 * (mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false))))))), 0.0, 1.0, 1.0)), max(float(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false))), 0.0, 1.0, 1.0)), float(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false))), 0.0, 1.0, 1.0)))))), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), min(float(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), float(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0)))))), 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(50738u))), float(0.0), bool(true))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (1.0) / abs(1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3208.0987)), float(0.0), bool(true)))) * determinant(mat2(1.0, 0.0, length(vec2(0.0, 0.0)), 1.0))), 1.0, 1.0)))), (true ? _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) : _GLF_FUZZED(mat3(-9.1, 66.87, -668.786, -3040.8165, -9.8, 715.701, -835.815, -55.33, -6.3))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0), 0.0, 1.0))), mix(float(_GLF_FUZZED(-0.8)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0)))), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.3, -246.365)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-90.33), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4639.2548)), bvec2(true, false))))).x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, 0.0)), (float(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, 0.0))) - 0.0)), 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)), (false ? _GLF_FUZZED((false ? -0.0 : -7.1)) : _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(-98.94)), float(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))), bool(true))))))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * (injectionSwitch)).x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), min(float(_GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0))), (false ? _GLF_FUZZED(atan(vec4(-14.01, 2.8, 6.5, -23.62).wzzw)) : _GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0))))))))), 1.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(mat4(_GLF_IDENTITY(vec4(tan(0.0), 0.0, 0.0, 1.0), mix(vec4(_GLF_FUZZED(vec3(2137.1071, 6.1, -8.8).g), _GLF_FUZZED(float(-73699)), (vec4(tan(0.0), 0.0, 0.0, 1.0))[2], (vec4(tan(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), max(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), (true ? float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))) : _GLF_FUZZED(-7.3)))))), 0.0, 1.0))[3]), vec4((vec4(tan(0.0), 0.0, 0.0, 1.0))[0], (vec4(tan(0.0), 0.0, 0.0, 1.0))[1], _GLF_FUZZED(float(196107u)), _GLF_FUZZED(vec2(767.237, -779.669).g)), bvec4(true, true, false, false))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, abs(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, 1.0, length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.7) : 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, abs(0.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, abs(0.0))), (true ? dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, abs(0.0))) : _GLF_FUZZED(825.662))))), 0.0, 1.0, 0.0), vec4(log(1.0), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(log(1.0), 0.0, 1.0, 0.0))))), (true ? float(mat2x4(1.0, 0.0, 1.0, length(_GLF_IDENTITY(vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) + vec2(0.0, 0.0)), vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(log(1.0), 0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), (vec4(0.0, 0.0, 1.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(log(1.0), 0.0, 1.0, 0.0))))) : _GLF_FUZZED(269.016)))))))), 1.0, 0.0))), abs(0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5662.7933)))))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))))))))))) && true), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-8748.9947), (true ? _GLF_FUZZED(-8748.9947) : _GLF_FUZZED(-4.0)))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (true)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1161.8524) : 1.0)))), float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * _GLF_IDENTITY(determinant(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, abs(1.0))), (false ? _GLF_FUZZED(-29.17) : determinant(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0)))))))), 1.0, 0.0), (vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, abs(1.0)))), 1.0, 0.0)) + vec4(0.0, 0.0, 0.0, 0.0)))), abs(0.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.3) : 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.9)), bool(false))), 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.9)), bool(false))))), 0.0)), 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-8748.9947)), float(float(_GLF_IDENTITY(float(_GLF_FUZZED(-8748.9947)), round(length(normalize(1.0))) * (float(_GLF_FUZZED(-8748.9947))))))), float(injectionSwitch.y), bool(true)))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))))))))))) && true), true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))), 1.0, determinant(mat2(1.0, tan(0.0), log(1.0), 1.0)), 0.0)))))))) && true)))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), ! (! ((! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), clamp(mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false)), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), 1.0 * (mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false))))))), 0.0, 1.0, 1.0)), max(float(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(10.11)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0)), float(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(10.11), mix(float(_GLF_FUZZED(10.11)), float(_GLF_FUZZED((-1.3))), bool(false)))), bool(false))), 0.0, 1.0, 1.0)))))), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(_GLF_IDENTITY(0.0, (0.0) / 1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-29.37, -2403.2707, -1.1))))), float(mat3x2(float(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-29.37, -2403.2707, -1.1))))), 1.0, 0.0, 1.0, 0.0, 0.0))))), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), min(float(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), float(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7629.4303)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, (1.0) / 1.0)))))), 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(50738u))), float(0.0), bool(true))), 1.0, _GLF_IDENTITY(0.0, (0.0) * determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-898.351)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (1.0) / abs(1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true))), _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3208.0987)), float(0.0), bool(true)))) * determinant(mat2(1.0, 0.0, length(vec2(0.0, 0.0)), 1.0))), 1.0, 1.0)))), (true ? _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) : _GLF_FUZZED(mat3(-9.1, 66.87, -668.786, -3040.8165, -9.8, 715.701, -835.815, -55.33, -6.3))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).y), bool(true)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.7) : 1.0)))), float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0), 0.0, 1.0))), mix(float(_GLF_FUZZED(-0.8)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0)))), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.3, -246.365)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2508.4708), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(7.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), mix(vec2(_GLF_FUZZED(-90.33), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4639.2548)), bvec2(true, false))))).x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(862.470)), bool(false))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(369.211) : 1.0)))), 1.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))), mix(float(_GLF_FUZZED(-49.82)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), bool(true))), 0.0, 0.0, 0.0)), (float(vec4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, 0.0))) - 0.0)), 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED((false ? -0.0 : -7.1)) : _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(-98.94)), float(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))), bool(true))))))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * (injectionSwitch)).x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), min(float(_GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, -4.0, 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0))), (false ? _GLF_FUZZED(atan(vec4(-14.01, 2.8, 6.5, -23.62).wzzw)) : _GLF_IDENTITY(vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9.5, 7.0, _GLF_IDENTITY(-4.0, min(-4.0, -4.0)), 13.67)) : vec4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0))))))))), 1.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(mat4(_GLF_IDENTITY(vec4(tan(0.0), 0.0, 0.0, 1.0), mix(vec4(_GLF_FUZZED(vec3(2137.1071, 6.1, -8.8).g), _GLF_FUZZED(float(_GLF_IDENTITY(-73699, clamp(_GLF_IDENTITY(-73699, max(-73699, -73699)), -73699, -73699)))), (vec4(tan(0.0), 0.0, 0.0, 1.0))[2], (vec4(tan(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), (true ? float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))) : _GLF_FUZZED(-7.3)))), mix(float(_GLF_IDENTITY(max(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), (true ? float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))) : _GLF_FUZZED(-7.3)))), float(mat2(max(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))), (true ? float(_GLF_IDENTITY(vec2(0.0, 0.0), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))) : _GLF_FUZZED(-7.3)))), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), float(_GLF_FUZZED(-8377.9402)), bool(false))))), 0.0, 1.0))[3]), vec4(_GLF_IDENTITY((vec4(tan(0.0), 0.0, 0.0, 1.0))[0], max((vec4(tan(0.0), 0.0, 0.0, 1.0))[0], _GLF_IDENTITY((vec4(tan(0.0), 0.0, 0.0, 1.0))[0], (true ? (vec4(tan(0.0), 0.0, 0.0, 1.0))[0] : _GLF_FUZZED(9102.7692))))), (vec4(tan(0.0), 0.0, 0.0, 1.0))[1], _GLF_FUZZED(float(196107u)), _GLF_FUZZED(vec2(_GLF_IDENTITY(767.237, (767.237) * round(length(normalize(vec3(1.0, 1.0, 1.0))))), -779.669).g)), bvec4(true, true, false, false))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, abs(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, 1.0, length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.7) : 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-550.929) : 0.0)))), 1.0, abs(0.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, abs(0.0))), (true ? dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(float(mat2x4(abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (float(mat2x4(abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))) - 0.0)))) : _GLF_FUZZED(825.662))))), 0.0, 1.0, 0.0), vec4(log(1.0), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(log(1.0), 0.0, 1.0, 0.0))))), (true ? float(mat2x4(1.0, 0.0, 1.0, length(_GLF_IDENTITY(vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) + vec2(0.0, 0.0)), vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(0.3)))), vec4(log(1.0), 0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), (vec4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 1.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)), vec4(log(1.0), 0.0, 1.0, 0.0))))) : _GLF_FUZZED(269.016)))))))), 1.0, 0.0))), abs(0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5662.7933)))))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-32.42)), bool(false))))), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), transpose(transpose(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))))))))))) && true), true, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), (bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-58.94)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.5)), float(injectionSwitch.y), bool(true)))), bool(true))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-8748.9947), (true ? _GLF_FUZZED(-8748.9947) : _GLF_FUZZED(-4.0)))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (true)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1161.8524) : 1.0)))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(7.0)), float(mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(tan(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-993.455)), bool(false))), 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * _GLF_IDENTITY(determinant(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, abs(1.0))), (false ? _GLF_FUZZED(-29.17) : determinant(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0)))), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0)))))))))), 1.0, 0.0), (vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, abs(1.0)))), 1.0, 0.0)) + vec4(0.0, 0.0, 0.0, 0.0)))), abs(0.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.3) : 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.9)), bool(false))), 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.9)), bool(false))))), 0.0)), 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-8748.9947)), float(float(_GLF_IDENTITY(float(_GLF_FUZZED(-8748.9947)), round(length(normalize(1.0))) * (float(_GLF_FUZZED(-8748.9947))))))), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))), 1.0 * (_GLF_IDENTITY(dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(tan(0.0), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * determinant(mat2(1.0, 0.0, 0.0, abs(1.0)))), 1.0, 0.0))))))), abs(0.0), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8748.9947)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (_GLF_IDENTITY(true, true && (true)))))))))))))))))) && true), true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6.3, 3.5)))).y, float(vec2(injectionSwitch.y, 0.0))), 1.0, determinant(mat2(1.0, tan(0.0), log(1.0), 1.0)), 0.0)))))))) && true))))))))))) && true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           else
            {
            }
           int i = 0;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) ^ 0u), 4, 64, 4);
            }
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), min(0 >> _GLF_IDENTITY(int(6), int(6)), 0 >> _GLF_IDENTITY(int(6), int(6)))), 0 + (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, ((55180u + 60285u) & _GLF_IDENTITY(0u, min(0u, 0u))) ^ (read)), 4, 64, _GLF_IDENTITY(4, int(ivec2(4, 0))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(85621)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)).x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(true, (true) && true))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
}
