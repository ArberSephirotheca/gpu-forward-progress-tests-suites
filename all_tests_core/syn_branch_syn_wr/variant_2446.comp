#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 bvec3 _f0;
 vec4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 uvec4 _f1;
 bool _f2;
 int _f3;
 vec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 int _f1;
 _GLF_struct_14 _f2;
} ;

struct _GLF_struct_11 {
 ivec4 _f0;
 bool _f1;
 vec4 _f2;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 bool _f1;
 mat3x4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 uvec4 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_8 {
 bvec2 _f0;
 mat3 _f1;
 ivec3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_7 _f0;
 uint subgroup_local_id;
 _GLF_struct_9 _f1;
 _GLF_struct_12 _f2;
 uint _f3;
 uvec3 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 mat2x3 _f1;
 mat3 _f2;
 mat3 _f3;
 bool _f4;
 uint _f5;
 uint _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 mat2x3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 int _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat2x3 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_5 {
 uint subgroup_base;
 _GLF_struct_2 _f0;
 uvec4 _f1;
 mat4x2 _f2;
 _GLF_struct_4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid;
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size;
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -54635)); _injected_loop_counter --)
  {
   GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x = subgroup_size;
  }
 GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.y = GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_7(_GLF_struct_6(mat4x2(1.0)), mat2x3(1.0)), gl_SubgroupInvocationID, _GLF_struct_9(_GLF_struct_8(bvec2(true), mat3(1.0), ivec3(1), mat4(1.0)), mat4x3(1.0)), _GLF_struct_12(_GLF_struct_10(ivec2(1), true, mat3x4(1.0), ivec3(1)), uvec4(1u), _GLF_struct_11(ivec4(1), true, vec4(1.0))), 1u, uvec3(1u), _GLF_struct_15(_GLF_struct_13(ivec4(1), uvec4(1u), true, 1, vec3(1.0), vec3(1.0)), 1, _GLF_struct_14(bvec3(true), vec4(1.0), mat3x4(1.0))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.x = num_workgroup;
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y = workgroup_id;
 GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.w = GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y;
 uint workgroup_base = GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.z * GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.w;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base;
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_struct_2(_GLF_struct_0(mat3x4(1.0), 1), mat2x3(1.0), _GLF_struct_1(uvec3(1u), mat2x3(1.0), mat2x3(1.0))), uvec4(1u), mat4x2(1.0), _GLF_struct_4(_GLF_struct_3(bvec3(true), mat2x3(1.0), mat3(1.0), mat3(1.0), true, 1u, 1u), ivec4(1)));
 uint virtual_gid = GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.z + _GLF_struct_replacement_5.subgroup_base + _GLF_struct_replacement_16.subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.z + _GLF_struct_replacement_5.subgroup_base + ((_GLF_struct_replacement_16.subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12num_workgroupsubgroup_sizeworkgroup_baseworkgroup_id.y);
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.x = GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.w;
 uint read = 0;
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.y = read;
 atomicStore(buf[GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.x], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if((_GLF_struct_replacement_16.subgroup_local_id % 2) == 0)
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.y = atomicLoad(buf[virtual_gid], 4, 64, 2);
      }
    }
   else
    {
     GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.y = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))))
  {
   subgroupBarrier();
  }
 else
  {
  }
 atomicStore(checker[virtual_gid], GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_sizenext_virtual_gid.xyz.y, 4, 64, 4);
}
