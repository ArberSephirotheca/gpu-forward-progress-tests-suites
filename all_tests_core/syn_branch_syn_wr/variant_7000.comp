#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))) && true)))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-4.0), (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-4.0), mix(float(_GLF_FUZZED(-3302.8226)), float(true ? injectionSwitch.y : _GLF_FUZZED(-4.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) + 0.0))), 1.0)))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5505.1147) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-851.797)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), max((injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), (false ? _GLF_FUZZED(log2(injectionSwitch)) : (injectionSwitch) / vec2(1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)), true, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec2((! (_GLF_DEAD(false))), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(69.72)))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))), _GLF_IDENTITY(((! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true, ! (! (((! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true)))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-41458, (-41458) | (_GLF_IDENTITY(-41458, min(-41458, -41458)))) & 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))) && true, ! (! ((_GLF_IDENTITY(false, bool(bool(false)))) && true))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u)) | _GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), 0u ^ ((subgroup_size))), _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), uint(uvec3((subgroup_local_id), 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id)))))))), 0u + (~ (~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), uint(uvec3((subgroup_local_id), 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id))))))))))) + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), uint(uvec3((subgroup_local_id), 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id))))))))) + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size) * 1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(0), 1), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) && true))) && true) ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | 0)))), 1), ivec2(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), 1), ivec2(int(0), 1)))), ((false ? _GLF_IDENTITY(_GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)), (false ? _GLF_FUZZED(ivec2(94414, 99142)) : _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)))) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))) | ivec2(0, 0))), (false ? _GLF_FUZZED(ivec2(-42746, -36443)) : _GLF_IDENTITY(ivec2(int(0), 1), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true) ? _GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(ivec2(-96873, 6533), (ivec2(-96873, 6533)) - ivec2(0, 0)) ^ -60843)), (_GLF_FUZZED((ivec2(-96873, 6533) ^ -60843))) / ((ivec2(1, 1) << _GLF_IDENTITY(ivec2(1), ivec2(1))) >> _GLF_IDENTITY(ivec2(1), ivec2(1)))) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(_GLF_IDENTITY(ivec2(int(0), 1), ivec2(0, 0) | (ivec2(int(0), 1))), ivec2(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), 1), ivec2(int(0), 1)))), ((false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))) | ivec2(0, 0)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(0), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED((_GLF_IDENTITY(ivec2(-96873, 6533) ^ -60843, min(ivec2(-96873, 6533) ^ -60843, _GLF_IDENTITY(_GLF_IDENTITY(ivec2(-96873, 6533) ^ -60843, max(ivec2(-96873, 6533) ^ -60843, ivec2(-96873, 6533) ^ -60843)), min(_GLF_IDENTITY(ivec2(-96873, 6533) ^ -60843, max(ivec2(-96873, 6533) ^ -60843, ivec2(-96873, 6533) ^ -60843)), _GLF_IDENTITY(ivec2(-96873, 6533) ^ -60843, max(ivec2(-96873, 6533) ^ -60843, ivec2(-96873, 6533) ^ -60843)))))))) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), _GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) | (ivec2(int(0), 1))), ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) ^ 0), _GLF_IDENTITY(0, (0) - 0)))))), 1))))), (_GLF_IDENTITY(ivec2(int(0), _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), max(1, _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, clamp(0, 0, 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true))))), (false) || false) ? _GLF_FUZZED((ivec2(_GLF_IDENTITY(-96873, (-96873) | 0), 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), _GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) | (ivec2(int(0), 1))), ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(67890) : _GLF_IDENTITY(0, (0) + 0)))))), (0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) ^ 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, max((0) - 0, (0) - 0)))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(67890) : _GLF_IDENTITY(0, (0) + 0)))))), (0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) ^ 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, max((0) - 0, (0) - 0)))))))))), _GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) | (_GLF_IDENTITY(ivec2(int(0), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), _GLF_IDENTITY(ivec2(int(0), 1), _GLF_IDENTITY((ivec2(int(0), 1)) | (ivec2(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED((-- _injected_loop_counter)) : 1)))), ((ivec2(int(0), 1)) | (ivec2(int(0), 1))) / ivec2(1, 1))), ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) ^ 0), _GLF_IDENTITY(0, (0) - 0)))))), 1))))))))) << 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(0), 1), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, true)))))) ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))), ivec2(0, 0) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))), (false ? _GLF_FUZZED(ivec2(56080, 54512)) : _GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1)), (clamp(ivec2(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))), 1), ivec2(int(0), 1), _GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) ^ ivec2(0, 0)))) << _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(ivec2(0, 0), ~ (~ (ivec2(0, 0))))) | (ivec2(0, 0)))))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))), (false ? _GLF_FUZZED(ivec2(56080, 54512)) : _GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1)), (clamp(ivec2(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))), 1), ivec2(int(0), 1), _GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) ^ ivec2(0, 0)))) << _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(ivec2(0, 0), ~ (~ (ivec2(0, 0))))) | (ivec2(0, 0))))))))))))), ivec2(ivec3(~ ((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))), (false ? _GLF_FUZZED(ivec2(56080, 54512)) : _GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED((ivec2(-96873, 6533) ^ -60843)) : _GLF_IDENTITY(ivec2(int(0), _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1)), (clamp(ivec2(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))), 1), ivec2(int(0), 1), _GLF_IDENTITY(ivec2(int(0), 1), (ivec2(int(0), 1)) ^ ivec2(0, 0)))) << _GLF_IDENTITY(ivec2(0, 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(0, 0), (_GLF_IDENTITY(ivec2(0, 0), ~ (~ (ivec2(0, 0))))) | (ivec2(0, 0))))))))))))), 0))))))), (int(_GLF_IDENTITY(ivec2(int(0), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(-96873, 6533) ^ -60843, (ivec2(-96873, 6533) ^ -60843) >> (ivec2(0, 0) | ivec2(0, 0)))), (true ? (_GLF_IDENTITY(ivec2(-96873, 6533) ^ -60843, (ivec2(-96873, 6533) ^ -60843) >> (ivec2(0, 0) | ivec2(0, 0)))) : _GLF_FUZZED(ivec2(-98053, -88094))))) : _GLF_IDENTITY(ivec2(int(0), 1), clamp(ivec2(int(0), 1), ivec2(int(0), 1), ivec2(int(0), 1))))))) << 0)) << 0)), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED((742.997 - -9.3))), bool(false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), _GLF_IDENTITY(int(1), 0 ^ (int(1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) - 0u), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), min(_GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(mat3x4(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), _GLF_IDENTITY(clamp(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), (_GLF_IDENTITY(true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, _GLF_IDENTITY(-8.7, min(-8.7, _GLF_IDENTITY(-8.7, mix(float(_GLF_FUZZED(0.6)), float(-8.7), bool(true))))), -7.5, 1.1, 2.3))))) : _GLF_FUZZED(-41.62), clamp(true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, _GLF_IDENTITY(-8.7, min(-8.7, _GLF_IDENTITY(-8.7, mix(float(_GLF_FUZZED(0.6)), float(-8.7), bool(true))))), -7.5, 1.1, 2.3))))) : _GLF_FUZZED(-41.62), true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, _GLF_IDENTITY(-8.7, min(-8.7, _GLF_IDENTITY(-8.7, mix(float(_GLF_FUZZED(0.6)), float(-8.7), bool(true))))), -7.5, 1.1, 2.3))))) : _GLF_FUZZED(-41.62), true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, _GLF_IDENTITY(-8.7, min(-8.7, _GLF_IDENTITY(-8.7, mix(float(_GLF_FUZZED(0.6)), float(-8.7), bool(true))))), -7.5, 1.1, 2.3))))) : _GLF_FUZZED(-41.62))))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3)))))), max(clamp(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), (true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))) : _GLF_FUZZED(-41.62))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3)))))), clamp(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))), (true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3))))) : _GLF_FUZZED(-41.62))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(27.24, -4147.4990, -8.7, -7.5, 1.1, 2.3)))))))))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-460) : int(5)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), min(int(4), int(4)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), ((int(_GLF_ONE(1.0, injectionSwitch.y)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y))))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), max((int(_GLF_ONE(1.0, injectionSwitch.y))), (int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), 0, 1, 1)))); _injected_loop_counter --)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y)), (false ? _GLF_FUZZED(-2648.1063) : injectionSwitch.y))))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0)), dot(vec3(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.2))), 0.0, 0.0, 0.0)), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0))), injectionSwitch.x) + (injectionSwitch.y)), (false ? _GLF_FUZZED(-2648.1063) : injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) * 1)) << 0), (0 << _GLF_IDENTITY(int(1), int(1))) / ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) / ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) : _GLF_FUZZED(_injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(_GLF_IDENTITY(bool(bool(false)), bool(bvec2(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true), true))), false))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false))))))))), true && ((_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), false))))))))), true && ((_GLF_DEAD(false)))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       int i = 0;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(true)))))), false), true, true)))))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0)), float(vec2(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0)), 1.0)))))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              barrier();
            }
           else
            {
             atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) | 0u)) >> 0u), uint(uvec4(read, 1u, 0u, 0u)))) - 0u), 4, _GLF_IDENTITY(64, 0 ^ (64)), 4);
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = ((1 | 1) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y))))))), true && ((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.2), min(_GLF_FUZZED(4.2), _GLF_FUZZED(4.2))) : _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)))))))))))))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0)), clamp(float(mat2x3(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 0.0, 1.0)), float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))))) < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.4))) > injectionSwitch.y) || false)) || false)))))
                                barrier();
                               barrier();
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != ((84199 / 93659) & 0)); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-337.904)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, true, true)), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, true, true)))))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), (bool(bvec4(false, true, true, true))) || false))))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-562.634) : injectionSwitch.x)) > injectionSwitch.y))))
                                  barrier();
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) >> 0)), (~ (_GLF_IDENTITY(1, (1) >> 0))) | 0))))); _injected_loop_counter ++)
                                  {
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                }
                              }
                             barrier();
                            }
                          }
                        }
                      }
                    }
                   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9139.0696)), bool(false))))).y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 do
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false))), bool(bool(false)))))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bool(_GLF_DEAD(false)))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7710.7794))) > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))).y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(mat3(vec4(injectionSwitch.y, 1.0, 0.0, 0.0), 1.0, 1.0, sqrt(1.0), sin(0.0), 1.0), (mat3(vec4(injectionSwitch.y, 1.0, 0.0, 0.0), 1.0, 1.0, sqrt(1.0), sin(0.0), 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((1981.0723 + 3503.7361))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(2.2)), float(float(mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), bool(true))))), bool(true))))))))))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! ((true) || false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (true) || false)))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), max(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1)))) / 1)); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false)), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false))) || false))), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false))) || false))), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false))) || false))), false, true)), true && (bool(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(vec3(-1561.4632, 7069.3746, -1.1).t))), injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false))) || false))), false, true))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, ~ (~ (4)))))), max((4), _GLF_IDENTITY((4), ~ (~ ((4))))))))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)), 4))))))), 64, 4);
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
