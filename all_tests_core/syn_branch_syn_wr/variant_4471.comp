#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(1u * _GLF_IDENTITY((subgroup_id), ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u))) >> 0u), ~ (~ (_GLF_IDENTITY(1u * _GLF_IDENTITY((subgroup_id), ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u))) >> 0u), ~ (~ (1u * _GLF_IDENTITY((subgroup_id), ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u, min((_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u))) | ((_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) | 0u))))) >> 0u))))))))) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))) * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), uint(uvec3((workgroup_base), 1u, 1u))))), workgroup_base)))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((subgroup_local_id + 1))) + 0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), _GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, ~ (~ (((subgroup_local_id + 1)) - 0u))), 0u)), (uint(uvec2(_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, ~ (~ (((subgroup_local_id + 1)) - 0u))), 0u))) >> 0u)))), ~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)), ~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-98783) : 1))) | 0)), ((subgroup_local_id + 1)) - 0u)))))))) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), _GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, ~ _GLF_IDENTITY((~ (((subgroup_local_id + 1)) - 0u)), max(_GLF_IDENTITY((~ (((subgroup_local_id + 1)) - 0u)), ((~ (((subgroup_local_id + 1)) - 0u))) + 0u), _GLF_IDENTITY((~ (((subgroup_local_id + 1)) - 0u)), 1u * (_GLF_IDENTITY((~ (((subgroup_local_id + 1)) - 0u)), ((~ (((subgroup_local_id + 1)) - 0u))) >> 0u)))))), 0u)), (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, min(((subgroup_local_id + 1)) - 0u, _GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, (((subgroup_local_id + 1)) - 0u) | (((subgroup_local_id + 1)) - 0u)))), ~ (~ (((subgroup_local_id + 1)) - 0u))), 0u))) >> 0u)))), ~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)), ~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-98783) : 1))) | 0)), ((subgroup_local_id + 1)) - 0u)))))))) + 0u) - 0u), _GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1)))) - 0u) + 0u, (subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, (1) | (1))))) + 0u), max(min((_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) + 1) + 0u, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1), (ivec3(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(1, (1) >> 0))) * ivec3(1, 1, 1))), clamp(int(_GLF_IDENTITY(ivec3(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1), (ivec3(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)) * ivec3(1, 1, 1))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, 0 ^ (0)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1), (ivec3(0, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) << 0)) ^ 0), int(2), int(2))), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)) * ivec3(1, 1, 1))), int(_GLF_IDENTITY(ivec3(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1), (ivec3(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)) * ivec3(1, 1, 1)))))))) + 0u, max((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)) + 0u, (subgroup_local_id + _GLF_IDENTITY(1, (1) + 0)) + 0u))), _GLF_IDENTITY(min((subgroup_local_id + 1) + _GLF_IDENTITY(0u, (0u) | 0u), (subgroup_local_id + 1) + _GLF_IDENTITY(0u, (0u) >> (0u | 0u))), (min(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) + 0u, (subgroup_local_id + 1) + 0u)) << 0u))))) ^ 0u))) % subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))) ^ (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, min(8u, 8u)))))), (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))) ^ 0u))) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, _GLF_IDENTITY(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), uint(_GLF_IDENTITY(uvec3(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) / 1.0)))), (uvec3(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * uvec3(1u, 1u, 1u)))))) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY((0u | 0u), uint(uint((0u | 0u)))) | (_GLF_IDENTITY(0u, (0u) << 0u)))))), min((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, _GLF_IDENTITY(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), clamp(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), _GLF_IDENTITY(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), max(_GLF_IDENTITY(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u), uint(uint(min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u)))), min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))), min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u), subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) + 0u, (true ? (subgroup_local_id + 1) + 0u : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))) + 0u, min((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) + 0u, (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7475, 0 | (-7475))), (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7475, 0 | (-7475)))) / 1)))) + 0u))), max((_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 0u, (subgroup_local_id + 1) + 0u))), (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))))) ^ 0u))))) % subgroup_size) | (0u | 0u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))) ^ 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) + 0u))) ^ 0u))) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))) % subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))) ^ 0u)), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + 0u, (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) + 0u))) ^ 0u))) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u))))) % subgroup_size) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, (0u & 149162u), 0u)), ~ (~ (uint(uvec3(0u, (0u & 149162u), 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u)), max(_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u)), _GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))))) >> 0u)) ^ 0u))) % subgroup_size, 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, (0u & 149162u), 0u)), ~ _GLF_IDENTITY((~ (uint(uvec3(0u, (0u & 149162u), 0u)))), clamp(_GLF_IDENTITY((~ (uint(uvec3(0u, (0u & 149162u), 0u)))), 0u + ((~ (uint(uvec3(0u, (0u & 149162u), 0u)))))), (~ (uint(uvec3(0u, (0u & 149162u), 0u)))), (~ (uint(uvec3(0u, (0u & 149162u), 0u)))))))), (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))) ^ 0u))) % subgroup_size, uint(uvec4((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) + _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, (0u & 149162u), 0u)), ~ (~ (uint(uvec3(0u, (0u & 149162u), 0u)))))), (_GLF_IDENTITY((subgroup_local_id + 1) + 0u, min((subgroup_local_id + 1) + 0u, (subgroup_local_id + 1) + 0u))) ^ 0u))) % subgroup_size, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))), (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u)))))) | (0u | 0u)))) >> 0u))));
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) - 0u) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)]) ^ 0u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))))), (uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))))))) | (uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))))))))), (true ? uint(uint(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), clamp(uint(7u), uint(7u), uint(7u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), 0u)))))))))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))))), (uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))))))) << 0u)) | (uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) ^ 0u, ((buf[virtual_gid]) ^ 0u) / 1u))), ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u))) | ((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)))))))))) : _GLF_FUZZED(149090u))))), _GLF_IDENTITY((~ (buf[virtual_gid])), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) | ((~ (buf[virtual_gid])))) | (~ (buf[virtual_gid])))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], 0u ^ (buf[virtual_gid])))), uint(uvec2(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), _GLF_IDENTITY(0u, (0u) / (1u | 0u)) + (_GLF_IDENTITY(min(virtual_gid, virtual_gid), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((min(virtual_gid, virtual_gid)), ((min(virtual_gid, virtual_gid))) + 0u), (~ (min(virtual_gid, virtual_gid))) - 0u)))))), _GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))))], 0u))))) | _GLF_IDENTITY((~ (buf[virtual_gid])), ((~ (buf[virtual_gid]))) - 0u))), 0u, 0u, 0u)), uint(uvec2(uint(uvec4(~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (~ (_GLF_IDENTITY(buf[virtual_gid], uint(uvec2(buf[virtual_gid], 0u))))) | (~ (buf[virtual_gid])))), 0u, 0u, 0u)), 0u))), min(uint(uvec4(~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (~ (buf[virtual_gid])) | (~ (buf[virtual_gid])))), 0u, 0u, 0u)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))) | (~ (buf[virtual_gid])))), (~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))) | (~ (buf[virtual_gid]))))) | (~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ _GLF_IDENTITY((~ (buf[virtual_gid])), uint(uvec3((~ (buf[virtual_gid])), 1u, 0u)))))) | (~ (buf[virtual_gid])))))), 0u, 0u, _GLF_IDENTITY(0u, (0u) - 0u)), min(uvec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))) | (~ (buf[virtual_gid])))), (~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))) | (~ (buf[virtual_gid]))))) | (~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ _GLF_IDENTITY((~ (buf[virtual_gid])), uint(uvec3((~ (buf[virtual_gid])), 1u, 0u)))))) | (~ (buf[virtual_gid])))))), 0u, 0u, _GLF_IDENTITY(0u, (0u) - 0u)), uvec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))) | (~ (buf[virtual_gid])))), (~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))) | (~ (buf[virtual_gid]))))) | (~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ _GLF_IDENTITY((~ (buf[virtual_gid])), uint(uvec3((~ (buf[virtual_gid])), 1u, 0u)))))) | (~ (buf[virtual_gid])))))), 0u, 0u, _GLF_IDENTITY(0u, (0u) - 0u))))))))), 4, 64, 2);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0 + (injectionSwitch.x), mix(float(_GLF_FUZZED(-36.48)), float(0.0 + (injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + sin(0.0))) / 1.0) + (injectionSwitch.x)) > injectionSwitch.y)), false)), (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)))), false))) && true))) || false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-48.73 - 7.9))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || false))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || false)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! _GLF_IDENTITY((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false)), ((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) || false))) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)], 4, 64, 2);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, exp(0.0), 1.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7896.6097)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 0.0, 0.0))))).x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))), false, true), bvec3(bvec3(bvec3(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4937.6848)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) << (_GLF_IDENTITY(0u, (0u) / 1u) | 0u)), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true)))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (true), bool(bool(! (true)))), _GLF_IDENTITY(false, true && (false))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (true), bool(bool(! (true)))), _GLF_IDENTITY(false, true && (false))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(! (true), bool(bool(! (true)))), _GLF_IDENTITY(false, true && (false))), true))))))))))), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
