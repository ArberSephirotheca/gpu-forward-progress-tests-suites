#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0)), min(float(mat2x4(injectionSwitch.y, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0)), float(mat2x4(injectionSwitch.y, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0))))) / 1.0)), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch.r, mix(float(injectionSwitch.r), float(_GLF_FUZZED((-80.77 - -37.22))), bool(false))))), max((true ? injectionSwitch.y : _GLF_FUZZED(injectionSwitch.r)), (true ? injectionSwitch.y : _GLF_FUZZED(injectionSwitch.r))))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec3(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, sqrt(0.0)))) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, sqrt(0.0)))) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true))))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec3(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, sqrt(0.0)))) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, sqrt(0.0)))) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true))))))), (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) / 1.0)) > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec4((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, false, true))) || false)) || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) / 1.0)) > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), bool(bvec4((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, false, true))) || false)) || (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))), 0.0, 1.0)), clamp(vec2(mat4x3(injectionSwitch, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))), 0.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))), 0.0, 1.0)), vec2(mat4x3(injectionSwitch, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))))), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)))))), 0.0, 1.0))))).y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && _GLF_IDENTITY((false), true && ((false))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(false))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 0.0))).y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8530.1247)), float(1.0), bool(true)))))) + 0.0)) > injectionSwitch.y)))))) || _GLF_IDENTITY(false, true && (false))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true))), true))), false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), true, false, false))) || false, ((bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, false, false))) || false) && true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(dot(-48.42, 2.8))))), _GLF_IDENTITY(float(_GLF_FUZZED(vec2(68.99, -6.8).s)), min(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(68.99, -6.8).s)), min(float(_GLF_FUZZED(vec2(68.99, -6.8).s)), float(_GLF_FUZZED(vec2(_GLF_IDENTITY(68.99, clamp(68.99, 68.99, _GLF_IDENTITY(68.99, max(68.99, 68.99)))), -6.8).s)))), float(_GLF_FUZZED(vec2(68.99, -6.8).s)))), bool(false))))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))), ! (! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))), ! (! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))))))), ! (! ((_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))), ! (! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((- 7570.7617)), _GLF_FUZZED(522.893)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! _GLF_IDENTITY((false), ((false)) || false)), ! (! (true && (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ((false)) || false)))))), (! (false)) || false)), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ((! (false))) && true)) || false)), (! (false)) || false)))), false || (bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (! (false)) || false), true && (! (false))), (! (false)) || false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, abs(1.0)), vec3(vec3(vec3(injectionSwitch.x, 1.0, abs(1.0))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), workgroup_base)) + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), (~ (subgroup_base)) | (_GLF_IDENTITY(~ (subgroup_base), max(~ (subgroup_base), ~ (subgroup_base))))))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 0, 1, 1))))) - _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, _GLF_IDENTITY(uint(uvec4((0u) - 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u)), 0u, 1u)), 0u ^ (uint(_GLF_IDENTITY(uvec4((0u) - 0u, 1u, 0u, 1u), (uvec4((0u) - 0u, 1u, 0u, 1u)) * uvec4(1u, 1u, 1u, 1u))))))), min(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4((0u) - 0u, 1u, 0u, _GLF_IDENTITY(1u, (1u) - 0u))), clamp(uint(uvec4((0u) - 0u, 1u, 0u, 1u)), uint(uvec4((0u) - 0u, 1u, 0u, 1u)), uint(uvec4((0u) - 0u, 1u, 0u, 1u)))), 0u ^ (uint(uvec4((0u) - 0u, 1u, 0u, 1u)))))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, _GLF_IDENTITY(uint(uvec4((0u) - 0u, 1u, 0u, _GLF_IDENTITY(1u, (1u) << 0u))), 0u ^ (uint(uvec4(_GLF_IDENTITY((0u) - 0u, ~ (~ ((0u) - 0u))), 1u, 0u, 1u))))))))) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)) + 0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u))))), _GLF_IDENTITY((~ (subgroup_size)) + 0u, 0u ^ ((~ (subgroup_size)) + 0u)), (~ (subgroup_size)) + 0u), (true ? clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u) : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY((~ (subgroup_size)) + 0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u), (true ? clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | _GLF_IDENTITY((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))), min((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))), (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u))))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u) : _GLF_FUZZED(subgroup_id))))) | (_GLF_IDENTITY((~ (subgroup_size)) + 0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u), _GLF_IDENTITY((true ? clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | _GLF_IDENTITY((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))), ~ (~ ((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u) : _GLF_FUZZED(subgroup_id)), clamp((true ? clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | _GLF_IDENTITY((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))), ~ (~ ((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u) : _GLF_FUZZED(subgroup_id)), (true ? clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | _GLF_IDENTITY((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))), ~ (~ ((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u) : _GLF_FUZZED(subgroup_id)), (true ? clamp(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | _GLF_IDENTITY((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))), ~ (~ ((_GLF_IDENTITY((~ (subgroup_size)) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))))))), (~ (subgroup_size)) + 0u, (~ (subgroup_size)) + 0u) : _GLF_FUZZED(subgroup_id)))))))))))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))) * (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + _GLF_IDENTITY(subgroup_base, (subgroup_base) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, (0u) / 1u))) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), _GLF_IDENTITY((~ (subgroup_size)), ~ (~ ((~ (subgroup_size))))))) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))))) - _GLF_IDENTITY(0u, (0u) - 0u)) % _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)) + 0u, (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | 0u)) - 0u), ~ (_GLF_IDENTITY(~ ((~ (subgroup_size)) + 0u), (~ ((~ (subgroup_size)) + 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)) + 0u, (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | 0u)) - 0u), ~ (_GLF_IDENTITY(~ ((~ (subgroup_size)) + 0u), (~ ((~ (subgroup_size)) + 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)) + 0u, (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | 0u)) - 0u), ~ (_GLF_IDENTITY(~ ((~ (subgroup_size)) + 0u), (~ ((~ (subgroup_size)) + 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)) + 0u, (_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | 0u)) - 0u), ~ (_GLF_IDENTITY(~ ((~ (subgroup_size)) + 0u), (~ ((~ (subgroup_size)) + 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))), (false ? _GLF_FUZZED((subgroup_base ^ subgroup_id)) : (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))) + 0u, ~ (~ ((~ (subgroup_size)) + 0u)))))))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - _GLF_IDENTITY(0u, (0u) - 0u)) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), 0u | (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) + 0u, ~ (~ ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))) + 0u))))))) * 1u), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - _GLF_IDENTITY(0u, (0u) - 0u)) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)) + 0u, ((~ (subgroup_size)) + 0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ ((~ (subgroup_size)) + 0u)))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, 0u | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) - 0u, ((next_virtual_gid) - _GLF_IDENTITY(0u, (0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) + 0u))))) << 0u, ((_GLF_IDENTITY(next_virtual_gid, 0u | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) - 0u, ((next_virtual_gid) - 0u) + 0u))))) << 0u) | ((_GLF_IDENTITY(next_virtual_gid, 0u | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) - 0u, ((_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) - 0u) + 0u))))) << 0u)))], _GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), 4, 64, _GLF_IDENTITY(4, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(0 | (4), 0 ^ (0 | (4))), max(0 | (4), 0 | (4))))), min((_GLF_IDENTITY(4, 0 | (4))), _GLF_IDENTITY((_GLF_IDENTITY(4, 0 | (4))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), 0 | (4)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), 0 | (_GLF_IDENTITY(4, (4) | (4))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), 0 | (4)))) ^ (0 ^ 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), (1 ^ 1) + (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), max(_GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(4, 0 | (4)))))), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), clamp(_GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(4, 0 | (4)))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((subgroup_local_id % 2) == 0)
  {
   read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u), min(_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), (virtual_gid) * 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u), (_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)) >> 0u), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u), 1u, 0u, 1u)))))) * 1u), _GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)))))], 4, 64, 2);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(-835.696) : max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))) > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false)))) && true), true && (! (_GLF_IDENTITY(false, true && (false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 1.0)), max(float(vec2(injectionSwitch.x, 1.0)), float(vec2(injectionSwitch.x, 1.0))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 1.0)), max(float(vec2(injectionSwitch.x, 1.0)), float(vec2(injectionSwitch.x, 1.0))))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 1.0)), max(float(vec2(injectionSwitch.x, 1.0)), float(vec2(injectionSwitch.x, 1.0))))) > injectionSwitch.y)))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
    barrier();
   barrier();
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
