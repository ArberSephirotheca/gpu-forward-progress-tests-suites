#version 460
struct _GLF_struct_8 {
 mat2x3 _f0;
 mat4x3 _f1;
 bool _f2;
 mat3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_6 {
 bool _f0;
 bvec2 _f1;
 int _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 mat4x2 _f1;
 bvec3 _f2;
 vec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 ivec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 bvec3 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 bvec4 _f1;
 mat3x2 _f2;
 uvec4 _f3;
 bvec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 mat3 _f1;
 vec2 _f2;
 vec4 _f3;
 ivec3 _f4;
 ivec4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_9 _f3;
 uint subgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_2(_GLF_struct_0(ivec2(1), mat3(1.0), vec2(1.0), vec4(1.0), ivec3(1), ivec4(1), ivec3(1)), _GLF_struct_1(ivec3(1), bvec4(true), mat3x2(1.0), uvec4(1u), bvec4(true), mat2x3(1.0))), _GLF_struct_3(mat4x3(1.0)), _GLF_struct_7(_GLF_struct_4(vec4(1.0), ivec3(1), uvec3(1u)), _GLF_struct_5(uvec4(1u), mat4x2(1.0), bvec3(true), vec3(1.0), vec2(1.0)), bvec3(true), _GLF_struct_6(true, bvec2(true), 1, mat4x2(1.0))), _GLF_struct_9(vec4(1.0), _GLF_struct_8(mat2x3(1.0), mat4x3(1.0), true, mat3(1.0), mat3x4(1.0))), gl_SubgroupID);
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.z = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.z;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
 uint subgroup_base = _GLF_struct_replacement_10.subgroup_id * subgroup_size;
 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y = subgroup_base;
 uint virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x = next_virtual_gid;
 uint read = 0;
 atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], 4, 64, 2);
  }
 else
  {
   read = atomicLoad(buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x], read, 4, 64, 4);
}
