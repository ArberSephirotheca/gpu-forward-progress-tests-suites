#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 uint num_workgroup;
 ivec4 _f0;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 mat3 _f1;
 uvec3 _f2;
 mat2x3 _f3;
 uint _f4;
 mat4 _f5;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 ivec3 _f3;
 uvec2 _f4;
 uint workgroup_size;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 int _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(gl_NumWorkGroups.x, ivec4(1));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = _GLF_struct_replacement_4.num_workgroup;
  }
 else
  {
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(ivec3(1), 1, _GLF_struct_2(vec2(1.0), _GLF_struct_0(bvec2(true), 1u), _GLF_struct_1(vec4(1.0), mat3(1.0), uvec3(1u), mat2x3(1.0), 1u, mat4(1.0)), ivec3(1), uvec2(1u), gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_3._f2.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
  }
 else
  {
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
  }
}
