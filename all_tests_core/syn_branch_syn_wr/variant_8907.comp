#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_38 {
 uvec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_36 {
 mat4 _f0;
 uvec2 _f1;
 ivec2 _f2;
 uvec2 _f3;
 uvec4 _f4;
 mat2x4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_35 {
 int _f0;
} ;

struct _GLF_struct_34 {
 bvec4 _f0;
 mat4x3 _f1;
 float _f2;
} ;

struct _GLF_struct_33 {
 ivec4 _f0;
 mat3x2 _f1;
 bvec4 _f2;
 bvec4 _f3;
 vec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_37 {
 _GLF_struct_33 _f0;
 bvec2 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_35 _f3;
 mat2 _f4;
 mat2 _f5;
 _GLF_struct_36 _f6;
} ;

struct _GLF_struct_31 {
 mat3 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 ivec3 _f3;
 uvec3 _f4;
 mat4x2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_30 {
 mat2x4 _f0;
 ivec3 _f1;
 mat4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_29 {
 bool _f0;
 mat3 _f1;
 uvec2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_28 {
 mat4x3 _f0;
 mat3x2 _f1;
 uint _f2;
 uvec2 _f3;
 int _f4;
 ivec3 _f5;
 int _f6;
} ;

struct _GLF_struct_32 {
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_30 _f2;
 _GLF_struct_31 _f3;
} ;

struct _GLF_struct_26 {
 mat4x3 _f0;
 bvec2 _f1;
 mat3 _f2;
 mat3x2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_27 {
 mat3x4 _f0;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_39 {
 uint workgroup_id;
 ivec4 _f0;
 _GLF_struct_27 _f1;
 uvec3 _f2;
 _GLF_struct_32 _f3;
 _GLF_struct_37 _f4;
 _GLF_struct_38 _f5;
} ;

struct _GLF_struct_23 {
 mat4x3 _f0;
 bvec2 _f1;
 mat2 _f2;
 vec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_22 {
 uvec3 _f0;
 bvec2 _f1;
 bvec3 _f2;
 vec4 _f3;
 vec4 _f4;
 vec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_21 {
 float _f0;
 vec2 _f1;
 mat3x2 _f2;
 bvec2 _f3;
 ivec4 _f4;
 mat4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_20 {
 mat4 _f0;
 mat4 _f1;
 uvec3 _f2;
 float _f3;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 mat4x3 _f2;
 _GLF_struct_22 _f3;
 _GLF_struct_23 _f4;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 uvec2 _f3;
 mat3x2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_17 {
 uvec4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_16 {
 bvec2 _f0;
 ivec2 _f1;
 bvec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 ivec3 _f2;
 mat4x2 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
 bvec4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
 mat3x4 _f1;
 ivec4 _f2;
 mat3x4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 uint workgroup_size;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 bvec4 _f3;
 float _f4;
} ;

struct _GLF_struct_25 {
 _GLF_struct_15 _f0;
 _GLF_struct_19 _f1;
 bvec3 _f2;
 ivec2 _f3;
 mat4x3 _f4;
 _GLF_struct_24 _f5;
 bool _f6;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 mat3x2 _f1;
 uvec2 _f2;
 mat3x4 _f3;
 int _f4;
 mat3x4 _f5;
 bool _f6;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 int _f1;
 mat4 _f2;
 vec3 _f3;
 ivec2 _f4;
 bvec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 mat3x4 _f1;
 ivec2 _f2;
 ivec4 _f3;
 uint _f4;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 vec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_2 _f0;
 uint _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_1 _f0;
 _GLF_struct_8 _f1;
 mat2 _f2;
 int _f3;
 bool _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_11 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), true && (false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_1(ivec3(1), _GLF_struct_0(bvec4(true))), _GLF_struct_8(_GLF_struct_2(uvec2(1u), mat3x2(1.0)), _GLF_IDENTITY(1u, 0u | _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), max((_GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_IDENTITY(1u, (1u) << 0u))))), _GLF_struct_3(mat4(1.0), vec3(1.0), ivec4(1)), _GLF_struct_4(mat3x4(1.0), mat3x4(1.0), _GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))), (ivec2(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1))))) / ivec2(1, 1)))), ivec4(_GLF_IDENTITY(1, (1) | (1))), 1u), _GLF_struct_5(ivec2(1), mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_struct_6(ivec4(1), 1, mat4(1.0), vec3(1.0), ivec2(1), bvec4(true), uvec2(1u)), _GLF_struct_7(uvec4(1u), mat3x2(1.0), uvec2(1u), mat3x4(1.0), 1, mat3x4(1.0), true)), mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1)), 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1)))), true, _GLF_struct_10(_GLF_struct_9(mat3(1.0)), gl_SubgroupSize), _GLF_struct_11(mat3(1.0)));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))), ! (! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))), true && (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))), ((bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) && true)))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec3(0, 1, 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 return;
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), true && (bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true))))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))) && (true)), true, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))));
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), true && (! (! (_GLF_IDENTITY(false, true && (false)))))))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (bool(_GLF_WRAPPED_LOOP(false))))))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bool(bvec2(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), true)))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (~ (gl_NumWorkGroups))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (~ (gl_NumWorkGroups)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (~ (gl_NumWorkGroups))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (~ (gl_NumWorkGroups))))))) << uvec3(0u, 0u, 0u))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.3)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_15(uvec3(1u), gl_WorkGroupSize.x, _GLF_struct_13(mat4(1.0), mat3x4(1.0), _GLF_IDENTITY(ivec4(1), max(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))), ivec4(1))), mat3x4(1.0), mat3(1.0)), _GLF_struct_14(mat4x2(1.0), bvec4(true), uvec4(1u)), bvec4(true), 1.0), _GLF_struct_19(_GLF_struct_16(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), false, false))), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63454) : 0)), 1 * (_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-63454) : 0, (false ? _GLF_FUZZED(-63454) : 0) / 1))))), 0) ^ (ivec2(1)))) | (_GLF_IDENTITY(ivec2(1), ivec2(0, 0) ^ _GLF_IDENTITY((ivec2(1)), _GLF_IDENTITY(((ivec2(1))), (((ivec2(1)))) << ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) - ivec2(0, 0)))))), ((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63454) : 0)), 1 * (_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-63454) : 0, (false ? _GLF_FUZZED(-63454) : 0) / 1))))), 0) ^ (ivec2(1)))) | (_GLF_IDENTITY(ivec2(1), ivec2(0, 0) ^ _GLF_IDENTITY((ivec2(1)), _GLF_IDENTITY(((ivec2(1))), (((ivec2(1)))) << ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) - ivec2(0, 0))))))) | ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) / _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1, 1) | ivec2(1, 1), (true ? ivec2(1, 1) | ivec2(1, 1) : _GLF_FUZZED(ivec2(94704, -48032))))), ((ivec2(1, 1) | ivec2(1, 1))) - ivec2(0, 0))), bvec4(true), mat2(1.0)), _GLF_struct_17(uvec4(1u), uvec3(1u)), ivec3(1), mat4x2(1.0), _GLF_struct_18(mat4x2(1.0), mat4x2(1.0), uvec4(1u), uvec2(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) << 0u), 1u)) >> 0u))))))), mat3x2(1.0), uvec4(1u))), bvec3(true), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), max(ivec2(1), _GLF_IDENTITY(ivec2(1), clamp(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91287) : 1)), 1))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0)), ivec2(1))), min(_GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0)), ivec2(1))), _GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0)), ivec2(1))))), _GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(95372, 63803)) : _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(ivec2(ivec2(1))), (ivec2(ivec2(ivec2(1)))) | ivec2(0, 0))))))))), max(_GLF_IDENTITY(ivec2(1), max(ivec2(1), _GLF_IDENTITY(ivec2(1), clamp(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91287) : _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) ^ ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), 1))), _GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0)), ivec2(1))), _GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(95372, 63803)) : _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(ivec2(ivec2(1))), (ivec2(ivec2(ivec2(1)))) | ivec2(0, 0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), max(ivec2(1), _GLF_IDENTITY(ivec2(1), clamp(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)), min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91287) : 1)), 1))), _GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (1)))), (ivec2(1)) >> ivec2(0, 0)), ivec2(1))), _GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(95372, 63803)) : _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(ivec2(ivec2(1))), (ivec2(ivec2(ivec2(1)))) | ivec2(0, 0))))))))), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(1), max(ivec2(1), _GLF_IDENTITY(ivec2(1), clamp(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91287) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91287) : 1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91287) : 1)))), 1))), _GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0)), ivec2(1))), _GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(_GLF_IDENTITY(95372, clamp(_GLF_IDENTITY(95372, (95372) | 0), 95372, 95372)), 63803)) : _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(ivec2(ivec2(1))), (ivec2(ivec2(ivec2(1)))) | ivec2(0, 0))))))))))))), mat4x3(1.0), _GLF_struct_24(_GLF_struct_20(mat4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.7) : 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0) + tan(0.0), min((1.0) + tan(0.0), _GLF_IDENTITY((1.0) + tan(0.0), ((1.0) + tan(0.0)) - _GLF_ZERO(0.0, injectionSwitch.x)))), max((1.0) + tan(0.0), _GLF_IDENTITY((1.0) + tan(0.0), min((1.0) + tan(0.0), (1.0) + tan(0.0))))))), uvec3(1u), 1.0), _GLF_struct_21(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(4.1) : 1.0)), _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), clamp(min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.3) : 1.0)), min(1.0, 1.0))), mat3x2(1.0), bvec2(true), ivec4(1), _GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), transpose(transpose(transpose(mat4(1.0))))))), mat2(1.0)), mat4x3(1.0), _GLF_struct_22(uvec3(1u), bvec2(true), bvec3(true), vec4(1.0), vec4(1.0), vec4(1.0), bvec3(true)), _GLF_struct_23(mat4x3(1.0), bvec2(true), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true)))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-4.2, 0.0 + (-4.2)), min(-4.2, _GLF_IDENTITY(-4.2, max(-4.2, _GLF_IDENTITY(-4.2, float(_GLF_IDENTITY(mat4(-4.2, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(1.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat2(56.27, -9.6, 13.84, -2.8)))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0), (mat4(-4.2, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) - -812.018))), float(1.0), bool(true)))))))), _GLF_IDENTITY(vec3(1.0), (_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))) - _GLF_IDENTITY(cross(vec3(-6.2, 0.8, -39.91), vec3(-6.2, 0.8, -39.91)), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(cross(vec3(-6.2, 0.8, -39.91), _GLF_IDENTITY(vec3(-6.2, 0.8, -39.91), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec3(-6.2, 0.8, -39.91), min(vec3(-6.2, 0.8, -39.91), vec3(-6.2, 0.8, -39.91))) : _GLF_FUZZED(vec3(8.4, -8.6, -8.5))))), 0.0, 0.0, 1.0, 1.0, 1.0), (true ? mat2x4(cross(vec3(-6.2, 0.8, -39.91), vec3(-6.2, 0.8, -39.91)), 0.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-0.3, 9.6, 96.48, -7700.0813, -3.5, 8.7, 9240.4713, 98.24))))), (false ? _GLF_FUZZED(vec3(-230.859, 9182.9191, 0.1)) : _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(cross(vec3(-6.2, 0.8, -39.91), vec3(-6.2, 0.8, -39.91)), 0.0, 0.0, 1.0, 1.0, 1.0), (true ? mat2x4(cross(vec3(-6.2, 0.8, -39.91), vec3(_GLF_IDENTITY(-6.2, (false ? _GLF_FUZZED(35.57) : _GLF_IDENTITY(-6.2, float(mat2x4(-6.2, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), 0.8, -39.91)), 0.0, 0.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-0.3, 9.6, 96.48, -7700.0813, _GLF_IDENTITY(-3.5, float(mat3(-3.5, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, cos(0.0), 1.0))), 8.7, 9240.4713, 98.24))))), vec3(mat3(vec3(_GLF_IDENTITY(mat2x4(cross(vec3(-6.2, 0.8, -39.91), vec3(-6.2, 0.8, -39.91)), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, 1.0), (true ? mat2x4(cross(vec3(-6.2, 0.8, -39.91), vec3(-6.2, 0.8, -39.91)), _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-88.93)), bool(false)))) : _GLF_FUZZED(mat2x4(-0.3, 9.6, 96.48, -7700.0813, _GLF_IDENTITY(_GLF_IDENTITY(-3.5, min(-3.5, -3.5)), (-3.5) * exp(0.0)), 8.7, 9240.4713, 98.24))))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0))))))), bvec4(true))), true);
 _GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(gl_WorkGroupID.x, _GLF_IDENTITY(ivec4(1), (true ? ivec4(1) : _GLF_FUZZED(ivec4(_GLF_IDENTITY(-71791, _GLF_IDENTITY((-71791), ((-71791)) + 0) | (-71791)), -29752, 63365, -44856)))), _GLF_struct_27(mat3x4(1.0), _GLF_struct_26(mat4x3(1.0), bvec2(true), mat3(_GLF_IDENTITY(1.0, (1.0) - abs(_GLF_IDENTITY(0.0, 0.0 + (0.0))))), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3483.8081)), float(0.0), bool(true))), 0.0)), 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat3x4(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat3x4(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-227.000)), float(1.0), bool(true))))), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat3x4(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0)), 0.0 + (dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0), vec2(0.0, 1.0))), 0.0), mix(vec2(_GLF_FUZZED(-82.97), (vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0), vec2(0.0, 1.0))), 0.0))[1]), vec2((vec2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0), vec2(0.0, 1.0))), 0.0))[0], _GLF_FUZZED(float(true))), bvec2(true, false))))))), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(8.0)))), 1.0, 1.0, 1.0))))), max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0)))))))), mat3x4(1.0))), uvec3(1u), _GLF_struct_32(_GLF_struct_28(mat4x3(1.0), mat3x2(1.0), _GLF_IDENTITY(1u, (1u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(1u), 1, ivec3(1), 1), _GLF_struct_29(true, mat3(1.0), uvec2(1u), mat4x2(1.0)), _GLF_struct_30(mat2x4(1.0), ivec3(1), mat4(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), _GLF_struct_31(mat3(1.0), _GLF_IDENTITY(ivec3(1), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3(1))), mat2x4(1.0), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, 0 ^ (1))), 1 * (0 | (_GLF_IDENTITY(1, 0 ^ (1))))))), uvec3(1u), mat4x2(1.0), mat3x4(1.0))), _GLF_struct_37(_GLF_struct_33(ivec4(1), mat3x2(1.0), bvec4(true), bvec4(true), vec3(1.0), ivec2(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(1), int(1))))) | 0))))))), bvec2(true), _GLF_struct_34(bvec4(true), mat4x3(1.0), 1.0), _GLF_struct_35(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-8900.6360) : _GLF_ZERO(0.0, injectionSwitch.x)))))), mat2(1.0), mat2(1.0), _GLF_struct_36(mat4(1.0), uvec2(1u), ivec2(1), uvec2(1u), uvec4(1u), mat2x4(1.0), uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u)))), _GLF_struct_38(uvec4(1u), mat3x4(1.0)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.9) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_25._f0.workgroup_size, clamp(_GLF_struct_replacement_25._f0.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_25._f0.workgroup_size, (_GLF_struct_replacement_25._f0.workgroup_size) - 0u), _GLF_IDENTITY(_GLF_struct_replacement_25._f0.workgroup_size, 0u ^ (_GLF_struct_replacement_25._f0.workgroup_size)))) * _GLF_struct_replacement_39.workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_12._f5.subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)) : 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ ((0 >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), int(ivec3(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (int(3)) / 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), int(3))), int(3)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0))), max((1 ^ 0), (1 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = ((0 | 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 1u * (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))) / 1u))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, (1u) ^ 0u)) + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) / 1u))) + 1))) % _GLF_struct_replacement_12._f5.subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), mix(vec2((vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(38.57)), vec2(_GLF_FUZZED((-7.6 * 9889.7231)), (vec2(0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) * abs(vec2(1.0, 1.0))))[1]), bvec2(false, true))))[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (-93300 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), false))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         break;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), mat2(1.0) * (vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))) + vec2(0.0, 0.0)).x, (false ? _GLF_FUZZED(-857.559) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), mat2(1.0) * (vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))) + vec2(0.0, 0.0)).x)) < injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), mat2(1.0) * (vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))) + vec2(0.0, 0.0)).x, (false ? _GLF_FUZZED(-857.559) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), mat2(1.0) * (vec2(mat4x3(injectionSwitch, tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))) + vec2(0.0, 0.0)).x)) < injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), true, false, false)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))) && true), (injectionSwitch.x < injectionSwitch.y)), true), true))))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false, false)))), true, false, false)), (_GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ((! (_GLF_IDENTITY(false, (false) || false)))) && true)) && true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), false || ((! (false)))), false, true, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false, false)))), true, false, false)), true && (bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, true), true), bvec3(bvec3(bvec3(bvec2(true, true), true))))))))), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), true, false, false)))), true, false, false))))) || false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
  return;
 uint read = 0;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))), int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))), 1, 0)))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) - 0)), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5547.2878, 718.096)) : injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5547.2878, 718.096)) : injectionSwitch)).x > injectionSwitch.y, true, true)), false || (bool(bvec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5547.2878, 718.096)) : injectionSwitch)).x > injectionSwitch.y, true, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, clamp(subgroup_local_id % 2, _GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), subgroup_local_id % 2))) == _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(71149))), ! (! ((subgroup_local_id % _GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))) == 0))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))), false))))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && (false)), (injectionSwitch.x > injectionSwitch.y))))), false))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           continue;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4x3(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))).y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           break;
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
                break;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
               barrier();
              }
             return;
             if(_GLF_DEAD(false))
              break;
            }
           continue;
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             else
              {
              }
            }
           continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            break;
          }
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec2(int(0), 1))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))), true))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)))))
                continue;
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) | 0u)], (_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (buf[virtual_gid]), ~ (~ (~ (buf[virtual_gid]))))))) * 1u), 4, 64, 2);
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.6)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED(float(872))), float(float(injectionSwitch.y)), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)) || false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))), (! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))), ((! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))) || false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))), ((! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))) || false)))), true)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))), ((! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))) || false)))), true))))))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-120.991))), bool(false))) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-120.991))), bool(false))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-120.991))), bool(false))) > injectionSwitch.y)))))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(226.041), _GLF_FUZZED(-6555.6326)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))))[0], 0.0))), (injectionSwitch)[1]), bvec2(true, true))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false)), false))))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), true))), true, false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   subgroupBarrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (bool(bvec4(false, true, true, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), false), true)))))))
        return;
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED((injectionSwitch - sign(949.056))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY((read) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(63595u))), clamp((read) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(63595u))), _GLF_IDENTITY((read) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(63595u))), ((read) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(63595u)))) >> 0u), (read) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(63595u, (63595u) | (0u | 0u)))))))), _GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), 0 | (_GLF_IDENTITY(int(int(4)), 0 + (_GLF_IDENTITY(int(int(4)), 0 ^ (_GLF_IDENTITY(int(int(4)), clamp(int(int(4)), int(int(4)), int(int(4))))))))))), 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
