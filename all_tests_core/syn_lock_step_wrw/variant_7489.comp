#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size;
 uvec4 GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid;
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true)))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), true && (bool(bvec2(_GLF_DEAD(false), true))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false))))), false, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false))))), false, false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   return;
  }
 uvec2 GLF_merged2_0_1_6_1_1_11read_1virtual_gid;
 GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw = GLF_merged2_0_1_6_1_1_11read_1virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy = GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw, (GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy = GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw) >> uvec2(0u, 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw), (false ? _GLF_FUZZED((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id * 70251u)) : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(6u), uvec2(6u))) | (_GLF_FUZZED(GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw))))) : GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy = _GLF_IDENTITY(GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw, max(GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw, GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.zw))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.xy = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(true && (_GLF_IDENTITY(false || (false), false || (false || (false)))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false || (false), false || (false || (false)))), false || (true && (_GLF_IDENTITY(false || (false), false || (false || (false)))))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(intBitsToFloat(16194)) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true, false, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy = GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.xy;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), true, false, true))), true && (_GLF_IDENTITY((false), bool(bvec4((false), true, false, true))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)), true && (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8027.5077)), bool(false))) > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), ! (! (false)))))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bvec4(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true, false, true))))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-65.03), _GLF_FUZZED(-5.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(8.0)), (float(_GLF_FUZZED(8.0))) / 1.0), bool(false))), injectionSwitch.x)) > injectionSwitch.y, false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.0, -7.0)))), injectionSwitch)).y, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), false || (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))))) || (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(90.23), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(29.76), float(mat4x2(_GLF_FUZZED(29.76), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(abs(vec4(0.0, 0.0, 0.0, 0.0))))))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.9)), float(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2802.5126)), float(injectionSwitch.x), bool(true))), 0.0), (true ? vec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2802.5126)), float(injectionSwitch.x), bool(true))), 0.0) : _GLF_FUZZED(vec2(-9.5, 3.0))))))), bool(true))) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8.0)), bool(false))), injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.1, max(9.1, 9.1)))), float(1.0), bool(true)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8.0)), bool(false))), injectionSwitch.x)) / 1.0)) > injectionSwitch.y, false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.6) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, sqrt(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (mat4(injectionSwitch.y, sqrt(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0, 1.0)))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), bool(bvec4(! (_GLF_IDENTITY(false, (false) || false)), false, true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id.y = subgroup_id;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id, (GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id) | (GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id)).y;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.x = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.9) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-50018)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(false, false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))), false))) && true)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, max(_GLF_IDENTITY((injectionSwitch.x) + 0.0, clamp((injectionSwitch.x) + 0.0, (injectionSwitch.x) + 0.0, (injectionSwitch.x) + 0.0)), (injectionSwitch.x) + 0.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))), min(~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))), ~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))))))))), 0 >> _GLF_IDENTITY(int(3), int(3))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))), min(~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))), ~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))))))))), 0 >> _GLF_IDENTITY(int(3), int(3))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))), min(~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))), ~ (_GLF_IDENTITY(~ (0 >> _GLF_IDENTITY(int(3), int(3))), max(~ (0 >> _GLF_IDENTITY(int(3), int(3))), ~ (0 >> _GLF_IDENTITY(int(3), int(3)))))))))))), 0 >> _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) ^ 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), true, true), false)))))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bool(true))))), (bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bool(true)))))) && true))))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), false))))), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), false, false, true)))) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
          {
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), true && (_injected_loop_counter > (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) - 0)) << 0))) << _GLF_IDENTITY(int(1), int(1)))))) || false)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               return;
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, false)))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0))) * (injectionSwitch.y))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5850.0729) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y = subgroup_size;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y = GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.w = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y;
  }
 else
  {
  }
 GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.y = GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.w;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 1 * (0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec2((false), true)))), false || (_GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec2((false), true)))), bool(bool((! _GLF_IDENTITY((false), bool(bvec2((false), true))))))))), (! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(true, false || (true)))))), false || _GLF_IDENTITY((_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2((false), true)))), bool(bool((! _GLF_IDENTITY((false), bool(bvec2((false), true)))))))), bool(bvec3((_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2((false), true)))), bool(bool((! _GLF_IDENTITY((false), bool(bvec2((false), true)))))))), true, true))))) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))))), ! (! (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, true)))))) && true))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true && (! (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter < 1, false, true, true)), false || (bool(bvec4(_injected_loop_counter < 1, false, true, true)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-38071))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.w = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x = num_workgroup;
 GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.z = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x, _GLF_IDENTITY((GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x) | (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x), min((GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x) | (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x), (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x) | (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = ((1 ^ 0) ^ (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy.y = workgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.z = GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id.w = workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 uint workgroup_base = GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id, (GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id) - uvec4(0u, 0u, 0u, 0u)).w;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - abs(0.0)) > injectionSwitch.y))))))
  barrier();
 GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy.x = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) && true)))))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9036.1045)), bool(false))), sqrt(1.0), 1.0, sqrt(1.0), 1.0, cos(0.0), 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))) > injectionSwitch.y))))
                barrier();
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, _GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ~ (~ ((0) / 1)))), clamp(0, 0, 0)) + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) + 0))))), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), (false ? _GLF_FUZZED((_injected_loop_counter & 391)) : _GLF_IDENTITY(~ (~ (3)), max(~ (~ (3)), ~ (~ (3))))))), (1 ^ 1), 1, 0)))), 0 ^ (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, ~ (~ _GLF_IDENTITY((3), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((3), 0 ^ ((3))), 1, 1), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((3), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3((3), 1, 1), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3(_GLF_IDENTITY((3), ((3)) - 0), 1, 1))), ~ (~ (_GLF_IDENTITY(ivec3((3), 1, 1), _GLF_IDENTITY(ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((3), 1, 1)), (_GLF_IDENTITY(ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((3), 1, 1)), (ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((3), 1, 1))) / ivec3(1, 1, 1))) ^ ivec3(0, 0, 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec3((3), 1, 1), max(ivec3((3), 1, 1), ivec3((3), 1, 1))), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((3), 1, 1))), _GLF_IDENTITY(ivec3((3), 1, 1), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((3), 1, 1))), _GLF_IDENTITY(ivec3((3), _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1))), ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec3((_GLF_IDENTITY(3, (3) >> 0)), 1, 1)))))) | ivec3(0, 0, 0)))))), (1 ^ 1), 1, 0)))))))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), _GLF_IDENTITY(int(3), (int(3)) >> 0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5)), (0 | 0) + (_GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((5), min((5), (5)))), clamp((~ _GLF_IDENTITY((5), min((5), (5)))), (~ _GLF_IDENTITY((5), min((5), (5)))), (~ _GLF_IDENTITY((5), min((5), (5)))))))), int(5))))), _GLF_IDENTITY(false || (_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31881) : 3)), _GLF_IDENTITY(3, 0 ^ (3)), _GLF_IDENTITY(3, (false ? _GLF_FUZZED(78625) : 3)))), ~ (~ (_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))))))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(3, ~ (~ (3))))))), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | _GLF_IDENTITY(0, 0 | (0))), 1, 0)))), 0 ^ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(3, 0 ^ (3)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3)))))), (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))) | (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), min(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), ((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))))))))) | (0 >> _GLF_IDENTITY(int(2), int(2))))))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0))))) >> _GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) >> 0, (int(3)) >> 0))))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))))))) >> _GLF_IDENTITY(int(5), int(5)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31881) : 3)), _GLF_IDENTITY(3, 0 ^ (3)), _GLF_IDENTITY(3, (false ? _GLF_FUZZED(78625) : 3)))), ~ (~ (_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))))))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(3, ~ (~ (3))))))), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | _GLF_IDENTITY(0, 0 | (0))), 1, 0)))), 0 ^ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(3, 0 ^ (3)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3)))))), (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))) | (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), min(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), ((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))))))))) | (0 >> _GLF_IDENTITY(int(2), int(2))))))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0))))) >> _GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) >> 0, (int(3)) >> 0))))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))))))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec3(false || (_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31881) : 3)), _GLF_IDENTITY(3, 0 ^ (3)), _GLF_IDENTITY(3, (false ? _GLF_FUZZED(78625) : 3)))), ~ (~ (_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))))))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(3, ~ (~ (3))))))), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | _GLF_IDENTITY(0, 0 | (0))), 1, 0)))), 0 ^ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(3, 0 ^ (3)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3)))))), (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))) | (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), min(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), ((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))))))))) | (0 >> _GLF_IDENTITY(int(2), int(2))))))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0))))) >> _GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) >> 0, (int(3)) >> 0))))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))))))) >> _GLF_IDENTITY(int(5), int(5)))), true, true)))), bool(bvec3(! (_GLF_IDENTITY(false || (_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31881) : 3)), _GLF_IDENTITY(3, 0 ^ (3)), _GLF_IDENTITY(3, (false ? _GLF_FUZZED(78625) : 3)))), ~ (~ (_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))))))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(3, ~ (~ (3))))))), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | _GLF_IDENTITY(0, 0 | (0))), 1, 0)))), 0 ^ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(3, 0 ^ (3)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3)))))), (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))) | (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), min(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), ((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))))))))) | (0 >> _GLF_IDENTITY(int(2), int(2))))))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0))))) >> _GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) >> 0, (int(3)) >> 0))))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))))))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec3(false || (_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31881) : 3)), _GLF_IDENTITY(3, 0 ^ (3)), _GLF_IDENTITY(3, (false ? _GLF_FUZZED(78625) : 3)))), ~ (~ (_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))))))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (3))), 0 ^ (_GLF_IDENTITY(3, ~ (~ (3))))))), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | _GLF_IDENTITY(0, 0 | (0))), 1, 0)))), 0 ^ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(3, 0 ^ (3)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3)))))), (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))) | (~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), (((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0))))))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), min(((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))), ((int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), (1 ^ 1), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(3, _GLF_IDENTITY(~ (~ (3)), clamp(_GLF_IDENTITY(~ (~ (3)), ~ (~ (_GLF_IDENTITY(~ (~ (3)), 0 ^ (~ _GLF_IDENTITY((~ (3)), min((~ (3)), (~ (3))))))))), ~ (~ (3)), ~ (~ (3))))), (1 ^ 1), 1, 0)))))))))))) | (0 >> _GLF_IDENTITY(int(2), int(2))))))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, max(3, 3))))), (3) - 0))))) >> _GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY((int(3)), ~ (~ ((int(3))))) >> 0, (int(3)) >> 0))))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))))))) >> _GLF_IDENTITY(int(5), int(5)))), true, true)))), false, false))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, abs(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0))), dot(vec2(1.0, 0.0), vec2(0.0, abs(1.0)))), 0.0, tan(0.0), 0.0)))))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((60339 & 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / 1)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))) || false))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true, false, false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(cos(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(clamp(cos(_GLF_ZERO(0.0, injectionSwitch.x)), cos(_GLF_ZERO(0.0, injectionSwitch.x)), cos(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(dot(sqrt(injectionSwitch), vec2(-3.8, 1.8))) : clamp(cos(_GLF_ZERO(0.0, injectionSwitch.x)), cos(_GLF_ZERO(0.0, injectionSwitch.x)), cos(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, abs(0.0), 1.0))))), mix(float(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, cos(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.6) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, cos(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.6) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0)), 0.0 + (float(mat2x3(injectionSwitch.x, 0.0, 0.0, cos(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.6) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0)))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), 0.0, 1.0, 0.0, log(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), mix(float(_GLF_FUZZED(91.72)), float(float(mat2x4(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, cos(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.6) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0)), 0.0 + (float(mat2x3(injectionSwitch.x, 0.0, 0.0, cos(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.6) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 0.0)))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), 0.0, 1.0, 0.0, log(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))), bool(true))))), float(_GLF_FUZZED(1.8)), bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true, false))), false, false))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y)), false, true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy.x + GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.x * GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.y + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id, (GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id) | (GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id)).w, (GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.w) + 0u);
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id.z = virtual_gid;
 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy.y = GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id.z;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy, (false ? _GLF_FUZZED((uvec2(69976u, 25587u) ^ GLF_merged2_0_2_53_2_2_41GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeGLF_merged2_0_1_6_1_1_11read_1virtual_gid.xy)) : _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy, (GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id.xy) | uvec2(0u, 0u)))).x + GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.x * GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size.y + ((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id, min(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id, uvec4(GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id[0], GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id[1], GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id[2], GLF_merged3_0_2_53_2_1_13_3_1_17GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizenum_workgroupsubgroup_local_id[3])))).w + _GLF_IDENTITY(1, (1) + 0)) % _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size, _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u))) | (GLF_merged3_0_1_11_1_1_13_2_1_14subgroup_idsubgroup_sizeworkgroup_size)).y);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), tan(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))), 1.0, 1.0, 0.0)), max(_GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), tan(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))), 1.0, 1.0, 0.0)), (float(mat2x4(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), tan(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))), 1.0, 1.0, 0.0))) - 0.0), float(mat2x4(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, abs(0.0), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), tan(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))), 1.0, 1.0, 0.0))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), true, true)))))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.z = next_virtual_gid;
  }
 atomicStore(buf[GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.z], uint(1), 4, 64, _GLF_IDENTITY(4, (4) << 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))), false || (_GLF_IDENTITY(bool(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))), bool(bool(bool(bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true)))))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), false || ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), false || ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))), false), true, true))))), bool(bool(_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(bvec4((bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, min(1.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false, false, true)), false || (bool(bvec4((bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, min(1.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false, false, true)))))))) || false))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(ivec4(int(8), 0, 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy.y], _GLF_IDENTITY(4, min(4, 4)), 64, 0);
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id.x = read_1;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true)))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy.x = GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_12read_1subgroup_idvirtual_gidworkgroup_id.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(_injected_loop_counter))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bool(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false)))))))) && true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false)), false, true, false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.z], uint(GLF_merged3_0_2_41_2_1_16_3_1_13GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidsubgroup_size.xy.x + 1), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-23651) : _GLF_IDENTITY(4, (4) - (_GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(8), int(8)))))), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
}
