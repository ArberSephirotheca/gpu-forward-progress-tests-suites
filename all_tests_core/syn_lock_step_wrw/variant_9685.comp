#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 uint _f0;
 ivec2 _f1;
 uvec3 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 mat3x2 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_8 {
 int _f0;
 mat3x2 _f1;
 mat2 _f2;
 uint num_workgroup;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 bvec3 _f1;
 mat4 _f2;
 ivec4 _f3;
 ivec3 _f4;
 ivec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_0 {
 float _f0;
 ivec3 _f1;
 uvec3 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 int _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 bool _f0;
 mat4 _f1;
 _GLF_struct_3 _f2;
 bvec4 _f3;
 mat4x2 _f4;
 ivec3 _f5;
 mat4x2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(gl_SubgroupSize, true, mat4(1.0), _GLF_struct_3(_GLF_struct_0(1.0, _GLF_IDENTITY(ivec3(1), min(ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0))) | (ivec3(1))), (_GLF_IDENTITY(ivec3(1), (ivec3(1)) << ivec3(0, 0, 0))) << ivec3(0, 0, 0)))), uvec3(1u), vec3(1.0), _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(-21.02, -7.4, -7.2, -11.14, 3463.5876, 128.797, 98.45, -7.6, 8.7)) : mat3(1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), mat3x4(1.0), 1, _GLF_struct_1(mat4x2(1.0), bvec3(true), mat4(1.0), ivec4(1), ivec3(1), _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), clamp(_GLF_IDENTITY(ivec2(1), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec4(ivec2(1), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))), int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec4(ivec2(1), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))) | ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(ivec2(1), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), 1))))), ivec2(1)))) | (ivec2(_GLF_IDENTITY(1, (1) | 0)))), mat3x4(1.0)), _GLF_struct_2(uvec3(1u)), mat3x4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), mix(float(float(mat4x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(-69.56)), bool(false))))), (float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), mix(float(float(mat4x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(-69.56)), bool(false)))))) - 0.0))))), bvec4(true), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(float(vec2(1.0, 0.0)), (float(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0), float(vec2(1.0, 0.0)), float(vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(407.432)), bool(false))) : _GLF_FUZZED(-9000.2930))), 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(float(vec2(1.0, 0.0)), (float(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0), float(vec2(1.0, 0.0)), float(vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(407.432)), bool(false))) : _GLF_FUZZED(-9000.2930))), 0.0))))), 0.0 + (_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(float(vec2(1.0, 0.0)), (float(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0), float(vec2(1.0, 0.0)), float(vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(407.432)), bool(false))) : _GLF_FUZZED(-9000.2930))), 0.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(float(vec2(1.0, 0.0)), (float(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0), float(vec2(1.0, 0.0)), float(vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(407.432)), bool(false))) : _GLF_FUZZED(-9000.2930))), 0.0)))), (true ? _GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(float(vec2(1.0, 0.0)), (float(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0), float(vec2(1.0, 0.0)), float(vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(407.432)), bool(false))) : _GLF_FUZZED(-9000.2930))), 0.0)))) : _GLF_FUZZED(-89.31))), _GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(float(vec2(1.0, 0.0)), (float(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0), float(vec2(1.0, 0.0)), float(vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(407.432)), bool(false))) : _GLF_FUZZED(-9000.2930))), 0.0)))))))))) / sqrt(1.0))), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))) - ivec3(0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0))))), 0))), min(ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))) - ivec3(0, 0, 0))), _GLF_IDENTITY(ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))) - ivec3(0, 0, 0))), ivec3(ivec3(ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1)))) - ivec3(0, 0, 0))))))))), mat4x2(1.0));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(1, mat3x2(1.0), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)), 1.0))), gl_NumWorkGroups.x, _GLF_struct_7(_GLF_struct_5(mat3x4(1.0)), mat3x2(1.0), _GLF_struct_6(_GLF_IDENTITY(1u, max(1u, 1u)), ivec2(1), _GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(_GLF_IDENTITY(1u, 0u | (1u))))), bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u)))) | (gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (1), ((_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | (1)))))) + _GLF_IDENTITY(0, min(0, 0)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (43271u & 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))), max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))))).x) >> 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u)), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 0u | (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), clamp((~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))))))) / 1u)))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_4.subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) | (uint(uint(subgroup_local_id))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) | (uint(uint(subgroup_local_id))))))), min(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)))))) | (uint(uint(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), (0u & 43501u), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) | _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(packUnorm2x16(vec2(-5144.5122, -125.442))) : subgroup_local_id))))), ~ (~ ((uint(uint(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(packUnorm2x16(vec2(-5144.5122, -125.442))) : subgroup_local_id)))))))))))))), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), (uint(uint(subgroup_local_id))) | (uint(uint(subgroup_local_id)))))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     for(int _injected_loop_counter = ((1 & 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_4.subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) % _GLF_struct_replacement_4.subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true)))))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! (! (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), true, true))))), ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), (((! (false)))) && true))))))))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.7))) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) || false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(31246))), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(31246)))) << (0 >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), true && (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u)))))))))))))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u | (0u))), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))), clamp((_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u | (0u))), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u | (0u))), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u | (0u))), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u)))), 1u * ((_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u | (0u))), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))))))) >> 0u), (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u | (0u))), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))) : 0u))))))))))))))))), _GLF_IDENTITY(uint(uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))))))))), max(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))))))))), _GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))))))))))))))), max(uint(uint(uint(uint(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u, 0u, 1u))) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.7) : injectionSwitch.y))))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u)))))), (1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))) | (_GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u)))))), (1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))) | (1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))))))))))))))))), uint(uint(uint(uint(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))), ~ (~ (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u)))))), (1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))))) >> 0u))))))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(next_virtual_gid, 0u)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2535.1976)), vec2(_GLF_FUZZED(-54.69), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))) || false))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2535.1976)), vec2(_GLF_FUZZED(-54.69), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, (0u) | (0u)), ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-101.359) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) / 1u) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u)))))) / 1u))))))))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(next_virtual_gid, 0u), (_GLF_IDENTITY(uvec2(next_virtual_gid, 0u), (uvec2(next_virtual_gid, 0u)) << uvec2(0u, 0u))) | (uvec2(next_virtual_gid, 0u)))), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(next_virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, sqrt(1.0), 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, 1u * (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u), 0u | (~ (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5259.0002)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(351.045)))), bool(true))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))) ? _GLF_FUZZED(workgroup_id) : 0u)))))))))))))))) | 0u))], uint(1), 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), true))))), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), true))))), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), true))))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), false))) && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))
      {
       for(int _injected_loop_counter = ((1 | 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (true ? int(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-6202))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 64175)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true)))) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(false)))))
            barrier();
          }
        }
       else
        {
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
}
