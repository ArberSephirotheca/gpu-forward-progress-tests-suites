#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint workgroup_id;
 mat2x4 _f0;
 bvec3 _f1;
 uvec2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uvec4 GLF_merged2_0_3_66_3_1_16GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenext_virtual_gid;
 uvec4 GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 0.0, 0.0)), min(float(mat2(injectionSwitch.x, 1.0, 0.0, 0.0)), float(mat2(injectionSwitch.x, 1.0, 0.0, 0.0))))) < injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz = GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_size;
 uvec4 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz = GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_id;
  }
 uvec3 GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_size;
 GLF_merged2_0_3_66_3_1_16GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz = GLF_merged2_0_3_66_3_1_16GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenext_virtual_gid.xyz;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.0)), bool(false)))))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.w = subgroup_id;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y = GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (1 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
  {
   GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz.z = subgroup_size;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ (0 << _GLF_IDENTITY(int(0), int(0)))) | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-7186) & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(-2.1, 5401.1929)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.5)), float(injectionSwitch.y), bool(true)))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(vec2(123.438, 5.8).tt) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)))))));
   for(int _injected_loop_counter = (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(7), 1), (ivec2(int(7), 1)) | (ivec2(int(7), 1))), (_GLF_IDENTITY(ivec2(int(7), 1), (ivec2(int(7), 1)) | (ivec2(int(7), 1)))) ^ _GLF_IDENTITY((ivec2(0, 0) >> _GLF_IDENTITY(ivec2(8), ivec2(8))), ~ (~ ((ivec2(0, 0) >> _GLF_IDENTITY(ivec2(8), ivec2(8))))))))), int(7)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, false, true)))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(4), int(4))) | (5)), (5) + 0), (_GLF_IDENTITY(0, (0) >> 0) ^ 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 >> _GLF_IDENTITY(int(7), int(7))) + (_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(4), int(4))) | (5)), (5) + 0), (_GLF_IDENTITY(0, (0) >> 0) ^ 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(4), int(4))) | (5)), (5) + 0), (_GLF_IDENTITY(0, (0) >> 0) ^ 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(4), int(4))) | (5)), (5) + 0), (_GLF_IDENTITY(0, (0) >> 0) ^ 0), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(4), int(4))) | (5)), (5) + 0), _GLF_IDENTITY((0 ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), max((0 ^ 0), (0 ^ 0))), (_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | ((0 ^ 0)))) / 1), (0 ^ 0))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), 0 ^ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter)))) | (_GLF_FUZZED(_injected_loop_counter))) : int(_GLF_IDENTITY(5, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(5, (0 << _GLF_IDENTITY(int(4), int(4))) | _GLF_IDENTITY((5), ((5)) / 1)), (5) + 0), _GLF_IDENTITY((0 ^ 0), max(_GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ 0), ((_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0)))) | ((0 ^ 0)))) / 1), (0 ^ 0))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0) | 0) * (int(5)), (false ? _GLF_FUZZED(-61849) : _GLF_IDENTITY((1 | 0) * (int(5)), 0 ^ ((1 | 0) * (int(5))))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> (0 >> _GLF_IDENTITY(int(0), int(0)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, false || (true)), false))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z = GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz.z;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = ((0 & 44140) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), abs(1.0), 1.0, abs(0.0), 1.0, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.0)), bool(false))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))))) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), injectionSwitch)).y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x = subgroup_local_id;
  }
 GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz.y = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), length(0.0), 1.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (1 | 1))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z = GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz.y;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), false))), true, true)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (2655 % 60955))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))
          barrier();
         barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))) && true)))
  barrier();
 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.x = GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.w;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.w = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) - 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1)) ^ 0)), ((0 << _GLF_IDENTITY(int(6), int(6)))) ^ 0)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.x = GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.w;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y)))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))), true && ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.y = workgroup_size;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  barrier();
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_WorkGroupID.x, mat2x4(1.0), bvec3(true), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), (_GLF_IDENTITY((uvec2(1u)), uvec2(0u, 0u) + ((uvec2(1u))))) | ((uvec2(1u)))) / uvec2(1u, 1u)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))), true))), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.y * _GLF_struct_replacement_0.workgroup_id;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1239.8073)), bool(false))) : _GLF_FUZZED(4.9))) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(-5.6)), bool(false)))), float(_GLF_FUZZED(16.00)), bool(false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(true, (true) && true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y = workgroup_base;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true)))
      barrier();
     barrier();
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-470.392) : injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), max(~ (0), ~ (0)))))), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, min(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)).z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), (false ? _GLF_FUZZED(usubBorrow(workgroup_size, num_workgroup, workgroup_base)) : GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, min(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)).z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz) ^ uvec3(0u, 0u, 0u)).y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz) << uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u)).z, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, _GLF_IDENTITY((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz), ((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)) << uvec3(0u, 0u, 0u)) : _GLF_FUZZED(GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_size))) << uvec3(0u, 0u, 0u)).z))) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), (true ? _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u))), max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z) >> 0u) + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u))) : _GLF_FUZZED((subgroup_id % workgroup_base)))), uint(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, clamp(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, uvec3(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u) + (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)).y * _GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, _GLF_IDENTITY((GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z), 0u ^ ((_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, uvec4(1u, 1u, 1u, 1u) * (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup)).xyz.z))) << _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz, (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).z) + 0u)) >> 0u) + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, uvec4(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup[0], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup[1], _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, clamp(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup))[2], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup[3])).xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) >> 0u), 1u)))) - 0u) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, _GLF_IDENTITY(max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup), uvec4(0u, 0u, 0u, 0u) | (max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup)))).xyz.b), uint(uvec3(true ? _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz) ^ uvec3(0u, 0u, 0u)).y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz) << uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u)).z, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, _GLF_IDENTITY((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz), ((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)) << uvec3(0u, 0u, 0u)) : _GLF_FUZZED(GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_size))) << uvec3(0u, 0u, 0u)).z))) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), (true ? _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u))), max(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.y * GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z) >> 0u) + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u))) : _GLF_FUZZED((subgroup_id % workgroup_base)))), uint(uvec4(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, clamp(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz, uvec3(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u) + (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz)).y * _GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, _GLF_IDENTITY((GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z), 0u ^ ((_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, uvec4(1u, 1u, 1u, 1u) * (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup)).xyz.z))) << _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id)))), (_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz, (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).z) + 0u)) >> 0u) + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, uvec4(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup[0], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup[1], _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, clamp(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup))[2], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup[3])).xyz.z, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z) + 0u), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) >> 0u), 1u)))) - 0u) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, _GLF_IDENTITY(max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup), uvec4(0u, 0u, 0u, 0u) | (max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup)))).xyz.b), 1u, 0u)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))), bvec3(bvec4(bvec3(false, true, true), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), bvec3(bvec4(bvec3(false, true, true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), bvec3(bvec4(bvec3(false, true, true), true)))), true))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(bvec3(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))))), false)))))))), false || (bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false), bvec3(bvec3(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))))), false)))))))), false || (bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true))), _GLF_IDENTITY(true, true && (true))))), true)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0)))), injectionSwitch), vec2(1.0, 1.0) * (clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch), vec2(1.0, 1.0) * (clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, log(1.0), 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 0.0, log(1.0), 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(mat2x4(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, log(1.0), 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 0.0, log(1.0), 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) + vec2(0.0, 0.0)), injectionSwitch)).x)))) - 0.0), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), injectionSwitch), vec2(1.0, 1.0) * (clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch), vec2(1.0, 1.0) * (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch), (clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)) * vec2(1.0, 1.0))))).x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x)))) - 0.0)), float(_GLF_FUZZED(-740.043)), bool(false))) - length(vec2(0.0, 0.0))) > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true, false))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(11932) : int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0)))))))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) + (0 | 0))) | (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(11932) : int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))))))))) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 & -81704); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 & -9921); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.3)), vec2(vec4(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.3)), 1.0, 0.0))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.3)), vec2(vec4(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.3)), 1.0, 0.0))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))))))) || false)), true, true, _GLF_IDENTITY(true, ! (! (true)))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (_GLF_IDENTITY(! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), ! (! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))))), _GLF_IDENTITY(bool(bool(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), bool(bvec2(bool(bool(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), false)))), true))))))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(inversesqrt(injectionSwitch)))), injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))))) - vec2(0.0, 0.0)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0)))), injectionSwitch)).y))), _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)))) || false, ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)))) || false, ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)))) || false, ! (! ((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)))) || false))))))))))))) && true))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-0.1)))) - 0.0)) / 1.0) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))), (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)))) || false)))) && true))))), bool(bvec2((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))), (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)))) || false)))) && true))))), true)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))) && true))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), bool(bvec4(! (false), false, false, true)))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true, false)), (bool(bvec4(false, true, true, false))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup) >> _GLF_IDENTITY((uvec4(0u, 0u, 0u, 0u) & uvec4(165746u, 104161u, 160578u, 101114u)), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (true ? uvec4(0u, 0u, 0u, 0u) : _GLF_FUZZED(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup))) | _GLF_IDENTITY(((uvec4(0u, 0u, 0u, 0u) & uvec4(165746u, 104161u, 160578u, 101114u))), max(((uvec4(0u, 0u, 0u, 0u) & uvec4(165746u, 104161u, 160578u, 101114u))), _GLF_IDENTITY(((uvec4(0u, 0u, 0u, 0u) & uvec4(165746u, 104161u, 160578u, 101114u))), (((uvec4(0u, 0u, 0u, 0u) & uvec4(165746u, 104161u, 160578u, 101114u)))) << uvec4(0u, 0u, 0u, 0u)))))).xyz.y * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz, (true ? GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz : _GLF_FUZZED((bitfieldInsert(uvec3(113986u, 1238u, 108638u), GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_size, 79405, -68186) - GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_size)))).z, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz, (_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz, (true ? GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz : _GLF_FUZZED(uvec3(71064u, 190804u, 28074u))))) >> uvec3(0u, 0u, 0u)).z), (~ (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z)) ^ 0u))), uint(uvec3(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z, ~ (~ (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uint(1u))), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) + 0u) ^ 0u)))))) + ((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_17num_workgroupsubgroup_idsubgroup_local_idnum_workgroup.xyz.z + 1) % GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.z);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged2_0_3_66_3_1_16GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenext_virtual_gid.w = next_virtual_gid;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz.x = GLF_merged2_0_3_66_3_1_16GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenext_virtual_gid.w;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.x = GLF_merged2_0_3_78_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_13next_virtual_gidsubgroup_local_idsubgroup_sizesubgroup_id.xyz.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     atomicStore(buf[GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.x], _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bvec4(! (bool(false)), true, true, false)))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(864.558)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))))))) : _GLF_FUZZED(-0.3)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))], clamp(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))], buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))], buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))])), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 do
  {
   do
    {
     GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup.xyz.y = read_1;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4.2)), bool(false)))), float(_GLF_FUZZED(-5.7)), bool(false)))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, _GLF_IDENTITY((GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup) >> uvec4(0u, 0u, 0u, 0u), clamp((GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup) >> uvec4(0u, 0u, 0u, 0u), (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup) >> uvec4(0u, 0u, 0u, 0u), (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup) >> uvec4(0u, 0u, 0u, 0u)))).xyz, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, (_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, min(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, _GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup))))) >> uvec4(0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, uint(uint(0u))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size))))), 0u, 0u)).xyz, (_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup) >> uvec4(0u, 0u, 0u, 0u)).xyz) + uvec3(0u, _GLF_IDENTITY(0u, (0u) * 1u), 0u)))).x], uint(_GLF_IDENTITY(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup, (GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_16_1_1_6_2_1_13next_virtual_gidread_1subgroup_sizenum_workgroup) >> (uvec4(0u, 0u, 0u, 0u) ^ uvec4(0u, 0u, 0u, 0u))).xyz.y + 1), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 1 * (64))) >> 0), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
}
