#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 mat2x3 _f0;
 mat3x2 _f1;
 uvec3 _f2;
 mat4 _f3;
 mat3x4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 _GLF_struct_6 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_8 {
 uint subgroup_local_id;
 uvec3 _f0;
 _GLF_struct_7 _f1;
 uvec3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 mat4x2 _f1;
 int _f2;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 bvec4 _f1;
 bvec4 _f2;
 uvec2 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 ivec3 _f1;
 bvec3 _f2;
 float _f3;
 uint read_1;
 _GLF_struct_3 _f4;
 bvec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat2x4 _f1;
 mat3 _f2;
 mat3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_1 {
 float _f0;
 ivec4 _f1;
 _GLF_struct_0 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 bvec4 _f1;
 _GLF_struct_4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(gl_SubgroupInvocationID, uvec3(1u), _GLF_struct_7(mat2x4(1.0), _GLF_struct_6(mat2x3(1.0), mat3x2(1.0), uvec3(1u), mat4(1.0), mat3x4(1.0), vec4(1.0)), bvec2(true)), uvec3(1u), mat2x3(1.0));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_8.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(1.0, ivec4(1), _GLF_struct_0(vec4(1.0), mat2x4(1.0), mat3(1.0), mat3(1.0), uvec3(1u))), bvec4(true), _GLF_struct_4(_GLF_struct_2(ivec4(1), bvec4(true), bvec4(true), uvec2(1u), uvec3(1u)), ivec3(1), bvec3(true), 1.0, atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, 0), _GLF_struct_3(mat4x2(1.0), mat4x2(1.0), 1), bvec3(true), mat2x3(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_5._f2.read_1 + 1), 4, 64, _GLF_IDENTITY(4, clamp(4, 4, 4)));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
