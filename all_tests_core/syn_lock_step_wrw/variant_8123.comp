#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(int(int(7)))), int(7)))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), ~ (_GLF_IDENTITY(~ (int(0)), ~ (~ (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ((1 & 1) | 1) * (0))), int(0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), ((! (false))) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), false || (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))) || false)))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(log(1.0)), 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(log(1.0)), 1.0))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(false, ! (! (false)))), false)), bool(bvec2(bool(bvec2(true && (_GLF_IDENTITY(false, ! (! (false)))), false)), true))))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x;
 do
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(ivec2(-4883, 66049), ivec2(1, 1) * (ivec2(-4883, 66049))).t * -8890) & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) : _GLF_FUZZED(-7.9))) > injectionSwitch.y))))
              barrier();
            }
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (58444 & 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))) || _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 1) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), false)))), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), 0 + (int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))))))) ^ 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (0 >> _GLF_IDENTITY(int(5), int(5))))) : int(4)))), 0 + (int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) - (0 | 0))))))))) ^ 0)), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), 0 + (int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))))))) ^ 0)))))) | 0)), int(4))), int(ivec4((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), 0 + (int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))))))) ^ 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), 0 + (int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))) | (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))))))))) ^ 0)), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4)))), 0 + (int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))), 0 + (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))))))))) ^ 0)))))) | 0)), int(4))), 0, 1, ((0 | 0) >> _GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4)), int(_GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0))), max(ivec4(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))))), max(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))))), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), (0 >> _GLF_IDENTITY(int(6), int(6))) | (~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), _GLF_IDENTITY(int(ivec4(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), 0, 0, (0 ^ 1))), (true ? int(ivec4(~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), 0, 0, (0 ^ 1))) : _GLF_FUZZED(_injected_loop_counter)))), 0, 0, 1))) : _GLF_FUZZED((_injected_loop_counter & -81396)))))), int(4)), 1, 0, 0), _GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) - 0), 4, 4))), (int(4)) - 0), int(4)), 1, 0, 0), (true ? ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, _GLF_IDENTITY(0, 0 + (0)), 0) : _GLF_FUZZED(ivec4(-95041, 14682, -90091, 5017)))))))))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), int(_GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), max(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), _GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), (_GLF_IDENTITY(true ? ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0) : _GLF_FUZZED(ivec4(-95041, 14682, -90091, 5017)), (true ? ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0) : _GLF_FUZZED(ivec4(-95041, 14682, -90091, 5017))) ^ ivec4(0, 0, 0, 0)))))))))), (false ? _GLF_FUZZED(63587) : _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(4, 4)), 4)))))), int(_GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), max(ivec4(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) + 0)), int(4)), 1, 0, 0), _GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), (true ? ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (0 >> _GLF_IDENTITY(int(5), int(5))))), (int(ivec2(0, (0 >> _GLF_IDENTITY(int(5), int(5)))))) - 0)), 0) : _GLF_FUZZED(ivec4(-95041, 14682, -90091, 5017)))))))))), (((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), int(_GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), clamp(int(int(0)), int(int(0)), _GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))))))), max(ivec4(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(45931) : _GLF_IDENTITY(int(4), (int(4)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91144)))) - 0)))), int(_GLF_IDENTITY(4, (68136 & 0) + (4)))), 1, 0, 0), _GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) << 0)) >> 0), int(4)), 1, 0, 0), (true ? ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) << 0))), _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), 0) : _GLF_FUZZED(ivec4(-95041, 14682, -90091, 5017))))))))))) | (((_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) / 1), int(_GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), ((0 >> _GLF_IDENTITY(int(3), int(3)))) / 1)), int(4)), 1, 0, 0), max(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), _GLF_IDENTITY(ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0), (true ? ivec4(0 >> _GLF_IDENTITY(int(4), int(4)), 1, 0, 0) : _GLF_FUZZED(ivec4(-95041, 14682, -90091, 5017))))))))))))))))) << _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 + (int(0))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), uvec2(0u, 0u) | (uvec2(subgroup_local_id, 0u)))) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u ^ (1u))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)), clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (0u) ^ 0u)), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + _GLF_IDENTITY(0u, (0u) | 0u)), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), _GLF_IDENTITY(min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)), min(_GLF_IDENTITY(min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)), uvec2(0u, 0u) | (min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u))) | 0u), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), max(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)))), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), (_GLF_IDENTITY(0u, (0u) + 0u)) - 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))))), min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), 0u + (uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << _GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), uvec2(0u, 0u))))))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(1u, ~ (~ (1u)))), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), 0u ^ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, min((0u) + 0u, (0u) + 0u))), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, ((0u) + 0u) - 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(1u, ~ (~ (1u)))), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) ^ uvec2(0u, 0u))) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))), clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) - 0u)) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) - 0u)) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))))), min((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) - 0u)) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) - 0u)) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), _GLF_IDENTITY(1u, max(1u, 1u))))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))))))) | 0u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u))))))), ~ (~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), 0u), (uvec2(subgroup_local_id, 0u)) << uvec2(0u, 0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))), ~ (~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), min(uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u), uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u)), 1u))))))))))) + (uint(uvec2(subgroup_local_id, 0u)))))))))))))) : _GLF_FUZZED(workgroup_size)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size))), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size))))) | 0u), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))) % subgroup_size), (true ? workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))) % subgroup_size), (true ? workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))) : _GLF_FUZZED(subgroup_size))), uint(uint(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))), max(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))), _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))) / (0u ^ 1u)) + ((subgroup_local_id + 1) % subgroup_size), (true ? workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(subgroup_size)))))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), clamp(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))))))) ^ 0u) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), clamp(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))))))) ^ 0u) + 1))) % subgroup_size), 1u * (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), clamp(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), 1u, 1u, (0u & 80454u))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))))), 1u, 1u, _GLF_IDENTITY((0u & 80454u), ((0u & 80454u)) | ((0u & 80454u))))))))) ^ 0u) + 1) % subgroup_size))), (true ? workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) * 1u)), 1u, 1u))) + ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))) % subgroup_size) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(virtual_gid) : workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), (true ? workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (86305 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0) < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(mix(next_virtual_gid, workgroup_id, false)) : _GLF_IDENTITY(0u, min(0u, 0u)))) >> _GLF_IDENTITY(uint(3u), uint(3u))) + (_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid))))], uint(1), 4, 64, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4) << 0, ((4) << 0) << 0)))), 4), (clamp(4, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) << 0))), 4)) / 1))), min(~ (_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), ~ (~ (_GLF_IDENTITY(clamp(4, 4, 4), ~ (~ (clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (4) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1)), 4))))))))), ~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             do
              {
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                        {
                         barrier();
                        }
                      }
                    }
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(319.429)), bool(false))) : _GLF_FUZZED(-147.599))) > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true)))))), bool(bvec2(! (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, exp(tan(0.0)), 1.0, 0.0))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true)))))), false)))))))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((0 & 45867), int(_GLF_IDENTITY(ivec4((0 & 45867), 0, 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4((0 & 45867), 0, 1, 0))))) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) << (0 >> _GLF_IDENTITY(int(4), int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 1 * (0))); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ (0 << _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) - 0)) << 0))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-76473) : 2)))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-90365 & 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 0) ^ 0)); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   for(int _injected_loop_counter = ((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), clamp(_GLF_IDENTITY(int(4), (int(4)) - 0), _GLF_IDENTITY(int(4), (int(4)) - 0), _GLF_IDENTITY(int(4), (int(4)) - 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), clamp(_GLF_IDENTITY(4, (4) | 0), 4, 4))), (int(4)) - 0))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED((++ workgroup_id)) : next_virtual_gid))], uint(read_1 + 1), 4, 64, 4);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(false))), float(injectionSwitch.y), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
