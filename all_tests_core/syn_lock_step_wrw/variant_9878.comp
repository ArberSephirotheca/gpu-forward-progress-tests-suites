#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_41 {
 bvec2 _f0;
 mat2x3 _f1;
 mat2 _f2;
 mat3 _f3;
 bvec4 _f4;
 int _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_40 {
 int _f0;
 bvec2 _f1;
 float _f2;
 uvec4 _f3;
 bvec3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_42 {
 bvec4 _f0;
 _GLF_struct_40 _f1;
 _GLF_struct_41 _f2;
} ;

struct _GLF_struct_38 {
 bvec3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_37 {
 ivec4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_36 {
 mat4 _f0;
 bvec3 _f1;
 mat4 _f2;
 bool _f3;
 int _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_39 {
 _GLF_struct_36 _f0;
 uint _f1;
 _GLF_struct_37 _f2;
 _GLF_struct_38 _f3;
 vec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_34 {
 float _f0;
 bvec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_35 {
 _GLF_struct_34 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_43 {
 _GLF_struct_35 _f0;
 int _injected_loop_counter;
 _GLF_struct_39 _f1;
 _GLF_struct_42 _f2;
} ;

struct _GLF_struct_32 {
 uint _f0;
 uvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_31 {
 mat4x2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_29 {
 uvec4 _f0;
 bool _f1;
 mat4 _f2;
 mat2x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_28 {
 mat3x4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_27 {
 ivec4 _f0;
 mat2x3 _f1;
 float _f2;
} ;

struct _GLF_struct_30 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
} ;

struct _GLF_struct_25 {
 mat3 _f0;
 int _f1;
 uint _f2;
} ;

struct _GLF_struct_24 {
 bvec3 _f0;
 mat3x2 _f1;
 float _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_23 {
 ivec4 _f0;
 mat2x4 _f1;
 bvec4 _f2;
 mat4 _f3;
 mat3x2 _f4;
 float _f5;
} ;

struct _GLF_struct_26 {
 _GLF_struct_23 _f0;
 _GLF_struct_24 _f1;
 vec3 _f2;
 ivec2 _f3;
 _GLF_struct_25 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_33 {
 _GLF_struct_26 _f0;
 _GLF_struct_30 _f1;
 _GLF_struct_31 _f2;
 vec4 _f3;
 uvec3 _f4;
 uvec3 _f5;
 uint workgroup_size;
 _GLF_struct_32 _f6;
} ;

struct _GLF_struct_20 {
 mat3x4 _f0;
 ivec3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_19 {
 uint subgroup_size;
 mat2x3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 mat2 _f1;
 mat4x2 _f2;
 mat4 _f3;
 _GLF_struct_20 _f4;
} ;

struct _GLF_struct_17 {
 vec3 _f0;
 mat3 _f1;
 float _f2;
 float _f3;
 uvec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 bvec3 _f1;
 int _f2;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 mat3 _f2;
 int _f3;
} ;

struct _GLF_struct_22 {
 _GLF_struct_18 _f0;
 ivec4 _f1;
 _GLF_struct_21 _f2;
 bvec2 _f3;
 mat2x3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_13 {
 ivec3 _f0;
 mat2x4 _f1;
 bvec2 _f2;
 mat3x4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_14 {
 bool _f0;
 uint next_virtual_gid;
 ivec4 _f1;
 ivec2 _f2;
 _GLF_struct_13 _f3;
} ;

struct _GLF_struct_11 {
 ivec4 _f0;
 mat2x3 _f1;
 vec3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
 int _f1;
 mat4x2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 ivec2 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 mat2 _f1;
 bvec2 _f2;
 uint subgroup_local_id;
 vec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 vec2 _f1;
 bvec4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
} ;

struct _GLF_struct_4 {
 float _f0;
 bool _f1;
 bool _f2;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 vec2 _f1;
 uvec2 _f2;
 mat4x2 _f3;
 bvec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_5 {
 int _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 uvec3 _f3;
 ivec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_2 _f0;
 mat4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_8 _f3;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 ivec2 _f1;
 ivec4 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_1 {
 uint subgroup_id;
 int _f0;
 _GLF_struct_0 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(gl_SubgroupID, 1, _GLF_struct_0(uvec2(1u), ivec2(1), ivec4(1), _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), min(ivec4(1), ivec4(1)))) << (ivec4(0, 0, 0, 0) >> _GLF_IDENTITY(_GLF_IDENTITY(ivec4(5), ivec4(5)), clamp(_GLF_IDENTITY(ivec4(5), ivec4(5)), _GLF_IDENTITY(ivec4(5), ivec4(5)), _GLF_IDENTITY(ivec4(5), ivec4(5))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)) || false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 & 75941); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))) || (_GLF_WRAPPED_LOOP(false))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_18(_GLF_struct_16(ivec4(1), bvec3(true), 1), _GLF_struct_17(_GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(1.0)), mat3(1.0), 1.0, 1.0, uvec4(1u), uvec4(1u)), mat3(1.0), 1), ivec4(1), _GLF_struct_21(_GLF_struct_19(gl_SubgroupSize, mat2x3(1.0), uvec2(1u)), mat2(1.0), mat4x2(1.0), mat4(1.0), _GLF_struct_20(mat3x4(1.0), ivec3(1), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, 1)), int(ivec3(int(ivec4(1, 1, 1, 1)), 0, (0 ^ 1)))))))), bvec2(true), mat2x3(1.0), bvec2(true));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true)))))))))
  return;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_2(_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), (false ? _GLF_FUZZED(ivec4(92443, 84253, 26512, 8548)) : ivec4(1)))) | ivec4(0, 0, 0, 0))), _GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5.4) : 0.0)), 0.0, 0.0) + (mat4(1.0))), _GLF_struct_5(1, _GLF_struct_3(vec4(1.0), vec2(1.0), uvec2(1u), mat4x2(1.0), bvec3(_GLF_IDENTITY(true, ! (! (true)))), ivec2(1)), _GLF_struct_4(1.0, true, true), uvec3(1u), ivec4(1), ivec2(1)), _GLF_struct_8(_GLF_struct_6(mat3x2(1.0), vec2(1.0), bvec4(true), ivec2(1)), _GLF_struct_7(_GLF_IDENTITY(vec2(1.0), (vec2(1.0)) * vec2(1.0, 1.0)), mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, true, false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (true) || false)), gl_SubgroupInvocationID, vec2(1.0), mat4(1.0))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_IDENTITY(true, bool(bvec2(true, true))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), (bool(bool(_GLF_IDENTITY(false, false || (false))))) || false)), (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.1, _GLF_IDENTITY(-4.7, (-4.7) + 0.0))))), mix(vec2(_GLF_FUZZED(27.82), _GLF_IDENTITY(_GLF_FUZZED(-9.0), float(_GLF_IDENTITY(mat2(_GLF_FUZZED(-9.0), 0.0, 1.0, 1.0), mat2(1.0) * (mat2(_GLF_FUZZED(-9.0), 0.0, 1.0, 1.0)))))), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.1, -4.7)))))[0], min((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.1, -4.7)))))[0], (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.1, -4.7)))))[0])), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.1, -4.7)))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))) && true)), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(false, false || (false)))), (bool(bvec4(false, false, false, false))) || false))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), 1)), (int(ivec2(int(1), 1))) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) << 0)) - 0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)))) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 1, 0))))) && true); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1.3)), float(injectionSwitch.x), bool(true))))), 0.0))) < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))) || (false))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))) || ((injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 21040)); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), 1.0, log(1.0))))) * 1.0)))))
          return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), _GLF_IDENTITY(min(~ (gl_NumWorkGroups.x), _GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), ~ (gl_NumWorkGroups.x)))), ~ (~ (min(~ _GLF_IDENTITY((gl_NumWorkGroups.x), max(_GLF_IDENTITY((gl_NumWorkGroups.x), (_GLF_IDENTITY((gl_NumWorkGroups.x), (false ? _GLF_FUZZED(135183u) : (gl_NumWorkGroups.x)))) | ((gl_NumWorkGroups.x))), (gl_NumWorkGroups.x))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(0u, 0u, 0u), 1u)), (uvec3(uvec4(uvec3(0u, 0u, 0u), 1u))) / uvec3(1u, 1u, 1u)))))).x), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(0u, 0u, 0u), 1u)), (uvec3(uvec4(uvec3(0u, 0u, 0u), 1u))) / uvec3(1u, 1u, 1u)))))).x), (true ? ~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(0u, 0u, 0u), 1u)), (uvec3(uvec4(uvec3(0u, 0u, 0u), 1u))) / uvec3(1u, 1u, 1u)))))).x) : _GLF_FUZZED(185454u))), ~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(0u, 0u, 0u), 1u)), (uvec3(uvec4(uvec3(0u, 0u, 0u), 1u))) / uvec3(1u, 1u, 1u)))))).x))), min(~ (gl_NumWorkGroups.x), ~ (gl_NumWorkGroups.x))))))))));
 _GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(_GLF_struct_26(_GLF_struct_23(ivec4(1), mat2x4(1.0), bvec4(true), mat4(1.0), mat3x2(_GLF_IDENTITY(1.0, float(vec2(1.0, _GLF_IDENTITY(dot(vec2(1.0, length(0.0)), vec2(0.0, 1.0)), dot(vec2(1.0, length(0.0)), vec2(0.0, 1.0))))))), 1.0), _GLF_struct_24(bvec3(true), mat3x2(1.0), 1.0, ivec3(1)), vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))) ^ ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.5, -756.389)))), injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((ivec2(-90349, -85315) ^ 52086)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))) ^ _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(98.17) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_ZERO(0.0, injectionSwitch.x))) - ivec2(0, 0)), ivec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)), (ivec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) << ivec2(0, 0))))), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0)), ~ (~ (ivec2(1))))) ^ ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x)))))), ivec2(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ~ (~ _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) | ((ivec2(1))))))) ^ ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))) ^ ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec2(0, 0))), ((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))) ^ ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) >> ivec2(0, 0)), _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) ^ ivec2(0, 0)))), _GLF_struct_25(mat3(1.0), 1, 1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), (0u ^ 1u))))), _GLF_struct_30(_GLF_struct_27(ivec4(1), mat2x3(1.0), 1.0), _GLF_struct_28(mat3x4(1.0), ivec2(1)), _GLF_struct_29(uvec4(1u), true, mat4(1.0), mat2x4(1.0), vec2(1.0))), _GLF_struct_31(mat4x2(1.0), ivec3(1)), vec4(1.0), uvec3(1u), uvec3(1u), _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)) | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (true ? (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)) | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)) : _GLF_FUZZED(bitfieldReverse(num_workgroup))))), _GLF_struct_32(1u, uvec4(1u), uvec2(1u)));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), true && (((injectionSwitch.x < injectionSwitch.y)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))) || false)))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(_GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(mat3x2(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), max(normalize(vec4(1.0, 1.0, 1.0, 1.0)), normalize(vec4(1.0, 1.0, 1.0, 1.0))))), cos(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, sin(sin(0.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0), (mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(618.215) : _GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), min(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(9417.4232)), float(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), bool(true))), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0 * (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), float(vec2(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, log(1.0) + (1.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), 1.0)))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0)) * mat3(1.0))), (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-57.65)), bool(false))), 1.0, 1.0, 1.0)))), round(length(normalize(vec4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), dot(vec3(round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 0.0, 1.0, abs(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0)), 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) ? _GLF_FUZZED(mat2x3(676.036, -4.4, -416.918, -8.6, -398.490, 2.1)) : mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))))), (_GLF_IDENTITY(vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))))), (vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0))))))) / vec4(1.0, 1.0, 1.0, 1.0))) / vec4(1.0, 1.0, 1.0, 1.0))), min(float(_GLF_IDENTITY(vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))))), (_GLF_IDENTITY(vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))))), (vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0))))))) / vec4(1.0, 1.0, 1.0, 1.0))) / vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))))), (_GLF_IDENTITY(vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))))), (vec4(1.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0))))))) / vec4(1.0, 1.0, 1.0, 1.0))) / vec4(1.0, 1.0, 1.0, 1.0)))))), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 0.0, 1.0, abs(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0)), 1.0))))), 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(vec4(-3.6, -42.22, 74.96, 9824.7213).w) : _GLF_IDENTITY(1.0, min(1.0, 1.0))))), vec3(0.0, 0.0, 0.0))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0), (mat3x4(injectionSwitch, length(vec4(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(178.470)), float(0.0), bool(true))), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)))), round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(37.27)), float(1.0), bool(true))), 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(length(normalize(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), clamp(float(vec2(1.0, 0.0)), float(vec2(1.0, 0.0)), float(vec2(1.0, 0.0))))), 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0)) * _GLF_IDENTITY(mat3(1.0), mat3(1.0) * (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))) / vec2(1.0, 1.0))))).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, 1.0))) - vec4(0.0, 0.0, 0.0, 0.0)), normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(mat3x2(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), cos(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)), 0.0, 0.0, 0.0, sin(sin(0.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(mat3x2(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), cos(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(367.091)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0, sin(sin(0.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(mat3x2(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), cos(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)), 0.0, 0.0, 0.0, sin(sin(0.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, 0.0)), min(float(mat3x2(_GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(mat3x2(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), cos(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)), 0.0, 0.0, 0.0, sin(sin(_GLF_IDENTITY(0.0, min(0.0, 0.0)))))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))))), float(mat3x2(_GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6980.5680))), 0.0, 1.0, 0.0, 1.0, 1.0)), min(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6980.5680))), 0.0, 1.0, 0.0, 1.0, 1.0)), float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6980.5680))), 0.0, 1.0, 0.0, 1.0, 1.0))))), 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), float(mat3x2(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), cos(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), sin(sin(0.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), clamp(normalize(vec4(1.0, 1.0, 1.0, 1.0)), normalize(vec4(1.0, 1.0, 1.0, 1.0)), normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, 0.0))))), 0.0))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0), (mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), float(vec2(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), 1.0)))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0)) * mat3(1.0))), (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), dot(vec3(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0), (mat3x4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(37.27)), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(37.27)), mix(float(_GLF_FUZZED(7.7)), float(float(_GLF_FUZZED(37.27))), bool(true))), float(_GLF_FUZZED(37.27)), float(_GLF_FUZZED(37.27)))), float(1.0), bool(true))), 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(round(length(normalize(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), _GLF_IDENTITY(clamp(float(vec2(1.0, 0.0)), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), clamp(vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0)))), float(vec2(1.0, 0.0))), float(vec4(clamp(float(vec2(1.0, 0.0)), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), clamp(vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0)))), float(vec2(1.0, 0.0))), 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), vec3(0.0, 0.0, 0.0))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0)) * mat3(1.0)))) / vec2(1.0, 1.0))))).y))), false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          break;
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++))) - 0))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.5), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(8.3)), bool(false)))), vec2((injectionSwitch)[0], _GLF_FUZZED(4.2)), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)))), false))), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             break;
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), max(int(3), int(3))) : _GLF_FUZZED(_injected_loop_counter))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))));
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_WRAPPED_LOOP(false))), false), bvec2(bvec4(bvec2(! (! (_GLF_WRAPPED_LOOP(false))), false), false, true)))))));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))).x > injectionSwitch.y)))) && true)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / sqrt(1.0), mix(float((1.0) / sqrt(1.0)), float(_GLF_FUZZED(4.6)), bool(false)))), 1.0)).y))), false)), false, false, true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))).x > injectionSwitch.y)))) && true)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0)), 1.0)).y))), false)), false, false, true))))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 1.0))).x)), 0 + (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))) && true))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false))))), bool(bvec2(false, true)))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))), bool(bvec3(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))), false, true))))))), false), true)))))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                        {
                        }
                       else
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                      return;
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 | 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ (0 << _GLF_IDENTITY(int(2), int(2)))))
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            continue;
                                           return;
                                           if(_GLF_DEAD(false))
                                            break;
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            continue;
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat2(injectionSwitch, 0.0, 1.0)), mat2(mat4(transpose(mat2(injectionSwitch, 0.0, 1.0))))))))).x > injectionSwitch.y))));
                }
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.workgroup_size, max(_GLF_struct_replacement_33.workgroup_size, _GLF_struct_replacement_33.workgroup_size)) * workgroup_id, uint(uint(_GLF_IDENTITY(_GLF_struct_replacement_33.workgroup_size, max(_GLF_struct_replacement_33.workgroup_size, _GLF_struct_replacement_33.workgroup_size)) * workgroup_id)));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bvec3(bool(bvec3(true, true, false)), true, true))))))
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ((! (false))) && _GLF_IDENTITY(true, false || (true))))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), true)))) || false)), _GLF_IDENTITY(((! (false))), bool(bvec2(((! (false))), false))) && true)))))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)), bool(bool(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(false, (false) || false), true)))))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size + _GLF_struct_replacement_9._f3._f1.subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_12(_GLF_struct_10(ivec3(1), _GLF_IDENTITY(1, min(1, 1)), mat4x2(1.0), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) << ivec2(0, 0)) / ivec2(1, 1))), ivec2(1), _GLF_struct_11(ivec4(1), mat2x3(1.0), vec3(1.0), uvec3(1u))), _GLF_struct_14(true, workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_struct_replacement_1.subgroup_id) >> 0u) * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size) * 1u), clamp(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size) * 1u), 0u + (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size) * 1u))), _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size) * 1u))), _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (true ? _GLF_struct_replacement_22._f2._f0.subgroup_size : _GLF_FUZZED(workgroup_base))), clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_struct_replacement_22._f2._f0.subgroup_size)), _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (true ? _GLF_struct_replacement_22._f2._f0.subgroup_size : _GLF_FUZZED(140489u))), _GLF_struct_replacement_22._f2._f0.subgroup_size)), clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u)))))), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))))) | _GLF_IDENTITY(0u, (0u) | (0u)))), (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) >> 0u), _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))))) | _GLF_IDENTITY(0u, (0u) | (0u))))) - 0u))), 0u, 1u)))), clamp(false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u)))))), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))))) | _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 1u)))), false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u))), (_GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u)))) * 1u)))), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))))) | _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 1u)))), _GLF_IDENTITY(false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u)))))), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))))) | _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 1u)))), (false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u)))))), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - _GLF_IDENTITY(0u, (0u) ^ 0u)), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))), max(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))), _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))), uint(uvec4(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))), 1u, 1u, 0u))))))) | _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 1u))))) | (false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_struct_replacement_1.subgroup_id) ^ 0u) * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | _GLF_IDENTITY(0u, (0u) | (0u)))))), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : _GLF_struct_replacement_1.subgroup_id)) * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_struct_replacement_1.subgroup_id) - 0u) * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, clamp(_GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_22._f2._f0.subgroup_size)))))) | _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 1u))))))))), ((false ? _GLF_FUZZED(32953u) : (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, (_GLF_struct_replacement_22._f2._f0.subgroup_size) - 0u), max(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, max(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, clamp(_GLF_struct_replacement_1.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, ~ (~ (_GLF_struct_replacement_1.subgroup_id))), _GLF_struct_replacement_1.subgroup_id))) | 0u), _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, min(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (_GLF_struct_replacement_1.subgroup_id) << 0u)) / 1u)) >> 0u), _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_id, (true ? _GLF_struct_replacement_1.subgroup_id : _GLF_FUZZED(num_workgroup))))))) * _GLF_struct_replacement_22._f2._f0.subgroup_size), (clamp(_GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size, _GLF_struct_replacement_1.subgroup_id * _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u) ^ 0u) + _GLF_IDENTITY(((_GLF_struct_replacement_9._f3._f1.subgroup_local_id + 1) % _GLF_struct_replacement_22._f2._f0.subgroup_size), (_GLF_IDENTITY(((_GLF_struct_replacement_9._f3._f1.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % _GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, 0u | (_GLF_struct_replacement_22._f2._f0.subgroup_size))), clamp((_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, 0u | (_GLF_struct_replacement_22._f2._f0.subgroup_size))), (_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, 0u | (_GLF_struct_replacement_22._f2._f0.subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, 0u | (_GLF_struct_replacement_22._f2._f0.subgroup_size))), ((_GLF_IDENTITY(_GLF_struct_replacement_22._f2._f0.subgroup_size, 0u | (_GLF_struct_replacement_22._f2._f0.subgroup_size)))) / 1u)))))), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, min(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, _GLF_struct_replacement_9._f3._f1.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, 0 ^ (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1)))))) % _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u, min(_GLF_IDENTITY((((_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, min(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, _GLF_struct_replacement_9._f3._f1.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, 0 ^ (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1)))))) % _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u, max((((_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, min(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, _GLF_struct_replacement_9._f3._f1.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, 0 ^ (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1)))))) % _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u, (((_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, min(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, _GLF_struct_replacement_9._f3._f1.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, 0 ^ (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1)))))) % _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, min(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, _GLF_struct_replacement_9._f3._f1.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, 0 ^ (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1)))))) % _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u, uint(uvec3((((_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, min(_GLF_struct_replacement_9._f3._f1.subgroup_local_id, _GLF_struct_replacement_9._f3._f1.subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, 0 ^ (_GLF_IDENTITY((1) / 1, min((1) / 1, (1) / 1)))))) % _GLF_struct_replacement_22._f2._f0.subgroup_size)) | 0u, 0u, 1u))))))) - 0u), ivec4(1), ivec2(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) ^ 0)))), _GLF_struct_13(ivec3(1), mat2x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bvec2(true), mat3x4(1.0), uvec3(1u))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) + length(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))))) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_15._f1.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_15._f1.next_virtual_gid, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15._f1.next_virtual_gid, clamp(_GLF_struct_replacement_15._f1.next_virtual_gid, _GLF_struct_replacement_15._f1.next_virtual_gid, _GLF_struct_replacement_15._f1.next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), min(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), (false ? _GLF_FUZZED(130269u) : _GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u ^ 1u) | (_GLF_IDENTITY(1u, (1u) ^ 0u))))), 1u), _GLF_IDENTITY((clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), 1u)), (_GLF_IDENTITY((clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), 1u)), uint(uvec4(_GLF_IDENTITY((clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), 1u)), 0u ^ ((clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), 1u)))), (1u ^ 1u), 0u, 0u)))) | ((clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), 1u)))) + 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), clamp(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), (true ? 0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))) : _GLF_FUZZED(virtual_gid))), 0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), 0u ^ (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), uint(uvec2(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), 0u))))))), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), clamp(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), (true ? 0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))) : _GLF_FUZZED(virtual_gid))), 0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), 0u ^ (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), uint(uvec2(0u ^ (_GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u), 0u | (clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), 0u)))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) ^ 0u), 1u)))), (false ? _GLF_FUZZED(174465u) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(workgroup_id) : 1u)), (1u) ^ 0u), 1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ 0u), 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (true ? ~ (0u) : _GLF_FUZZED(virtual_gid)))), 1u * (~ (_GLF_IDENTITY(~ (0u), (true ? ~ (0u) : _GLF_FUZZED(virtual_gid))))))))))), 1u)), min(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))))))) * (_GLF_struct_replacement_15._f1.next_virtual_gid)), _GLF_struct_replacement_15._f1.next_virtual_gid, _GLF_struct_replacement_15._f1.next_virtual_gid))) - 0u)], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1)))) - 0u)) * 1u), 4, 64, 4);
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0, true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0, true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0)))) && true)))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           for(_GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(_GLF_struct_35(_GLF_struct_34(1.0, bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), false)), true, false)))))) && (true)))), bool(bvec4(true, true, true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), false)), true, false)))))) && (true)))), bool(bvec4(true, true, true, true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true, true), false)), true, false)))))) && (true)))), bool(bvec4(true, true, true, true))))))))), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, true && (true)), true, true))), true, false), false))))))))), mat2(1.0)), uvec4(1u)), 0, _GLF_struct_39(_GLF_struct_36(mat4(1.0), bvec3(true), mat4(1.0), true, 1, mat2x4(1.0)), 1u, _GLF_struct_37(ivec4(1), mat3x4(1.0), uvec4(1u)), _GLF_struct_38(bvec3(true), uvec2(1u)), vec2(1.0), vec4(1.0)), _GLF_struct_42(bvec4(true), _GLF_struct_40(1, bvec2(true), 1.0, uvec4(1u), bvec3(true), uvec3(1u)), _GLF_struct_41(bvec2(true), mat2x3(1.0), mat2(1.0), mat3(1.0), bvec4(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), true)))), 1, _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_43._injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _GLF_struct_replacement_43._injected_loop_counter ++)
            {
             atomicStore(buf[_GLF_struct_replacement_15._f1.next_virtual_gid], uint(_GLF_IDENTITY(read_1, max(read_1, read_1)) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) * 1)), 4, 64, 4);
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      break;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
}
