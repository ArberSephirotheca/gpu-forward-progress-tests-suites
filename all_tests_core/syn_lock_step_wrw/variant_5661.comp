#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uvec3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 mat4x3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_2 {
 int _f0;
} ;

struct _GLF_struct_3 {
 uint read_1;
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 bvec3 _f1;
 mat3 _f2;
 uint _f3;
 vec4 _f4;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 _GLF_struct_1 _f1;
 vec2 _f2;
 mat4x2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_5 _f5;
 _GLF_struct_8 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) >> 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 ^ (1))), 4, 64, 4);
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat3x4(1.0), _GLF_struct_1(_GLF_struct_0(mat4(1.0)), bvec3(true), mat3(1.0), 1u, vec4(1.0)), vec2(1.0), mat4x2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(929.693) : 1.0)), 1.0))), _GLF_struct_3(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 | (64))) / 1), 0), _GLF_struct_2(1)), _GLF_struct_5(_GLF_struct_4(bvec2(true), mat4(1.0))), _GLF_struct_8(mat2(1.0), _GLF_struct_6(mat3x2(1.0), mat4x3(1.0), bvec4(true)), _GLF_struct_7(uvec3(1u), ivec2(1)), bvec3(true)));
 atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_9._f4.read_1 + 1), 4, 64, 4);
}
