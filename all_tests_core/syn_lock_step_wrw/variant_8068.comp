#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, log(1.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(1.0, float(mat4(1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0)))), max(_GLF_IDENTITY(vec2(0.0, 1.0), clamp(vec2(0.0, 1.0), vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), sin(_GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0), vec3(1.0, 1.0, 0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, exp(0.0)))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))), max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), clamp(float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))))))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))), max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), clamp(float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))))))) > injectionSwitch.y))))), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), max(float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0)), float(mat3x2(injectionSwitch.x, 0.0, exp(0.0), 0.0, sin(0.0), 1.0))))) > injectionSwitch.y)))) || false) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))), true && (_GLF_IDENTITY(true, false || (true))))), false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), bool(bvec4(bool(bool((injectionSwitch.x < injectionSwitch.y))), true, true, false)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2730.2279), _GLF_FUZZED(96.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))), _GLF_IDENTITY(true, false || (true)), false, false)), ! (! (bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) && true)) && true), _GLF_IDENTITY(false, false || (false)), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, false, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2730.2279), _GLF_FUZZED(96.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))), _GLF_IDENTITY(true, false || (true)), false, false)), ! (! (bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) && true)) && true), _GLF_IDENTITY(false, false || (false)), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, false, false))))), false)), (bool(bvec2(_GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2730.2279), _GLF_FUZZED(96.36)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))), _GLF_IDENTITY(true, false || (true)), false, false)), ! (! (bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) && true)) && true), _GLF_IDENTITY(false, false || (false)), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, false, false))))), false))) || false))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true)), false || (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! ((false))), ((! ((false)))) || false))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))), ! (! ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))))))), ! (! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))))) || false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))), ! (! ((false))))))), ! (! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))))) || false))))), true && ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))), ! (! ((false))))))), ! (! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))))) || false))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), false, false))), ! (! ((false))))))), ! _GLF_IDENTITY((! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))), ((! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false)))))))))) && true))) || false))), true && ((! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), false, false))), ! (! ((false))))))), ! _GLF_IDENTITY((! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))), ((! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false)))))))))) && true))) || false)))))) || false))))), false, false)), (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))), _GLF_IDENTITY(! (! ((false))), (! (! ((_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))) && true))))), ! (! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))))) || false))))), true && ((_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))), ! (! ((false)))), (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))), ! (! ((false))))) || false)))), ! (! (bool(bool((! _GLF_IDENTITY((false), ! (! ((false))))))))))) || false))))))), false, false))) || false)))), bool(bvec3(bool(_GLF_IDENTITY(false, ! (! (false)))), false, true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + subgroup_local_id, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_id * subgroup_size) ^ 0u) + subgroup_local_id, clamp(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), 0u)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size), (_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size), (max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size)) | (max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size)))) / 1u), (_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))) + (subgroup_size), (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))) + (subgroup_size)) >> 0u)), _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), 0u ^ (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))))), subgroup_size), ~ (~ (max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))))) >> 0u)) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), 1u * (uint(2u))), uint(2u)))))) - (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u | 0u) + (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))) * 1u), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size)))) / 1u)), subgroup_size))) - (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, clamp(3u, 3u, _GLF_IDENTITY(_GLF_IDENTITY(3u, (0u ^ 0u) ^ (3u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(3u, (0u ^ 0u) ^ (3u))), ~ (~ (~ (_GLF_IDENTITY(3u, (0u ^ 0u) ^ (3u))))))))))), (uint(_GLF_IDENTITY(3u, clamp(3u, 3u, _GLF_IDENTITY(3u, (0u ^ 0u) ^ (3u)))))) - 0u), uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) | 0u) : 3u, uint(uint(false ? _GLF_FUZZED(workgroup_id) : 3u))))))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u)), (true ? _GLF_IDENTITY(uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u)), uint(uint(uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))) : _GLF_FUZZED(workgroup_size))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | (workgroup_base), clamp((workgroup_base) | (workgroup_base), (workgroup_base) | (workgroup_base), (workgroup_base) | (workgroup_base))))) - 0u) + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))) - _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))), ((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3276.8932)), bool(false))))) << _GLF_IDENTITY(uint(3u), uint(3u)))) | 0u), ((_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))) - _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))), ((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3276.8932)), bool(false))))) << _GLF_IDENTITY(uint(3u), uint(3u)))) | 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))) - _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))), ((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3276.8932)), bool(false))))) << _GLF_IDENTITY(uint(3u), uint(3u)))) | 0u), 0u ^ ((_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))) - _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))), ((uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3276.8932)), bool(false))))) << _GLF_IDENTITY(uint(3u), uint(3u)))) | 0u)))))) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) << 0u), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | (workgroup_base), clamp((workgroup_base) | (workgroup_base), (workgroup_base) | (workgroup_base), (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ (0u | 0u))) | (workgroup_base))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | (workgroup_base), clamp((workgroup_base) | (workgroup_base), (workgroup_base) | (workgroup_base), (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ (0u | 0u))) | (workgroup_base)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u, 0u | ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | (workgroup_base), clamp((workgroup_base) | (_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))))), (workgroup_base) | (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) >> 0u)))), (workgroup_base) | (workgroup_base))))) - 0u))) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), clamp(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) | (uvec4(subgroup_size, 1u, 0u, 1u)))) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u))), uvec4(subgroup_size, 1u, 0u, 1u), uvec4(subgroup_size, 1u, 0u, 1u))))), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), subgroup_size))) - _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u)))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))) - 0u)), ((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3276.8932)), bool(false))))) << _GLF_IDENTITY(uint(3u), uint(3u)), (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3276.8932)), bool(false))))) << _GLF_IDENTITY(uint(3u), uint(3u))) - (1u ^ ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) | 0u)) + ((subgroup_local_id + 1) % subgroup_size)) * 1u), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), uint(_GLF_IDENTITY(uvec2(0u + _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), 1u), clamp(uvec2(0u + (subgroup_size), 1u), _GLF_IDENTITY(uvec2(0u + (subgroup_size), 1u), uvec2(1u, 1u) * (uvec2(0u + (subgroup_size), 1u))), uvec2(0u + (subgroup_size), 1u)))))), subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), uint(_GLF_IDENTITY(uvec2(0u + _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), 1u), clamp(uvec2(0u + (subgroup_size), 1u), _GLF_IDENTITY(uvec2(0u + (subgroup_size), 1u), uvec2(1u, 1u) * (uvec2(0u + (subgroup_size), 1u))), uvec2(0u + (subgroup_size), 1u)))))), subgroup_size))) >> (0u & 176482u))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), uint(_GLF_IDENTITY(uvec2(0u + _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), 1u), clamp(uvec2(0u + (subgroup_size), 1u), _GLF_IDENTITY(uvec2(0u + (subgroup_size), 1u), uvec2(1u, 1u) * (uvec2(0u + (subgroup_size), 1u))), uvec2(0u + (subgroup_size), 1u)))))), subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), uint(_GLF_IDENTITY(uvec2(0u + _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), 1u), clamp(uvec2(0u + (subgroup_size), 1u), _GLF_IDENTITY(uvec2(0u + (subgroup_size), 1u), uvec2(1u, 1u) * (uvec2(0u + (subgroup_size), 1u))), uvec2(0u + (subgroup_size), 1u)))))), subgroup_size))) >> (0u & 176482u)))) | 0u) - _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uint(3u), uint(3u))), max(_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uint(3u), uint(3u))), ((_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uint(3u), uint(3u)))) / 1u), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uint(3u), uint(3u)))))) + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) << 0u) + 1) % subgroup_size)))) | _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | 0u, 1u * ((subgroup_id) | 0u))) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (subgroup_size)))))), subgroup_size))) - (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u)), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u))) / 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u)))))) + ((subgroup_local_id + 1) % subgroup_size)), ~ (_GLF_IDENTITY(~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (_GLF_IDENTITY(subgroup_size, (subgroup_size) | ((0u >> _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))))))), subgroup_size))) - (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u)))) + ((subgroup_local_id + 1) % subgroup_size))), ~ (~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (subgroup_size)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (subgroup_size)))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (subgroup_size))))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (subgroup_size)))))))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), clamp(_GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) / 1u), 0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), (0u + (subgroup_size)) | (0u + (subgroup_size)))))))), subgroup_size))) - (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(3u), uint(3u)))) + ((subgroup_local_id + 1) % subgroup_size)))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), false, false), bvec3(bvec3(bvec3((_GLF_DEAD(false)), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)), false, false), bvec3(bvec3(bvec3((_GLF_DEAD(false)), false, false)))))))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     barrier();
    }
   else
    {
    }
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) ^ 0), 0);
 do
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) | (_GLF_IDENTITY(0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), _GLF_IDENTITY(int(0), 1 * (int(0))))) >> _GLF_IDENTITY(int(0), int(0))), (0 | _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (0 | 0) ^ (_GLF_IDENTITY(int(0), int(0))))), min(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (0 | 0) ^ (_GLF_IDENTITY(int(0), int(0))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) >> 0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (0 | 0) ^ (_GLF_IDENTITY(int(0), int(0)))))))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), (_GLF_IDENTITY(uint(read_1 + 1), (false ? _GLF_FUZZED(num_workgroup) : uint(read_1 + 1)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))), 0 | (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))), 0 | (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))))) : _GLF_FUZZED(bitfieldExtract(40746, _injected_loop_counter, -72855)))))) != 1, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) ^ ivec2(0, 0))), ~ (~ (int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) ^ ivec2(0, 0))))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (_injected_loop_counter != 1)), _GLF_IDENTITY(true, ! (! (true))), true, false)))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), ((~ (_injected_loop_counter))) - (0 >> _GLF_IDENTITY(int(0), int(0)))))))), 0 | (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), 0 | (~ (_injected_loop_counter)))))))))))) != _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6793) : 1)), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 1)), _GLF_IDENTITY(true, true && (true)), true, false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(953.267)))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3619.7118) : injectionSwitch.x)) > injectionSwitch.y), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))) && true))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), true, true)))) || false))))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
