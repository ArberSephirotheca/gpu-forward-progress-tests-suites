#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (1), int(int(_GLF_IDENTITY(1 * (1), 0 | (_GLF_IDENTITY(1 * (1), int(ivec3(1 * (1), 1, 1))))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, 0 + (1)), 1), (_GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, 0 + (1)), 1), (clamp(1, _GLF_IDENTITY(1, 0 + (1)), 1)) | 0)) - 0)) | (_GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(8788) : clamp(1, 1, 1)))))), 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(6), int(6))) | (1)))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) - 0)))) | 0))))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, (0 | 0) + (1))) * 1)))) / (1 & 1))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))), clamp((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))), min(_GLF_IDENTITY((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))), ~ (_GLF_IDENTITY(~ ((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))), _GLF_IDENTITY(int(ivec4(~ ((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))), 0, 0, 1)), int(_GLF_IDENTITY(ivec3(int(ivec4(~ ((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))), 0, 0, 1)), 0, 1), max(ivec3(int(ivec4(~ ((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))), 0, 0, 1)), 0, 1), ivec3(int(ivec4(~ ((1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))), 0, 0, 1)), 0, 1)))))))), (1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0)))))), (1) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-96070) : _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (0)))))))))))), int(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(61661) : _GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(5), int(5))))), 1 * ((false ? _GLF_FUZZED(61661) : _GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(5), int(5))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(0, max(0, 0))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))))))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = ((ivec2(48651, 88521).s << (-59756 | 95920)) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, min(0, 0))), ~ (~ (0 ^ 0)))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))))), max(_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(74958) : 0))), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(_GLF_IDENTITY(ivec4((0 ^ 0), 0, 0, 0), ivec4(0, 0, 0, 0) ^ (ivec4((0 ^ 0), 0, 0, 0))))))))))), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), _GLF_IDENTITY(0, 0 ^ (0)) ^ (int(ivec4(_GLF_IDENTITY((0 ^ 0), max((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - 0))), 0, 0, 0))))))))))), _GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))))), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) * 1) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (_GLF_IDENTITY(int(ivec4((0 ^ 0), 0, 0, 0)), (_GLF_IDENTITY(int(ivec4((0 ^ 0), 0, 0, 0)), (int(ivec4((0 ^ 0), 0, 0, 0))) - 0)) | 0)))))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ((0 >> _GLF_IDENTITY(int(5), int(5)))) - (ivec4(-45496, 89577, -9651, 89310).w & 0)), 1, 0), (ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, 0)) | ivec4(0, 0, 0, 0))) / ivec4(1, 1, 1, 1))))))) ^ 0)))), max((_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))))), max(_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(74958) : 0))), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(_GLF_IDENTITY(ivec4((0 ^ 0), 0, 0, 0), ivec4(0, 0, 0, 0) ^ (ivec4((0 ^ 0), 0, 0, 0))))))))))), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), _GLF_IDENTITY(0, 0 ^ (0)) ^ (int(ivec4(_GLF_IDENTITY((0 ^ 0), max((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - 0))), 0, 0, 0))))))))))), _GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))))), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) * 1) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (_GLF_IDENTITY(int(ivec4((0 ^ 0), 0, 0, 0)), (_GLF_IDENTITY(int(ivec4((0 ^ 0), 0, 0, 0)), (int(ivec4((0 ^ 0), 0, 0, 0))) - 0)) | 0)))))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ((0 >> _GLF_IDENTITY(int(5), int(5)))) - (ivec4(-45496, 89577, -9651, 89310).w & 0)), 1, 0), (ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, 0)) | ivec4(0, 0, 0, 0))) / ivec4(1, 1, 1, 1))))))) ^ 0)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))))), max(_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(74958) : 0))), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(_GLF_IDENTITY(ivec4((0 ^ 0), 0, 0, 0), ivec4(0, 0, 0, 0) ^ (ivec4((0 ^ 0), 0, 0, 0))))))))))), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), _GLF_IDENTITY(0, 0 ^ (0)) ^ (int(ivec4(_GLF_IDENTITY((0 ^ 0), max((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - 0))), 0, 0, 0))))))))))), _GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))))), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) * 1) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (_GLF_IDENTITY(int(ivec4((0 ^ 0), 0, 0, 0)), (_GLF_IDENTITY(int(ivec4((0 ^ 0), 0, 0, 0)), (int(ivec4((0 ^ 0), 0, 0, 0))) - 0)) | 0)))))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ((0 >> _GLF_IDENTITY(int(5), int(5)))) - (ivec4(-45496, 89577, -9651, 89310).w & 0)), 1, 0), (ivec4(_GLF_IDENTITY(0 ^ 0, ~ (~ _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(int(ivec4((0 ^ 0), 0, _GLF_IDENTITY(0, (0) - 0), 0)), 0 ^ (int(ivec4((0 ^ 0), 0, 0, 0))))))), (0 >> _GLF_IDENTITY(int(5), int(5))), 1, 0)) | ivec4(0, 0, 0, 0))) / ivec4(1, 1, 1, 1))))))) ^ 0)))))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, max(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec3(1.0, 1.0, 1.0))))))))))) || false))
                            barrier();
                          }
                         else
                          {
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) >> 0)) | (7))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(34969) : _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))))
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bool((false) || false), ! (! (bool((false) || false))))))) && true))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec2(bool(bvec4(false, true, false, true)), false))))))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-96.53)), bool(false))), 0.0)))))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0)))))).y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((97.17 - -481.713)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-730.923))), _GLF_FUZZED(-8.4)), bvec2(true, false))).y))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), false)))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 & 15592); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))) && true)) || false))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true && (false)), (! (true && (false))) && true), (! (true && (false))) || false))), (_GLF_IDENTITY(true && (false), _GLF_IDENTITY(true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false))))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false))))), ! (! (true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false)))))))))))), false || (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false))))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false))))), ! (! (true && (_GLF_IDENTITY(true && (false), bool(bool(true && (false)))))))))))))))))) && true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-70801)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((_GLF_IDENTITY(74.43, max(74.43, 74.43)) * 99.20))), bvec2(true, false))).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-70801)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((74.43 * 99.20))), bvec2(true, false))).x < injectionSwitch.y)))))))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-70801)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((_GLF_IDENTITY(74.43, max(74.43, 74.43)) * 99.20))), bvec2(true, false))).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-70801)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((74.43 * 99.20))), bvec2(true, false))).x < injectionSwitch.y)))))))))), false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) ^ 0))) >> int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(true))), float(0.0), bool(true))), 1.0, 0.0)) * mat3(1.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-3427.5494) : dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-3.7)), bool(false)))) - 0.0)), sin(0.0), 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)), (_GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9.9)), bool(false))), 1.0, 0.0))) - 0.0)), sin(0.0), 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)), (float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0)))), 1.0, 0.0)), (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) - 0.0)), sin(_GLF_IDENTITY(0.0, (0.0) + 0.0)), 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0))) - 0.0)) - 0.0)))), (_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) ^ 0))) >> int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(true))), float(0.0), bool(true))), 1.0, 0.0)) * mat3(1.0))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-3427.5494) : dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-3.7)), bool(false)))) - 0.0)), sin(0.0), 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)), (_GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9.9)), bool(false))), 1.0, 0.0))) - 0.0)), sin(0.0), 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)), (float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0)))), 1.0, 0.0)), (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) - 0.0)), sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))) + 0.0)), 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0))) - 0.0)) - 0.0))))) || false)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))) << 0)) | (0 << _GLF_IDENTITY(int(7), int(7)))) > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), 1.0), (true ? mat4x2(injectionSwitch.x, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), sin(0.0), 1.0), vec4(log(1.0), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0) : _GLF_FUZZED(2.7))), 0.0, 1.0)), dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), 1.0) : _GLF_FUZZED(mat4x2(6540.9513, 86.31, -603.672, 3150.7391, -64.38, -810.258, 8.7, 0.2)))))) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), gl_WorkGroupSize.x)))), clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(true, (true) || false) ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), gl_WorkGroupSize.x));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(25066) : int(2))))), min(int(2), int(_GLF_IDENTITY(2, (2) / 1)))))), ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))))) << 0), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), false || (_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))), (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), false || (_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))))))) || false))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), false || _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))))), ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))))) || false)), (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), false || (_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(_GLF_IDENTITY(2, 0 | (2)))))))))) || false)))) && true)), true)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(6757.2497)), vec2(_GLF_FUZZED(4916.5894), ((injectionSwitch))[1]), bvec2(false, true))), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), (false || (_GLF_DEAD(false))) || false))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))), false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))), bool(bvec4(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) - 0)) + 0), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), ! (! (bool(_GLF_IDENTITY(true, (true) && true)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), ! (! (bool(_GLF_IDENTITY(true, (true) && true)))))), false, true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))))) || false))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), false, true), false)))))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
              }
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-32.94) : injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(48.21)), bool(false))) > injectionSwitch.y)) || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
                barrier();
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))), true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
   else
    {
    }
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), (gl_WorkGroupID) | (gl_WorkGroupID))) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2(_GLF_FUZZED((8.0 + -665.555)), _GLF_FUZZED(8.1)), bvec2(false, false))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))), _GLF_IDENTITY(max(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))), workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), (uint(uint(workgroup_id))) | (uint(uint(workgroup_id)))))))), uint(uvec3(_GLF_IDENTITY(max(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))), workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), (uint(uint(workgroup_id))) | (uint(uint(workgroup_id)))))))), min(max(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))), workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), (uint(uint(workgroup_id))) | (uint(uint(workgroup_id)))))))), max(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))), workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), (uint(uint(workgroup_id))) | _GLF_IDENTITY((uint(uint(workgroup_id))), (_GLF_IDENTITY((uint(uint(workgroup_id))), ((uint(uint(workgroup_id)))) << 0u)) | 0u)))))))), 1u, 0u))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y, mix(float(_GLF_FUZZED(-6951.7866)), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y), bool(true)))), float(_GLF_FUZZED(-0.9)), bool(false))) : _GLF_IDENTITY(_GLF_FUZZED(0.8), (true ? _GLF_FUZZED(0.8) : _GLF_FUZZED(distance(acosh(642.077), 4119.2469))))))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(70774) : 5)), _GLF_IDENTITY(5, (5) | (5)), 5))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(70774) : 5)), _GLF_IDENTITY(5, (5) | (5)), 5))), (int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(70774) : 5)), _GLF_IDENTITY(5, (5) | (5)), 5)))) - 0), int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(70774) : 5)), _GLF_IDENTITY(5, (5) | (5)), 5)))))), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), ~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(_GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(ivec2(-23062, -72987).t))), 5)))))))))), 0, 0))))), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : _GLF_IDENTITY(~ (int(5)), (~ (int(5))) ^ 0)))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))))), (_GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))))), ~ (_GLF_IDENTITY(~ (~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))))), max(~ (~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))))), ~ (~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))))))))))) * (1 & 1))), 0, 0)))))), min(~ (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((int(5)), max((int(5)), _GLF_IDENTITY((int(5)), int(int((int(5))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-73990, (_GLF_IDENTITY(-73990, (-73990) | (-73990))) << 0)) : ~ (int(5))))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))))), (0 >> _GLF_IDENTITY(int(2), int(2))) | (~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))))))), 0, 0)))))), ~ (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) - 0)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), ~ (~ ((_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))))), 0, 0)))))))))), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((int(5)), int(_GLF_IDENTITY(int((int(5))), clamp(int((int(5))), int((int(5))), _GLF_IDENTITY(int((int(5))), (int((int(5)))) / 1))))), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((int(5)), int(_GLF_IDENTITY(int((int(5))), clamp(int((int(5))), int((int(5))), _GLF_IDENTITY(int((int(5))), (int((int(5)))) / 1))))), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))) << 0), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((int(5)), int(_GLF_IDENTITY(int((int(5))), clamp(int((int(5))), int((int(5))), _GLF_IDENTITY(int((int(5))), (int((int(5)))) / 1))))), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((int(5)), int(_GLF_IDENTITY(int((int(5))), clamp(int((int(5))), int((int(5))), _GLF_IDENTITY(int((int(5))), (int((int(5)))) / 1))))), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))) << 0)))))) | (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), clamp(~ (_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), ~ (_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), min(~ (_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5))))), ~ (_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-73990) : ~ (int(5)))))))))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))) ^ 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          {
                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3125.1936)), float(0.0), bool(true))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                              barrier();
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(int(6), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, ~ (~ (6)))))) << 0)))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0)))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY((6) << 0, clamp((6) << 0, (6) << 0, (6) << 0))))))) * 1)) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0))), min((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0))), (1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0))))), (1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0)))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(6, 1), (ivec2(6, 1)) >> ivec2(0, 0))))))), int(_GLF_IDENTITY(6, (6) << 0))))) / 1)))); _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), false)), (bool(bvec4(true, false, true, false))) || false))))
                                  {
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), _GLF_IDENTITY(int(4), 0 | (int(4))))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                          {
                                           barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))))));
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4234.3084)), bool(false))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.7), _GLF_FUZZED((-471.969 / 3873.1626))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true))))));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, 0 | (0)), (false ? _GLF_FUZZED(-90548) : 1 ^ _GLF_IDENTITY(0, 0 | (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-28.01)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((0 << _GLF_IDENTITY(int(3), int(3))) | 0))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) + 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(bitCount(num_workgroup)) : 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), ~ (~ (_GLF_IDENTITY(0, (0) << 0))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))
            {
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(6.4) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), min(uvec2(subgroup_size, 1u), uvec2(subgroup_size, 1u))), (false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), min(uvec2(subgroup_size, 1u), uvec2(subgroup_size, 1u)))) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (false ? _GLF_FUZZED(uvec2(_GLF_IDENTITY(89455u, ~ (_GLF_IDENTITY(~ (89455u), max(~ (89455u), ~ (89455u))))), 67349u)) : uvec2(subgroup_size, 1u)))), (uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), _GLF_IDENTITY((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))), uvec2(0u, 0u) ^ ((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), uvec2(0u, 0u) ^ (false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), min(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))))) ^ uvec2(0u, 0u))))))))))))) / 1u)), clamp(0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (false ? _GLF_FUZZED(uvec2(_GLF_IDENTITY(89455u, ~ (_GLF_IDENTITY(~ (89455u), max(~ (89455u), ~ (89455u))))), 67349u)) : uvec2(subgroup_size, 1u)))), (uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), _GLF_IDENTITY((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))), uvec2(0u, 0u) ^ ((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), uvec2(0u, 0u) ^ (false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), min(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))))) ^ uvec2(0u, 0u))))))))))))) / 1u)), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (false ? _GLF_FUZZED(uvec2(_GLF_IDENTITY(89455u, ~ (_GLF_IDENTITY(~ (89455u), max(~ (89455u), ~ (89455u))))), 67349u)) : uvec2(subgroup_size, 1u)))), (uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), _GLF_IDENTITY((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))), uvec2(0u, 0u) ^ ((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), uvec2(0u, 0u) ^ (false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), min(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))))) ^ uvec2(0u, 0u))))))))))))) / 1u)), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (false ? _GLF_FUZZED(uvec2(_GLF_IDENTITY(89455u, ~ (_GLF_IDENTITY(~ (89455u), max(~ (89455u), ~ (89455u))))), 67349u)) : uvec2(subgroup_size, 1u)))), (uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), _GLF_IDENTITY((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))), uvec2(0u, 0u) ^ ((uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), uvec2(0u, 0u) ^ (false ? _GLF_FUZZED(uvec2(89455u, 67349u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), min(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u))))), (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (_GLF_IDENTITY(uvec2(subgroup_size, 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(78595u, 115847u)) : uvec2(subgroup_size, 1u)))))) ^ uvec2(0u, 0u))))))))))))) / 1u)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, true, true))))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) < 1); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), 4, 64, 4);
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), max(_GLF_IDENTITY(64, min(64, 64)), _GLF_IDENTITY(64, min(64, 64)))), 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
