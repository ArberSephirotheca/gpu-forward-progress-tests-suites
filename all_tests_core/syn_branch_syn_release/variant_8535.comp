#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size;
 uvec3 GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroup;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size.xyz = GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroup;
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size;
 uvec4 GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size.xyz.xy = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size.xyz.xy;
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy.x = subgroup_id;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size.w = subgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.z = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size.w;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.z;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenum_workgroupsubgroup_size.xyz.z = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.z = workgroup_size;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED((-67516 - -65068)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.z * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.w = workgroup_base;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy.y = GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.w;
 uint virtual_gid = GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy.y + GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy.x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + subgroup_local_id;
 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.y = virtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.y;
  }
 uint next_virtual_gid = GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy.y + GLF_merged3_0_2_50_2_1_13_3_1_14GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basesubgroup_sizeworkgroup_base.xy.x * GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x);
 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   atomicStore(buf[GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(subgroup_local_id + 1 < GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x)
  {
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.x], uint(2), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_size.x], uint(2), 4, 64, 4);
  }
}
