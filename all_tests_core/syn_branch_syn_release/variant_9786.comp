#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 uint next_virtual_gid;
 float _f0;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
 vec3 _f1;
 int _f2;
 mat4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 uint workgroup_id;
 uint _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 uvec3 _f1;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
 uint _f1;
 mat4x3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_9 {
 uint _f0;
 bvec2 _f1;
 bvec3 _f2;
 mat4 _f3;
 mat3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
 mat2x4 _f1;
 mat2 _f2;
 float _f3;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 ivec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_6 {
 uint _f0;
 vec2 _f1;
 ivec2 _f2;
 mat3 _f3;
 mat2x3 _f4;
 mat2x4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
} ;

struct _GLF_struct_4 {
 int _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 mat4 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 uvec2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_15 {
 _GLF_struct_7 _f0;
 uint _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_14 _f3;
 bvec3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 vec4 _f1;
 ivec2 _f2;
 ivec3 _f3;
 uint _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uint virtual_gid;
 _GLF_struct_1 _f1;
 uvec3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 _GLF_struct_2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.9)), vec2(_GLF_FUZZED((true ? -4.9 : 1901.6031)), _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))))) || false), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))))) || false), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_7(_GLF_struct_4(1, mat4x3(1.0), mat3x2(1.0), mat2x4(1.0), mat4(1.0), mat4(1.0)), uvec2(1u), _GLF_struct_5(vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_struct_6(1u, vec2(1.0), ivec2(1), mat3(1.0), mat2x3(1.0), mat2x4(1.0), vec4(1.0))), 1u, _GLF_struct_11(_GLF_IDENTITY(vec2(1.0), mat2(1.0) * (vec2(1.0))), _GLF_struct_8(ivec4(1), mat2x4(1.0), mat2(1.0), _GLF_IDENTITY(1.0, abs(1.0) * (1.0))), _GLF_struct_9(1u, bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), false || (! ((true)))))) || false))), false, false)), bool(bool(bool(bvec4(true, true, false, false))))), (bool(bvec4(true, true, false, false))) || false))), bvec3(true), mat4(1.0), mat3(1.0), mat2x3(1.0)), _GLF_struct_10(ivec3(1), 1u, mat4x3(1.0), ivec2(1)), ivec4(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) + 0)))), mat2(1.0)), _GLF_struct_14(_GLF_struct_12(mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u), min(gl_WorkGroupID.x, gl_WorkGroupID.x)), (false ? _GLF_IDENTITY(_GLF_FUZZED(packHalf2x16(injectionSwitch)), clamp(_GLF_FUZZED(packHalf2x16(injectionSwitch)), _GLF_IDENTITY(_GLF_FUZZED(packHalf2x16(injectionSwitch)), (_GLF_FUZZED(_GLF_IDENTITY(packHalf2x16(injectionSwitch), min(packHalf2x16(injectionSwitch), packHalf2x16(injectionSwitch))))) | (_GLF_FUZZED(packHalf2x16(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), determinant(_GLF_IDENTITY(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) * mat3(1.0))), _GLF_IDENTITY(mat3(mat4(mat3(_GLF_IDENTITY(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) * mat3(1.0))))), mat3(1.0) * (mat3(mat4(mat3(_GLF_IDENTITY(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) * mat3(1.0))))))))))), 0.0, round(length(normalize(cos(0.0)))))), (false ? _GLF_FUZZED(vec2(71.09, 511.222)) : vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0)), 0.0, round(length(normalize(cos(0.0))))))))))))), _GLF_FUZZED(_GLF_IDENTITY(packHalf2x16(injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(packHalf2x16(injectionSwitch), clamp(packHalf2x16(injectionSwitch), packHalf2x16(injectionSwitch), packHalf2x16(injectionSwitch))), _GLF_IDENTITY(max(packHalf2x16(injectionSwitch), _GLF_IDENTITY(packHalf2x16(injectionSwitch), uint(uvec2(packHalf2x16(injectionSwitch), _GLF_IDENTITY(0u, (0u) | 0u))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(max(packHalf2x16(injectionSwitch), _GLF_IDENTITY(packHalf2x16(injectionSwitch), uint(uvec2(packHalf2x16(injectionSwitch), 0u)))), (true ? max(packHalf2x16(injectionSwitch), _GLF_IDENTITY(packHalf2x16(injectionSwitch), uint(uvec2(packHalf2x16(injectionSwitch), 0u)))) : _GLF_FUZZED(num_workgroup))))), uint(uint(uint(uint(_GLF_IDENTITY(max(packHalf2x16(injectionSwitch), _GLF_IDENTITY(packHalf2x16(injectionSwitch), uint(uvec2(packHalf2x16(injectionSwitch), 0u)))), (true ? max(packHalf2x16(injectionSwitch), _GLF_IDENTITY(packHalf2x16(injectionSwitch), uint(uvec2(packHalf2x16(injectionSwitch), 0u)))) : _GLF_FUZZED(num_workgroup))))))))))) | (packHalf2x16(injectionSwitch)))))) : gl_WorkGroupID.x)), 1u, ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)))), uvec3(1u), _GLF_struct_13(uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) + 0u)))))), vec3(1.0), 1, mat4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(round(length(normalize(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec4(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))), false, false, false)))))))) ? round(length(normalize(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))) : _GLF_FUZZED(9304.0740))), 1.0, 0.0, 1.0, abs(0.0), 0.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), 0.0), (mat3x4(1.0, 1.0, exp(0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(log(1088.2249)))), 1.0))), round(_GLF_IDENTITY(length(normalize(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), min(length(normalize(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_IDENTITY(length(normalize(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), max(length(normalize(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), length(normalize(_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))))), 1.0, 0.0, 1.0, abs(0.0), 0.0, round(length(normalize(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat2x3(1.0, 1.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(94800u))), float(1.0), bool(true)))), _GLF_ZERO(0.0, injectionSwitch.x)))), 1.0, 1.0)))), 0.0)) * mat3(1.0))))), mat4(1.0))), _GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true)), bvec3(bvec4(bvec3(bvec3(true)), false))))), vec4(1.0));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(5, 5, 5))), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (38733 & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))) * _GLF_struct_replacement_15._f3._f0.workgroup_id;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat2(1.0), _GLF_struct_2(_GLF_struct_0(mat4x2(1.0), vec4(1.0), ivec2(1), ivec3(1), 1u, uvec3(1u)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)), _GLF_struct_1(ivec3(1)), uvec3(1u), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-10038) : 1)), 1))) ^ (0 >> _GLF_IDENTITY(int(0), int(0)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 1u))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1), (false ? _GLF_FUZZED(149724u) : false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) : (subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1)))))), (~ (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1))))) ^ 0u), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1))))) ^ 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1)))), 0u ^ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1))))))) ^ 0u))))) % subgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : 0u)))) | (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), min(subgroup_id, subgroup_id)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat2x3(mat2x3(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), mat2x3(mat4(mat2x3(mat2x3(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))))))))).y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u + _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), min(subgroup_id, subgroup_id)))) >> 0u))), max((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat2x3(mat2x3(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), mat2x3(mat4(mat2x3(mat2x3(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))))))))).y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u + _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), min(subgroup_id, subgroup_id)))) >> 0u))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mat2x3(mat2x3(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), mat2x3(mat4(mat2x3(mat2x3(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))))))))).y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u + _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), min(subgroup_id, subgroup_id)))) >> 0u)))))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), clamp(_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), (~ (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(7728u) : (subgroup_local_id + 1))) % subgroup_size))) * 1u), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))))), min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))))))), (((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)))))) >> 0u), ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))))))) - 0u), ~ (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(subgroup_size)))))) + 1) % subgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, 1u, 1u))))) + ((_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + 1) % subgroup_size), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false) ? _GLF_FUZZED(packUnorm2x16(vec2(2.9, 7765.6278))) : workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))) + 1), (false ? _GLF_FUZZED(subgroup_local_id) : (subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_local_id) : (subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))))))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-54169)))))))), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) / 1u) : _GLF_FUZZED(uint(7409.0887)))) % subgroup_size))))) << _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(atomicMax(subgroup_size, subgroup_size)) : _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))), 1.0);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7957.7819) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.7)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), false)))))))), false, true)))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))) || _GLF_IDENTITY(false, (false) || false)), false)))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), _GLF_IDENTITY(false, true && (false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))), false)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))), false)), true))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))), false)), true)))))))))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true)))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))))))))))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))) / vec2(1.0, 1.0))).x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(max(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(255.409)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(8271.2213)), vec2(_GLF_FUZZED(60.30), (mat2(1.0) * (injectionSwitch))[1]), bvec2(false, true)))))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             atomicStore(buf[_GLF_struct_replacement_3._f1.virtual_gid], uint(1), 4, 64, 4);
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), true))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec3((! (_GLF_DEAD(false))), true, false))))) || false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))), (true ? float(mat4x3(injectionSwitch.x, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))) : _GLF_FUZZED(104.248)))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1340.2339)), _GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))) < subgroup_size, bool(_GLF_IDENTITY(bool(subgroup_local_id + 1 < subgroup_size), (_GLF_IDENTITY(bool(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 1 * (_GLF_IDENTITY(1, (1) | (1)))) < subgroup_size), bool(_GLF_IDENTITY(bvec3(bool(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), (1), (1))) | (1)) < subgroup_size), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(bool(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(_GLF_IDENTITY(bool(subgroup_local_id + 1 < subgroup_size), (_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), (true ? uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u)) : _GLF_FUZZED(workgroup_base)))) < subgroup_size), bool(_GLF_IDENTITY(bvec3(bool(subgroup_local_id + _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), 0 | ((1)))) < subgroup_size), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 1.0, abs(1.0), 1.0, 0.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 1.0, abs(1.0), 1.0, 0.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 1.0, abs(1.0), 1.0, 0.0, 0.0)))), (vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), 1.0, 0.0, 0.0))) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) : _GLF_FUZZED(mat2(-38.89, -2.5, 3431.9641, 2814.5205)))))).y)), false), bvec3(bvec4(bvec3(bool(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (1) | (1)) < subgroup_size), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false), false)))))) || false))), ! (! (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size), ! (_GLF_IDENTITY(! (bool(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size)), (! (bool(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size))) || false))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), clamp(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)))) < subgroup_size), bool(_GLF_IDENTITY(bvec3(bool(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) + 0))) < subgroup_size), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) - 0.0))), false), bvec3(bvec4(bvec3(bool(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(9416) : 1))) | (1)) < subgroup_size), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))))) || false))))))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bool(subgroup_local_id + 1 < subgroup_size)))), ! (! ((_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bool(subgroup_local_id + 1 < subgroup_size))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(sign(7173)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4)))))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   int i = 0;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- _GLF_IDENTITY(8.2, (8.2) * 1.0)))), bool(false)))), float(_GLF_FUZZED(-4.5)), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, bool(bool(true)))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))))))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | (1)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) ^ 0)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, abs(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(329.216) : 0.0)), _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))))), 1.0, 0.0, tan(0.0), 0.0, 0.0, log(1.0), 0.0, 1.0, tan(0.0), determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0)))), _GLF_IDENTITY(0.0, (0.0) + 0.0), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(15.94) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(590.574))))), (true ? false ? _GLF_FUZZED(15.94) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(590.574))))) : _GLF_FUZZED(-9204.4233))))), _GLF_IDENTITY(determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0)), 0.0 + (_GLF_IDENTITY(determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) * 1.0)) / 1.0), 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), 0.0 + (dot(vec3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), max((_GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), (_GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))) / 1.0), 1.0, 1.0))), 1.0)), float(mat2x4(determinant(mat4(sqrt(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(ldexp(-4.5, i)) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0)), 1.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, 1.0)))))))).y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))))) / vec2(1.0, 1.0)).y))) && true))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_struct_replacement_16.next_virtual_gid], uint(2), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), true && (_GLF_IDENTITY((false), ((false)) || false))) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))) || false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | 0)) ^ (0 >> _GLF_IDENTITY(int(6), int(6))))))))), (true ? int(_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, ~ (~ (4)))))) : _GLF_FUZZED(_injected_loop_counter))), int(4)))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), int(ivec4(int(5), 1, 0, 1)))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (true)))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.2), _GLF_FUZZED(_GLF_IDENTITY(538.796, clamp(538.796, _GLF_IDENTITY(538.796, _GLF_IDENTITY(float(mat4(538.796, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0)), min(float(mat4(538.796, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0)), float(mat4(538.796, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0))))), 538.796)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-18800) : int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), clamp(min(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), min(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), min(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)))))))); _injected_loop_counter ++)
        {
         atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_16.next_virtual_gid, (0u << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u ^ (1u))))))) | (_GLF_struct_replacement_16.next_virtual_gid)), 1u * (_GLF_IDENTITY(_GLF_struct_replacement_16.next_virtual_gid, (0u << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))))))))) | (_GLF_struct_replacement_16.next_virtual_gid))))], uint(2), 4, 64, 4);
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 & (26792 ^ 65711)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))) || false))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(0, 0, 0)), 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch))) + vec2(0.0, 0.0)).y), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch))) + vec2(0.0, 0.0)).y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch))) + vec2(0.0, 0.0)).y))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (1 | 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
}
