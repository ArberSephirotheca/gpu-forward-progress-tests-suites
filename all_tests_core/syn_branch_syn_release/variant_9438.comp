#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))))) || false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(97089) : int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))) | (2)), _GLF_IDENTITY(2, (2) << 0)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) << (0 >> _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(int(2), (int(2)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), max((_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, 0 + (0)) : _GLF_FUZZED((false ? int(970.053) : 11762)))) | 0), (0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.1) : injectionSwitch.y))))))))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(5.3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 5.3 : _GLF_FUZZED(5.3)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-87.54)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(5.3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 5.3 : _GLF_FUZZED(4.7)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-87.54)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false, true, false))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1439.4214) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.7) : injectionSwitch.x)))) > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))), int(0)))))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(932.104), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-34.26)), mat2(1.0) * (vec2((injectionSwitch)[0], _GLF_FUZZED(-34.26)))), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))))), injectionSwitch)).y), true && ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(932.104), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-34.26)), mat2(1.0) * (vec2((injectionSwitch)[0], _GLF_FUZZED(-34.26)))), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))))), injectionSwitch)).y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 | (0 | 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && (_GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, true && (false))))))))))), bool(bvec3(! (! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false))))))), true, false)))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! _GLF_IDENTITY((false), true && ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! _GLF_IDENTITY((false), true && ((false))))))))), bool(bvec3(! (! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false))))))), true, false)))))))))))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), true && ((false))))))))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(false, true, false, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-76.17), (_GLF_FUZZED(-76.17)) - 0.0), _GLF_FUZZED(-9674.3972)), vec2((mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(49.59)), float(1.0), bool(true)))) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, log(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) && true)), false || ((injectionSwitch.x > injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))), false), bvec2(bvec2(bvec2(! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))), false))))))))), bool(bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(0.0), 1.0, 1.0, 0.0, exp(0.0), 1.0))).x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0))), cos(0.0), abs(0.0), abs(0.0), 0.0, 0.0), mat3x2(mat3(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0))), cos(0.0), abs(0.0), abs(0.0), 0.0, 0.0))))), float(mat4x3(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0))), cos(0.0), abs(0.0), abs(0.0), 0.0, 0.0), mat3x2(mat3(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0))), cos(0.0), abs(0.0), abs(0.0), 0.0, 0.0))))), 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) > injectionSwitch.y))) && true)), false || ((injectionSwitch.x > injectionSwitch.y))))))))))))))))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) || false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, true))))) && true)) && true)) && true, bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0)))))), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true, false)))))))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y), _GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true, false || ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true), false || (_GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true), bool(bool(((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))))))), (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-880.737, 45.47)) : injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)) && true))))))), ! (! (false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), bvec3(bvec3(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))))), true, true))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), bvec3(bvec3(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))))), true, true)))))), bool(bvec3(! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), bvec3(bvec3(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))))), true, true)))))), true, false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, true), bvec3(bvec3(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))) && true)), _GLF_IDENTITY(true, ! (! (true))), true)))))), false || (! (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, true), bvec3(bvec3(bvec3((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)), true, true))))))))))) && true)))))))))), false || (((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)), clamp(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)), vec2(1.0, 1.0) * (vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)))), _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)), min(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))[1], (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1], (true ? (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[1] : _GLF_FUZZED(2.2)))) - 0.0)))))))), vec2(_GLF_FUZZED((-2934.4308 - (false ? _GLF_IDENTITY(8.0, mix(float(_GLF_IDENTITY(8.0, (8.0) - 0.0)), float(_GLF_FUZZED(-684.717)), bool(false))) : 920.603))), _GLF_FUZZED(vec4(2.2, 1.4, 43.23, 4.7).a)), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bool((false) || false)), (bool(bool((false) || false))) || false))), false))).y), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), ! (! (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))))), bool(bvec2(_GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), ! (! (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))))), false))))))))))))))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0), mat4(1.0) * (_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0), transpose(transpose(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0))))))), 0.0, 1.0, 0.0, 0.0))).y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.2) : 0.0)), 0.0))), float(_GLF_FUZZED(-29.04)), bool(false))))) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(vec2(-2979.6050, -6.2))))), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y)))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.2) : 0.0)), 0.0))), float(_GLF_FUZZED(-29.04)), bool(false))))) : _GLF_FUZZED(63.51))))), 0.0, 0.0, 0.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(vec2(-2979.6050, -6.2))))), 0.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0))).y)))))))))))))) || _GLF_IDENTITY(((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), 0.0, 1.0)), mix(vec2(_GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), sin(0.0), 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(51.88) : 1.0)))))[0], min((vec2(mat2x4(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), sin(0.0), 0.0, 1.0)))[0], (vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))[0])), _GLF_FUZZED(-430.622)), vec2(_GLF_FUZZED(-694.078), (vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0)))[1]), bvec2(false, true)))).y), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))), ! (! (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec4(-5.6, _GLF_IDENTITY(-740.864, float(_GLF_IDENTITY(mat2(-740.864, 1.0, cos(abs(0.0)), sin(0.0)), transpose(transpose(mat2(-740.864, 1.0, cos(abs(0.0)), sin(_GLF_IDENTITY(0.0, min(0.0, 0.0))))))))), 9401.2837, 887.965) * mat2x4(-413.753, _GLF_IDENTITY(3636.2788, max(3636.2788, 3636.2788)), 81.68, 344.118, -3.9, 0.4, 58.57, 3.6))))).x > injectionSwitch.y)), (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))), true && (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))))) && true))))), bool(_GLF_IDENTITY(bvec3((! ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-325.568))), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))))), true, true), bvec3(bvec4(bvec3((! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.6))), injectionSwitch.y)), injectionSwitch.y))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.6))), injectionSwitch.y)), injectionSwitch.y)))) || false)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))))), ! (! (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))))))))) && true))))), true, true), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))), ((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))) && true)) && true)))))))))))))))))), (((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), 0.0, 1.0)), mix(vec2(_GLF_IDENTITY((vec2(mat2x4(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), sin(0.0), 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(51.88) : 1.0)))))[0], min((vec2(mat2x4(injectionSwitch, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), sin(0.0), 0.0, 1.0)))[0], (vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))[0])), _GLF_FUZZED(-430.622)), vec2(_GLF_FUZZED(-694.078), (vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0)))[1]), bvec2(false, true)))).y), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))), ! (! (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec4(-5.6, _GLF_IDENTITY(-740.864, float(_GLF_IDENTITY(mat2(-740.864, 1.0, cos(abs(0.0)), sin(0.0)), transpose(transpose(mat2(-740.864, 1.0, cos(abs(0.0)), sin(_GLF_IDENTITY(0.0, min(0.0, 0.0))))))))), 9401.2837, 887.965) * mat2x4(-413.753, _GLF_IDENTITY(3636.2788, max(3636.2788, 3636.2788)), 81.68, 344.118, -3.9, 0.4, 58.57, 3.6))))).x > injectionSwitch.y)), (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))), true && (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))))) && true))))), bool(_GLF_IDENTITY(bvec3((! ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-325.568))), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))))), true, true), bvec3(bvec4(bvec3((! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.6))), injectionSwitch.y)), injectionSwitch.y))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.6))), injectionSwitch.y)), injectionSwitch.y)))) || false)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))))), ! (! (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))))))))) && true))))), true, true), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))), ((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))) && true)) && true))))))))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), 0 | (_GLF_IDENTITY(int(5), ~ (~ (int(5)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), 0 | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), int(ivec3((0 >> _GLF_IDENTITY(int(7), int(7))), 1, 0)))) | 0)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)))), (0 | 0) + (max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(151.409, -1425.8662)))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, min(0, 0)))) | 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(0u, uint(uvec2(0u, (1u ^ 1u)))))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ ((~ (_GLF_IDENTITY(0u, uint(uvec2(0u, (1u ^ 1u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)), 10874, 53997)), (true ? _GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y))))) / (1u | 1u))), (subgroup_id) | (subgroup_id)), subgroup_id)), 10874, 53997)) : _GLF_FUZZED(subgroup_local_id)))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)), 10874, 53997)), (true ? _GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y))))) / (1u | 1u))), (subgroup_id) | (subgroup_id)), subgroup_id)), 10874, 53997)) : _GLF_FUZZED(subgroup_local_id)))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)), 10874, 53997)), (true ? _GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y))))) / (1u | 1u))), (subgroup_id) | (subgroup_id)), subgroup_id)), 10874, 53997)) : _GLF_FUZZED(subgroup_local_id)))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))))) ^ uvec3(_GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(10747u), min(_GLF_FUZZED(10747u), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(10747u, 0u | (_GLF_IDENTITY(10747u, ~ (~ (10747u)))))), min(_GLF_FUZZED(10747u), _GLF_FUZZED(10747u))))))), 0u, 0u)) ^ (gl_WorkGroupID), uvec3(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldInsert(subgroup_local_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), 10874, 53997))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) + (uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u))))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) + (uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) + (uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u))))))))), ((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) + (uvec3(uvec3(uvec3(uvec3(0u, 0u, 0u)))))))))) - uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(_GLF_IDENTITY(~ (0u), 0u | (~ (0u))), ~ (0u)))))), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldInsert(subgroup_local_id, subgroup_id, 10874, 53997))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) - 0u), 0u, 0u), clamp((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldInsert(subgroup_local_id, subgroup_id, 10874, 53997))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) - 0u), 0u, 0u), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldInsert(subgroup_local_id, subgroup_id, 10874, 53997))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) - 0u), 0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldInsert(subgroup_local_id, subgroup_id, 10874, 53997))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) - 0u), 0u, 0u), (true ? (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(bitfieldInsert(subgroup_local_id, subgroup_id, 10874, 53997))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) - 0u), 0u, 0u) : _GLF_FUZZED(uvec3(182006u, 120847u, 178347u)))))))))), (uvec3(uvec3(_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(198857u))) : _GLF_FUZZED(bitfieldInsert(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), subgroup_id, _GLF_IDENTITY(10874, max(10874, 10874)), 53997))))))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) | (~ (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), 0u, 0u)))))))))) << uvec3(0u, 0u, 0u)))))) + uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) / 1u), 0u)), 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(10747u), 0u + (_GLF_FUZZED(10747u))))), 0u, 0u)) ^ (gl_WorkGroupID))))).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true)) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false)), (bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false))) && true)) && true)))))) && true), false, true), true))))), ! (! ((false) && true))), true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true)))), ((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true))))) || false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), (_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! _GLF_IDENTITY(((false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))), true)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false)))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true)) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false)), (bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false))) && true)) && true)))))) && true), false, true), true))))), ! (! ((false) && true))), true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true)))), ((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true))))) || false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), (_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! _GLF_IDENTITY(((false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))), true)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false)))), true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true)) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false)), (bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false))) && true)) && true)))))) && true), false, true), true))))), ! (! ((false) && true))), true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true)))), ((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true))))) || false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), (_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! _GLF_IDENTITY(((false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))), true)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false)))), true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true)) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false)), (bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), false)))), false))) && true)) && true)))))) && true), false, true), true))))), ! (! ((false) && true))), true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true)))), ((_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), true && (((false) && true)))))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), false, false)))))) && true), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), true), true))))), ! (! (_GLF_IDENTITY((false), ((false)) || false) && true))), true))))) || false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! ((false) && true))), true))))), (_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true), false, true), true))))), ! (! _GLF_IDENTITY(((false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY(((false) && true), bool(bvec3(((false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))), true)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false)))), true))), false), true))), false))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY((! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), true && ((true))))))) || false, bool(bvec2((! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), true && ((true))))))) || false, false)))))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(! (true)), bool(bvec3(bool(! (true)), false, false))))))), false), false))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 | 0) ^ 1)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))
                                    barrier();
                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0)); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(21.22), _GLF_FUZZED(1.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
                              barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))), ! (! _GLF_IDENTITY(((false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(((false) && true), true && (((false) && true))), true, true)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(((false) && true), true && (((false) && true))), true, true)), bool(bool(bool(bvec3(_GLF_IDENTITY(((false) && true), true && (((false) && true))), true, true)))))))))))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           barrier();
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)));
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-405.272 - 9.5))), vec2(_GLF_FUZZED(-3.0), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), ! (! (bool(false))))), true && (! (_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(int(1)))), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ 0))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))) || (_GLF_WRAPPED_LOOP(false)))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))) || (_GLF_WRAPPED_LOOP(false)))) || false), false, true))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY((int(4)), ((int(4))) >> 0) + 0, (_GLF_IDENTITY((int(4)), ((int(4))) >> 0) + 0) | (_GLF_IDENTITY((int(4)), ((int(4))) >> 0) + 0))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) + 0)))), _GLF_IDENTITY((int(_GLF_IDENTITY(4, (4) ^ 0))), min((int(_GLF_IDENTITY(4, (4) ^ 0))), (int(_GLF_IDENTITY(4, (4) ^ 0))))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))))), _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(false, bool(bvec2(false, true))))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), _GLF_IDENTITY(false, bool(bvec2(false, true))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (injectionSwitch) * mat2(1.0)))).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (injectionSwitch) * mat2(1.0)))).x), float(_GLF_FUZZED(4068.0818)), bool(false))) > injectionSwitch.y))));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5)), _GLF_IDENTITY(min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), max(min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), clamp(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), max(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 1 * (~ (int(5)))))), int(5))) + 0)) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) | 0u) + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(857.752, 68.53)))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) && true)))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) * mat2(1.0), vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), min(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)))), mix(float(_GLF_FUZZED((vec3(-7.1, -834.980, -4.9).y))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), min(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)))), clamp(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), min(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)))), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), min(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)))), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), min(float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0)), float(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.6)), float(0.0), bool(true))), 0.0)), 0.0))))))), bool(true))))) + ((injectionSwitch) * mat2(1.0)))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY((true), false || ((true))) && true) && (false))) && true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u)))), ~ (~ (uvec2(subgroup_local_id, 1u)))))) + 1), clamp((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), ((uvec2(subgroup_local_id, 1u))) << uvec2(0u, 0u)))))) + 1), (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, 1u)))), (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))))) + 1), (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), 1u)))))) + 1))) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY((_GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), max(_GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), ((uvec2(subgroup_local_id, 1u))) << uvec2(0u, 0u)), (uvec2(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), 1u))))) >> uvec2(0u, 0u), (false ? _GLF_FUZZED(uvec2(124637u, 112792u)) : (_GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), max(_GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY(((uvec2(subgroup_local_id, 1u))) << uvec2(0u, 0u), clamp(((uvec2(subgroup_local_id, 1u))) << uvec2(0u, 0u), ((uvec2(subgroup_local_id, 1u))) << uvec2(0u, 0u), ((uvec2(subgroup_local_id, 1u))) << uvec2(0u, 0u)))), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), ~ (~ (subgroup_local_id))), 1u))))) >> uvec2(0u, 0u)))))))) + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), max(uvec2(subgroup_local_id, 1u), uvec2(subgroup_local_id, 1u)))) | _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), clamp((uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), uvec2(1u, 1u) * ((uvec2(subgroup_local_id, 1u)))), (uvec2(subgroup_local_id, 1u)))))) | (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), ((uvec2(subgroup_local_id, 1u))) - (uvec2(0u, 0u) ^ uvec2(0u, 0u))) + (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) << uvec2(0u, 0u)) ^ uvec2(0u, 0u))))), ~ _GLF_IDENTITY((~ (uvec2(subgroup_local_id, 1u))), _GLF_IDENTITY(max(_GLF_IDENTITY((~ (uvec2(subgroup_local_id, 1u))), clamp((~ (uvec2(subgroup_local_id, 1u))), (~ (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), _GLF_IDENTITY(uvec2(uvec4(uvec2(subgroup_local_id, 1u), 0u, 1u)), (uvec2(uvec4(uvec2(subgroup_local_id, 1u), 0u, 1u))) | (uvec2(uvec4(uvec2(subgroup_local_id, 1u), 0u, 1u))))))), (~ (uvec2(subgroup_local_id, 1u))))), (~ (uvec2(subgroup_local_id, 1u)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(127483u, _GLF_IDENTITY(12190u, (12190u) | (197787u & 0u)))) : max(_GLF_IDENTITY((~ (uvec2(subgroup_local_id, 1u))), clamp((~ (uvec2(subgroup_local_id, 1u))), (~ (uvec2(subgroup_local_id, 1u))), (~ (uvec2(subgroup_local_id, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (uvec2(subgroup_local_id, 1u)), uvec2(0u, 0u) ^ (~ (uvec2(subgroup_local_id, 1u)))), uvec2(0u, 0u) + (~ (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (uvec2(subgroup_local_id, 1u)) | (uvec2(0u, 0u) | uvec2(0u, 0u)))))))))))))) + 1) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), min(uvec2(subgroup_local_id, 1u), uvec2(subgroup_local_id, 1u))))), ~ (~ (uvec2(subgroup_local_id, 1u)))))) + 1) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), max(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), (uvec2(subgroup_local_id, 1u)) | (uvec2(subgroup_local_id, 1u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 1u), (false ? _GLF_FUZZED(uvec2(83202u, 105211u)) : uvec2(subgroup_local_id, 1u)))))))))) + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), _GLF_IDENTITY(~ (~ (uvec2(subgroup_local_id, 1u))), uvec2(1u, 1u) * (~ (~ _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), min((uvec2(subgroup_local_id, 1u)), _GLF_IDENTITY((uvec2(subgroup_local_id, 1u)), uvec2(0u, 0u) ^ ((uvec2(subgroup_local_id, 1u)))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, 1u)))), max(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), 1u)))), _GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, 1u))))))))))) + 1) % subgroup_size))), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, 1u)))), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, 1u))))))))) + 1) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ _GLF_IDENTITY((~ (uvec2(subgroup_local_id, 1u))), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((~ (uvec2(subgroup_local_id, 1u))), ((~ (uvec2(subgroup_local_id, 1u)))) << uvec2(0u, 0u))))))) + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), ~ (~ (uvec2(subgroup_local_id, _GLF_IDENTITY(1u, (1u) | (1u)))))))) + 1) % subgroup_size)))) >> 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), float(_GLF_FUZZED(9.1)), bool(false))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0 * (1.0)), 1.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bool(bvec3(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), false, true)))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, (false) && true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), false)), false, true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true)))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u)))], _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 4, 64, 4);
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ~ (~ ((~ (subgroup_local_id))))))) * 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, (_GLF_IDENTITY((1) - 0, clamp((1) - 0, (1) - 0, (1) - 0))) | ((1) - 0))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, ((! (false)) && true) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, ! (! (false))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, ! (! (false))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, ! (! (false))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))), false, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, ! (! (false))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))), false, false))))))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), false || ((false))), true, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec4((false), true, false, true)))) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec4((false), true, false, false)))) && true) && true)), (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), true, false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), true, false, true))), ! (! (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), false || ((false))), true, _GLF_IDENTITY(false, (false) || false), true))))))))) && true))), bool(bvec3(! ((_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bvec4((false), true, false, true)))) && true))), false, false)))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)))) || false), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))) || false)), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, bool(bvec3((! (false)) && true, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (false)) && true)) && true))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, bool(bvec3((! (false)) && true, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (false)) && true)) && true))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false, false)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, bool(bvec3((! (false)) && true, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (false)) && true)) && true))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false, false)))), true && (bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, bool(bvec3((! (false)) && true, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (false)) && true)) && true))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, false, false))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), ! (! ((! (_GLF_IDENTITY(false, ! (! (false)))))))) && true))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))) || false)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mix(_GLF_IDENTITY(vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))[1]), mix(vec2(_GLF_FUZZED(vec2(_GLF_IDENTITY(3566.2683, (_GLF_IDENTITY(_GLF_IDENTITY(3566.2683, min(3566.2683, _GLF_IDENTITY(3566.2683, max(3566.2683, 3566.2683)))), max(3566.2683, 3566.2683))) + _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), -7202.6035).t), _GLF_IDENTITY((_GLF_IDENTITY(vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(1.0, 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), vec2(mat4x3(_GLF_IDENTITY(vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(1.0, 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), clamp(vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(1.0, 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(1.0, 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(1.0, 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]))), round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), tan(0.0), 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), int(ivec4(1, 0, 1, 0)))) ^ 0)], (true ? _GLF_IDENTITY(_GLF_IDENTITY((vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 + (1)), 0, 1, 0)))) ^ 0)], ((vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) * vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 + (1)), 0, 1, 0)))) ^ 0)]) - 0.0), mix(float(_GLF_FUZZED(-2.4)), float((vec2(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))), clamp(_GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))), mix(vec2(_GLF_FUZZED(4.1), _GLF_FUZZED(3.9)), vec2((mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))))[0], (mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))))[1]), bvec2(true, true))), mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))), mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))))))) * vec2(1.0, 1.0)))[0], _GLF_IDENTITY(((injectionSwitch) / vec2(1.0, 1.0))[1], float(_GLF_IDENTITY(mat3x2(((injectionSwitch) / vec2(1.0, 1.0))[1], 0.0, 1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat3x2(650.116, -9910.0423, -4.9, 5.0, 822.947, 5.2)) : mat3x2(((injectionSwitch) / vec2(1.0, 1.0))[1], 0.0, 1.0, 1.0, 1.0, 1.0)))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) ^ 0)]), bool(true))) : _GLF_FUZZED(44.21)))), vec2(_GLF_IDENTITY((vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]))[0], float(float(_GLF_IDENTITY((vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], _GLF_IDENTITY(((injectionSwitch) / vec2(1.0, 1.0))[1], mix(float(((injectionSwitch) / vec2(1.0, 1.0))[1]), float(_GLF_FUZZED(float(93220))), bool(false)))))[0], min((vec2(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]))[0], (vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]))[0]))))), _GLF_FUZZED(7.9)), bvec2(true, false))), vec2(_GLF_FUZZED(-9678.4294), _GLF_FUZZED(9.1)), bvec2(false, false)))).y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))))));
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), _GLF_FUZZED(-1.8)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(1.9)), float((injectionSwitch)[1]), bool(true)))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_injected_loop_counter --)))
                          {
                           barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(ldexp(-440.935, 18829)))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-76.53)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         barrier();
        }
       int i = 0;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(-96671, ~ (~ _GLF_IDENTITY((-96671), (_GLF_IDENTITY((-96671), ((-96671)) + 0)) | 0))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) << (1 ^ 1)) << _GLF_IDENTITY(int(6), int(6))), max((_GLF_IDENTITY(0, (0) << (1 ^ 1)) << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(0, (0) << (1 ^ 1)) << _GLF_IDENTITY(int(6), int(6))))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)), ((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bool((_GLF_IDENTITY(false, (false) || false)))))), ((false || (_GLF_IDENTITY(false, (false) || false)))) && true), true), bvec2(bvec3(bvec2(! (false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))), true), false)))), (bool(bvec2(! _GLF_IDENTITY((false || (_GLF_IDENTITY(false, (false) || false))), ! (! ((false || (_GLF_IDENTITY(false, (false) || false)))))), true))) || false))))))) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(2), (0u ^ 0u) ^ (uint(2))))), 4, 64, 4);
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y))))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) && true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            barrier();
          }
         barrier();
        }
      }
    }
  }
 else
  {
  }
}
