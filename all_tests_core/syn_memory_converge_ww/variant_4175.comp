#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)).x, max(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (0u)), (0u) * 1u)) | 0u)), gl_WorkGroupID.x));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec4(workgroup_size * workgroup_id, (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, (4u) << 0u)) >> 0u)), uint(4u))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, (write_val) << 0u), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
