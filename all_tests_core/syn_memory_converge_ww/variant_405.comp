#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 mat4x3 _f0;
 mat3 _f1;
 bvec3 _f2;
 mat2 _f3;
 bvec4 _f4;
 uvec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_19 {
 ivec3 _f0;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 _GLF_struct_20 _f1;
} ;

struct _GLF_struct_17 {
 mat4x3 _f0;
 mat4x3 _f1;
 uint workgroup_id;
 mat4x2 _f2;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 uint _f1;
 mat2x3 _f2;
 bvec4 _f3;
 bvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 _GLF_struct_16 _f1;
 ivec4 _f2;
 _GLF_struct_17 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_14 {
 uvec4 _f0;
 vec3 _f1;
 mat4x2 _f2;
 mat2x4 _f3;
 bool _f4;
 vec4 _f5;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 int _f1;
 mat4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 mat4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
} ;

struct _GLF_struct_22 {
 mat4x3 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
 bvec4 _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 mat3x2 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 mat2x3 _f1;
 ivec2 _f2;
 int _f3;
 mat4 _f4;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat2x4 _f1;
 uint workgroup_size;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 mat3 _f1;
 vec4 _f2;
 mat4x3 _f3;
 ivec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 bvec2 _f1;
 _GLF_struct_4 _f2;
 bool _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 bvec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_1 {
 int _f0;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 bool _f1;
 mat2x3 _f2;
 int _f3;
 vec4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_3 {
 float _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_9 _f2;
 bvec2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, sqrt(1.0), sqrt(0.0))), min(vec2(vec4(injectionSwitch, sqrt(1.0), sqrt(0.0))), vec2(vec4(injectionSwitch, sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), sqrt(0.0)))))).y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(asinh(injectionSwitch)))).y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(bitCount(16222)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | 0)), int(0)))); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (33889 & 80128))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(70293) : 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))))), bool(bvec3(true, false, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
                                      {
                                       return;
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 else
  {
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_3(1.0, _GLF_struct_0(bvec2(true), true, mat2x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1, _GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), max(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), vec4(1.0))))), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) * mat3(1.0))), _GLF_struct_1(1), _GLF_struct_2(mat4(1.0), bvec2(true), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) << uvec4(0u, 0u, 0u, 0u))), vec4(1.0)), _GLF_struct_6(_GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * _GLF_IDENTITY(abs(vec3(1.0, 1.0, 1.0)), (abs(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), bvec2(true), _GLF_struct_4(uvec2(1u), mat3(1.0), vec4(1.0), mat4x3(1.0), ivec4(1), mat2(1.0)), _GLF_IDENTITY(true, (true) || false), _GLF_struct_5(mat3x2(1.0), mat2x4(1.0), gl_WorkGroupSize.x)), _GLF_struct_9(mat2x4(1.0), _GLF_struct_7(mat4(1.0), mat2x3(1.0), ivec2(1), 1, mat4(1.0)), _GLF_struct_8(ivec2(1), mat3x2(1.0), mat4(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0))))), bvec2(true));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) > (0 | (0 >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(88.46)), float(injectionSwitch.y), bool(true)))))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch, 0.0, 1.0)))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch, 0.0, 1.0)))))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch, 0.0, 1.0)))))).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch, 0.0, 1.0)))))).y))) / 1.0)))))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             do
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         do
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                  {
                                                                  }
                                                                 else
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                      {
                                                                       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                                                        {
                                                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0)); _injected_loop_counter --)
                                                                          {
                                                                           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0)); _injected_loop_counter ++)
                                                                            {
                                                                             return;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                     else
                                                                      {
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.6) : injectionSwitch.y))))));
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)), 0.0, 0.0, determinant(mat2(1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 1.0)), 1.0, 1.0, abs(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch[1] : _GLF_FUZZED(2.8))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))))))).y))));
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false)), false || (bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false)))))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false)), false || (bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(true, true, true, false)), false || (bool(bvec4(true, true, true, false))))))), false))))))))))))));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, true), bvec3(bvec4(bvec3(false, true, true), false)))))));
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat4x3(1.0), _GLF_struct_15(_GLF_struct_12(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3601.2538)), float(0.0), bool(true)))) - 0.0))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7291.8186)), bool(false))), clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false)), mix(_GLF_IDENTITY(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), clamp(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), float(mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, min(2228.2189, 2228.2189)))), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false)), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), _GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(bool(false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(bvec2(bool(false), false), true))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bool(false), false), bvec2(bvec3(bvec2(bool(false), false), true))), true)), false))))))), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(false)))), clamp((_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(_GLF_IDENTITY(float(0.0), (float(0.0)) - 0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(false)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(false)))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, _GLF_IDENTITY((false ? _GLF_FUZZED(6.6) : 2228.2189), float(float((false ? _GLF_FUZZED(6.6) : 2228.2189))))))), bool(false)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))), clamp((_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(false)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (_GLF_IDENTITY(false ? _GLF_FUZZED(6.6) : 2228.2189, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(6.6) : 2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189) - 0.0), false ? _GLF_FUZZED(6.6) : 2228.2189, false ? _GLF_FUZZED(6.6) : 2228.2189)))))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(false)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), mix(float(_GLF_IDENTITY(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), min(false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false)), false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2228.2189, (false ? _GLF_FUZZED(6.6) : 2228.2189)))), bool(false))))), float(_GLF_FUZZED((42.53 * 7.4))), bool(false)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(5772.5068, -555.869).x) : _GLF_IDENTITY(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), min(_GLF_IDENTITY(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.1))) * (_GLF_IDENTITY(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), float(mat2x3(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), 0.0, log(1.0), 1.0, 0.0, 1.0))))), float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))))))))), float(_GLF_FUZZED(5.9)), bool(false))), float(mat3(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false)), mix(_GLF_IDENTITY(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), clamp(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false)), (false ? _GLF_FUZZED(-931.317) : mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(5772.5068, -555.869).x) : _GLF_IDENTITY(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), min(float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), float(mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))))))))), float(_GLF_FUZZED(5.9)), bool(false))), 1.0, 1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), 0.0, 1.0)), min(float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), 0.0, 1.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), 0.0, 1.0)), (float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2228.2189)), bool(false))), 0.0, 1.0))) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))), 0.0)), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / sqrt(1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(-378.299), mix(float(_GLF_FUZZED(-378.299)), float(_GLF_FUZZED(-1.4)), bool(false)))), bool(false))), 0.0, 0.0)), ivec3(1), mat3x2(1.0), mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(662.438)), bool(false)))), bvec4(true)), _GLF_struct_13(uvec4(1u), _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), mat4(1.0), mat3x2(1.0)), _GLF_struct_14(_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(uaddCarry(subgroup_id, packUnorm4x8(vec4(-80.30, 7.7, 9034.0305, -3.1)), subgroup_size)) : 1u))), (uvec4(1u)) | uvec4(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(0u, (0u) / 1u)))) | (_GLF_IDENTITY(uvec4(1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec4(1u)), clamp((uvec4(1u)), (uvec4(1u)), (uvec4(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY((uvec4(1u)), clamp((uvec4(1u)), (uvec4(1u)), (uvec4(1u)))), (_GLF_IDENTITY((uvec4(1u)), clamp((uvec4(1u)), (uvec4(1u)), (uvec4(1u))))) | (_GLF_IDENTITY((uvec4(1u)), clamp((uvec4(1u)), (uvec4(1u)), (uvec4(1u))))))) / (uvec4(1u, 1u, 1u, 1u) | uvec4(1u, 1u, 1u, 1u))) / uvec4(1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)), 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(_GLF_IDENTITY(1u, max(1u, 1u)))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), _GLF_IDENTITY(~ (~ (uvec4(1u))), (~ (~ (uvec4(1u)))) / uvec4(1u, 1u, 1u, 1u))))), max(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec2((1u), 1u)), max(uint(uvec2((1u), 1u)), uint(uvec2(_GLF_IDENTITY((1u), uint(uint((1u)))), 1u)))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) / uvec4(1u, 1u, _GLF_IDENTITY(1u, ((0u | 0u) >> _GLF_IDENTITY(uint(2u), uint(2u))) | (_GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))), _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))))), (_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(min(1u, 1u), ~ (~ (min(1u, 1u))))))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u))))))) >> uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(_GLF_IDENTITY(1u, min(1u, 1u)), 1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))))), ~ (~ (_GLF_IDENTITY(uvec4(1u), clamp(uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(uvec2(138116u, 472u).x)))), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), _GLF_IDENTITY(uvec4(1u), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((uvec4(1u)), ((uvec4(1u))) * uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, (1u) | 0u))), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(~ (uvec4(1u)), min(~ (uvec4(1u)), ~ (uvec4(1u))))))))))))))) : _GLF_FUZZED(uvec4(46497u, 161262u, 155495u, 87450u)))), _GLF_IDENTITY(uvec4(1u), uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) >> 0u))))) * (uvec4(1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), (true ? _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))) : _GLF_FUZZED(uvec4(173661u, 17970u, 152387u, 23184u)))), max(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) + uvec4(0u, 0u, 0u, 0u)), uvec4(1u))))))))), vec3(1.0), mat4x2(1.0), mat2x4(1.0), true, vec4(_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), float(_GLF_IDENTITY(mat4x3(abs(0.0), 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.8)), float(1.0), bool(true)))), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0), transpose(transpose(mat4x3(abs(0.0), 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0)))))))), 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, abs(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), min(float(vec3(1.0, 1.0, 0.0)), float(vec3(1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), max(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), _GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0)))))) + tan(0.0))))))))), log(1.0) + (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), min(float(vec3(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(intBitsToFloat(bitfieldInsert(-13730, -22033, 49681, 80378))))), 0.0)), _GLF_IDENTITY(float(vec3(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), min(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), _GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))))))))), (float(vec3(1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0)))))))) + 0.0)))))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.4))))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-30.16 / 7028.1391))), bool(false))), 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-30.16 / 7028.1391))), bool(false))), 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED((-30.16 / 7028.1391))), max(float(_GLF_FUZZED((-30.16 / 7028.1391))), _GLF_IDENTITY(float(_GLF_FUZZED((-30.16 / 7028.1391))), _GLF_IDENTITY(max(float(_GLF_FUZZED((-30.16 / 7028.1391))), float(_GLF_FUZZED((-30.16 / 7028.1391)))), (max(float(_GLF_FUZZED((-30.16 / 7028.1391))), float(_GLF_FUZZED((-30.16 / 7028.1391))))) - 0.0)))), bool(false))), 0.0, 0.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))), _GLF_struct_18(mat3x4(1.0), _GLF_struct_16(mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), (_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec4(45.06, -1.2, -6751.8735, -6.4).x)), float(1.0), bool(true)))), mix(float(_GLF_FUZZED(819.960)), float(float(1.0)), bool(true)))) / cos(0.0))))), 1u, mat2x3(1.0), bvec4(true), bvec2(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || false)))), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) + (uvec4(1u)))) | uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY(ivec4(1), clamp(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), ((~ (1))) ^ 0))), _GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1))), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) / 1)))) | 0)))), _GLF_struct_17(mat4x3(_GLF_IDENTITY(1.0, 0.0 + (1.0))), mat4x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(67.46) : 1.0))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), min(uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID))))).x, mat4x2(1.0)), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) * (mat2(1.0)))), _GLF_struct_21(_GLF_struct_19(ivec3(1)), _GLF_struct_20(mat4x3(1.0), _GLF_IDENTITY(mat3(1.0), transpose(_GLF_IDENTITY(transpose(mat3(1.0)), mat3(mat4x3(transpose(mat3(1.0))))))), bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mat2(1.0), bvec4(true), uvec2(_GLF_IDENTITY(1u, (1u) ^ 0u)), mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0)))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_10._f1._f4.workgroup_size * _GLF_struct_replacement_22._f2._f3.workgroup_id, (false ? _GLF_FUZZED((subgroup_local_id << subgroup_local_id)) : _GLF_struct_replacement_10._f1._f4.workgroup_size * _GLF_struct_replacement_22._f2._f3.workgroup_id));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat3(1.0), bvec4(true), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base) | 0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((workgroup_base) | 0u), _GLF_IDENTITY((uint((workgroup_base) | 0u)), ((uint((workgroup_base) | 0u))) | 0u) >> 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base) | 0u, clamp(_GLF_IDENTITY((workgroup_base), uint(uvec4(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))))), (0u ^ (1u ^ 1u)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))) | 0u, (workgroup_base) | 0u, _GLF_IDENTITY((workgroup_base) | 0u, uint(uvec3((workgroup_base) | 0u, 1u, 0u)))))), (uint((workgroup_base) | 0u)) >> 0u)) | (_GLF_IDENTITY(uint((workgroup_base) | 0u), (uint((workgroup_base) | 0u)) >> 0u))))), (_GLF_IDENTITY((workgroup_base) | 0u, uint(_GLF_IDENTITY(uint((workgroup_base) | 0u), (uint((workgroup_base) | 0u)) >> 0u)))) | (_GLF_IDENTITY((workgroup_base) | 0u, uint(_GLF_IDENTITY(uint((workgroup_base) | 0u), (uint((workgroup_base) | 0u)) >> 0u)))))) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), uint(uint((subgroup_size))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)))))))) - 0u) * 1u)) | 0u), min(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9.8)), float(injectionSwitch.x), bool(true)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-98.46, 1.7)) : injectionSwitch)).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), false)), ! (! (bool(bvec2(! (false), false)))))))), (injectionSwitch.x > injectionSwitch.y)), true, true))), true))))))) && true))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 atomicStore(write_val, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_11.virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_11.virtual_gid, _GLF_IDENTITY((_GLF_struct_replacement_11.virtual_gid) | 0u, _GLF_IDENTITY(uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)), clamp(uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)), _GLF_IDENTITY(uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)), 0u + (uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)))), uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u))))))) ^ 0u), (_GLF_IDENTITY(_GLF_struct_replacement_11.virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_11.virtual_gid, _GLF_IDENTITY((_GLF_struct_replacement_11.virtual_gid) | _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), _GLF_IDENTITY(uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)), clamp(uint(_GLF_IDENTITY(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u), min(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u), uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)))), _GLF_IDENTITY(uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)), 0u + (uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u)))), uint(uvec3((_GLF_struct_replacement_11.virtual_gid) | 0u, 1u, 1u))))))) ^ 0u)) - 0u)), ~ (~ (uint(_GLF_struct_replacement_11.virtual_gid)))), 4, 64, 0);
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, _GLF_IDENTITY(min(write_val, write_val), (min(write_val, write_val)) ^ 0u)), 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0))) - 0.0)))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1, (true ? _GLF_IDENTITY(((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1 : _GLF_FUZZED(bitfieldExtract(sign(3527), _injected_loop_counter, 85453)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x)), ((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x))) * 1)))), (true ? ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x)), ((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x))) * 1))), ((_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x)), ((_injected_loop_counter ++) - int(_GLF_ZERO(0.0, injectionSwitch.x))) * 1)))) >> 0)) : _GLF_FUZZED(_injected_loop_counter)))))
            {
             buf[_GLF_struct_replacement_11.virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), 1u * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) / 1u), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), (true ? _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(read_val, _GLF_IDENTITY(_GLF_IDENTITY(read_val, (true ? read_val : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(read_val, (read_val) << 0u)) << 0u))))), _GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id)))))) | 0u)), (true ? (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) : _GLF_IDENTITY(_GLF_FUZZED((write_val >> write_val)), (false ? _GLF_FUZZED((read_val % 98895u)) : _GLF_FUZZED((write_val >> write_val)))))) / 1u) : _GLF_FUZZED(subgroup_size)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) / 1u), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), (true ? _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(read_val, _GLF_IDENTITY(read_val, (_GLF_IDENTITY(read_val, (read_val) << 0u)) << 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id)))))) | 0u, (_GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id)))))) | 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (true ? (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) : _GLF_FUZZED((write_val >> write_val)))) / 1u) : _GLF_FUZZED(subgroup_size)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) / 1u), (_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, min(read_val, read_val)))), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) ? _GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(_GLF_IDENTITY(read_val, (true ? _GLF_IDENTITY(read_val, (read_val) | (read_val)) : _GLF_FUZZED(196831u))), read_val)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(read_val, _GLF_IDENTITY(read_val, (_GLF_IDENTITY(read_val, (read_val) << 0u)) << 0u))))), _GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id)))))) | 0u)), (true ? (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) : _GLF_FUZZED((write_val >> write_val)))) / 1u) : _GLF_FUZZED(subgroup_size)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) / 1u), (_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, min(read_val, read_val)))), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), (true ? _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(read_val, _GLF_IDENTITY(read_val, (_GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), (true ? _GLF_IDENTITY((read_val), ((read_val)) | ((read_val))) : _GLF_FUZZED(subgroup_local_id))) << 0u)) << 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id)))))), ~ (~ (_GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id))))))))) | 0u)), (true ? (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) : _GLF_FUZZED((write_val >> write_val)))) / 1u) : _GLF_FUZZED(subgroup_size))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) >> 0u), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, ~ (~ (read_val))))), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) / 1u), (true ? _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), _GLF_IDENTITY((_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, max(read_val, _GLF_IDENTITY(read_val, (_GLF_IDENTITY(read_val, (read_val) << 0u)) << 0u))))), _GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((uint(subgroupAllEqual(read_val)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ ((uint(subgroupAllEqual(read_val)))))), (true ? ~ ((uint(subgroupAllEqual(read_val)))) : _GLF_FUZZED((num_workgroup ^ subgroup_local_id)))))) | 0u)), (true ? (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) | 0u)) : _GLF_FUZZED((write_val >> write_val)))) / 1u) : _GLF_FUZZED(subgroup_size))))))))))) : _GLF_FUZZED(write_val))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
}
