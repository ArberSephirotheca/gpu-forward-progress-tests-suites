#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false, true)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))))) : _GLF_FUZZED(fract(4.7)))))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.7) : injectionSwitch.x)), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y), false, true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false, true)))))))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-913.251)), bool(false))), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) / 1u), _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(6.6))), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_FUZZED(9.0), _GLF_FUZZED(-332.324)), bvec2(false, false))))).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))) - 0.0)), vec2(_GLF_FUZZED(9.0), _GLF_FUZZED(-332.324)), bvec2(false, false))))).x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) && true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY((false), bool(bvec4((false), true, false, _GLF_IDENTITY(false, true && (false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tanh(2391.0329)) : injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, true, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)), transpose(transpose(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))))))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)).x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupID.x))), (clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupID.x)))) | (_GLF_IDENTITY(clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ _GLF_IDENTITY(0u, 0u | (0u)))) - _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u))), uint(4u))), ~ (~ (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u))), uint(4u))), ((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u))), uint(4u)))) >> (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))), _GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupID.x))), (clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupID.x)))) + _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(0u)))), clamp((_GLF_IDENTITY(0u, uint(uint(0u)))), (_GLF_IDENTITY(0u, uint(uint(0u)))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), _GLF_IDENTITY(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), 1u, 1u, 0u), (uvec4(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), 1u, 1u, 0u)) - uvec4(0u, 0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec4(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), 1u, 1u, 0u), (uvec4(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), 1u, 1u, 0u)) - uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), 1u, 1u, 0u), (uvec4(uint(uvec4(uint(uint(0u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), 1u, 1u, 0u)) - uvec4(0u, 0u, 0u, 0u))))))))))) | (0u))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (true ? _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) ^ 0u), (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) ^ 0u)) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) ^ 0u))), workgroup_size * workgroup_id, workgroup_size * workgroup_id)) : _GLF_FUZZED(subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0))), injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y))))))))), true && _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false)))))))), bvec2(bvec4(bvec2(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false)), false, false))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false)), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false) || false)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0), min(vec4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))).y)) || false)), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true), false)), false, false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0)))), 0))], injectionSwitch[1])).y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)) || false))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / cos(0.0)), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3394.6017), _GLF_FUZZED((+ 8.2))), bvec2(false, false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), clamp(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), (1u & 1u) * (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u))))), 0u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY((1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))))), clamp((1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), _GLF_IDENTITY((1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), clamp(_GLF_IDENTITY((1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), 0u ^ ((_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), (1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), (1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), (1u ^ 1u) + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))))), 1u, (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u))), 1u, (0u & 62057u), 1u))), ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (~ (subgroup_size))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))), ~ (subgroup_size))))), 1u, (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, (0u & 62057u), 1u))), ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u, ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))) << 0u) / 1u)), 1u, (_GLF_IDENTITY(0u & 62057u, 0u | (_GLF_IDENTITY(0u & 62057u, (0u & 62057u) >> (197582u & 0u))))), 1u))), ~ (~ (subgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) / 1u), 1u, 1u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) / 1u), 1u, 1u, 0u))))), 1u, (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED((num_workgroup + subgroup_id)) : (subgroup_size))))))), _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), uint(uint(_GLF_IDENTITY(1u, 0u | (1u))))), _GLF_IDENTITY(1u, 0u | (1u)))))), (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, (0u & 62057u), 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, (0u & 62057u), 1u)))) - 0u), ~ (~ (subgroup_size)))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), 1u, (0u & 62057u), 1u))), ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_size)), ~ (~ (subgroup_size))), _GLF_IDENTITY(1u, (1u) | 0u), (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, (0u & 62057u), 1u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u, (0u & 62057u), 1u))), ~ (~ (subgroup_size)))))), 1u)))) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 5u : _GLF_FUZZED((44404u ^ workgroup_size))))), _GLF_IDENTITY(uint(5u), 1u * (_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(subgroup_id) : uint(5u)))))))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), clamp(_GLF_IDENTITY(0u, (0u) * 1u), 0u, 0u)), 0u)), uint(uvec3(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u, 0u)))))), (0u ^ (subgroup_size)) * 1u)), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u) >> _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), ((0u) | (0u)) << 0u)), 1u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(0u, (0u) | (0u)), 1u))))), _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))), max((_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))), (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))))))) + 0u) | (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (0u) | (0u)), 1u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(0u, (0u) | (0u)), 1u))))), _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, (0u) >> 0u), 1u)))), max((_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))), (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))))))) + 0u) | (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))))))) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u)) ^ 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(write_val, _GLF_IDENTITY(uint(virtual_gid), uint(uvec2(uint(virtual_gid), 1u))), 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.1), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3902.9607), _GLF_FUZZED(-4278.8987)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))))[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), (injectionSwitch)[1]))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(float(67671))), (_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(float(67671))), min(vec2((injectionSwitch)[0], _GLF_FUZZED(float(67671))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(67671)))))) - log(vec2(1.0, 1.0))), bvec2(true, false))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.1), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), (injectionSwitch)[1]))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(float(67671))), (_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(float(67671))), min(vec2((injectionSwitch)[0], _GLF_FUZZED(float(67671))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(67671)))))) - log(vec2(1.0, 1.0))), _GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false)))))), false))))))).y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) << 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))) && true, false || (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))) && true, bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))) && true))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true))))) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
