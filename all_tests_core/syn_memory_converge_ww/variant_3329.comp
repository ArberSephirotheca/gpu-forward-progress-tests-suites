#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 float _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_13 {
 mat4x2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_12 {
 mat3x4 _f0;
 int _f1;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
 uint _f1;
 mat2x3 _f2;
 ivec3 _f3;
 mat2x4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 uvec2 _f3;
 float _f4;
 _GLF_struct_14 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
 bvec2 _f1;
 int _f2;
 bvec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 uint _f1;
 uvec4 _f2;
 float _f3;
 bvec4 _f4;
 uvec2 _f5;
 float _f6;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_6 {
 bvec2 _f0;
 ivec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 int _f1;
 vec4 _f2;
 vec2 _f3;
 ivec4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 vec3 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 bvec3 _f1;
 mat4 _f2;
 vec4 _f3;
 mat4x3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_3 _f0;
 mat2 _f1;
 vec4 _f2;
 uint num_workgroup;
 mat4x3 _f3;
 float _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_0 {
 int _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 bvec2 _f1;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false, true)))))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               return;
              }
            }
           else
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               barrier();
              }
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_3(_GLF_struct_2(bvec2(true)), bvec3(true), mat4(1.0), vec4(1.0), mat4x3(1.0), ivec3(1)), mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), vec4(1.0), gl_NumWorkGroups.x, mat4x3(1.0), 1.0, _GLF_struct_10(_GLF_struct_4(ivec4(1), bvec3(true)), _GLF_struct_5(uvec2(1u), 1, vec4(1.0), vec2(1.0), ivec4(1), ivec4(1)), _GLF_struct_6(bvec2(true), ivec4(_GLF_IDENTITY(1, min(1, 1))), vec3(1.0)), _GLF_struct_7(ivec4(1), mat3x2(1.0)), _GLF_struct_8(mat4x2(1.0), 1u, uvec4(1u), 1.0, bvec4(true), uvec2(1u), 1.0), vec3(1.0), _GLF_struct_9(mat2x3(_GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.4) : 1.0)), 1.0, 1.0, 1.0, round(length(normalize(1.0))), 0.0)))), bvec2(true), 1, bvec3(true), mat4x3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)) : _GLF_FUZZED(5465.1132)))))), _GLF_struct_15(_GLF_struct_11(mat4x2(1.0), 1u, mat2x3(1.0), ivec3(1), mat2x4(1.0), vec4(1.0)), _GLF_struct_12(mat3x4(1.0), 1), _GLF_struct_13(mat4x2(1.0), vec2(1.0)), uvec2(1u), 1.0, _GLF_struct_14(1.0, bvec3(true)), mat4x3(1.0)));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(1), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), true, true)), false)))), gl_WorkGroupID.x);
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_id, (_GLF_struct_replacement_1.workgroup_id) | (_GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_id, min(_GLF_struct_replacement_1.workgroup_id, _GLF_struct_replacement_1.workgroup_id)))), _GLF_IDENTITY(max(_GLF_struct_replacement_1.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))))))), ~ (_GLF_IDENTITY(~ (max(_GLF_struct_replacement_1.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))))), (true ? ~ (max(_GLF_struct_replacement_1.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), (_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u)) | 0u))), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uvec3(uint(3u), 0u, 1u))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), (_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u)) << 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) | (~ (_GLF_struct_replacement_1.workgroup_id)))) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), clamp(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(3u), uint(3u)), (1u << _GLF_IDENTITY(uint(3u), uint(3u))) | (1u << _GLF_IDENTITY(uint(3u), uint(3u)))), 1u << _GLF_IDENTITY(uint(3u), uint(3u)), 1u << _GLF_IDENTITY(uint(3u), uint(3u))))) ^ 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u))))))) - uvec4(0u, 0u, 0u, 0u)), uvec4(_GLF_IDENTITY(~ (_GLF_struct_replacement_1.workgroup_id), (~ (_GLF_struct_replacement_1.workgroup_id)) - 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))))) : _GLF_FUZZED(workgroup_size))))))) << 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u) + _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id));
 atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), min(~ (64), ~ (64))))), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, (write_val) - _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), (0u) >> 0u)), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-21.44, min(-21.44, -21.44))), (false ? _GLF_FUZZED(9.5) : _GLF_FUZZED(-21.44))), (injectionSwitch)[1]), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-21.44, min(-21.44, -21.44))), (false ? _GLF_FUZZED(9.5) : _GLF_FUZZED(-21.44))), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, abs(0.0), 1.0))).y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1641.8191)), bvec2(true, false))))).x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), float(_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), clamp(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))) && true))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1641.8191)), bvec2(true, false))))).x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), float(_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), clamp(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))) && true))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1641.8191)), bvec2(true, false))))).x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), float(_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), clamp(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))) && true)))))))))), bool(bvec3(! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1641.8191)), bvec2(true, false))))).x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), float(_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), clamp(vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), vec4(min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))) && true)))))))))), false, true))))))) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, tan(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-526.458)), bool(false)))), 0.0, 1.0, abs(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0))).x < injectionSwitch.y)), false))).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, tan(0.0), 0.0, 1.0, abs(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))).x < injectionSwitch.y)), false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, tan(0.0), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) : _GLF_FUZZED(-912.147))), 1.0, abs(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))).x < injectionSwitch.y)), false))).x > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, tan(0.0), 0.0, 1.0, abs(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))).x < injectionSwitch.y)), false))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, tan(0.0), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) : _GLF_FUZZED(-912.147))), 1.0, abs(sqrt(0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))).x < injectionSwitch.y)), false))).x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-719.317) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0))))))) / 1.0)))), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > injectionSwitch.y))))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, 0.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-719.317) : _GLF_IDENTITY(0.0, max(0.0, 0.0))))), abs(1.0), log(1.0), 1.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x)) > injectionSwitch.y))))))) || false)), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(14.73, -9.2)))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), min(vec2(_GLF_IDENTITY(_GLF_FUZZED(-21.44), max(_GLF_FUZZED(-21.44), _GLF_IDENTITY(_GLF_FUZZED(-21.44), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-21.44)), bool(true))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]))), vec2((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, max(_GLF_IDENTITY((0) | 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (0) | 0)), (0) | 0)))], _GLF_FUZZED(37.95)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))))) || false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(804.646, 353.982, -9279.2072, 28.40).w)), vec2(_GLF_FUZZED(-94.32), (injectionSwitch)[1]), bvec2(false, true))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-21.44), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))))[1]), min(vec2(_GLF_FUZZED(-21.44), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]))), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || false)))), ! (! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]))), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x))) + 0.0), 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || false))))))), true, false, true)), true && (bool(bvec4(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(804.646, 353.982, -9279.2072, 28.40).w)), vec2(_GLF_FUZZED(-94.32), (injectionSwitch)[1]), bvec2(false, true))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-21.44), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))))[1]), min(vec2(_GLF_FUZZED(-21.44), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]))), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || false)))), ! (! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-21.44), (injectionSwitch)[1]))), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(37.95)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x))) + 0.0), 0.0, 0.0, 0.0, sqrt(0.0), abs(1.0), log(1.0), 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || false))))))), true, false, true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bool(bool(false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bool(bool(false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))), false))), false))))), (bool(_GLF_IDENTITY(bvec3(bool(bool(false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(bool(bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))) || false))), ! (! (false))), false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false))), bvec3(bvec3(bvec3(bool(bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(bool(bool(false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(atan(-7286.8871, 0.2)))), 1.0, 0.0))))), false)))))) || false))), ! (! (false))), false || (false)))))) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y))));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         buf[virtual_gid] = uint(subgroupAllEqual(read_val));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true, false))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true, false)))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true, false))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false), true, false)))) && true)))))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
    }
  }
}
