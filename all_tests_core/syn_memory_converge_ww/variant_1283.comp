#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 bvec4 _f0;
 mat2x3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat3x4 _f1;
 float _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
 float _f1;
 vec2 _f2;
 vec3 _f3;
 uvec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_7 {
 float _f0;
 vec3 _f1;
 vec2 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 ivec4 _f1;
 mat2 _f2;
 float _f3;
 mat2x4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 vec3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 mat3 _f1;
 ivec2 _f2;
 mat2x3 _f3;
 mat2x3 _f4;
 bvec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 uint workgroup_base;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
 ivec3 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_7 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y = workgroup_id;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat3x4(1.0), ivec3(1), _GLF_struct_3(_GLF_struct_0(ivec4(1), mat3(1.0), ivec2(1), mat2x3(1.0), mat2x3(1.0), bvec4(true), uvec4(1u)), workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, _GLF_struct_1(mat3x4(1.0), vec3(1.0), uvec4(1u)), _GLF_struct_2(uvec2(1u), ivec4(1), mat2(1.0), 1.0, mat2x4(1.0), vec3(1.0))), _GLF_struct_7(1.0, vec3(1.0), vec2(1.0), _GLF_struct_4(mat2x3(1.0), 1.0, vec2(1.0), vec3(1.0), uvec2(1u), 1u), _GLF_struct_5(ivec2(1), mat3x4(1.0), 1.0, uvec4(1u)), _GLF_struct_6(bvec4(true), mat2x3(1.0), ivec2(1)), bvec3(true)));
 uint virtual_gid = _GLF_struct_replacement_8._f2.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x = virtual_gid;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
  {
  }
 else
  {
   atomicStore(write_val, uint(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x), 4, 64, 0);
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     buf[GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x] = uint(subgroupAllEqual(read_val));
    }
  }
}
