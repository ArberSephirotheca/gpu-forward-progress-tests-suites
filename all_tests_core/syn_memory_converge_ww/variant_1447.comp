#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, bool(bool(false))), ! (! (((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, bool(bool(false))))))))) && true)))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.1)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-97.20) : injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(17.08), _GLF_FUZZED(8.8)), (false ? _GLF_FUZZED((injectionSwitch / injectionSwitch)) : _GLF_IDENTITY(vec2(_GLF_FUZZED(17.08), _GLF_FUZZED(8.8)), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (vec2(_GLF_FUZZED(17.08), _GLF_FUZZED(8.8)))))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true)))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true)))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), false)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true)))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true)))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))), (bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))) && true))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), false))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))) || false), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false, false)))))), ! (! (_GLF_DEAD(false)))))))))), bool(bvec4(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false, false)))))), ! (! (_GLF_DEAD(false)))))))))), (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false, false)))))), ! (! (_GLF_DEAD(false))))))))))) && true), true, true, false))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false, false)))))), ! (! (_GLF_DEAD(false)))))))))), bool(bvec4(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false, false)))))), ! (! (_GLF_DEAD(false)))))))))), (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true), false, false)))))), ! (! (_GLF_DEAD(false))))))))))) && true), true, true, false))), false)), false, false, false))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), false)))), bool(bvec3(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), false)))), true, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), false)))), bool(bvec3(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), false)))), true, true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false)))), bool(bvec2((_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false)))), true))), bool(bvec3(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), false || (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), false)))), true, true)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))))))))))))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))))))))))))), ! (! ((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))))))))))))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), false))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), false || ((! (_GLF_DEAD(false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))))))))), bool(_GLF_IDENTITY(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, false))), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec4(bvec2(! (! (_GLF_DEAD(false))), false), false, true))), true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false), bvec3(bvec3(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false))))))))))))), false), bvec2(bvec4(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, false))), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec4(bvec2(! (! (_GLF_DEAD(false))), false), false, true))), true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false), bvec3(bvec3(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false))))))))))))), false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false || ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), ! (! (_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), false || ((! (_GLF_DEAD(false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))))))))), bool(_GLF_IDENTITY(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, false))), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec4(bvec2(! (! (_GLF_DEAD(false))), false), false, true))), true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false), bvec3(bvec3(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false))))))))))))), false), bvec2(bvec4(bvec2(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, false, false))), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (! (_GLF_DEAD(false))), false), bvec2(bvec4(bvec2(! (! (_GLF_DEAD(false))), false), false, true))), true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false), bvec3(bvec3(bvec3((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))))), false, false))))))))))))), false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false), true), false))))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))) || false), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))) || false), true), false), false))))))), true, false))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))) && true)) || false))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) >> uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(15358u, 122935u, 99120u), uvec3(0u, 0u, 0u) ^ (uvec3(15358u, 122935u, 99120u)))), (false ? _GLF_FUZZED(uvec3(31278u, 187488u, 108422u)) : true ? _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(15358u, 122935u, 99120u), uvec3(0u, 0u, 0u) ^ (uvec3(15358u, 122935u, 99120u))))))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), 1u))), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)))), (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(15358u, 122935u, 99120u)))))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), true, false))) ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(15358u, 122935u, 99120u))))))))), gl_WorkGroupSize)))).x, 0u ^ (_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(15358u, 122935u, 99120u))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(15358u, 122935u, 99120u)))))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(15358u, 122935u, 99120u))))))))), gl_WorkGroupSize)))).x));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))))) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))))) ^ uvec3(0u, 0u, 0u)).x, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))))) ^ uvec3(0u, 0u, 0u)).x) | _GLF_IDENTITY(0u, max(0u, 0u)));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), true)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false)))))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(51419)))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y))))))), true && (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((num_workgroup ^ workgroup_size)))), clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((num_workgroup ^ workgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((num_workgroup ^ workgroup_size)))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((num_workgroup ^ workgroup_size)))), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((num_workgroup ^ workgroup_size)))) : _GLF_FUZZED(subgroup_id)))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u) + subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), uint(uvec2(~ (subgroup_base), 1u))))), max(workgroup_base + subgroup_base, workgroup_base + subgroup_base))) << 0u) + subgroup_local_id));
 atomicStore(write_val, _GLF_IDENTITY(uint(virtual_gid), (_GLF_IDENTITY(uint(virtual_gid), _GLF_IDENTITY((true ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)), clamp((true ? uint(virtual_gid) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec2(! (true), false)), (bool(bvec2(! (true), false))) || false)))) ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, false))) && true)) ? uint(virtual_gid) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size))))) | 0u)), 1u), max(uvec2((_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)), 1u), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)), min((true ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)), (true ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)))), 1u))))), (true ? uint(virtual_gid) : _GLF_FUZZED(subgroup_size)))))) | _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) + 0u)), uint(7u))), uint(uint((0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) - 0.0), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(injectionSwitch.y, injectionSwitch.y)) + abs(sin(0.0)))), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0)), log(1.0) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, injectionSwitch.y)), abs(1.0), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, abs(0.0), 1.0, 0.0, 0.0))), injectionSwitch.x))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-944.291) : injectionSwitch.y)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))), injectionSwitch.y)), abs(1.0), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(944.486) : 1.0)))), log(1.0) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.8) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 1.0)), max(float(mat3(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 1.0)), float(mat3(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 1.0))))), 1.0)))), _GLF_IDENTITY(0.0, (0.0) * 1.0), sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0)), _GLF_IDENTITY(log(1.0) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), abs(1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0))), mix(float(_GLF_FUZZED(-4135.6097)), float(_GLF_IDENTITY(log(1.0) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), abs(1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0))), 0.0 + (log(1.0) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), abs(1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0)))))), bool(true)))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), 0.0, abs(0.0), cos(0.0), 1.0)), log(1.0) + (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - 0.0)))))), abs(1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0))), abs(0.0), cos(0.0), 1.0)))))), false))))))), false)))));
  }
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, 0 ^ (4)))), _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) >> 0, int(_GLF_IDENTITY(ivec2((0) >> 0, 1), min(_GLF_IDENTITY(ivec2((0) >> 0, 1), (ivec2((0) >> 0, 1)) | (ivec2((0) >> 0, 1))), ivec2((0) >> 0, 1)))))) ^ 0), 0)), 0 | _GLF_IDENTITY((int(ivec4(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 0), (_GLF_IDENTITY(ivec2(4, 0), ivec2(0, _GLF_IDENTITY(0, 0 | (0))) ^ (ivec2(4, 0)))) / ivec2(1, 1)))), _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | (_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | (ivec2(0, 0))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, (0) * 1), (0 ^ _GLF_IDENTITY(0, (0) * 1)) - 0), (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (true ? _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, 0 + ((0) * 1))) : _GLF_FUZZED(-9778)))) | (0 ^ _GLF_IDENTITY(0, (0) * 1)))), 0))), max(_GLF_IDENTITY((int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))), (0) * 1)), 0))), clamp((int(ivec4(4, 1, (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ _GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(1), int(1))) + (1)))), 0))), (int(ivec4(4, 1, _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), ((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1))))) | 0)) << 0), 0))), (int(_GLF_IDENTITY(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0)), (~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0))) + ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (~ (_GLF_IDENTITY(~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0)), (~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0))) + ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) | ivec4(0, 0, 0, 0))))))), (int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, (0) ^ 0), (0 << _GLF_IDENTITY(int(7), int(7))), 1, 1), (ivec4(_GLF_IDENTITY(0, (0) ^ 0), (0 << _GLF_IDENTITY(int(7), int(7))), 1, 1)) - ivec4(0, 0, 0, 0)))), (0) * 1)), 0))))))))), 4, 4)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), (_GLF_IDENTITY(int(int(4)), (int(int(4))) ^ 0)) << 0)), _GLF_IDENTITY(int(ivec4(4, _GLF_IDENTITY(1, (1) * 1), (_GLF_IDENTITY(0, (0) >> 0) ^ 0), 0)), 0 | _GLF_IDENTITY((int(ivec4(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, _GLF_IDENTITY(0, ~ (~ (0)))), (_GLF_IDENTITY(ivec2(4, 0), ivec2(0, 0) ^ (ivec2(4, 0)))) / ivec2(1, 1)))), _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))), (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, (0) * 1), (0 ^ _GLF_IDENTITY(0, (0) * 1)) | (0 ^ _GLF_IDENTITY(0, (0) * 1)))), 0))), max(_GLF_IDENTITY((int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, 0 ^ ((0) * 1)))), 0))), clamp((int(ivec4(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-86916)))) << 0), 1, (0 ^ _GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) >> 0)))) + (1)))), 0))), (int(ivec4(4, 1, _GLF_IDENTITY(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), ((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1))))) | 0)) << 0), min(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), ((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1))))) | 0)) << 0), _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), ((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1))))) | 0)) << 0))), 0))), (int(_GLF_IDENTITY(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0), ~ (_GLF_IDENTITY(~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0)), (~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0))) + ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.9)), bool(false))), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), exp(0.0)))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))), (int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) * 1)), 0))))))))), 4, 4)), (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, (_GLF_IDENTITY(0, (0) >> 0) ^ 0), 0)), 0 | _GLF_IDENTITY((int(ivec4(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 0), (_GLF_IDENTITY(ivec2(4, 0), ivec2(0, 0) ^ (ivec2(_GLF_IDENTITY(4, (1 ^ 1) ^ (_GLF_IDENTITY(4, 1 * (4)))), 0)))) / ivec2(1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))), (_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))), max(_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))), _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))))))))) | (_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0)))))), (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, (0) * 1), (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), min(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, (0) * 1)))) | (0 ^ _GLF_IDENTITY(0, (0) * 1)))), 0))), max(_GLF_IDENTITY((int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0))), clamp((int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(1), int(1))) + (1)))), 0))), (int(ivec4(4, 1, _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, _GLF_IDENTITY(clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1), clamp(_GLF_IDENTITY(clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1), max(clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1), clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1))), clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1), clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, ((0) * 1) | 0), (0) * 1)))), ((0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, clamp((0) * 1, _GLF_IDENTITY((0) * 1, (_GLF_IDENTITY((0) * 1, (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY((0) * 1, ((0) * 1) << (1 ^ 1))))) | 0), (0) * 1))))) | 0)) << 0), 0))), (int(_GLF_IDENTITY(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (0) * 1)), 0), ~ (_GLF_IDENTITY(~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), clamp(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, (0) * 1)))), 0)), (~ (ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) * 1)), 0))) + ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))), (int(ivec4(4, 1, (0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0) : _GLF_FUZZED(54861))) * _GLF_IDENTITY(1, (1) | (1)))), 0))))))))), 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) << 0), 4))))) - 0))), 64, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), ~ (~ (_GLF_IDENTITY(0, (0) | (0))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) ^ _GLF_IDENTITY(0u, uint(uint(0u))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)), (injectionSwitch.x) * 1.0) > injectionSwitch.y)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, _GLF_IDENTITY(true, true && (true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
}
