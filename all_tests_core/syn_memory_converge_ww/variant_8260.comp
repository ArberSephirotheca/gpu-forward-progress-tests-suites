#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 ivec2 _f0;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 bvec4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 mat4 _f1;
 mat4x2 _f2;
 uint _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_2 {
 float _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 _GLF_struct_3 _f2;
 uvec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 vec4 _f1;
 uint subgroup_id;
 mat2x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_1 {
 bool _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_6 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(true, _GLF_struct_0(mat2x4(1.0), vec4(1.0), gl_SubgroupID, mat2x3(1.0), mat2x3(1.0))), _GLF_struct_4(_GLF_struct_2(1.0), mat4x2(1.0), _GLF_struct_3(mat3x2(1.0), mat4(1.0), mat4x2(1.0), 1u, mat3x2(1.0)), uvec3(1u), uvec2(1u)), _GLF_struct_6(uvec2(1u), bvec4(true), _GLF_struct_5(ivec2(1))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_7._f0._f1.subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, _GLF_IDENTITY(uint(virtual_gid), (_GLF_IDENTITY(uint(virtual_gid), 0u ^ (uint(virtual_gid)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
