#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 mat3x2 _f0;
 uint subgroup_local_id;
 mat3 _f1;
} ;

struct _GLF_struct_6 {
 int _f0;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat4x2 _f1;
 uint _f2;
 int _f3;
 ivec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 uvec4 _f1;
 uvec3 _f2;
 ivec2 _f3;
 mat3x2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_7 {
 mat2 _f0;
 _GLF_struct_4 _f1;
 mat2 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 mat3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_8 {
 uint workgroup_base;
 bvec2 _f0;
 _GLF_struct_7 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_1 {
 uint virtual_gid;
 mat2x4 _f0;
 float _f1;
 uint _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 uint _f1;
 int _f2;
 ivec2 _f3;
 float _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 int _f2;
} ;

struct _GLF_struct_3 {
 int _f0;
 mat4 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-43.74))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-43.74))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-43.74))) > injectionSwitch.y) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-43.74))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, 1.0, 0.0)), max(float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, 1.0, 0.0)), float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, 1.0, 0.0))))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, 1.0, 0.0)), max(float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, 1.0, 0.0)), float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, 1.0, 0.0)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
      }
     else
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) - 0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))), _GLF_IDENTITY(int(5), min(int(5), int(5))))), clamp(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))), int(int(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))))) | 0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), _GLF_IDENTITY(int(5), min(int(5), int(5)))))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))))))), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec2(5, 0), max(ivec2(5, 0), ivec2(5, 0))))), 5))), min(int(5), int(5)))))) ^ 0), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, min(5, 5))))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(_GLF_IDENTITY(5, ~ (~ (5)))), int(5)))))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat3x2(1.0), gl_SubgroupInvocationID, mat3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- 7.8))), bool(false)))) / 1.0) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, abs(0.0), abs(1.0), determinant(mat2(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0)), 1.0, 0.0, 1.0, sin(0.0), exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), 1.0)), _GLF_IDENTITY(float(vec4(float(mat4x3(injectionSwitch.y, abs(0.0), abs(1.0), determinant(mat2(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0)), 1.0, 0.0, 1.0, sin(0.0), exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), 1.0)), 0.0, 0.0, 1.0)), mix(float(float(vec4(float(mat4x3(injectionSwitch.y, abs(0.0), abs(1.0), determinant(mat2(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0)), 1.0, 0.0, 1.0, sin(0.0), exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), 1.0)), 0.0, 0.0, 1.0))), float(_GLF_FUZZED(424.209)), bool(false))))), false, false)))) && true)))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.9) : injectionSwitch.x)), mix(float(injectionSwitch.x), float(_GLF_FUZZED((- 7.8))), bool(false)))) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(5968.8997))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, abs(0.0), abs(1.0), determinant(mat2(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), 1.0)), 1.0, 0.0, 1.0, sin(0.0), exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), 1.0)), _GLF_IDENTITY(float(vec4(float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(abs(0.0), float(vec2(abs(0.0), 1.0))), abs(1.0), determinant(mat2(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0)), 1.0, 0.0, 1.0, sin(0.0), exp(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), 1.0)), 0.0, 0.0, 1.0)), mix(float(float(vec4(float(mat4x3(injectionSwitch.y, abs(0.0), abs(1.0), determinant(mat2(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0)), 1.0, 0.0, 1.0, sin(0.0), exp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 0.0), (mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 0.0)) * mat3(1.0))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), clamp(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(51.99)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true)))))), 1.0)), 0.0, 0.0, 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(424.209), max(_GLF_FUZZED(424.209), _GLF_FUZZED(424.209)))), bool(false))))), false, false)))) && true)))))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), max(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0))))))), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), max(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0))))))), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), max(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0))))))), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), max(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0))))))), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), max(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0))))))), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), abs(1.0), 0.0, 0.0, 1.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), max(float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0)), float(vec2(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0)), 0.0))))))), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))))))))))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID))) << uvec3(0u, 0u, 0u)))).x) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) + abs(vec2(0.0, 0.0))), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))), ((injectionSwitch) * mat2(1.0)))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), vec2(vec4(((injectionSwitch) * mat2(1.0)), 1.0, 0.0))))) + abs(vec2(0.0, 0.0))), 1.0, 1.0, sin(0.0), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 1.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)))).x)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false)) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true), bvec2(bvec4(bvec2((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true), bvec2(bvec4(bvec2((_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true), true, false))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))), (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))), (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), bool(bvec3(! (false), true, true))), (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), (true) && true)) && true))))) || false))))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true)))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter < 1, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_injected_loop_counter < 1, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(int(0), int(0)))) ^ 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                  barrier();
                 barrier();
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), ! (! (bool(bvec3(true, true, false))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2770.9626, -17.61)))).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-43119 & 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(workgroup_size * workgroup_id, bvec2(true), _GLF_struct_7(mat2(1.0), _GLF_struct_4(mat2(1.0), uvec4(1u), uvec3(1u), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) ^ 0))), (_GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) ^ 0))), 0 | (int(ivec2(1, _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, 0 | (0)))))))) ^ 0))), (false ? _GLF_FUZZED(ivec2(_GLF_IDENTITY(-38324, (-38324) + 0), 62042)) : ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(0, (0) ^ 0)), (ivec2(1, _GLF_IDENTITY(0, (0) ^ 0))) / ivec2(1, 1))), (_GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) | (0))))))), 0 | (int(ivec2(1, _GLF_IDENTITY(0, (0) ^ 0)))))) ^ 0))))), mat3x2(1.0), bvec3(true)), mat2(1.0), _GLF_struct_5(mat2(1.0), mat4x2(1.0), 1u, 1, ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), _GLF_IDENTITY(int(int((1))), _GLF_IDENTITY(max(int(int((1))), int(int((1)))), (_GLF_IDENTITY(max(int(int((1))), int(int((1)))), (max(int(int((1))), int(int((1))))) - 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY((1), min(_GLF_IDENTITY((1), max((1), (1))), (1))))) * 1)), mat2x3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-7.2) : 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-7.2) : _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, abs(sin(0.0))), (mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, abs(sin(0.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(mat2x3(false ? _GLF_IDENTITY(_GLF_FUZZED(-7.2), max(_GLF_FUZZED(-7.2), _GLF_FUZZED(-7.2))) : 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), float(mat2x4(_GLF_IDENTITY(false ? _GLF_FUZZED(-7.2) : 1.0, float(mat2x3(false ? _GLF_FUZZED(-7.2) : 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), sin(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2((_GLF_IDENTITY(false ? _GLF_FUZZED(-7.2) : 1.0, _GLF_IDENTITY(float(mat2x3(false ? _GLF_FUZZED(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-7374.8568) : -7.2))) : 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), (float(mat2x3(false ? _GLF_FUZZED(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-7374.8568) : -7.2))) : 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))) - 0.0))), 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), (_GLF_IDENTITY(mat2((_GLF_IDENTITY(false ? _GLF_FUZZED(-7.2) : 1.0, _GLF_IDENTITY(float(mat2x3(false ? _GLF_FUZZED(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-7374.8568) : -7.2))) : 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), (float(mat2x3(false ? _GLF_FUZZED(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-7374.8568) : -7.2))) : 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))) - 0.0))), 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), mat2(1.0) * (mat2((_GLF_IDENTITY(false ? _GLF_FUZZED(-7.2) : 1.0, _GLF_IDENTITY(float(mat2x3(false ? _GLF_FUZZED(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-7374.8568) : -7.2))) : 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), (float(mat2x3(false ? _GLF_FUZZED(_GLF_IDENTITY(-7.2, (false ? _GLF_FUZZED(-7374.8568) : -7.2))) : 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))) - 0.0))), 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)))) - mat2(0.0, 0.0, 0.0, 0.0))))))))))), _GLF_struct_6(1), mat3(1.0), mat3x4(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-853.051)), bool(false))), 0.0)))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, _GLF_IDENTITY(abs(abs(0.0)), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(abs(abs(0.0)), min(abs(abs(0.0)), abs(abs(0.0))))), bool(true)))))))), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat3(vec3(1.0), 1.0, 1.0, abs(abs(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0, sin(0.0)), mat3(_GLF_IDENTITY(mat4x3(mat3(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-9.4))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)))))), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-9.4))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)))))), mix(vec3(_GLF_FUZZED(7.0), _GLF_FUZZED(-168.929), _GLF_FUZZED(618.904)), vec3((vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-9.4))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)))))))[0], (vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-9.4))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)))))))[1], (vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-9.4))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), float(mat4x2(1.0, 1.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)))))))[2]), bvec3(true, true, true)))) / exp(vec3(0.0, 0.0, 0.0))), 1.0, 1.0, _GLF_IDENTITY(abs(abs(1.0)), (false ? _GLF_FUZZED(exp(7643.6738)) : abs(abs(1.0)))), 1.0, 1.0, _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), min(_GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), 1.0 * (clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), 0.0))), (sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, cos(0.0) * (0.0)))), 0.0)), 0.0)))) / 1.0))), mat4x3(mat4(mat4x3(mat3(vec3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1.0, 1.0, abs(abs(1.0)), 1.0, 1.0, _GLF_IDENTITY(sin(0.0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true)))) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), _GLF_IDENTITY(clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0)))), max(_GLF_IDENTITY(clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0)))), min(clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0)))), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0)))))), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))))), clamp(_GLF_IDENTITY(sin(0.0), float(float(_GLF_IDENTITY(sin(0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(13.26) : sin(0.0)))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - _GLF_IDENTITY(0.0, (0.0) * 1.0))) : sin(0.0))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9245.0973), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), false)), true, true)))) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))), clamp(sin(0.0), sin(_GLF_IDENTITY(0.0, (0.0) * exp(0.0))), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true)))) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), _GLF_IDENTITY(clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0)))), (clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))) * 1.0)), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))))), (true ? _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true)))) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), _GLF_IDENTITY(clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0)))), (clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))) * 1.0)), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))))) : _GLF_FUZZED(-5751.5301))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), false)), true, true)))) ? _GLF_FUZZED(9.2) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true))), false, false, true)))) ? _GLF_IDENTITY(_GLF_FUZZED(9.2), (_GLF_IDENTITY(_GLF_FUZZED(9.2), (false ? _GLF_FUZZED(7.2) : _GLF_FUZZED(9.2)))) * 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-98.34) : sin(0.0))))), clamp(sin(0.0), sin(0.0), _GLF_IDENTITY(sin(0.0), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(0.1, (0.1) - 0.0)) : sin(0.0))) / 1.0)))))))))))))))), _GLF_IDENTITY((vec3(_GLF_IDENTITY(mat3(vec3(1.0), 1.0, 1.0, abs(abs(1.0)), 1.0, 1.0, sin(0.0)), mat3(_GLF_IDENTITY(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(abs(1.0)), 1.0, 1.0, sin(0.0))), mat4x3(mat4(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(_GLF_IDENTITY(abs(1.0), (_GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0)))) - 0.0)), 1.0, 1.0, sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0)))))))))))) * mat3(1.0), max((vec3(_GLF_IDENTITY(mat3(vec3(1.0), 1.0, 1.0, abs(abs(1.0)), 1.0, 1.0, sin(0.0)), mat3(_GLF_IDENTITY(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(abs(1.0)), 1.0, 1.0, sin(0.0))), mat4x3(_GLF_IDENTITY(mat4(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(_GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0)), 1.0, 1.0, _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0))), (true ? sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0))) : _GLF_FUZZED(-8.9)))))), (_GLF_IDENTITY(mat4(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(_GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0)), 1.0, 1.0, _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0))), (true ? sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0))) : _GLF_FUZZED(-8.9)))))), (mat4(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(_GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0)), 1.0, 1.0, _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0))), (true ? sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0))) : _GLF_FUZZED(-8.9))))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) * mat4(1.0)))))))) * mat3(1.0), (vec3(_GLF_IDENTITY(mat3(vec3(1.0), 1.0, 1.0, abs(abs(1.0)), 1.0, 1.0, sin(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.8) : 0.0)))), mat3(_GLF_IDENTITY(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(abs(1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sin(0.0))), mat4x3(mat4(mat4x3(mat3(vec3(1.0), 1.0, 1.0, abs(_GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0)), 1.0, 1.0, sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-27.07)), bool(false))), 0.0)))))))))))) * mat3(1.0))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))), min(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))), 0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(_injected_loop_counter))), int(4), int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) | (1)))), int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-77538) : 1)), _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec4(ivec2(1, 1), 1, 1)), (ivec2(ivec4(ivec2(1, 1), 1, 1))) / ivec2(1, 1))))), _GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (0)), 1)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false)), false || (bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false)))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(6), int(6))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(1, mat4(1.0), _GLF_struct_2(_GLF_struct_0(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), 1u, 1, ivec2(_GLF_IDENTITY(1, (1) * 1)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (1.0)), mix(float(_GLF_FUZZED(-53.44)), float(1.0), bool(true))), uvec4(1u)), _GLF_struct_1(_GLF_struct_replacement_8.workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), max(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) / 1u), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))), (true ? _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 0.0, 1.0, log(1.0), 1.0)), min(vec2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))), (true ? _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 0.0, 1.0, log(1.0), 1.0)), vec2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))), (true ? _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false))))) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 0.0, 1.0, log(1.0), 1.0)))))[1]), vec2(_GLF_FUZZED((-59.24 - vec3(-4.9, 987.292, -2891.3899).x)), _GLF_FUZZED(-4.2)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false)))))).x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))), (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | 0)]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false)))))[1]), vec2(_GLF_FUZZED((-59.24 - vec3(-4.9, 987.292, -2891.3899).x)), _GLF_FUZZED(-4.2)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false)))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false))))), false, false))))))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | 0)]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false)))))[1]), vec2(_GLF_FUZZED((-59.24 - vec3(-4.9, 987.292, -2891.3899).x)), _GLF_FUZZED(-4.2)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false)))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false))))), false, false))))))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), ~ (~ ((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | 0)]), vec2(_GLF_FUZZED(8223.5119), _GLF_FUZZED(-277.502)), bvec2(false, false)))))[1]), vec2(_GLF_FUZZED((-59.24 - vec3(-4.9, 987.292, -2891.3899).x)), _GLF_FUZZED(-4.2)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false)))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, _GLF_IDENTITY(true, (true) && true))), true))), true, false))))), false, false))))))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))))) | (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) * 1u)), subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id)))) | (workgroup_id))) : subgroup_size)))) + _GLF_struct_replacement_9.subgroup_local_id, mat2x4(1.0), 1.0, 1u, ivec2(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1)))))), 1));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED((585.703 + 9.9))), bool(false))))) || false)) && true)) || false)))))))
    barrier();
  }
 atomicStore(write_val, _GLF_IDENTITY(uint(_GLF_struct_replacement_3._f2._f1.virtual_gid), (_GLF_IDENTITY(uint(_GLF_struct_replacement_3._f2._f1.virtual_gid), (_GLF_IDENTITY(uint(_GLF_struct_replacement_3._f2._f1.virtual_gid), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), _GLF_IDENTITY(((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))), (((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)))) >> 0u) | 0u) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, clamp(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, _GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, (_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u) - 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, max(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u, (true ? _GLF_IDENTITY((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid)), ((uint(_GLF_struct_replacement_3._f2._f1.virtual_gid))) | 0u) | 0u : _GLF_FUZZED(num_workgroup))))))))))) ^ 0u)) / 1u), 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 | (-75255 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true) || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), ! (! (_GLF_IDENTITY(false, true && (false)))))) && true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (! (bool(bvec2(false, false))))))))))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3530.8926))) > injectionSwitch.y)), false, false))), true, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), (_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), ! (! (bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))))))) && true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))), true, _GLF_IDENTITY(true, bool(bool(true))), true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false)))), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, true, true))))), bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))), true, _GLF_IDENTITY(true, bool(bool(true))), true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false)))), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, true, true))))), false))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, _GLF_IDENTITY(true, bool(bool(true))), true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec3(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(bool(bvec3(bool(! (_GLF_WRAPPED_IF_FALSE(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(bool(! (_GLF_WRAPPED_IF_FALSE(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec3(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(bool(bvec3(bool(! (_GLF_WRAPPED_IF_FALSE(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(bool(! (_GLF_WRAPPED_IF_FALSE(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true, true)), false, false, false)), false || (bool(bvec4(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec3(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(bool(bvec3(bool(! (_GLF_WRAPPED_IF_FALSE(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(bool(! (_GLF_WRAPPED_IF_FALSE(false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true, true)), false, false, false))))))))) && true)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), ! (! (! ((_GLF_WRAPPED_IF_FALSE(false))))))))), (! (! (_GLF_WRAPPED_IF_FALSE(false)))) && true)))), (_GLF_IDENTITY(bool(! (_GLF_WRAPPED_IF_FALSE(false))), ! _GLF_IDENTITY((! (bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))))), true && ((! (bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))))))))) && true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(bool(bvec2((_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2((_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true, false)), bool(bvec4(bool(bvec4(! _GLF_IDENTITY(((_GLF_WRAPPED_IF_FALSE(false))), bool(bvec2(_GLF_IDENTITY(((_GLF_WRAPPED_IF_FALSE(false))), (((_GLF_WRAPPED_IF_FALSE(false)))) && true), false))), false, true, false)), _GLF_IDENTITY(false, ! (! (false))), false, false)))))), _GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(false)))), ! (! (_GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(false)))), true && (bool(bool(! (_GLF_WRAPPED_IF_FALSE(false)))))))))), true, _GLF_IDENTITY(true, bool(bool(true))), true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false)))), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, true, true))))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) || (! (_GLF_WRAPPED_IF_FALSE(false))))))), true, _GLF_IDENTITY(true, bool(bool(true))), true)), ! _GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))), true, true, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))), true, true, true)))), ! (! ((! (bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))), true, true, true)))))))), (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || ((_GLF_WRAPPED_IF_FALSE(false)))), bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))), true, true, _GLF_IDENTITY(true, (true) && true))))), ! (! ((! (bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(false)))), (bool(bool(! (_GLF_WRAPPED_IF_FALSE(false))))) && true)), true, true, true))))))))) && true))))) && true))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, (0 << _GLF_IDENTITY(int(0), int(0))), (1 ^ 1)), (ivec3(1, (0 << _GLF_IDENTITY(int(0), int(0))), (1 ^ 1))) - ivec3(0, 0, 0))), (true ? int(_GLF_IDENTITY(ivec3(1, (0 << _GLF_IDENTITY(int(0), int(0))), (1 ^ 1)), (ivec3(1, (0 << _GLF_IDENTITY(int(0), int(0))), (1 ^ 1))) - ivec3(0, 0, 0))) : _GLF_FUZZED(65071))))), int(1))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) || false)))))
            barrier();
          }
        }
       _GLF_IDENTITY(buf[_GLF_struct_replacement_3._f2._f1.virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) / 1u), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(read_val) : buf[_GLF_struct_replacement_3._f2._f1.virtual_gid] = uint(subgroupAllEqual(read_val))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}
