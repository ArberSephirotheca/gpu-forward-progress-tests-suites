#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(3828.4196)), bool(false))))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(3828.4196)), bool(false))))).x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), (int(6)) << 0), int(_GLF_IDENTITY(6, ~ (~ (6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(1, (1) | 0), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))), (1 & 1))), int(_GLF_IDENTITY(ivec3(int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 1, (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))), (1 & 1))), 1, 1), (true ? ivec3(int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 1, (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), clamp(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))))), (1 & 1))), 1, 1) : _GLF_FUZZED(ivec3(24955, 18315, -23767)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (ivec3(0, 0, 1)) << (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(2), ivec3(2))))))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, false, true)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))))))))))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                barrier();
                              }
                            }
                          }
                         else
                          {
                          }
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), true && ((! (false)))))))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true)))) || false) && (_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (! (false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((5190.5064 * 9.7))), vec2(_GLF_FUZZED((vec4(9390.6915, 89.79, -273.501, -71.27) + -1.6).b), (injectionSwitch)[1]), bvec2(false, true))).x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)), true))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! ((_GLF_DEAD(false)) || false)))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (gl_NumWorkGroups), (true ? uvec3(0u, 0u, 0u) + (gl_NumWorkGroups) : _GLF_FUZZED((uvec3(191938u, 36494u, 42468u) + subgroup_size))))).x, 0u ^ (gl_NumWorkGroups.x))) / _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(144929u) : 1u)));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)).x))), gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), (bool((false))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), (bool((false))) && true), true && (_GLF_IDENTITY(bool((false)), (bool((false))) && true))))))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((false)), (bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))) && true))), ! (! ((bool(_GLF_IDENTITY(bool((false)), (bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))) && true)))))))))), true && ((! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), (bool((_GLF_IDENTITY(false, ! (! (false)))))) && true)), ! (! (bool(_GLF_IDENTITY(bool((false)), (bool((_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true))))))))))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ (0 << _GLF_IDENTITY(int(3), int(3))), ~ (~ (1 ^ (0 << _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id, _GLF_IDENTITY(uint(uvec4(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), _GLF_IDENTITY(0u, (0u) << 0u), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((4u) << 0u, ((4u) << 0u) / 1u))), uint(4u))), 0u)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u), min(uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u), uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), clamp(uint(uvec4(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(0u, max(0u, 0u)))), uint(_GLF_IDENTITY(uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u), min(uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u), uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), uint(_GLF_IDENTITY(uvec4(workgroup_size * workgroup_id, 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, uint(uvec3(_GLF_IDENTITY(4u, ~ _GLF_IDENTITY((~ (4u)), (false ? _GLF_FUZZED(190514u) : (~ (4u))))), 0u, 0u)))))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 0u, 0u)), ~ (~ (uint(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))), (_GLF_IDENTITY(uint(uvec4(0u, (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))), uint(uvec3(uint(uvec4(0u, (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))), 1u, 0u)))) >> 0u))))))))), (uvec4(workgroup_size * workgroup_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ~ (_GLF_IDENTITY(~ ((0u)), ~ (~ (~ ((0u))))))) << 0u), (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u + (_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u))))))), 0u)) - uvec4(0u, 0u, 0u, 0u)))))))));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec4(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) + 0u), 0u, 0u, 0u))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))) >> _GLF_IDENTITY(0u, 0u | (0u)))) ^ (0u | 0u));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y)))))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), clamp(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (false ? _GLF_FUZZED(-18.57) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, float(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, tan(0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))), _GLF_IDENTITY((injectionSwitch.y) / 1.0, mix(float(_GLF_IDENTITY((injectionSwitch.y) / 1.0, float(_GLF_IDENTITY(_GLF_IDENTITY(vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0), mix(vec4((vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0))[0], _GLF_FUZZED(50.71), (vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0))[2], (vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0))[3]), vec4(_GLF_FUZZED(668.902), (vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0))[1], _GLF_FUZZED((+ -0.1)), _GLF_FUZZED(8.9)), bvec4(false, true, false, false))) : _GLF_FUZZED(vec4(-8.3, -292.422, 88.82, 8.7)))), (vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0)) * mat4(1.0))))), float(_GLF_FUZZED(7152.1591)), bool(false)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(false))) - log(1.0))), injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, mix(float(_GLF_IDENTITY((injectionSwitch.y) / 1.0, float(_GLF_IDENTITY(vec4((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)) / 1.0, 0.0, 1.0, 0.0), (vec4((injectionSwitch.y) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0, 1.0, 0.0)) * mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.4)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), float(_GLF_FUZZED(7152.1591)), bool(false)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(2.8, (2.8) + abs(determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))), bool(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) - log(1.0))), injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_IDENTITY(mat4x2((injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), exp(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0), mat4x2(mat4x2(mat4x2((injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), exp(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0))))))).y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y) / 1.0, _GLF_IDENTITY(float(mat4x3((injectionSwitch.y) / 1.0, log(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, exp(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0))), max(float(mat4x3((injectionSwitch.y) / 1.0, log(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, exp(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0))), float(mat4x3((injectionSwitch.y) / 1.0, log(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, exp(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0)))))), mix(float(_GLF_IDENTITY((injectionSwitch.y) / 1.0, float(_GLF_IDENTITY(vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0), (vec4((injectionSwitch.y) / 1.0, 0.0, 1.0, 0.0)) * mat4(1.0))))), float(_GLF_FUZZED(7152.1591)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(_GLF_IDENTITY(false, ! (! (false))))), mix(float(_GLF_FUZZED(78.36)), float(_GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(_GLF_IDENTITY(false, ! (! (false))))), mix(float(_GLF_FUZZED(-6483.9689)), float(mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(true)))), bool(true))), (mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(false))) - log(1.0))), injectionSwitch.y))))))))) && true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - 0), 0 | (_GLF_IDENTITY(3, (3) - 0)))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - 0), 0 | (_GLF_IDENTITY(3, (3) - 0)))))))))), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (0 & 60811) ^ (_injected_loop_counter)))) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), min((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))))))) || false); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) ^ _GLF_IDENTITY((1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, (true ? (1) >> 0 : _GLF_FUZZED((_injected_loop_counter ++)))))) | 0))) | ((1))), max(_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), clamp(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), 0 ^ (_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), clamp(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), 0 ^ (_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), clamp(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), 0 ^ (_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), clamp(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), 0 ^ (_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1)))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), clamp(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), 0 ^ (_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1)))))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), clamp(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1))))))), 0 ^ (_GLF_IDENTITY((1), _GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), min((_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1)))))), (_GLF_IDENTITY((1), (1 ^ 1) | (_GLF_IDENTITY((1), 0 ^ ((1))))))))))) | (_GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), 0 | ((1)))))))))))))) / (1 & 1)), (0 ^ _GLF_IDENTITY((1), ((1)) | ((1)))) << 0), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(((1)), (_GLF_IDENTITY(0 | (0 >> _GLF_IDENTITY(int(2), int(2))), int(_GLF_IDENTITY(ivec3(0 | (0 >> _GLF_IDENTITY(int(2), int(2))), 0, 1), (ivec3(0 | (0 >> _GLF_IDENTITY(int(2), int(2))), 0, 1)) - ivec3(0, 0, 0))))) | (((1))))), ~ (~ (_GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(((1)), (0 | (0 >> _GLF_IDENTITY(int(2), int(2)))) | (((1))))))))))))), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) | ((1)))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) | ((1)))))), 1, 1))), ! (! (_injected_loop_counter < _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (0 & 59035) ^ (1))), (_GLF_IDENTITY((1), ((1)) << 0)) >> 0) | (1))) | (1)), 0 ^ _GLF_IDENTITY((1), ((1)) | _GLF_IDENTITY(((1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(((1)), 1), (ivec2(((1)), 1)) | (ivec2(((1)), 1)))), max(int(_GLF_IDENTITY(ivec2(((1)), 1), (ivec2(((1)), 1)) | (ivec2(((1)), 1)))), int(_GLF_IDENTITY(ivec2(((1)), 1), (ivec2(((1)), 1)) | (ivec2(((1)), 1)))))))))))))), _GLF_IDENTITY(false, ! (! (false))))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((true ? _injected_loop_counter ++ : _GLF_FUZZED(-77659)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((true ? _injected_loop_counter ++ : _GLF_FUZZED(_GLF_IDENTITY(-77659, (_GLF_IDENTITY(-77659, ~ (~ (-77659)))) * 1)))))))
    {
     atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), (min(64, 64)) ^ (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) | 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))))))) * (0 | _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15277))))), 0);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -48352)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))))) != (0 & -48352)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -48352)))))) && true); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), int(ivec2(_GLF_FUZZED(_injected_loop_counter), 0))), _GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-24140 & (0 ^ 0))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (int(int(0))) * 1))) ^ 0) + (7))), int(7))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)))))))), 0 ^ ((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)))))))))), ~ (~ (0 ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), 1)), (_GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), 1)), (int(ivec2((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), 1))) ^ 0)) ^ 0)), 0 ^ ((_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))) * 1)), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 + (7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 + (7)), max(_GLF_IDENTITY(7, 0 + (7)), _GLF_IDENTITY(7, 0 + (7)))), _GLF_IDENTITY(7, 0 + (7)), _GLF_IDENTITY(7, 0 + (7))))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + _GLF_IDENTITY((7), ~ (~ (_GLF_IDENTITY((7), ((7)) >> 0)))))), int(7)))))))))))))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))), 0 ^ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) | (7)), 7, 7)), 0 + (7))), int(7))), 0 ^ ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(0, (0) - 0) + (7))), int(7))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) ^ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))), 0 ^ ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), _GLF_IDENTITY(int(7), 0 | (int(7)))))))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)))))))), 0 ^ ((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)))))))))), ~ (~ (0 ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), 1)), (_GLF_IDENTITY(int(ivec2((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), 1)), (int(ivec2((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0))))))))), 1))) ^ 0)) ^ 0)), 0 ^ ((_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(_GLF_IDENTITY(7, int(ivec4(_GLF_IDENTITY(7, int(ivec3(7, 1, 0))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))) * 1)), 0 ^ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 + (7)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 + (7)), max(_GLF_IDENTITY(7, 0 + (7)), _GLF_IDENTITY(7, 0 + (7)))), _GLF_IDENTITY(7, 0 + (7)), _GLF_IDENTITY(7, 0 + (7))))), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7)), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + _GLF_IDENTITY((7), ~ (~ (_GLF_IDENTITY((7), ((7)) >> 0)))))), int(7)))))))))))))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))), 0 ^ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) | (7)), 7, 7)), 0 + (7))), int(7))), 0 ^ ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(0, (0) - 0) + (7))), int(7))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) ^ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), int(7))), 0 ^ ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (7))), _GLF_IDENTITY(int(7), 0 | (int(7)))))))))))))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                      {
                      }
                     else
                      {
                       barrier();
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.8)), vec2(_GLF_FUZZED(-727.647), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch)).x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_WRAPPED_LOOP(false))));
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, abs(1.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, length(0.0))), float(mat4(float(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, abs(1.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, length(0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (40968 & 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, 0u | (read_val)))), (buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, 0u | (read_val))))) / 1u), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) / _GLF_IDENTITY(1u, (0u | (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) | (1u)));
 if(_GLF_DEAD(false))
  barrier();
}
