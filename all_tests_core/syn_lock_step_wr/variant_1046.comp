#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 ivec4 _f0;
 mat3 _f1;
 vec4 _f2;
 mat2x4 _f3;
 mat4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 mat4 _f1;
 int _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 _GLF_struct_0 _f1;
 bvec4 _f2;
 mat3x2 _f3;
 _GLF_struct_3 _f4;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat2(1.0), _GLF_struct_0(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9470.4226)), float(1.0), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), bvec4(true), mat3x2(1.0), _GLF_struct_3(_GLF_struct_1(vec2(1.0), mat4(1.0), 1), _GLF_struct_2(_GLF_IDENTITY(ivec4(1), (true ? _GLF_IDENTITY(ivec4(1), (ivec4(1)) / ivec4(1, 1, 1, 1)) : _GLF_FUZZED((ivec4(-80857, 22464, 32835, -35568) & 13282)))), mat3(1.0), vec4(1.0), mat2x4(1.0), mat4(1.0), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false)))))))))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[_GLF_IDENTITY(0, (0) << 0)], gl_WorkGroupSize[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize[2], (gl_WorkGroupSize[2]) | (gl_WorkGroupSize[2])), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) | uvec3(0u, _GLF_IDENTITY(0u, (0u) + (1u ^ 1u)), 0u)) ^ (gl_WorkGroupSize))[2], 1u, 0u))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(gl_WorkGroupSize[2], uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), (uvec3(0u, 0u, 0u) | uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min((0u), (0u))) + (1u ^ 1u)), 0u)) ^ (gl_WorkGroupSize))[2], 1u, 0u))))))).x);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_4.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))))) + subgroup_base), min((_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(workgroup_id), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_FUZZED(workgroup_id), 0u, 1u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_FUZZED(workgroup_id), 0u, 1u)))))))))))) + subgroup_base), (_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id)))), ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true, (true) || false) ? workgroup_base : _GLF_FUZZED(workgroup_id))))) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))))) + subgroup_base))))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size) - 0u));
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, _GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(96113) : 64)))), 4);
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(virtual_gid) : virtual_gid))], 4, 64, 2);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
