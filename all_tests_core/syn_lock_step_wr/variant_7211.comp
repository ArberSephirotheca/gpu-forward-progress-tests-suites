#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat4x2 _f0;
 float _f1;
} ;

struct _GLF_struct_1 {
 uint workgroup_base;
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 bvec2 _f2;
 mat2x4 _f3;
 uvec4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ! (! ((! (_GLF_IDENTITY(false, (false) && true))))))))) || false))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.4) : injectionSwitch.x)) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), false || (bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, _GLF_IDENTITY(false, false || (false)))), true && (bool(bvec4(_GLF_DEAD(false), true, false, _GLF_IDENTITY(false, false || (false))))))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), (true ? round(length(normalize(vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(87.16))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat3x4(mat3x4(mat3x4(0.0, 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 0.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0)), (determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, tan(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.6)), bool(false))) : _GLF_FUZZED(5.4)))), bool(true)))), 0.0, 0.0, 1.0))) - 0.0), 0.0, 0.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0)), 0.0, 0.0))))).x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y)), false, false), bvec3(bvec4(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), true))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))))), false, true)))), (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))))))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || ((_GLF_IDENTITY(false, true && (false))))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || ((_GLF_IDENTITY(false, true && (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || ((_GLF_IDENTITY(false, true && (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) && true)))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(workgroup_size * workgroup_id, mat2x4(1.0), _GLF_struct_0(mat4x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), 1.0), bvec2(true), mat2x4(1.0), uvec4(1u));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false))
              return;
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), false || _GLF_IDENTITY((_GLF_IDENTITY((! (false)), false || ((! (false))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY((! (false)), false || ((! (false)))))), bool(bvec4(bool((_GLF_IDENTITY((! (false)), false || ((! (false)))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5394.4245, -503.460)))).y))))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, true && (false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, true && (false)))))), ! (! (_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, true && (false)))))))))))))), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), false)))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), false, true))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (bool(false))), bool(bool((! (bool(false))))))))), false)))), false)), true))))))))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))))))))) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | ((_GLF_IDENTITY(0, (0) + 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) >> 0)))))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_1.workgroup_base, (_GLF_struct_replacement_1.workgroup_base) + 0u))) + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), min((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_struct_replacement_1.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) << 0)) : _GLF_FUZZED(_injected_loop_counter))), min(_GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) << 0)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) << 0)) : _GLF_FUZZED(_injected_loop_counter))))))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), (_GLF_IDENTITY(int(6), (int(6)) | 0)) | (_GLF_IDENTITY(int(6), (int(6)) | 0)))) | (_GLF_IDENTITY(int(6), (int(6)) | 0))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) << 0)) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))), min(_GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) << 0)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, ((int(6)) | 0) << 0)) : _GLF_FUZZED(_injected_loop_counter))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.1))))), injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4061.7000))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))) || (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))) || (true), false, false, true)), true && (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))) || (true), false, false, true))))))))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
          return;
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), min(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(78859)))])).x))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(8606) : _injected_loop_counter --)), 0 ^ (_injected_loop_counter --)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))), min((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               continue;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))), clamp(uint(uint(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(uint(1), uint(1)), (min(uint(1), uint(1))) / 1u)))), uint(uint(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))), max(uint(uint(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))))), uint(uint(_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))))))), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-8.0)), max((true ? injectionSwitch.y : _GLF_FUZZED(-8.0)), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-8.0)), float(float((true ? injectionSwitch.y : _GLF_FUZZED(-8.0))))))))))))
      return;
    }
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ (1 | int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
        return;
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))).x)) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))).x)) > injectionSwitch.y))), true, false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 0.0), (vec4(injectionSwitch.y, 1.0, 0.0, 0.0)) * mat4(1.0))))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true, false)))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true, false)))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-6.3)), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(false)), (_GLF_IDENTITY(! (bool(false)), bool(bool(! (bool(false)))))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (bool(false)), (_GLF_IDENTITY(! (bool(false)), bool(bool(! (bool(false)))))) && true))), true && (! (! (_GLF_IDENTITY(! (bool(false)), (_GLF_IDENTITY(! (bool(false)), bool(bool(! (bool(false)))))) && true)))))))))), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), 1.0)))), mix(float(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), 1.0))))), float(_GLF_FUZZED(7.4)), bool(false))), max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))) - 0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(6.3), _GLF_IDENTITY(min(_GLF_FUZZED(6.3), _GLF_FUZZED(6.3)), mix(float(min(_GLF_FUZZED(6.3), _GLF_FUZZED(6.3))), float(_GLF_FUZZED(-35.64)), bool(false))))), float(1.0), bool(true))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), bool(true))), 0.0, 1.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2x3(-1.9, 6.1, -75.92, 41.36, 8.4, -656.478)) : mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), bool(_GLF_IDENTITY(true, true && (true))))), 0.0, 1.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), bool(true))), 0.0, 1.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2x3(-1.9, 6.1, -75.92, 41.36, 8.4, -656.478)) : mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), _GLF_IDENTITY(bool(true), (bool(true)) && true))), 0.0, 1.0, 0.0, 0.0, 0.0)))), float(mat3x4(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), bool(true))), 0.0, 1.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2x3(-1.9, 6.1, -75.92, 41.36, 8.4, -656.478)) : mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.3)), float(1.0), bool(true))), 0.0, 1.0, 0.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8408.0515)), bool(false))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), 1.0)))) * 1.0))) / 1.0), abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) - 0.0))) + (ivec4(1, int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), tan(0.0), 1.0, 0.0), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), tan(0.0), 1.0, 0.0))))), injectionSwitch.y)), 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u | (read)), 4, 64, 4);
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-0.4, max(-0.4, -0.4)))), float(injectionSwitch.y), bool(true)))) + 0.0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, true, false, false)))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     continue;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(bool(bvec3((! (false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0))))), true)), bool(bvec4(bool(bvec3(_GLF_IDENTITY((! (false)), false || ((! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, true, false)))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true)))))))), true && (bool(bool(_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, ! (! (false))) || (! (false)))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))) && true))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))));
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
}
