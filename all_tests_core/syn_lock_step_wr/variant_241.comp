#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))), false || (! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), true, true))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, sqrt(1.0), cos(0.0), 0.0, 0.0, 1.0))).x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), ((_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) || false), false, true, true))))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) && true));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))), min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))) | 0), int(_GLF_IDENTITY(ivec3(0, 0, 0), (_GLF_IDENTITY(ivec3(0, 0, 0), ivec3(ivec4(ivec3(0, 0, 0), 0)))) + (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(5), ivec3(5))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1257.4563), _GLF_FUZZED(-8.7)), bvec2(false, false))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1257.4563), _GLF_FUZZED(-8.7)), bvec2(false, false))).y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1257.4563), _GLF_FUZZED(-8.7)), bvec2(false, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1257.4563), _GLF_FUZZED(-8.7)), bvec2(false, false))).y)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1257.4563), _GLF_FUZZED(-8.7)), bvec2(false, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1257.4563), _GLF_FUZZED(-8.7)), bvec2(false, false))).y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false, true)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? (- -75.74) : 498.162))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), (_GLF_IDENTITY(int(7), max(int(7), int(7)))) | (_GLF_IDENTITY(int(7), max(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(7, 0 | (7)), (_GLF_IDENTITY(50708, int(_GLF_IDENTITY(ivec3(50708, 0, 0), (ivec3(50708, 0, 0)) << ivec3(0, 0, 0)))) & _GLF_IDENTITY(0, 0 + (0))), (0 & -76001), 1), ~ (~ (ivec4(_GLF_IDENTITY(7, 0 | (7)), (50708 & 0), (0 & -76001), 1))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0)) | 0))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false))))))))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))) && _GLF_IDENTITY(true, (true) || false))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), _GLF_IDENTITY(clamp(~ (5), ~ (5), ~ (5)), min(clamp(~ (5), ~ (5), ~ (5)), clamp(~ (5), ~ (5), ~ (5)))))))), max(int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(61980)))))), int(5)))), clamp(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), _GLF_IDENTITY(clamp(~ (5), ~ (5), ~ (5)), min(clamp(~ (5), ~ (5), ~ (5)), clamp(~ (5), ~ (5), ~ (5)))))))), max(int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(61980)))))), int(5)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), _GLF_IDENTITY(clamp(~ (5), ~ (5), ~ (5)), min(clamp(~ (5), ~ (5), ~ (5)), clamp(~ (5), ~ (5), ~ (5)))))))), max(int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(61980)))))), int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), _GLF_IDENTITY(clamp(~ (5), ~ (5), ~ (5)), min(clamp(~ (5), ~ (5), ~ (5)), clamp(~ (5), ~ (5), ~ (5)))))))), max(int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(61980)))))), int(5)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), _GLF_IDENTITY(clamp(~ (5), ~ (5), ~ (5)), min(clamp(~ (5), ~ (5), ~ (5)), clamp(~ (5), ~ (5), ~ (5)))))))), max(int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(61980)))))), int(5))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))), ! (_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (5))) << 0))))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)))))))))), (_injected_loop_counter != (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), max(_GLF_IDENTITY(int(5), max(int(5), int(5))), _GLF_IDENTITY(int(5), max(int(5), int(5))))), 0, 1)))))) && true), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))), true && (_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), max(int(5), int(5))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), true && (! (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(81835) : int(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))), ~ (~ ((int(_GLF_ZERO(_GLF_IDENTITY(0.0, sqrt(0.0) + (_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, determinant(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(259.976)), bool(false))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))))), injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), min(max(int(5), int(5)), max(int(5), int(5))))))))))), _GLF_IDENTITY(false, (false) || false) || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) / 1), int(5)))), (1 & 1) * (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, max(5, 5)))) / 1), int(5)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), max(_GLF_IDENTITY(int(5), (int(5)) / 1), int(5)))))))), bool(bvec4(_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) / 1), int(5)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), _GLF_IDENTITY(int(5), max(int(5), int(5)))), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), _GLF_IDENTITY(int(5), max(int(5), int(5)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | 0), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, max(5, 5)), _GLF_IDENTITY(5, (5) << 0), 5))), (int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, max(5, 5)), _GLF_IDENTITY(5, (5) << 0), 5)))) >> 0), _GLF_IDENTITY(int(5), max(int(5), int(5)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(5), max(int(5), int(5)))))))), ~ (~ (int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 | (5))) * 1)))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))))))))))), bool(_GLF_IDENTITY(bool((_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)) / 1.0)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) >> 0), _GLF_IDENTITY(int(5), 0 + (int(5))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))))))))), true && (_GLF_IDENTITY(bool((_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(5), max(int(5), int(5)))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))))) ^ 0)))))), ! (! (bool((_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED((67184 & -25439)) : int(5)))) | 0), int(5)))))))))))))))))), true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))))))))), false || (! (_GLF_IDENTITY(! (_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), clamp(_GLF_IDENTITY((0.0), max((0.0), (0.0))), _GLF_IDENTITY((0.0), clamp((0.0), (0.0), (0.0))), (0.0))) / 1.0), injectionSwitch.x)), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1))))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), (0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), true && (bool(false)))) && true)))))))) / 1))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), max(0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), _GLF_IDENTITY(0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), min(_GLF_IDENTITY(0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))))), 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-3.2, min(_GLF_IDENTITY(-3.2, (_GLF_IDENTITY(-3.2, clamp(-3.2, -3.2, -3.2))) / 1.0), -3.2)))), bool(false))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))), (true ? int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | _GLF_IDENTITY(((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), (_GLF_IDENTITY(((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), min(((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))), ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false)))))))))) | (((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))) : _GLF_FUZZED(_injected_loop_counter)))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.2)), bool(false))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))), (true ? int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | (_GLF_IDENTITY((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-3.2, min(-3.2, -3.2)))), bool(false)))))), ~ (~ ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-3.2, min(-3.2, -3.2)))), bool(false)))))))))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1)))) : _GLF_FUZZED(_injected_loop_counter)))))))))), (true ? int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(ivec4(int(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0, 0, 1))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ _GLF_IDENTITY(((int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))), 0 + (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | (int(ivec2(0, 0))))) | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ _GLF_IDENTITY(((int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))), 0 + (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | (int(ivec2(0, 0))))) | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0, 0, 1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ _GLF_IDENTITY(((int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))), 0 + (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | (int(ivec2(0, 0))))) | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0, 0, 1)))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ _GLF_IDENTITY(((int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0 | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))), 0 + (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) | (int(ivec2(0, 0))))) | ((int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0, 0, 1))))) << 0))))) | 0) / 1)) : _GLF_FUZZED((-- _injected_loop_counter))))) / 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), clamp(_GLF_IDENTITY(int(5), max(int(5), int(5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), max(int(5), int(5))), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0)))))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), bool(bool(_GLF_IDENTITY(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), bool(bvec4(! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))), false, false, true))))))), (true && (! (_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(29976)))), max(int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (5) / 1) : _GLF_FUZZED(-59525)))), int(5)))))))) || false))))))))))))))) || false)); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-35461), min(_GLF_FUZZED(-35461), _GLF_FUZZED(-35461))) : (_injected_loop_counter --) * 1, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-35461), min(_GLF_FUZZED(_GLF_IDENTITY(-35461, int(ivec4(-35461, 0, 0, 1)))), _GLF_FUZZED(-35461))), (_GLF_IDENTITY(_GLF_FUZZED(-35461), min(_GLF_FUZZED(_GLF_IDENTITY(-35461, int(ivec4(-35461, 0, 0, 1)))), _GLF_IDENTITY(_GLF_FUZZED(-35461), min(_GLF_FUZZED(-35461), _GLF_FUZZED(-35461)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) : (_injected_loop_counter --) * 1) - 0, (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(-35461), min(_GLF_FUZZED(_GLF_IDENTITY(-35461, int(ivec4(-35461, 0, 0, 1)))), _GLF_FUZZED(-35461))) : (_injected_loop_counter --) * 1) - 0, ~ (~ ((false ? _GLF_IDENTITY(_GLF_FUZZED(-35461), min(_GLF_FUZZED(_GLF_IDENTITY(-35461, int(ivec4(-35461, 0, 0, 1)))), _GLF_IDENTITY(_GLF_FUZZED(-35461), ~ (~ (_GLF_FUZZED(-35461)))))) : (_injected_loop_counter --) * 1) - 0)))) / 1)))))), 0 | (~ (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 0))))), ~ (~ ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 0)))))))) ^ ((_injected_loop_counter --))) * 1)))))))
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), bool(bvec4(false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), false, true, false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), bool(bvec4(false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), false, true, false))), true), true)))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) & 1), ((int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y)) & 1)) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), true)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   barrier();
                  }
                 return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5189.9243), _GLF_FUZZED(-397.691)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_IDENTITY(true, (true) || false))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false)))))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false) && true))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false) && true)))))))))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false) && true))))))))))) && true)))))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), true && ((false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), true && ((false))), false), false, false))))) && true)));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, sqrt(1.0), 1.0, abs(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 1.0)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u) + subgroup_local_id, 0u | (workgroup_base + subgroup_base + subgroup_local_id))));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(4, min(4, 4)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat2(0.0, 1.0, abs(_GLF_IDENTITY(0.0, exp(0.0) * (0.0))), 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), max(length(normalize(vec2(1.0, 1.0))), length(normalize(vec2(1.0, 1.0)))))), float(_GLF_FUZZED(1.4)), bool(false)))), 0.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, 0.0, determinant(mat2(0.0, 1.0, abs(0.0), 0.0)), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-64.81))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(intBitsToFloat(-43889)) : 1.0)), 1.0)))), 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) / int(_GLF_ONE(1.0, injectionSwitch.y))), 2)))), _GLF_IDENTITY((2), (0 >> _GLF_IDENTITY(int(5), int(5))) | ((2))) << 0)) << 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(-40279), 0 | (_GLF_FUZZED(-40279))) : _GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, (2) << 0)) << 0, ~ (~ ((2) << 0))))) << 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 0 ^ (0)) : _GLF_FUZZED(-3668))))) << 0), ~ (~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << _GLF_IDENTITY(0, (0) >> 0))) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) << 0), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, 0 | (2))))) << 0))) | 0)) | 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), (false ? _GLF_FUZZED(2881) : _GLF_IDENTITY(2, min(2, 2)))))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(18488) : 2))))) << 0, min((2) << 0, (2) << 0))) | 0)) | 0))) << 0)), (true ? (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << _GLF_IDENTITY(0, (0) / 1), min((2) << 0, (2) << 0))) | 0)) | 0))) << 0)) : _GLF_FUZZED(-86393)))) ^ 0)) | ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0))) << 0))))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 0 ^ (0)) : _GLF_FUZZED(-3668))))) << 0), ~ (~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2))))), (_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) | ((2))) << 0)) << 0), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << _GLF_IDENTITY(0, (0) * 1), (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((_GLF_IDENTITY(2, (false ? _GLF_FUZZED(9535) : 2))) << 0, (2) << 0))) | 0)) | 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), clamp(_GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, min(2, 2)))))), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) * 1)) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, _GLF_IDENTITY(min((2) << 0, (2) << 0), (min((2) << 0, (2) << 0)) / 1))) | 0)) | 0))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0))))) << 0)), (true ? (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, _GLF_IDENTITY((_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0, min((_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0))))) << 0)) : _GLF_FUZZED(-86393)))), ((_GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), clamp(_GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, min(2, 2)))))), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) * 1)) << 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, _GLF_IDENTITY(min((2) << 0, (2) << 0), (min((2) << 0, (2) << 0)) / 1))) | 0)) | 0))) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0))))) << 0)), (true ? (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, _GLF_IDENTITY((_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0, min((_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0, (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) | 0))))) << 0)) : _GLF_FUZZED(-86393))))) - 0) ^ 0)) | ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(2, 2)))), _GLF_IDENTITY((2) << 0, (_GLF_IDENTITY(_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0), (_GLF_IDENTITY((2) << 0, (_GLF_IDENTITY((2) << 0, min((2) << 0, (2) << 0))) | 0)) << 0)) | 0))) << 0))))))) | 0)) >> 0))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-26151) : 0, min(false ? _GLF_FUZZED(-26151) : 0, _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-26151) : 0, (false ? _GLF_FUZZED(-26151) : 0) | 0), min(false ? _GLF_FUZZED(-26151) : 0, false ? _GLF_FUZZED(-26151) : 0)))))), max(_GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-26151) : 0, min(false ? _GLF_FUZZED(-26151) : 0, _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-26151) : 0, (false ? _GLF_FUZZED(-26151) : 0) | 0), min(false ? _GLF_FUZZED(-26151) : 0, false ? _GLF_FUZZED(-26151) : 0)))))), _GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-26151) : 0, min(false ? _GLF_FUZZED(-26151) : 0, _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-26151) : 0, (false ? _GLF_FUZZED(-26151) : 0) | 0), min(false ? _GLF_FUZZED(-26151) : 0, false ? _GLF_FUZZED(-26151) : 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY(0, 0 ^ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(! (bool((injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool((injectionSwitch.x > injectionSwitch.y))), bool(bool(! (bool((injectionSwitch.x > injectionSwitch.y))))))))), false, false)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(injectionSwitch))))).y))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / (1 | 0)), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
