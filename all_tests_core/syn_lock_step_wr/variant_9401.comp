#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, (false) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false)))) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), false || ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-7634.5321) : _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(827.688))))))).y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)), false, false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))) - abs(vec2(0.0, 0.0))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(65.17)), bool(false))), 1.0) * (injectionSwitch)))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, ~ (~ (1)))], mix(float(_GLF_FUZZED(float(13017))), float(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) * 1)], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))), bool(true))))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(6814.9922))), 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), clamp(_GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(uvec3((gl_WorkGroupID)), uvec3(0u, 0u, 0u) ^ (uvec3((gl_WorkGroupID)))))), (gl_WorkGroupID), (gl_WorkGroupID)))) / uvec3(1u, 1u, 1u)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x) - 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec3((gl_WorkGroupID)))) | (gl_WorkGroupID)).x), uint(uvec4((_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec3((gl_WorkGroupID)))) | (gl_WorkGroupID)).x), 1u, 0u, 1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(~ (~ (workgroup_base)), clamp(~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), ~ (~ (~ (workgroup_base))))), (~ (~ (workgroup_base))) - 0u), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base)), clamp(~ (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (_GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) - 0u)), ~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | _GLF_IDENTITY(((~ (workgroup_base))), 0u ^ (((~ (workgroup_base)))))), clamp(~ (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(1u, (1u) / 1u) * (~ (~ (workgroup_base)))), ~ (~ (workgroup_base))))))), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) + 0u) | 0u) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base)), clamp(~ (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)))), ~ (~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) - 0u)), ~ (~ (workgroup_base)))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), clamp(_GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), (true ? _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))) : _GLF_FUZZED(workgroup_size))))), clamp(~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), clamp(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))) * 1u), _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), clamp(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))) * 1u), _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))))))) >> 0u), _GLF_IDENTITY(~ (~ (workgroup_base)), _GLF_IDENTITY(1u, (1u) / 1u) * (~ (~ (workgroup_base)))), ~ (~ (workgroup_base))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base)), clamp(~ (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (_GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) - 0u)), ~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | _GLF_IDENTITY(((~ (workgroup_base))), 0u ^ (((~ (workgroup_base)))))), clamp(~ (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(1u, (1u) / 1u) * (~ (~ (workgroup_base)))), ~ (~ (workgroup_base))))))), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) + 0u) | 0u) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base)), clamp(~ (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) ^ 0u)))), ~ (~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) - 0u)), ~ (~ (workgroup_base)))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), clamp(_GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))), (true ? _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | ((~ (workgroup_base)))) : _GLF_FUZZED(workgroup_size))))), clamp(~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), clamp(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))) * 1u), _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), clamp(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u)))) * 1u), _GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)), min(_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (((workgroup_base)))), ((workgroup_base)))) ^ 0u))))))) >> 0u), _GLF_IDENTITY(~ (~ (workgroup_base)), _GLF_IDENTITY(1u, (1u) / 1u) * (~ (~ (workgroup_base)))), ~ (~ (workgroup_base))))))))), 0u))))), ~ (~ (workgroup_base))))) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << 0u, uint(uvec3((subgroup_size) << 0u, 1u, 1u))))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : 1u)) * (subgroup_size)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : 1u)) * (subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0u), 0u + _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) * _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) >> 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), max(_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) >> 0u), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) + 0u)))))))), max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + (subgroup_size), max(0u + (subgroup_size), _GLF_IDENTITY(0u + (subgroup_size), clamp(0u + (subgroup_size), 0u + (subgroup_size), 0u + (subgroup_size)))))), _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1432.7988)))) / 1.0))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) | (workgroup_base + subgroup_id * subgroup_size)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))), (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u))))) | (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))))))), max(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))), (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u))))) | (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))), (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u))))) | (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))))))), uint(uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))), (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u))))) | (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))))))), 1u, 0u, 1u))))), max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u)))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(uint(uint(5u)), (false ? _GLF_FUZZED(185423u) : _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) << 0u))))), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))), (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(_GLF_IDENTITY(5u, ~ (_GLF_IDENTITY(~ (5u), (~ (5u)) >> 0u))))) << 0u))))) | (_GLF_IDENTITY(0u, (0u) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) << 0u)))))))), max(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))) | (subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u), min(uvec2(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, max(0u, 0u)) ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u, ((_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)) << 0u)), (true ? ~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)))), max((_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u, ((_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)) << 0u)), (true ? ~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u, ((_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)) << 0u)), (true ? ~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) / 1u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) >> (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)))) / 1u), clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) >> (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)))) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) >> (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)))) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) >> (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)))) / 1u))))) ^ 0u)), 0u), uvec2(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) << 0u), (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) >> 0u)))) | (0u)), _GLF_IDENTITY(0u, (0u) | (0u)))) | (subgroup_local_id + 1)))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) >> 0u)) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))).y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 & (_GLF_IDENTITY(false, false || (false)) ? 43281 : 76755)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), float(mat3(float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-85.18)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec3(! (true), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(! (true), false, true), bvec3(bvec3(bvec3(! (true), false, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(! (true), false, true), bvec3(bvec3(bvec3(! (true), false, true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(! (true), false, true), bvec3(bvec3(bvec3(! (true), false, true)))))))))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true)))))), bool(bvec2((_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec3(_GLF_IDENTITY(! (true), ! (! (! (true)))), false, true)))), ! (! ((_GLF_IDENTITY(! (true), bool(bvec3(_GLF_IDENTITY(! (true), ! (! (! (true)))), false, true))))))))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch)))), (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y)), false, false, false)))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), false)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 ^ 0)), false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), false)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 ^ 0)), false)))), (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), false)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 ^ 0)), false))))) && true)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), false)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 ^ 0)), false)))), (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), false)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 ^ 0)), false))))) && true))))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / _GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u)))), (1u ^ 1u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u)), (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), uint(uvec4(uint(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))) / 1u)), 1u, 1u, 1u)))) >> 0u))) >> 0u)) + 0u)))))))], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), ~ (~ (_GLF_IDENTITY(1, (1) | (1)))))), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, (0) >> 0), 0)) + (4)));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), bool(bvec4(! (! (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, true)))), ! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, true))))))))))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (0) >> 0), 0, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), true))))))))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))))))), false, true, false))))))) || false), (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), true))))))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, true && (true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true))))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), true, true))))) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))))))))))))), false, true, false)))))), _GLF_IDENTITY(bool(bvec4(((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, true && (true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true))))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), true, true))))) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))))))))))))), false, true, false)))))), false, false, false)), false || (bool(bvec4(((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, true && (true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true))))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), true, true))))) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))), true)))))))))))))))), false, true, false)))))), false, false, false)))))) || false)) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-921.146)), bool(false))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                   do
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-54617) : int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), int(7)))) > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), true)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), true))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))))))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), true))))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), true))))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), true, true, true)))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | _GLF_IDENTITY(0, ~ (~ (0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(45.85)), bool(false))), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, 0 + (1))])).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0)))) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, clamp((injectionSwitch.x) - 0.0, _GLF_IDENTITY((injectionSwitch.x) - 0.0, mix(float(_GLF_IDENTITY((injectionSwitch.x) - 0.0, min((injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0))), float(_GLF_FUZZED(float(57157))), bool(false))), (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))) - 0.0)), float(_GLF_FUZZED(-8614.3478)), bool(false))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) && true))));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))))))), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) || false))))))), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).y)))))) || false) && (false))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false)))) && true), false, false, true)), false || (bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false)))) && true), false, false, true)))))))), (_GLF_IDENTITY(! (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false)))) && true), false, false, true)), false || (bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false)))) && true), false, false, true)))))))), true && (! (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false)))) && true), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(true, (true) && true))), false || (bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (true) || false)))) && true), false, false, true))))))))))) && true)), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((_GLF_IDENTITY(true, (true) || false))))))), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))), (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711))))))) * mat2(1.0)), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))))))), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch))))))).y), true && ((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))), (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711))))))) * mat2(1.0)), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), (true ? vec2(mat2(injectionSwitch, 0.0, 0.0)) : _GLF_FUZZED(vec2(2.8, 5.0)))) : _GLF_FUZZED(vec2(423.416, 5608.9711)))))))))), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch))))))).y))))) || false) && (false)))) || false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (int(3))), ((~ (int(3)))) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.6)), _GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y))), bool(true))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true, false)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))) || false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), true)))), (bool(bvec3(true, false, true))) && true))))), max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.4)), _GLF_IDENTITY(float(injectionSwitch.x), float(_GLF_IDENTITY(mat2x3(float(injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0), vec4(0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0)), dot(vec4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0), vec4(0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0)))), mat2x3(mat4(mat2x3(float(injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0), vec4(0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0)), dot(vec4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0), vec4(0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0))))))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) && true))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), (bool(bvec3(true, false, true))) && true))))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-45002))), bool(false))), (1.0) - 0.0)), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(vec2(3.4, 7.2)) : (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-76.16, -5317.9758)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))) * _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) ? _GLF_IDENTITY(_GLF_FUZZED(floor(mat2(27.97, 3.1, -294.090, -562.638)[0])), (_GLF_FUZZED(floor(mat2(27.97, 3.1, -294.090, -562.638)[0]))) - abs(vec2(0.0, 0.0))) : vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, (false ? _GLF_FUZZED(-963.052) : _GLF_IDENTITY((1.0) - 0.0, max(_GLF_IDENTITY((1.0) - 0.0, 1.0 * ((1.0) - 0.0)), (1.0) - 0.0)))))), _GLF_IDENTITY(vec2(mat4x3(false ? _GLF_FUZZED(floor(mat2(27.97, 3.1, _GLF_IDENTITY(-294.090, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-294.090, max(-294.090, -294.090)) : _GLF_FUZZED(min(ldexp(-76.04, 37160), 1.2)))), -562.638)[0])) : vec2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(1.0, (1.0) - 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), _GLF_IDENTITY((vec2(mat4x3(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(floor(mat2(27.97, 3.1, -294.090, _GLF_IDENTITY(-562.638, (true ? -562.638 : _GLF_FUZZED(3.4))))[0])) : _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(mat3((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0)))) - sin(0.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0)), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(mat3((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0)))) - sin(0.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0)), mat2(1.0) * (vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(mat3((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0)))) - sin(0.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) * mat2(1.0), ((vec2(mat4x3(false ? _GLF_FUZZED(floor(mat2(27.97, 3.1, -294.090, _GLF_IDENTITY(-562.638, min(_GLF_IDENTITY(-562.638, max(-562.638, -562.638)), -562.638)))[0])) : vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), clamp((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), min((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), float(_GLF_FUZZED(4.1)), bool(false))), _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(mat3x4((1.0) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))), _GLF_IDENTITY(1.0, (1.0) - 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(sqrt(0.0), 0.0), vec2(1.0, 1.0)), dot(vec2(sqrt(0.0), 0.0), vec2(1.0, 1.0)))))), 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) * mat2(1.0)) * vec2(1.0, 1.0))))))))).y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), min((1), (1))), (1))) / 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (! (false)))) || false)))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(_GLF_IDENTITY(8.5, clamp(_GLF_IDENTITY(8.5, (8.5) - 0.0), 8.5, _GLF_IDENTITY(8.5, mix(float(_GLF_FUZZED(-119.638)), float(8.5), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(_GLF_IDENTITY(8.5, clamp(_GLF_IDENTITY(8.5, (8.5) - 0.0), 8.5, _GLF_IDENTITY(_GLF_IDENTITY(8.5, min(_GLF_IDENTITY(8.5, min(_GLF_IDENTITY(8.5, max(8.5, 8.5)), 8.5)), 8.5)), mix(float(_GLF_FUZZED(-119.638)), float(8.5), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) || false)))) * 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(13.97, 7.7)) : injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(13.97, 7.7)) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(13.97, 7.7)) : injectionSwitch)).y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(_GLF_IDENTITY(8.5, clamp(_GLF_IDENTITY(8.5, (8.5) - 0.0), 8.5, _GLF_IDENTITY(8.5, mix(float(_GLF_FUZZED(-119.638)), float(8.5), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_FUZZED(_GLF_IDENTITY(8.5, clamp(_GLF_IDENTITY(8.5, (8.5) - 0.0), 8.5, _GLF_IDENTITY(_GLF_IDENTITY(8.5, min(_GLF_IDENTITY(8.5, min(_GLF_IDENTITY(8.5, max(8.5, 8.5)), 8.5)), 8.5)), mix(float(_GLF_FUZZED(-119.638)), float(8.5), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) || false)))) * 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(13.97, 7.7)) : injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(13.97, 7.7)) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(13.97, 7.7)) : injectionSwitch)).y)))) && true))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y))))), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((388.488 + -230.298))), bool(false))) > injectionSwitch.y)))))))))) || false)) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(sign(79803)))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), clamp(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ~ (~ ((int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 | (int(4)), clamp(0 | (int(4)), 0 | (int(4)), 0 | (int(4))))), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), int(ivec2(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-43951))), 0))))))), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), clamp(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ~ (~ ((int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 | (int(4)), clamp(0 | (int(4)), 0 | (int(4)), 0 | (int(4))))), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), int(ivec2(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-43951))), 0))))))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), clamp(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ~ (~ ((int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 | (int(4)), clamp(0 | (int(4)), 0 | (int(4)), 0 | (int(4))))), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), int(ivec2(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-43951))), 0))))))), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > ((_GLF_IDENTITY(1, (1) | (1)) ^ 1) ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1)), clamp(int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1)), int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1)), int(ivec3(_GLF_IDENTITY(1, min(1, 1)), 0, 1))))))), (_GLF_IDENTITY(1, (1) + 0)) | (1)) ^ 1) ^ 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5.6, -824.633)))).y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY((1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), ((1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && true)))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_IDENTITY(false, true && (false)))), false || (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)))), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, sin(log(1.0)) + (injectionSwitch.x)))))) : _GLF_FUZZED(131.954))) > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, exp(0.0) * (1.0)), 1.0)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), false || (! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))))), bool(bvec4((_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, exp(0.0) * (1.0)), 1.0)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), false || (! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))))), false, false, true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(bool(bvec4(false, true, true, true))))))))), ! (! (! (_GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(bool(bvec4(false, true, true, true)))))))))))))), ! (! (bool(bvec4(false, true, true, true)))))))))), false || (_GLF_DEAD(false))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, false)))))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, false))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, false)))))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, abs(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0))).y))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, false))))))))), false, true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) | 0) < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, max(3, 3))))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), int(ivec2(1 << _GLF_IDENTITY(int(3), int(3)), 1)))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) - 0), 0 ^ (_GLF_IDENTITY(3, (3) - 0))))))) << 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), int(ivec3(~ (int(6)), 1, 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
