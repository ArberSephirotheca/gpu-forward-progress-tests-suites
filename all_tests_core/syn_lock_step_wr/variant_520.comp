#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.4) : injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) || false))))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(false, true && (false))))))), ! (! ((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))), false, true))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec4(gl_NumWorkGroups.x, 0u, 0u, 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, false)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), true))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), ! (! (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)) + vec2(0.0, 0.0))).y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), true, true)))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, false)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), true))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), ! (! (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)) + vec2(0.0, 0.0))).y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), true, true)))))))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, false)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), true))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), ! (! (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)) + vec2(0.0, 0.0))).y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), true, true)))))))))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, false)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), true))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), ! (! (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)) + vec2(0.0, 0.0))).y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), true, true)))))))))), false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, false, false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), (bool(bvec3(_GLF_DEAD(false), false, true))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(98.87) : injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, false, false)), (bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, false, false))) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(948.203, clamp(948.203, 948.203, 948.203))), _GLF_FUZZED(_GLF_IDENTITY(-3606.6539, float(_GLF_IDENTITY(mat2x3(-3606.6539, determinant(mat2(exp(0.0), 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat2x3(-3606.6539, determinant(mat2(exp(0.0), 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0)))))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(_GLF_IDENTITY(vec2(mat2(1.0) * (injectionSwitch)), clamp(vec2(mat2(1.0) * (injectionSwitch)), vec2(mat2(1.0) * (injectionSwitch)), vec2(mat2(1.0) * (injectionSwitch))))))).y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-490.720), mix(float(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-490.720), max(true ? injectionSwitch.x : _GLF_FUZZED(-490.720), _GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-490.720), max(true ? injectionSwitch.x : _GLF_FUZZED(-490.720), true ? injectionSwitch.x : _GLF_FUZZED(-490.720)))))), float(_GLF_FUZZED(-81.08)), bool(false))))) : _GLF_FUZZED(_GLF_IDENTITY(3029.7546, clamp(_GLF_IDENTITY(3029.7546, mix(float(_GLF_FUZZED(-3439.9126)), float(3029.7546), bool(true))), 3029.7546, 3029.7546))))) > injectionSwitch.y)), true && (((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3029.7546))) > injectionSwitch.y)))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec3(false || (_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec3(false || (_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! _GLF_IDENTITY((false), ! (! ((false))))))) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ((! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 0u)), (uint(uvec2(1u, 0u))) | (uint(_GLF_IDENTITY(uvec2(1u, 0u), uvec2(0u, 0u) ^ (uvec2(1u, 0u))))))), ~ _GLF_IDENTITY((~ (1u)), (false ? _GLF_FUZZED(subgroup_id) : (~ (1u))))), 0u)), (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 0u)), (uint(uvec2(1u, 0u))) | (uint(_GLF_IDENTITY(uvec2(1u, 0u), uvec2(0u, 0u) ^ (uvec2(1u, 0u))))))), ~ _GLF_IDENTITY((~ (1u)), (false ? _GLF_FUZZED(subgroup_id) : (~ (1u))))), 0u))) | (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 0u)), (uint(uvec2(1u, 0u))) | (uint(_GLF_IDENTITY(uvec2(1u, 0u), uvec2(0u, 0u) ^ (uvec2(1u, 0u))))))), ~ _GLF_IDENTITY((~ (1u)), (false ? _GLF_FUZZED(subgroup_id) : (~ (1u))))), 0u)))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), (_GLF_IDENTITY((uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), (true ? (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))) : _GLF_FUZZED(subgroup_id)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u)))) / 1u))) ^ 0u)), (_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), ~ (~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))))) - 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), min(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), ~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u)))))) >> 0u), (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), min(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), ~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u)))))) >> 0u)) | (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), min(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), ~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u)))))) >> 0u))))), (_GLF_IDENTITY(uint(uvec4(subgroup_size, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u | (1u)), 1u)), 1u, 0u)), ~ (~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, (1u) | (1u)), 0u)))))) - 0u), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), ~ (~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, 0u | (1u)), 0u, 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), max(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : uint(uvec3(_GLF_IDENTITY(1u, 0u | (1u)), 0u, 0u))))), _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, (0u | 0u)))))), (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, 0u | (1u)), 0u, 0u)), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY(1u, 0u | (1u)), 0u, 0u))))), 0u))) ^ 0u), ~ _GLF_IDENTITY((~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))), max((~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))), _GLF_IDENTITY((~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))), (_GLF_IDENTITY((~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))), uint(uvec3((~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))), 1u, 0u)))) | 0u)))), ~ (~ (uint(uvec4(subgroup_size, 1u, 1u, 0u)))))) - 0u), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), (~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u)))) - 0u)), min(~ (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), 0u + (_GLF_IDENTITY(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), max(~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u))), ~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 0u)))))))), _GLF_IDENTITY(~ (~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u))))), 0u)))), min(~ (~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u))))), 0u)))), ~ (~ (uint(uvec4(subgroup_size, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u))))), 0u))))))))), (_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec4(subgroup_size, 1u, 1u, 0u)), uint(uvec2(uint(uvec4(subgroup_size, 1u, 1u, 0u)), 1u)))))))))) - 0u))));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) ^ (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(178777u))))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(subgroup_id))))) + subgroup_local_id, uint(uvec3(workgroup_base + subgroup_base + subgroup_local_id, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, mix(float((injectionSwitch.x) - 0.0), float(_GLF_FUZZED(-1356.1553)), bool(false)))) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_base : _GLF_FUZZED(workgroup_size))), workgroup_base + subgroup_base))), _GLF_IDENTITY((0u | (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (false ? _GLF_FUZZED(79781u) : workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))) / 1u)), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))), (false ? _GLF_FUZZED(79781u) : workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))) / 1u))) >> 0u) | 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(0.1, -8.8, -5.8, -9008.8663), _GLF_IDENTITY(vec4(mat2(vec4(0.1, -8.8, -5.8, -9008.8663))), min(vec4(mat2(vec4(0.1, -8.8, -5.8, -9008.8663))), vec4(mat2(vec4(0.1, -8.8, -5.8, -9008.8663)))))).b)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), bool(true)))))))))), (true ? (0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED((workgroup_size)) : _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uint(workgroup_base + subgroup_base))))), (workgroup_base + subgroup_base) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(0.1, -8.8, -5.8, -9008.8663).b)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))))))))), max((_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED((workgroup_size)) : _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uint(workgroup_base + subgroup_base))))), (workgroup_base + subgroup_base) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(0.1, -8.8, -5.8, -9008.8663).b)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))))))))), (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED((workgroup_size)) : _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uint(workgroup_base + subgroup_base))))), (workgroup_base + subgroup_base) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(0.1, -8.8, -5.8, -9008.8663).b)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true)))))))))))) : _GLF_FUZZED(subgroup_base))) | (0u | (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) : workgroup_base)))), workgroup_base)) + subgroup_base)))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(false)) && true)) && true, bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true, false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true, false, false), true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), (_GLF_IDENTITY(uint(1), max(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))) : _GLF_FUZZED(50614u))), uint(1)), (_GLF_IDENTITY(min(uint(1), uint(1)), (min(uint(1), _GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 0u))))) >> 0u)) + (0u & 40533u))), min(uint(1), uint(1)))))) ^ _GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 0u)), clamp((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 0u)), ((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), 1u * (uint(6u)))) | (_GLF_IDENTITY(uint(6u), (true ? _GLF_IDENTITY(uint(6u), (uint(6u)) | (uint(6u))) : _GLF_FUZZED(virtual_gid)))))), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 0u))) | 0u), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 0u))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true)))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-3.9))), _GLF_FUZZED(-1.2)), vec2(_GLF_FUZZED(-91.89), (injectionSwitch)[1]), bvec2(false, true))).y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.5)), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.0) : injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(2541), (_GLF_FUZZED(2541)) | (_GLF_FUZZED(2541))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) * (_GLF_FUZZED(_GLF_IDENTITY(2541, 0 | (2541))))) : 4), ((false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(2541), (_GLF_FUZZED(2541)) | (_GLF_FUZZED(2541))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) * (_GLF_FUZZED(_GLF_IDENTITY(2541, 0 | (2541))))) : 4)) / (1 ^ 0))))))), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-6.7, max(-6.7, -6.7)), 9742.5898)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec4((injectionSwitch), sqrt(0.0), 1.0), mat4(1.0) * (vec4((injectionSwitch), sqrt(0.0), 1.0)))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec4((injectionSwitch), sqrt(0.0), 1.0), mat4(1.0) * (vec4((injectionSwitch), sqrt(0.0), 1.0)))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), false, false, true)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}
