#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), 0u | (uint(uvec2(subgroup_size, 1u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size)), (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)) : _GLF_FUZZED(min(workgroup_base, mix(subgroup_local_id, subgroup_size, _GLF_IDENTITY(false, ! (! (false)))))))) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x], uint(1), 4, _GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), (true ? (64) : _GLF_FUZZED(13519))) | 0), min(64, 64)))))), 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) >> 0));
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z = read;
 subgroupBarrier();
 atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z, 4, 64, 4);
}
