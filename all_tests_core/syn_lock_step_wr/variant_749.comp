#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0))))) < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(false, ! (! (false))) || (false))), false || (! (_GLF_IDENTITY(false, false || (false)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(35810) : _GLF_IDENTITY(int(7), (int(7)) ^ 0))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(3845) : _GLF_IDENTITY(0, (0) / 1)))), int(0)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), (true ? (0 << _GLF_IDENTITY(int(3), int(3))) : _GLF_FUZZED(47164)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), vec2(vec3(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), 1.0))), (injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, 2.5)), (_GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, float(mat2(-5.9, 1.0, 1.0, 1.0))), 2.5))) / vec2(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(1077.3081), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(-2.8)), bvec2(true, _GLF_IDENTITY(false, false || (false))))), clamp(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(4.1), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(1.0, 1.0) * (mat2(1.0) * (injectionSwitch))))[_GLF_IDENTITY(1, clamp(1, 1, 1))]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(-27.86)), bvec2(true, false)))) - vec2(0.0, 0.0)), mat2(1.0) * (injectionSwitch))))), min((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), mat2(1.0) * (injectionSwitch))))))) + vec2(0.0, 0.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))) * 1.0)))) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))), min((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(_GLF_IDENTITY(mat3x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat3x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))))))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(5.0)) : _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(vec3((injectionSwitch), 0.0)), (vec2(vec3((injectionSwitch), 0.0))) * mat2(1.0))))), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))))) + vec2(0.0, 0.0)).y : _GLF_FUZZED(3376.1648)))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))));
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (1) | 0)); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true))), false || (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y)))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y)))) || false)), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.7, -644.075)) : injectionSwitch)).y)))) || false))) && true))))), true)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(-62.89)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(min((injectionSwitch)[0], (injectionSwitch)[0]), max(min((injectionSwitch)[0], (injectionSwitch)[0]), min((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[_GLF_IDENTITY(1, max(1, 1))]), bvec2(true, true))).x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1361.1237) : injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0))), 1.0, 0.0))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)) || false)))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))) || false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))) || false)))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (false))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(80.98))) > injectionSwitch.y))))
      return;
    }
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-626.939, -458.360)))), injectionSwitch)).y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))), (~ (_injected_loop_counter ++)) - 0)))) - 0))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && true, bool(_GLF_IDENTITY(bvec2(((false)) && true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(((false)) && true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(((_GLF_IDENTITY(false, true && (false)))) && true, true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(((_GLF_IDENTITY(false, true && (false)))) && true, true), true)))))), _GLF_IDENTITY(true, (true) || false))))))))))) && true)))
    return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, false)), bool(bvec2(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, false)), true)))));
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)))) | (_injected_loop_counter)))) != ((0 << _GLF_IDENTITY(int(7), int(7))) | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(virtual_gid, 0u | (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(max(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)) * 1u, (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)), min((_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)), (_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)))) * 1u) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u | (virtual_gid))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) : max(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u), _GLF_IDENTITY(0u | (virtual_gid), (false ? _GLF_FUZZED(workgroup_id) : 0u | (virtual_gid))))))), (max(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), (uint(uvec2(0u, 1u))) << 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), 0u ^ (~ (virtual_gid))))), min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) - (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))))) << 0u), max(virtual_gid, _GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))), max(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u | (virtual_gid), (_GLF_IDENTITY(0u | (virtual_gid), clamp(0u | (virtual_gid), 0u | (virtual_gid), 0u | (virtual_gid)))) ^ 0u))))))) / 1u)])), _GLF_IDENTITY(4, int(ivec3(4, ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), max((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))))))))), (int(int(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), max((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), int(7)))))))))))) * 1)) | (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 64, _GLF_IDENTITY(2, int(int(2))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(false, true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec2(false, true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(false, true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec2(false, true)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))) && true))) || false))))) && true), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false || (false)))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))), (injectionSwitch.x < injectionSwitch.y)))))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + ((injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.6), _GLF_FUZZED(0.5)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(exp(-3.7)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & _GLF_IDENTITY(1, (1) | (1)))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), (false || ((injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(trunc(6.7)) : injectionSwitch.y))))), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      continue;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
      return;
     continue;
    }
   for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED((_injected_loop_counter & _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) : _injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       subgroupBarrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) && true))) && true)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, ! (! (false)))) && true), true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (false) && true), false, true, false))) && true)), (_GLF_IDENTITY(false, true && (false))) || false)))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((2.3 - 0.9)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(932.173)), bvec2(true, false))).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-13.37))), _GLF_IDENTITY((injectionSwitch.x) - 0.0, 1.0 * (_GLF_IDENTITY((injectionSwitch.x) - 0.0, ((injectionSwitch.x) - 0.0) - 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_FUZZED(192.843)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true)))) - _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5642.1359)), float(1.0), bool(true))), 1.0, length(vec2(0.0, 0.0)), 0.0))))))), 1.0, 0.0, cos(0.0)), mat2(_GLF_IDENTITY(mat4(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(20955u))), float(1.0), bool(true)))) - 0.0), 0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((true ? 493.503 : 0.8))), bool(false))))), 0.0, cos(0.0))), (false ? _GLF_FUZZED(mat4(-0.4, 63.08, -3.7, 7.0, 171.161, 7718.3992, 8978.0337, 2.5, -62.50, 6.2, -71.63, 6.3, -3.4, 1874.6707, 22.73, 64.46)) : mat4(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0))))))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.8))), (false ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.8)))) - 0.0))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4853.8746, 34.19)) : injectionSwitch)))).x > injectionSwitch.y)))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_FUZZED(192.843)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true)))) - _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0))))))), 1.0, 0.0, cos(0.0)), mat2(_GLF_IDENTITY(mat4(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((true ? 493.503 : 0.8))), bool(false))))), 0.0, cos(0.0))), (false ? _GLF_FUZZED(mat4(_GLF_IDENTITY(-0.4, (true ? -0.4 : _GLF_FUZZED(-16.51))), 63.08, -3.7, 7.0, 171.161, 7718.3992, 8978.0337, 2.5, -62.50, 6.2, -71.63, 6.3, -3.4, 1874.6707, 22.73, 64.46)) : mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)))))), (true ? mat2x3(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)))))) : _GLF_FUZZED(mat2x3(69.08, -3745.5086, 8660.0340, 7.5, 4.1, -50.80))))), (false ? _GLF_FUZZED(mat2(75.47, 0.9, -3615.7751, 0.3)) : mat2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)))))), (true ? mat2x3(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0, 0.0, cos(0.0)))))) : _GLF_FUZZED(mat2x3(69.08, -3745.5086, 8660.0340, 7.5, 4.1, -50.80))))))))))))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.8))), (false ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.8)))) - 0.0))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4853.8746, 34.19)) : injectionSwitch)))).x > injectionSwitch.y)))))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     return;
    }
  }
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : virtual_gid))], read, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4), 0 | ((4))) * 1));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) || false)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(34.22, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-261.318)), float(34.22), bool(true)), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-261.318)), float(34.22), bool(true)), (mix(float(_GLF_FUZZED(-261.318)), float(34.22), bool(true))) / 1.0), mix(float(_GLF_FUZZED(-261.318)), float(34.22), bool(true))))))), bvec2(_GLF_IDENTITY(true, (true) && true), false))).x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(log(exp(injectionSwitch))))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(float(135368u))), vec2(_GLF_FUZZED(5.3), (vec2(0.0, 0.0))[1]), bvec2(false, true)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, tan(0.0), 0.0, cos(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 0.0, 0.0))).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
}
