#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnext_virtual_gid;
 uvec4 GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uvec4 GLF_merged2_0_2_53_2_2_56GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 uvec4 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz = GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
  }
 else
  {
  }
 uvec4 GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 GLF_merged2_0_2_53_2_2_56GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED((-38276)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.xy = GLF_merged2_0_2_53_2_2_56GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uvec4 GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
       break;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       return;
      }
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_2_53_2_2_56GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw = GLF_merged2_0_2_53_2_2_56GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy = GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw;
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) / uvec2(1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(72409u) : 1u))))))) ^ (uvec2(1u, 1u) ^ uvec2(1u, 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | (0 & 81217))) / 1))
  {
   GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy = GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (_GLF_IDENTITY(! (bool(bool(true))), bool(bvec3(! (bool(bool(true))), true, false)))))), bool(bool(true))) ? injectionSwitch.x : _GLF_FUZZED(8.0))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))))))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))) || false))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) && true)))
                continue;
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 continue;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(61.71), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-281.167)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat2(1.0, 0.0, 1.0, 1.0))), injectionSwitch.y, injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec4(8332.6481, -4.0, 6598.8711, 9.2)[2]))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec4(8332.6481, -4.0, 6598.8711, 9.2)[2]))) > injectionSwitch.y)))))) && true)))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread;
 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupread;
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_size.xyz = GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnext_virtual_gid.xyz;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_size.xyz;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true, true, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true, true, _GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), false, true))), true, true, _GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.w = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) >> 0u);
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz.y = GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.w;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.z = GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz.y;
  }
 GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x = GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.z;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_size.w = subgroup_size;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.z = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadsubgroup_size.w;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w = GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.z;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << 0) & 34791); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.z = _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz.z = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.z;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.xy.x = GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.w = GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.xy.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED(-38695) : (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) | (int(_GLF_IDENTITY(4, min(4, 4))))), int(4)), 0 | (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) | (int(_GLF_IDENTITY(4, min(4, 4))))), int(4)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) | (int(_GLF_IDENTITY(4, min(4, 4))))), int(4)), (true ? 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) | (int(_GLF_IDENTITY(4, min(4, 4))))), int(4)) : _GLF_FUZZED(25383)))) | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), (int(_GLF_IDENTITY(4, min(4, 4)))) | (int(_GLF_IDENTITY(4, min(4, 4))))), int(4))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED(-38695) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), int(ivec4(int(_GLF_IDENTITY(4, min(4, 4))), 1, 0, 0))), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), _GLF_IDENTITY(int(ivec3(~ (~ (4)), 1, 1)), (0 & 75928) ^ (int(ivec3(~ (~ (4)), 1, 1))))))) | (4)), _GLF_IDENTITY(4, (4) | (4)), 4))), int(4)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), _GLF_IDENTITY(int(ivec3(~ (~ (4)), 1, 1)), (0 & 75928) ^ (int(ivec3(~ (~ (4)), 1, 1))))))) | (4)), _GLF_IDENTITY(4, (4) | (4)), 4))), int(4))))), 0 | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), _GLF_IDENTITY(int(ivec3(~ (~ (4)), 1, 1)), (0 & 75928) ^ (int(ivec3(~ (~ (4)), 1, 1))))))) | (4)), _GLF_IDENTITY(4, (4) | (4)), 4))), int(4))))), max(~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), _GLF_IDENTITY(int(ivec3(~ (~ (4)), 1, 1)), (0 & 75928) ^ (int(ivec3(~ (~ (4)), 1, 1))))))) | (4)), _GLF_IDENTITY(4, (4) | (4)), 4))), int(4))))), ~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), _GLF_IDENTITY(int(ivec3(~ (~ (4)), 1, 1)), (0 & 75928) ^ (int(ivec3(~ (~ (4)), 1, 1))))))) | (4)), _GLF_IDENTITY(4, (4) | (4)), 4))), int(4)))))))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED(-38695) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, (0) / 1))) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86532)))), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), int(1))), (_GLF_IDENTITY(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec3(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), 1, (0 | 0)))), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), int(1))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) ^ 0, clamp((int(0)) ^ 0, _GLF_IDENTITY((int(0)) ^ 0, ((int(0)) ^ 0) | ((int(0)) ^ 0)), (int(0)) ^ 0))), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), int(1))), ! (! (_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), (_GLF_IDENTITY(int(0), (int(0)) ^ 0)) << 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), int(1)))))), true, true)))) && true)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.y = GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.w;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || ((_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true))))))
                break;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         break;
        }
       for(int _injected_loop_counter = (1 ^ (0 >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                          break;
                        }
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true)))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      continue;
     return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), false, false, true)))))
  return;
 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.x = _GLF_IDENTITY(num_workgroup, (true ? _GLF_IDENTITY(num_workgroup, uint(uint(num_workgroup))) : _GLF_FUZZED(num_workgroup)));
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.x = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.x;
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.x;
 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.y = _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, _GLF_IDENTITY(clamp(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w), (_GLF_IDENTITY(clamp(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w), (clamp(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w, GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.w)) / 1u)) / 1u));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z = workgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 0)))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 0)))) << 0)))))), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-96260))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sqrt(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))).y))))
              continue;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, _GLF_IDENTITY(true, ! (! (true))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (1 ^ (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.w = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.w = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.w;
 GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.xy.y = GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy.y = GLF_merged3_0_2_56_2_1_13_3_1_14GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basesubgroup_sizeworkgroup_base.xy.y;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy.y + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, 0u ^ (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)), min(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, max(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)), (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(3u), uvec2(3u))) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy)).x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, clamp(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, _GLF_IDENTITY((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x), clamp(_GLF_IDENTITY((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x), max((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x), (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x))), (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x), (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)))) * _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, (false ? _GLF_FUZZED(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id[0]) : GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w))) - 0u), _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size)).xy.x, max(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (true ? GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), min(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))))), GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)), (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, clamp(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, clamp(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x, (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy) >> uvec2(0u, 0u))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy) >> uvec2(0u, 0u))) / uvec2(1u, 1u), (false ? _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) : (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy) >> uvec2(0u, 0u))) / uvec2(1u, 1u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy) >> uvec2(0u, 0u))) / uvec2(1u, 1u), (false ? _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) : (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy) >> uvec2(0u, 0u))) / uvec2(1u, 1u))))) - uvec2(0u, 0u))))).x) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x)) * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w))))))) - 0u), _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, ~ (~ (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy))).x * GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)) + _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy, ~ (~ (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy))).y;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                return;
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false)))))))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false)))))))))), (injectionSwitch.x > injectionSwitch.y))), false, false, false)))) || false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false)), bool(bvec3(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false)), false, true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy.x = virtual_gid;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uint next_virtual_gid = GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy.y + GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.x * _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w, (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w) | (GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)) + _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.y + 1), ((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.y + 1)) / 1u) % GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w), (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.z) : (_GLF_IDENTITY((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.y + _GLF_IDENTITY(1, (1) | (1))), ((GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.xy.y + 1)) / 1u) % GLF_merged3_0_2_53_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idsubgroup_idsubgroup_size.w)));
 GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnext_virtual_gid.w = next_virtual_gid;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz.x = GLF_merged2_0_3_64_3_1_16GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnext_virtual_gid.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (0 << _GLF_IDENTITY(int(8), int(8))) | _GLF_IDENTITY((_injected_loop_counter ++), 0 ^ ((_injected_loop_counter ++)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.x = _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz, uvec3(0u, 0u, 0u) + (GLF_merged2_0_3_76_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_idsubgroup_id.xyz)).x;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 ^ 1) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.x, uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.x, 0u), _GLF_IDENTITY((uvec2(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.x, 0u)) | uvec2(0u, 0u), min((uvec2(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.x, 0u)) | uvec2(0u, 0u), (uvec2(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.x, 0u)) | uvec2(0u, 0u))))))], uint(_GLF_IDENTITY(1, ~ (~ (1)))), 4, 64, _GLF_IDENTITY(4, (4) ^ 0));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy.x], _GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) | (64)))), 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.y = read;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec3(bvec3(bvec2(false, false), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec3(bvec3(bvec2(false, false), true))))))))))))))))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.z = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.y, (GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.z = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_14num_workgroupreadsubgroup_local_idworkgroup_base.y) / _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 0u)), (uint(uvec2(1u, 0u))) >> 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z = GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.z, 0u ^ (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z = GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.z));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
    break;
   atomicStore(checker[GLF_merged3_0_2_50_2_1_4_3_1_17GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_basereadsubgroup_local_id.xy.x], _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z, (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z) | _GLF_IDENTITY((GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z), (_GLF_IDENTITY(false ? _GLF_FUZZED(197165u) : (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z), (_GLF_IDENTITY(false ? _GLF_FUZZED(197165u) : (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z), ~ (~ (false ? _GLF_FUZZED(197165u) : (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_4next_virtual_gidnum_workgroupreadnum_workgroup.xyz.z))))) * 1u)))), _GLF_IDENTITY(4, (4) + (0 | 0)), 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
}
