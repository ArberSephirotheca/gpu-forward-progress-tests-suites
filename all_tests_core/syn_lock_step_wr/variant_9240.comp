#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat3x4 _f0;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 mat2x3 _f1;
 uint _f2;
 bvec4 _f3;
 mat3 _f4;
 int _f5;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 vec2 _f1;
 mat2x3 _f2;
 float _f3;
} ;

struct _GLF_struct_12 {
 ivec2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_7 {
 float _f0;
 vec4 _f1;
 mat2x3 _f2;
 bvec4 _f3;
 uint read;
 mat2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_8 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 bool _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 uvec2 _f1;
 mat4x2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_6 {
 uint workgroup_base;
 _GLF_struct_1 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(workgroup_size * workgroup_id, _GLF_struct_1(bvec2(true), _GLF_struct_0(vec3(1.0), vec3(1.0))), _GLF_struct_5(_GLF_struct_2(mat2(1.0)), uvec2(1u), mat4x2(1.0), _GLF_struct_3(bvec4(true), uvec2(1u), ivec2(1), mat4x3(1.0)), _GLF_struct_4(mat4x2(1.0), true, uvec3(1u)), mat4x2(1.0)));
 uint subgroup_base = subgroup_id * subgroup_size;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y = subgroup_base;
 uint virtual_gid = _GLF_struct_replacement_6.workgroup_base + GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_6.workgroup_base + GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.y + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     do
      {
       GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x = next_virtual_gid;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_base.x], uint(1), 4, 64, 4);
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_8(_GLF_struct_7(1.0, vec4(1.0), mat2x3(1.0), bvec4(true), atomicLoad(buf[virtual_gid], 4, 64, 2), mat2(1.0), uvec4(1u))), _GLF_struct_12(ivec2(1), _GLF_struct_9(mat3x4(1.0), vec2(1.0), mat2x3(1.0), 1.0), _GLF_struct_10(bvec4(true), mat2x3(1.0), 1u, bvec4(true), mat3(1.0), 1), _GLF_struct_11(mat3x4(1.0))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     do
      {
       subgroupBarrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(90117))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           atomicStore(checker[virtual_gid], _GLF_struct_replacement_13._f0._f0.read, 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
}
