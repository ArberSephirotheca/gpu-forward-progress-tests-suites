#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-85491) : 0))) << 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(90613) : _GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(1))), _GLF_IDENTITY(max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), min(max((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), (true ? (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) : _GLF_FUZZED((_injected_loop_counter - -35119)))) - _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), ivec2(1, 1) * (ivec2(0, 0)))))) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))) / 1))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(1))), _GLF_IDENTITY(max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), true && (! (_GLF_IDENTITY(true, true && (true)))))))))) ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, 1)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, 1)))), (int(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, 1))))) ^ 0)) >> 0)))))))) - 0) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), min(max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), clamp((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))) - 0), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))))) : _GLF_FUZZED(_injected_loop_counter)))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))))))) - 0) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, int(ivec3(8, 0, 0)))) / 1))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))) >> 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(1))), _GLF_IDENTITY(max((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-75511) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0, ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0) | ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0))) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), min(max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0) << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) - 0) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))))))) ^ 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), 0 | (_GLF_IDENTITY(int(1), ~ (~ (int(1))))))))))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), 0 + (int(1))), int(1))))), _GLF_IDENTITY(max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (0 >> _GLF_IDENTITY(int(1), int(1))))))))) - _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(66838)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))), int(1))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))) / 1, max((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))) / 1, (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))) / 1))))), min(max((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter)))), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) ^ 0)) - 0) << _GLF_IDENTITY(int(1), int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter)))), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))) ^ 0)) - 0) << _GLF_IDENTITY(int(1), int(1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))))))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), max(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))))))))), max((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), 1 * (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), ~ (~ (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), min(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), _GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), int(ivec3(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), 0, 1)))))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1))))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), 1 * (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), ~ (~ (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), min(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), _GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), int(ivec3(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), 0, 1)))))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1))))))))), max((_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), 1 * (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), ~ (~ (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), min(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), _GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), int(ivec3(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), 0, 1)))))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1))))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), 1 * (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), ~ (~ (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), min(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), _GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), int(ivec3(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), 0, 1)))))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1))))))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), 1 * (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), ~ (~ (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), min(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), _GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), int(ivec3(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), 0, 1)))))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1))))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), 1 * (_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), ~ (~ (true ? 1 : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), min(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), _GLF_IDENTITY(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), int(ivec3(true ? 1 : _GLF_FUZZED((_injected_loop_counter)), 0, 1)))))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1), ivec2(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), clamp((true ? 1 : _GLF_FUZZED((_injected_loop_counter))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))))), (true ? 1 : _GLF_FUZZED((_injected_loop_counter))))), 1))))))))))) - 0) << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8))))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(8), int(8)))))) / (1 ^ 0))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (false ? _GLF_FUZZED(clamp(_injected_loop_counter, 40378, _injected_loop_counter)) : 0 | (1))))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (int(1))), (~ (~ (int(1)))) << (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-15.45, -1.5)) : injectionSwitch)).x)) << _GLF_IDENTITY(int(6), int(6))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-65.98)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(log(-43.44))))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))) | (int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) + (_GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0))))) ^ 0))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) + (0 | 0))) ^ 0)))), ~ (~ (_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) + (0 | 0))) ^ 0)))), clamp(0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) + (0 | 0))) ^ 0)))), 0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) + (0 | 0))) ^ 0)))), 0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), (min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) + (0 | 0))) ^ 0))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0)))) | 0) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) / vec2(1.0, 1.0))).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))) * vec2(1.0, 1.0)).x > injectionSwitch.y)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)), true)))))))))
  barrier();
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, length(0.0), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, length(0.0), 1.0))) * (injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(9.1), _GLF_FUZZED(-39.27)), bvec2(false, false))).y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), false))) && true)))) || false)), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))))), gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(183492u) : _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base)))), max(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base)), 0u, 0u))) | _GLF_IDENTITY(0u, (0u) << 0u))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), uint(_GLF_IDENTITY(uint(subgroup_local_id + 1), _GLF_IDENTITY((uint(subgroup_local_id + 1)), ~ (~ ((uint(subgroup_local_id + 1))))) | (uint(subgroup_local_id + 1)))))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, 0 | (1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), min(_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(uvec3(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), 0u, 1u))), uint(1)))), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(_GLF_IDENTITY(1, clamp(1, 1, 1)))), (min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1))) ^ 0u)))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), min(_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), 1u * (min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)))), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), (min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1))) ^ 0u)))), ~ (~ (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(_GLF_IDENTITY(1, ~ (~ (1))))), min(_GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), 1u * (min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)))), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1)), (min(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), uint(1))) ^ 0u))))))))))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true) ? _GLF_FUZZED(-46769) : 4, (1 ^ 1) + (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))) && true) ? _GLF_FUZZED(-46769) : 4)))), _GLF_IDENTITY(_GLF_IDENTITY(64, 1 * (_GLF_IDENTITY(64, clamp(64, 64, 64)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, 1 * (64)), (_GLF_IDENTITY(64, 1 * (64))) + 0)) * 1, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(64, 1 * (64)), (_GLF_IDENTITY(64, 1 * (64))) + 0)) * 1 : _GLF_FUZZED(-29602)))), 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (vec2(1.0, 1.0) * (injectionSwitch)) * mat2(1.0))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(sqrt(1.0)))), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))) || false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8372.3349) : injectionSwitch.x))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_WRAPPED_LOOP(false))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-436.201) : injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(-436.201) : injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(-436.201) : injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(-436.201) : injectionSwitch.y), float(_GLF_FUZZED(-274.223)), bool(false))), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-436.201) : injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-436.201) : injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - log(1.0))) - 0.0))))))) && true)))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(746.224), _GLF_FUZZED(200.698)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(746.224), _GLF_FUZZED(200.698)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(746.224), _GLF_FUZZED(200.698)), bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(746.224), _GLF_FUZZED(_GLF_IDENTITY(200.698, 1.0 * (200.698)))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)), false))))))))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false, ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false))))) && true)) || false) && true)) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (! (false)))) || false))), _GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, true, true)), bool(bvec2(bool(bvec4((false), false, true, true)), false))))), ! (! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), true)))) && true)) || false), false, true, true)), false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, true, true)), bool(bvec2(bool(bvec4((false), false, true, true)), false))))), ! (! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), true)))) && true)) || false), false, true, true)), false)))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((false), false, true, true)), false || (bool(bvec4((false), false, true, true)))), bool(bvec2(bool(bvec4((false), false, true, true)), false))))), ! (! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), false, true, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), true)))) && true)) || false), false, true, true)), false))))))))))))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false)))))), true, false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false)))))), true, false))))), false || (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false)))))), true, false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))), false)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false))))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), false)))) && true)), bool(bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))), false)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false))))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y) || false, true, false)))))))))), false)))) && true))))) && true))))
                barrier();
              }
             barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))) ? 1 : _GLF_FUZZED(_injected_loop_counter)))), 0 + (int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))))) >> _GLF_IDENTITY(int(1), int(1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(-5954)), (_GLF_IDENTITY(_GLF_IDENTITY((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(-5954)), ((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(-5954))) | ((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(-5954)))), (true ? _GLF_IDENTITY((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))))))) : _GLF_FUZZED(-5954)), ((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(-5954))) | ((true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(-5954)))) : _GLF_FUZZED(_injected_loop_counter)))) / 1))))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), true && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          continue;
         if(_GLF_DEAD(false))
          break;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
 do
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(52766) : _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(94997))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0)))), (_injected_loop_counter > 0) || false)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0)))), (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))) || false)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           barrier();
          }
        }
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))));
}
