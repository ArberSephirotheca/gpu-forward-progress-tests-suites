#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(597.097))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((((1 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 1 * (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   return;
  }
 do
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) - 0), int(_GLF_IDENTITY(_GLF_IDENTITY(7, int(ivec2(7, 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(7, int(ivec2(7, 1))), 0 | (_GLF_IDENTITY(7, int(ivec2(7, 1)))))))))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)))) / _GLF_IDENTITY(1u, (1u) / (1u | 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), _GLF_IDENTITY(min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)), min(min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)), _GLF_IDENTITY(min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)), (_GLF_IDENTITY(min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)), ~ (~ (min(~ (gl_WorkGroupSize.x), ~ (gl_WorkGroupSize.x)))))) ^ 0u))))))) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) ^ 0u)))) / (1u | 1u))) * 1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(1.0), _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat3x2(0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) * 1.0)))), 1.0, abs(length(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(0.0, abs(1.0) * (0.0)), sqrt(0.0), 1.0, 1.0, 0.0, 1.0)), float(vec2(float(mat3x2(_GLF_IDENTITY(0.0, abs(1.0) * (0.0)), sqrt(0.0), 1.0, 1.0, 0.0, 1.0)), 0.0)))), 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))).y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, abs(length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2135.3825)), float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), bool(true)))))).y), false, false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = ((1 ^ 0) | ((1 | 1) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), false || _GLF_IDENTITY((false), true && ((false))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true)))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 else
                  {
                  }
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != _GLF_IDENTITY(0, 0 + (0)))) && true)) && true); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(_GLF_IDENTITY(bvec2(bool(! (false)), false), bvec2(bvec4(bvec2(bool(! (false)), false), false, false)))))))))))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), (0 ^ 1), 1))) != (0 & 17092)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2886.5482)), bool(false))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), false, false)), bool(bvec2(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true))))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (true ? mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch) : _GLF_FUZZED(vec2(1969.9060, -0.6))))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bvec4(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), clamp(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))), mix(vec2(_GLF_FUZZED(-2.6), _GLF_FUZZED((-4.9))), vec2((clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), clamp(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))))[0], (clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), clamp(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))))[1]), bvec2(true, true)))) : _GLF_FUZZED(vec2(-5.1, -9.8)))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))) && (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))], injectionSwitch[1])).x > injectionSwitch.y))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(vec2(-5.1, -9.8)))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true && (bool((injectionSwitch.x > injectionSwitch.y)))))))))) || false), bool(bvec4(true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), clamp(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))), mix(vec2(_GLF_FUZZED(-2.6), _GLF_FUZZED((-4.9))), vec2((clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), clamp(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))))[0], (clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), clamp(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))))[1]), bvec2(true, true)))) : _GLF_FUZZED(vec2(-5.1, -9.8)))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))) && (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))], injectionSwitch[1])).x > injectionSwitch.y))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))) : _GLF_FUZZED(vec2(-5.1, -9.8)))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true && (bool((injectionSwitch.x > injectionSwitch.y)))))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)))), int(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, (0 << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1))), 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[_GLF_IDENTITY(1, max(1, 1))], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-16.02), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(((+ 915.573)))), bvec2(true, false))))).y))))))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (144254u & 0u)) + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1)), (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1))) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), bool(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), bool(bvec3(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false, true))), true, false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ((_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))), (_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0)))) | (0 >> _GLF_IDENTITY(int(1), int(1)))) != 1); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, max(64, 64))) | (_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, (64) << 0), 64)))), 4);
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, uint(uvec2(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ (~ (virtual_gid)), _GLF_IDENTITY((~ (~ (virtual_gid))) | 0u, 0u + ((~ (~ (virtual_gid))) | 0u)))), (0u << _GLF_IDENTITY(uint(4u), uint(4u))))))], 4, 64, 2);
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) ^ 0) - 0), _injected_loop_counter)) < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / 1), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))) : ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) / 1, ((int(4)) / 1) | ((int(4)) / 1))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))), 0 | ((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))) : ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) / 1, ((int(4)) / 1) | ((int(4)) / 1))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), clamp(_GLF_IDENTITY(max(int(4), int(4)), (max(int(4), int(4))) | 0), max(int(4), int(4)), max(int(4), int(4)))))))))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ~ (~ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)), true, false, true))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((0 ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, _GLF_IDENTITY(int(ivec3(7, 0, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), max((0 >> _GLF_IDENTITY(int(4), int(4))), (0 >> _GLF_IDENTITY(int(4), int(4))))))), ~ (~ (int(ivec3(7, 0, (0 >> _GLF_IDENTITY(int(4), int(4))))))))), 7))), int(7)))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), _GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         subgroupBarrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-159.803)), vec2(_GLF_FUZZED((-0.3 / -274.997)), (injectionSwitch)[1]), bvec2(false, true))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), min(ivec2(1, 0), ivec2(1, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)), clamp(mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)), mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)), mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)), max(mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)), mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)))), mix(float(_GLF_FUZZED(-3760.0660)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(42561))), bool(false)))), bool(true)))))))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-2.4, min(-2.4, _GLF_IDENTITY(-2.4, min(-2.4, -2.4))))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1])), min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(61.74), _GLF_FUZZED(9.9)), bvec2(false, false))))).y, (false ? _GLF_FUZZED(-7842.8749) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0))), injectionSwitch)), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) + vec2(0.0, 0.0))).y))))))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((145337u / workgroup_id)) : 0u)))) / 1u))) | (0u))), clamp(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, (true ? _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)) : _GLF_FUZZED(num_workgroup)))))) ^ 0u), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))) ^ 0u)) | (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), clamp(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))))), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))) ^ 0u))), _GLF_IDENTITY(min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) | (4u)), 0u | (_GLF_IDENTITY(4u, (4u) | (4u))))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), ((_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) / 1u), uint(4u))), 0u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) | 0u)))), _GLF_IDENTITY(uint(uvec2((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) | 0u)))), 0u)), (uint(uvec2((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) | 0u)))), 0u))) / 1u)) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), clamp((_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((4u), ((4u)) | (_GLF_IDENTITY((4u), ((4u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), (_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) >> 0u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), uint(uvec3((_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((4u) | (4u), (false ? _GLF_FUZZED((true ? workgroup_base : num_workgroup)) : _GLF_IDENTITY((4u) | (4u), ((4u) | (4u)) + 0u))))), uint(uvec2(uint(_GLF_IDENTITY(4u, (4u) | (4u))), 1u))), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), 0u, 1u))))))) / 1u), virtual_gid), ~ (_GLF_IDENTITY(~ (min(virtual_gid, virtual_gid)), _GLF_IDENTITY((~ (min(virtual_gid, virtual_gid))) << 0u, ((~ (min(virtual_gid, virtual_gid))) << 0u) | ((~ (min(virtual_gid, virtual_gid))) << 0u))))))))], read, 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
}
