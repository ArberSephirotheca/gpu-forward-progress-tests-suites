#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 bvec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_1 {
 int _f0;
 bvec4 _f1;
 uvec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_3 _f1;
 uint virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.w;
 uint subgroup_base = subgroup_id * subgroup_size;
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.z = subgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_0(vec4(1.0)), _GLF_struct_3(_GLF_struct_1(1, bvec4(true), uvec4(1u), mat2x4(1.0)), _GLF_struct_2(bvec3(true), mat2x3(1.0))), workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.z + subgroup_local_id);
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.z + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[_GLF_struct_replacement_4.virtual_gid], 4, 64, 2);
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.y = read;
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[_GLF_struct_replacement_4.virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_12next_virtual_gidreadsubgroup_baseworkgroup_id.y, 4, 64, 4);
}
