#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_96 {
 vec3 _f0;
 uvec2 _f1;
 mat2x4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_95 {
 float _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_94 {
 int _injected_loop_counter;
 float _f0;
 mat3 _f1;
} ;

struct _GLF_struct_97 {
 ivec2 _f0;
 float _f1;
 _GLF_struct_94 _f2;
 _GLF_struct_95 _f3;
 _GLF_struct_96 _f4;
} ;

struct _GLF_struct_98 {
 mat4x3 _f0;
 _GLF_struct_97 _f1;
} ;

struct _GLF_struct_92 {
 uint _f0;
 mat3x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_91 {
 mat2x3 _f0;
} ;

struct _GLF_struct_89 {
 mat2 _f0;
 float _f1;
} ;

struct _GLF_struct_88 {
 mat4x3 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 mat2 _f3;
 mat3x4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_90 {
 vec2 _f0;
 _GLF_struct_88 _f1;
 ivec3 _f2;
 ivec4 _f3;
 _GLF_struct_89 _f4;
} ;

struct _GLF_struct_93 {
 _GLF_struct_90 _f0;
 _GLF_struct_91 _f1;
 uvec2 _f2;
 _GLF_struct_92 _f3;
 mat4x3 _f4;
 int _injected_loop_counter;
 ivec4 _f5;
} ;

struct _GLF_struct_85 {
 int _injected_loop_counter;
 bvec2 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_86 {
 ivec3 _f0;
 ivec4 _f1;
 _GLF_struct_85 _f2;
} ;

struct _GLF_struct_83 {
 float _f0;
 float _f1;
 mat2x3 _f2;
 bvec3 _f3;
 float _f4;
 vec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_84 {
 mat3x2 _f0;
 float _f1;
 _GLF_struct_83 _f2;
 vec2 _f3;
 float _f4;
} ;

struct _GLF_struct_82 {
 mat4 _f0;
 uint _f1;
 mat2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_87 {
 _GLF_struct_82 _f0;
 _GLF_struct_84 _f1;
 _GLF_struct_86 _f2;
 int _f3;
} ;

struct _GLF_struct_80 {
 mat4 _f0;
} ;

struct _GLF_struct_81 {
 _GLF_struct_80 _f0;
 ivec3 _f1;
 vec3 _f2;
 float _f3;
 uint workgroup_size;
 uvec3 _f4;
} ;

struct _GLF_struct_77 {
 ivec2 _f0;
 ivec3 _f1;
 bvec2 _f2;
 mat3x2 _f3;
 mat4 _f4;
 int _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_78 {
 vec2 _f0;
 _GLF_struct_77 _f1;
} ;

struct _GLF_struct_79 {
 _GLF_struct_78 _f0;
 mat3 _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_76 {
 int _injected_loop_counter;
 vec2 _f0;
} ;

struct _GLF_struct_74 {
 bvec3 _f0;
} ;

struct _GLF_struct_72 {
 uvec3 _f0;
} ;

struct _GLF_struct_73 {
 uvec2 _f0;
 mat2 _f1;
 uint _f2;
 mat2x3 _f3;
 _GLF_struct_72 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_71 {
 uint _f0;
} ;

struct _GLF_struct_69 {
 mat3 _f0;
 mat4x2 _f1;
 mat4x2 _f2;
 uvec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_68 {
 uvec2 _f0;
 bool _f1;
 bool _f2;
 ivec4 _f3;
 mat2x4 _f4;
 bool _f5;
} ;

struct _GLF_struct_67 {
 float _f0;
 mat4x3 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 ivec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_70 {
 _GLF_struct_67 _f0;
 _GLF_struct_68 _f1;
 mat4x2 _f2;
 int _f3;
 _GLF_struct_69 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_75 {
 uint workgroup_base;
 _GLF_struct_70 _f0;
 bvec2 _f1;
 _GLF_struct_71 _f2;
 _GLF_struct_73 _f3;
 _GLF_struct_74 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_64 {
 mat3x4 _f0;
 vec3 _f1;
 mat3 _f2;
 mat3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_63 {
 float _f0;
 mat2x4 _f1;
 mat2 _f2;
 bool _f3;
 ivec2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_62 {
 ivec3 _f0;
} ;

struct _GLF_struct_61 {
 ivec3 _f0;
 float _f1;
 mat2 _f2;
 mat4x3 _f3;
 bvec4 _f4;
 bool _f5;
 vec4 _f6;
} ;

struct _GLF_struct_65 {
 _GLF_struct_61 _f0;
 _GLF_struct_62 _f1;
 _GLF_struct_63 _f2;
 vec4 _f3;
 _GLF_struct_64 _f4;
} ;

struct _GLF_struct_59 {
 bool _f0;
} ;

struct _GLF_struct_58 {
 mat4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_57 {
 mat4x3 _f0;
 float _f1;
 uvec4 _f2;
 ivec2 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_56 {
 float _f0;
} ;

struct _GLF_struct_60 {
 mat3 _f0;
 _GLF_struct_56 _f1;
 _GLF_struct_57 _f2;
 mat2x4 _f3;
 _GLF_struct_58 _f4;
 _GLF_struct_59 _f5;
} ;

struct _GLF_struct_66 {
 _GLF_struct_60 _f0;
 uint subgroup_size;
 mat3x4 _f1;
 mat2x3 _f2;
 _GLF_struct_65 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_53 {
 bool _f0;
 mat4x3 _f1;
 bvec4 _f2;
 ivec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_52 {
 mat3 _f0;
} ;

struct _GLF_struct_54 {
 vec2 _f0;
 mat2 _f1;
 int _f2;
 _GLF_struct_52 _f3;
 _GLF_struct_53 _f4;
} ;

struct _GLF_struct_50 {
 vec4 _f0;
 bvec2 _f1;
 uint _f2;
 mat2x3 _f3;
 vec3 _f4;
 bool _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_49 {
 bool _f0;
 ivec4 _f1;
 mat3x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_48 {
 mat2x4 _f0;
 bool _f1;
} ;

struct _GLF_struct_47 {
 mat4x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_46 {
 uvec4 _f0;
 bool _f1;
 mat3 _f2;
 float _f3;
 uvec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_51 {
 _GLF_struct_46 _f0;
 ivec4 _f1;
 _GLF_struct_47 _f2;
 _GLF_struct_48 _f3;
 _GLF_struct_49 _f4;
 _GLF_struct_50 _f5;
} ;

struct _GLF_struct_44 {
 ivec3 _f0;
} ;

struct _GLF_struct_45 {
 int _f0;
 _GLF_struct_44 _f1;
 mat3x2 _f2;
 mat3x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_42 {
 vec2 _f0;
 bool _f1;
 mat3 _f2;
 vec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_41 {
 ivec3 _f0;
 mat4 _f1;
 bvec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_40 {
 float _f0;
 mat2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_43 {
 _GLF_struct_40 _f0;
 mat3x4 _f1;
 _GLF_struct_41 _f2;
 uvec3 _f3;
 _GLF_struct_42 _f4;
 float _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_38 {
 vec3 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_37 {
 uvec4 _f0;
} ;

struct _GLF_struct_36 {
 mat4x3 _f0;
 bvec3 _f1;
 mat2x4 _f2;
 vec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_39 {
 mat4x2 _f0;
 _GLF_struct_36 _f1;
 _GLF_struct_37 _f2;
 _GLF_struct_38 _f3;
} ;

struct _GLF_struct_34 {
 mat3x2 _f0;
 uvec4 _f1;
 int _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_35 {
 mat4x2 _f0;
 _GLF_struct_34 _f1;
} ;

struct _GLF_struct_55 {
 uint num_workgroup;
 _GLF_struct_35 _f0;
 _GLF_struct_39 _f1;
 _GLF_struct_43 _f2;
 _GLF_struct_45 _f3;
 _GLF_struct_51 _f4;
 _GLF_struct_54 _f5;
} ;

struct _GLF_struct_31 {
 mat2x4 _f0;
 float _f1;
 float _f2;
 mat4 _f3;
 ivec3 _f4;
 bvec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_30 {
 mat2x3 _f0;
 mat4 _f1;
 uvec2 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 ivec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_29 {
 bool _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_28 {
 mat2x4 _f0;
 uint _f1;
} ;

struct _GLF_struct_32 {
 ivec2 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_27 {
 mat3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_25 {
 mat4x2 _f0;
 uvec2 _f1;
 mat4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_24 {
 bool _f0;
 mat4x3 _f1;
 uint _f2;
 uvec2 _f3;
 bool _f4;
 vec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_23 {
 float _f0;
 vec2 _f1;
 ivec2 _f2;
 ivec3 _f3;
 vec3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_22 {
 ivec3 _f0;
} ;

struct _GLF_struct_26 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 mat4x3 _f2;
 _GLF_struct_24 _f3;
 uvec2 _f4;
 _GLF_struct_25 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_20 {
 uvec3 _f0;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 bvec4 _f1;
 bvec3 _f2;
 mat4x2 _f3;
 mat4x3 _f4;
 ivec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 mat2x3 _f1;
 mat3x4 _f2;
 mat2x4 _f3;
 _GLF_struct_20 _f4;
 uint _f5;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 vec4 _f1;
 vec2 _f2;
 mat3x2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
} ;

struct _GLF_struct_33 {
 ivec3 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_21 _f2;
 _GLF_struct_26 _f3;
 uint subgroup_local_id;
 _GLF_struct_27 _f4;
 _GLF_struct_32 _f5;
} ;

struct _GLF_struct_14 {
 vec2 _f0;
 bvec3 _f1;
 ivec2 _f2;
 bool _f3;
 mat3 _f4;
} ;

struct _GLF_struct_13 {
 float _f0;
 bool _f1;
 uint _f2;
 uvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 bvec4 _f1;
 bool _f2;
 mat2 _f3;
 mat3x2 _f4;
 int _f5;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_15 {
 uint _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_14 _f4;
 uvec2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_9 {
 uint _f0;
 mat4x2 _f1;
 ivec3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 uint _f1;
 ivec4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 bvec3 _f1;
 mat2x3 _f2;
 _GLF_struct_7 _f3;
 mat4x2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 mat3x4 _f1;
 ivec4 _f2;
 ivec4 _f3;
 mat2 _f4;
 int _f5;
 vec3 _f6;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 uvec4 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_16 {
 _GLF_struct_5 _f0;
 int _injected_loop_counter;
 vec3 _f1;
 _GLF_struct_8 _f2;
 int _f3;
 _GLF_struct_10 _f4;
 mat3x2 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 uvec2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_1 {
 uint virtual_gid;
 _GLF_struct_0 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.4)), bool(false)))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), float(_GLF_FUZZED(-2.4)), bool(false))))))))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-2.4)), bool(false)))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), float(_GLF_FUZZED(-2.4)), bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), float(_GLF_FUZZED(-2.4)), bool(false)))))))))))) || false) && true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(7755))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(7755)))))), min(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(7755)))))), ~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(7755)))))))))) != 0); _injected_loop_counter --)
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 _GLF_struct_66 _GLF_struct_replacement_66 = _GLF_struct_66(_GLF_struct_60(mat3(1.0), _GLF_struct_56(1.0), _GLF_struct_57(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.1)))) - tan(0.0)), mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(8.0)), min(_GLF_IDENTITY(float(_GLF_FUZZED(8.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0), transpose(transpose(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0))))), clamp(float(_GLF_IDENTITY(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0), transpose(transpose(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0))))), float(_GLF_IDENTITY(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0), transpose(transpose(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0))))), float(_GLF_IDENTITY(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0), transpose(transpose(mat3(float(_GLF_FUZZED(8.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0)))))))), float(_GLF_FUZZED(8.0)))), mix(float(_GLF_FUZZED(9398.2123)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(8.0), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0))), max(float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0))), float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0)))))), min(_GLF_IDENTITY(_GLF_FUZZED(8.0), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0))), max(float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0))), float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0)))))), _GLF_IDENTITY(_GLF_FUZZED(8.0), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0))), max(float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0))), float(vec4(_GLF_FUZZED(8.0), 1.0, 0.0, tan(0.0)))))))))), bool(true))), bool(false)))) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2247.6847)), float(0.0), bool(true))))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), clamp(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), (vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))) + vec3(0.0, 0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), (vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))) + vec3(0.0, 0.0, 0.0)), (_GLF_IDENTITY(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), (vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))) + vec3(0.0, 0.0, 0.0))) / vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), (vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.5))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))) + vec3(0.0, 0.0, 0.0)))), vec3(0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.9)), float(0.0), bool(true)))))), 0.0))), determinant(mat3(0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7288.4511)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x))), 0.0, 0.0, length(0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), vec4(0.0, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED(-1.4)), bool(false)))), 1.0, uvec4(1u), ivec2(1), uvec3(1u)), mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9721.2146) : 1.0)), _GLF_IDENTITY(1.0, float(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), _GLF_struct_58(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0)))) * exp(0.0))), (false ? _GLF_FUZZED(mat4(4.9, 7026.7170, -7294.7940, 4228.5308, -871.570, 4.4, 1251.8089, -20.90, 9.9, 8.0, -18.67, _GLF_IDENTITY(2955.8809, (true ? 2955.8809 : _GLF_FUZZED(6860.5813))), _GLF_IDENTITY(-57.14, (-57.14) / 1.0), -76.23, -657.054, 4429.9407)) : mat4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, 1.0, 1.0)), max(float(mat2(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(float(mat2(1.0, 1.0, 1.0, 1.0)), max(float(mat2(1.0, 1.0, 1.0, 1.0)), float(mat2(1.0, 1.0, 1.0, 1.0)))))))) * exp(0.0))))), bvec3(true)), _GLF_struct_59(true)), gl_SubgroupSize, mat3x4(1.0), mat2x3(1.0), _GLF_struct_65(_GLF_struct_61(ivec3(1), 1.0, mat2(1.0), mat4x3(1.0), bvec4(true), true, _GLF_IDENTITY(vec4(1.0), max(vec4(1.0), vec4(1.0)))), _GLF_struct_62(ivec3(1)), _GLF_struct_63(1.0, mat2x4(1.0), mat2(1.0), true, ivec2(1), vec2(1.0)), vec4(1.0), _GLF_struct_64(mat3x4(1.0), vec3(1.0), mat3(1.0), mat3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (_GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)) | (ivec2(1)), min((ivec2(1)) | (ivec2(1)), _GLF_IDENTITY((ivec2(1)) | (ivec2(1)), clamp((ivec2(1)) | (ivec2(1)), (ivec2(1)) | (ivec2(1)), (ivec2(1)) | (ivec2(1))))))), ivec2(1))))), _GLF_IDENTITY(max(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), ivec2(ivec2(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)))))), (max(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), 0), (ivec3(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), 0)) | (ivec3(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), 0)))))) * ivec2(1, 1)))) | (_GLF_IDENTITY(max(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), clamp(max(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), max(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), max(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(ivec3(ivec2(1), 1)), min(ivec2(ivec3(ivec2(1), 1)), ivec2(ivec3(ivec2(1), 1))))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)))))))))), bvec2(true));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (_GLF_IDENTITY(int(7), max(int(7), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.0) : injectionSwitch.y))) + abs(0.0))), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), log(1.0), 1.0))) > injectionSwitch.y)))) || false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(ivec3(1), _GLF_struct_18(_GLF_struct_17(mat2(1.0), vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9)))), vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2.2)), float(1.0), bool(true))), 1.0))), mat3x2(1.0), mat3x4(1.0))), _GLF_struct_21(_GLF_struct_19(bvec3(true), bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(true), mat4x2(1.0), mat4x3(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, 0.0, exp(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sqrt(0.0))))), ivec2(1), mat2(1.0)), mat2x3(1.0), mat3x4(1.0), mat2x4(1.0), _GLF_struct_20(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u)))) / uvec3(1u, 1u, 1u))))), 1u), _GLF_struct_26(_GLF_struct_22(ivec3(1)), _GLF_struct_23(1.0, vec2(1.0), _GLF_IDENTITY(ivec2(1), (ivec2(1)) / ivec2(1, 1)), ivec3(1), vec3(1.0), _GLF_IDENTITY(vec4(1.0), (true ? vec4(1.0) : _GLF_FUZZED(vec4(-8668.8785, 3927.9098, 7148.6493, -6.1))))), mat4x3(1.0), _GLF_struct_24(_GLF_IDENTITY(true, ! (! (true))), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0 * (_GLF_IDENTITY(1.0, (1.0) / 1.0)))), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, 1u, (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 0u | (uint(_GLF_IDENTITY(3u, min(_GLF_IDENTITY(3u, (3u) + 0u), 3u)))))))), (uvec3(1u, 1u, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (~ (3u))), uint(uvec2(_GLF_IDENTITY(3u, ~ (~ (3u))), 1u)))) << 0u)), _GLF_IDENTITY(uint(3u), 0u | (uint(3u))))))) << uvec3(0u, 0u, 0u)))), uvec2(1u), true, vec2(1.0), mat2(1.0)), uvec2(1u), _GLF_struct_25(mat4x2(1.0), uvec2(1u), mat4(1.0), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (true ? clamp(1, 1, 1) : _GLF_FUZZED(-77441)))))), mat4x2(1.0)), gl_SubgroupInvocationID, _GLF_struct_27(mat3(1.0), uvec2(1u)), _GLF_struct_32(ivec2(1), _GLF_struct_28(mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5870.2788)), float(1.0), bool(true)))), 1u), _GLF_struct_29(true, bvec4(_GLF_IDENTITY(true, (true) && true))), _GLF_struct_30(mat2x3(1.0), _GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))), uvec2(1u), mat3x2(1.0), mat2x3(1.0), ivec2(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-36096)))) | 0)))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-100.966)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))))) : _GLF_FUZZED(mat2(-15.19))))) / mat2(1.0, 1.0, 1.0, 1.0))), _GLF_struct_31(mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), (false ? _GLF_FUZZED(-6891.5679) : float(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.8)), bool(false))), 0.0)))))), 1.0, 1.0, mat4(1.0), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-3111, (-3111) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 44671, -10536), (ivec3(_GLF_IDENTITY(-3111, (-3111) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 44671, -10536)) >> ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(-3111, 44671, -10536)) - ivec3(0, 0, 0))) : ivec3(1)), ivec3(0, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) ^ 0) | (0))) | ((false ? _GLF_FUZZED(ivec3(-3111, 44671, -10536)) : ivec3(1))))), bvec3(true), bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))), bvec2(true)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, length(0.0), exp(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 _GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), clamp(uvec3(uvec3(gl_NumWorkGroups)), uvec3(uvec3(gl_NumWorkGroups)), _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups)))), ~ (~ (_GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (uvec3(uvec3(gl_NumWorkGroups))))))))))), max(uvec3(uvec3(gl_NumWorkGroups)), uvec3(uvec3(gl_NumWorkGroups))))).x, _GLF_struct_35(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_34(mat3x2(1.0), uvec4(1u), 1, uvec3(1u))), _GLF_struct_39(mat4x2(1.0), _GLF_struct_36(mat4x3(1.0), bvec3(true), mat2x4(1.0), vec4(1.0), uvec4(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) ^ 0u))))), _GLF_struct_37(uvec4(1u)), _GLF_struct_38(vec3(_GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec3(1.0, 1.0, 1.0)))))), mat4x3(1.0), uvec2(1u), 1u)), _GLF_struct_43(_GLF_struct_40(1.0, mat2(1.0), ivec3(1)), mat3x4(1.0), _GLF_struct_41(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(int(1)))), (ivec3(_GLF_IDENTITY(1, int(int(1))))) | (ivec3(_GLF_IDENTITY(1, int(int(1)))))), mat4(1.0), bvec3(true), mat2x4(1.0)), uvec3(1u), _GLF_struct_42(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false)), clamp(mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false)), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false)), max(mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false)), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false)), (mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false))) * 1.0))), mix(float(1.0), float(_GLF_FUZZED(-101.756)), bool(false)))))))), true, mat3(1.0), vec3(1.0), mat2x4(1.0)), 1.0, uvec3(_GLF_IDENTITY(1u, max(1u, 1u)))), _GLF_struct_45(1, _GLF_struct_44(ivec3(1)), mat3x2(1.0), mat3x4(1.0), vec4(1.0)), _GLF_struct_51(_GLF_struct_46(uvec4(1u), true, mat3(1.0), 1.0, uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (57054u & 0u)))), min(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))), (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_IDENTITY(_GLF_FUZZED(uvec2(138253u, 50489u).y), clamp(_GLF_FUZZED(uvec2(138253u, 50489u).y), _GLF_FUZZED(_GLF_IDENTITY(uvec2(138253u, 50489u).y, (_GLF_IDENTITY(uvec2(138253u, 50489u).y, (uvec2(138253u, 50489u).y) ^ 0u)) << 0u)), _GLF_FUZZED(uvec2(138253u, 50489u).y)))))))), bvec2(true)), _GLF_IDENTITY(ivec4(1), (ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(12175))))) | (ivec4(1))), _GLF_struct_47(mat4x2(1.0), uvec3(1u)), _GLF_struct_48(mat2x4(1.0), true), _GLF_struct_49(true, ivec4(1), mat3x4(1.0), bvec2(true)), _GLF_struct_50(vec4(1.0), bvec2(true), 1u, mat2x3(1.0), vec3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY((1.0) + 0.0, 1.0 * (_GLF_IDENTITY((1.0) + 0.0, min((1.0) + 0.0, (1.0) + 0.0)))), 0.0, 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), float(_GLF_IDENTITY(mat2x4(float(mat4x3(_GLF_IDENTITY((1.0) + 0.0, 1.0 * (_GLF_IDENTITY((1.0) + 0.0, min((1.0) + 0.0, (1.0) + 0.0)))), 0.0, 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, cos(0.0)), (true ? mat2x4(float(mat4x3(_GLF_IDENTITY((1.0) + 0.0, 1.0 * (_GLF_IDENTITY((1.0) + 0.0, min((1.0) + 0.0, (1.0) + 0.0)))), 0.0, 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, cos(0.0)) : _GLF_FUZZED(mat2x4(-9615.4562, -9888.9550, -77.89, 6.4, 1.9, 8.2, 36.80, 2851.3441))))))))))), true, mat4x2(1.0))), _GLF_struct_54(vec2(1.0), mat2(1.0), 1, _GLF_struct_52(mat3(1.0)), _GLF_struct_53(true, mat4x3(1.0), bvec4(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))), ivec3(1), mat3(1.0))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-78.72) : injectionSwitch.x)), injectionSwitch.x), max(min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-78.72) : injectionSwitch.x)), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-78.72) : injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y))))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, _GLF_IDENTITY(true, (true) && true)))))))))))
    return;
  }
 else
  {
  }
 _GLF_struct_81 _GLF_struct_replacement_81 = _GLF_struct_81(_GLF_struct_80(mat4(1.0)), ivec3(1), vec3(1.0), 1.0, gl_WorkGroupSize.x, uvec3(1u));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(_GLF_struct_76 _GLF_struct_replacement_76 = _GLF_struct_76(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0), vec2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_76._injected_loop_counter < 1); _GLF_struct_replacement_76._injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 _GLF_struct_75 _GLF_struct_replacement_75 = _GLF_struct_75(_GLF_struct_replacement_81.workgroup_size * workgroup_id, _GLF_struct_70(_GLF_struct_67(1.0, mat4x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.8) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8164.7015)), float(1.0), bool(true)))))), mat4x3(1.0), mat4x2(1.0), uvec4(1u), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1))))) - ivec3(0, 0, 0)), uvec3(1u)), _GLF_struct_68(uvec2(1u), true, true, ivec4(1), mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)))), float(mat2x4(float(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY((1.0) - sqrt(0.0), float(vec3(_GLF_IDENTITY((1.0) - sqrt(0.0), float(mat2(_GLF_IDENTITY((1.0) - sqrt(0.0), min((1.0) - sqrt(0.0), (1.0) - sqrt(0.0))), 0.0, 0.0, 0.0))), 1.0, 1.0))))), float(_GLF_FUZZED(6011.8908)), bool(false)))), true), mat4x2(1.0), 1, _GLF_struct_69(mat3(1.0), mat4x2(1.0), mat4x2(1.0), uvec3(1u), mat2x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), 1.0, 1.0)), (true ? 1.0 : _GLF_FUZZED(7.2))), 1.0)))), mat3(1.0)), bvec2(true), _GLF_struct_71(1u), _GLF_struct_73(uvec2(1u), mat2(1.0), 1u, mat2x3(1.0), _GLF_struct_72(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(false ? _GLF_FUZZED(60426u) : 1u, uint(uvec3(false ? _GLF_FUZZED(60426u) : 1u, 1u, (0u << _GLF_IDENTITY(uint(2u), uint(2u)))))))) : _GLF_FUZZED(subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), 1u, 0u, 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), 1u, 0u, 0u)), uint(uvec3(uint(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), 1u, 0u, 0u)), 1u, 0u))), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), 1u, 0u, 0u)), uint(uvec3(uint(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)), 1u, 0u, 0u)), 1u, 0u)))) >> 0u), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u))), 1u * _GLF_IDENTITY((uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)))), ~ (_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u))))), (~ ((uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)))))) | (~ ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u))), (uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)))) / 1u)))))))))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(60426u) : 1u)))))), ivec3(1)), _GLF_struct_74(bvec3(true)), ivec2(1));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y) && true))))) || false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(bool((true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), _GLF_IDENTITY(true && (_GLF_IDENTITY(true && (true), ! (! (true && (true))))), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(true && (true), ! (! (true && (true)))))), (! (true && (_GLF_IDENTITY(true && (true), ! (! (true && (true))))))) && true))))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)), true, true)))) || false), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true) && true, _GLF_IDENTITY(bool(bvec3((true) && true, true, false)), (bool(bvec3((true) && true, true, false))) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true) && true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((true) && true, true, false)), bool(bvec3(bool(bvec3((true) && true, true, false)), true, true))), (bool(bvec3((true) && true, true, false))) && true))))))))))) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   for(_GLF_struct_87 _GLF_struct_replacement_87 = _GLF_struct_87(_GLF_struct_82(mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)))), 1u, mat2(1.0), uvec2(1u)), _GLF_struct_84(mat3x2(1.0), 1.0, _GLF_struct_83(1.0, 1.0, mat2x3(1.0), bvec3(true), 1.0, vec2(1.0), ivec3(1)), vec2(1.0), 1.0), _GLF_struct_86(ivec3(1), ivec4(1), _GLF_struct_85((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-72459) : 2))))))), ~ (~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), clamp(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))))))))) - 0))))), bvec2(true), mat2x3(1.0))), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_87._f2._f2._injected_loop_counter != 1); _GLF_struct_replacement_87._f2._f2._injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2334.1905, 538.722)))))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2334.1905, 538.722)))))).x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2334.1905, 538.722)))))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2334.1905, 538.722)))))).x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, ! (! (false))), true))) && true)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(1), int(1)))), ((0 | (0 >> _GLF_IDENTITY(int(1), int(1))))) + 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.2) : _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), (vec4(injectionSwitch.y, 1.0, 1.0, 0.0)) + vec4(0.0, 0.0, 0.0, 0.0))))))))))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(4660) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) ^ 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_IDENTITY(_GLF_struct_replacement_75.workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_66.subgroup_size, ~ (~ (subgroup_id * _GLF_struct_replacement_66.subgroup_size))) + _GLF_struct_replacement_33.subgroup_local_id, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_75.workgroup_base + subgroup_id * _GLF_struct_replacement_66.subgroup_size + _GLF_struct_replacement_33.subgroup_local_id, (_GLF_struct_replacement_75.workgroup_base + subgroup_id * _GLF_struct_replacement_66.subgroup_size + _GLF_struct_replacement_33.subgroup_local_id) >> 0u))), _GLF_struct_0(mat2x4(1.0), _GLF_IDENTITY(uvec2(1u), (uvec2(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))))) | (uvec2(1u))), ivec4(1)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8456.5238)), bool(false))) > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))) - 0.0) > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(860.740, 321.594)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && ((injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false)))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-717.992)))))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && ((injectionSwitch.x > injectionSwitch.y))))))))))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), (! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))) || false))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), true))))))
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), clamp(1 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(1, 0 + (1)) << _GLF_IDENTITY(int(1), int(1)), 1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), true), bvec2(bvec4(bvec2(true, true), true, false))))) && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), true, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec2(-68.97, -5.4), injectionSwitch)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.2)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_struct_replacement_75.workgroup_base + subgroup_id * _GLF_struct_replacement_66.subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id, (_GLF_struct_replacement_33.subgroup_local_id) / 1u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id, min(_GLF_struct_replacement_33.subgroup_local_id, _GLF_struct_replacement_33.subgroup_local_id)) + 1, (_GLF_struct_replacement_33.subgroup_local_id + 1) / 1u)) - 0u)), max(_GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), max((_GLF_struct_replacement_33.subgroup_local_id + 1), (_GLF_struct_replacement_33.subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))))), _GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), ((_GLF_struct_replacement_33.subgroup_local_id + 1)) ^ 0u))) % _GLF_struct_replacement_66.subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id + 1, clamp(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id + 1, min(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id + 1, (_GLF_struct_replacement_33.subgroup_local_id + 1) >> 0u), _GLF_struct_replacement_33.subgroup_local_id + 1)), _GLF_struct_replacement_33.subgroup_local_id + 1, _GLF_struct_replacement_33.subgroup_local_id + 1)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(subgroup_id, -51315, -52383), clamp(bitfieldExtract(subgroup_id, -51315, -52383), bitfieldExtract(subgroup_id, -51315, -52383), _GLF_IDENTITY(bitfieldExtract(subgroup_id, -51315, -52383), (bitfieldExtract(subgroup_id, -51315, -52383)) | (bitfieldExtract(subgroup_id, -51315, -52383)))))) : _GLF_struct_replacement_33.subgroup_local_id + 1))), max((_GLF_struct_replacement_33.subgroup_local_id + 1), (_GLF_struct_replacement_33.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / (1 & 1))))), _GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_struct_replacement_33.subgroup_local_id + 1)), (((_GLF_struct_replacement_33.subgroup_local_id + 1))) | (((_GLF_struct_replacement_33.subgroup_local_id + 1)))) ^ 0u))) % _GLF_struct_replacement_66.subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id, (_GLF_struct_replacement_33.subgroup_local_id) / 1u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id, min(_GLF_struct_replacement_33.subgroup_local_id, _GLF_struct_replacement_33.subgroup_local_id)) + 1, (_GLF_struct_replacement_33.subgroup_local_id + 1) / 1u)) - 0u)), max(_GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), max((_GLF_struct_replacement_33.subgroup_local_id + 1), (_GLF_struct_replacement_33.subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))))), _GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), ((_GLF_struct_replacement_33.subgroup_local_id + 1)) ^ 0u))) % _GLF_struct_replacement_66.subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id + 1, clamp(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id + 1, min(_GLF_IDENTITY(_GLF_struct_replacement_33.subgroup_local_id + 1, (_GLF_struct_replacement_33.subgroup_local_id + 1) >> 0u), _GLF_struct_replacement_33.subgroup_local_id + 1)), _GLF_struct_replacement_33.subgroup_local_id + 1, _GLF_struct_replacement_33.subgroup_local_id + 1)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(subgroup_id, -51315, -52383), clamp(bitfieldExtract(subgroup_id, -51315, -52383), bitfieldExtract(subgroup_id, -51315, -52383), _GLF_IDENTITY(bitfieldExtract(subgroup_id, -51315, -52383), (bitfieldExtract(subgroup_id, -51315, -52383)) | (bitfieldExtract(subgroup_id, -51315, -52383)))))) : _GLF_struct_replacement_33.subgroup_local_id + 1))), max((_GLF_struct_replacement_33.subgroup_local_id + 1), (_GLF_struct_replacement_33.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / (1 & 1))))), _GLF_IDENTITY((_GLF_struct_replacement_33.subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_struct_replacement_33.subgroup_local_id + 1)), (((_GLF_struct_replacement_33.subgroup_local_id + 1))) | (((_GLF_struct_replacement_33.subgroup_local_id + 1)))) ^ 0u))) % _GLF_struct_replacement_66.subgroup_size)))) ^ 0u);
 do
  {
   for(_GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_5(_GLF_struct_2(mat3x2(1.0), mat3x4(1.0)), uvec4(1u), _GLF_struct_3(mat2(1.0), mat3x4(1.0), ivec4(1), ivec4(1), mat2(1.0), 1, vec3(1.0)), _GLF_struct_4(bvec4(true))), 1, _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))), max(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))), clamp(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))), max(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))))))), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-80651))), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true)))))))), _GLF_struct_8(_GLF_struct_6(uvec4(1u), vec4(1.0)), bvec3(_GLF_IDENTITY(true, false || (true))), mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), (min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.8) : 1.0)), 1.0)) / 1.0))), _GLF_struct_7(vec2(1.0)), mat4x2(1.0), ivec4(1)), 1, _GLF_struct_10(_GLF_struct_9(1u, mat4x2(1.0), ivec3(1), ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))))))), 1u, ivec4(1), mat3x4(1.0)), mat3x2(1.0), _GLF_struct_15(1u, _GLF_struct_11(_GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), clamp(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), _GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), _GLF_IDENTITY(vec3(mat4x3(_GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), (true ? mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)) : _GLF_FUZZED(vec3(27.45, 3.6, 9.4)))), 1.0, 0.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), mix(vec3((vec3(mat4x3(_GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), (true ? mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)) : _GLF_FUZZED(vec3(27.45, 3.6, 9.4)))), 1.0, 0.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))[0], _GLF_FUZZED(7.4), (vec3(mat4x3(_GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), (true ? mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)) : _GLF_FUZZED(vec3(27.45, 3.6, 9.4)))), 1.0, 0.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))[2]), vec3(_GLF_FUZZED(3.5), (vec3(mat4x3(_GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), (true ? mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)) : _GLF_FUZZED(vec3(27.45, 3.6, 9.4)))), 1.0, 0.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))[1], _GLF_FUZZED(6641.2933)), bvec3(false, true, false)))), _GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), clamp(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), _GLF_IDENTITY(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), min(mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)), mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true)))), mix(vec3(_GLF_FUZZED(-6.0), (vec3(1.0))[1], _GLF_FUZZED(485.468)), vec3((vec3(1.0))[0], _GLF_FUZZED((-2.8 * -3828.8487)), (vec3(1.0))[2]), bvec3(true, false, true))))))), vec3(1.0))), true), _GLF_struct_12(_GLF_IDENTITY(vec4(1.0), clamp(_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(-714.192), (vec4(1.0))[1], _GLF_FUZZED(-85.00), _GLF_FUZZED(-26.69)), vec4((vec4(1.0))[0], _GLF_FUZZED(9.0), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))[2], (vec4(1.0))[3]), bvec4(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && true), _GLF_IDENTITY(true, true && (true))))), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - length(0.0)), max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9581.6552)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, (1.0) - 0.0)))), vec4(1.0))), bvec4(true), true, mat2(1.0), mat3x2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), 1), _GLF_struct_13(1.0, true, 1u, uvec3(1u), mat4x2(1.0)), _GLF_struct_14(vec2(1.0), bvec3(true), ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), true && (bool(bvec4(true, true, true, false))))), false)))), true))))), ! (! (true))), mat3(1.0)), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | 0u)) >> 0u)), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), clamp(min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), (true ? min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) : _GLF_FUZZED(tan(-9.9)))), (min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))) - 0.0), min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_16._injected_loop_counter, clamp(_GLF_struct_replacement_16._injected_loop_counter, _GLF_struct_replacement_16._injected_loop_counter, _GLF_IDENTITY(_GLF_struct_replacement_16._injected_loop_counter, min(_GLF_struct_replacement_16._injected_loop_counter, _GLF_struct_replacement_16._injected_loop_counter)))) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_GLF_struct_replacement_16._injected_loop_counter --, ~ (~ (_GLF_struct_replacement_16._injected_loop_counter --))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_IDENTITY(true, (true) || false)), (false) && true), (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(0.0), abs(0.0), 1.0, tan(0.0)))) > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), true)))))))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((((1 | 0) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 + (int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
          {
           for(_GLF_struct_79 _GLF_struct_replacement_79 = _GLF_struct_79(_GLF_struct_78(vec2(1.0), _GLF_struct_77(ivec2(1), ivec3(1), bvec2(true), mat3x2(1.0), mat4(1.0), 1, mat2x3(1.0))), mat3(1.0), int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_79._injected_loop_counter > 0); _GLF_IDENTITY(_GLF_struct_replacement_79._injected_loop_counter --, (_GLF_IDENTITY(_GLF_struct_replacement_79._injected_loop_counter --, (true ? _GLF_struct_replacement_79._injected_loop_counter -- : _GLF_FUZZED(-94122)))) - (0 << _GLF_IDENTITY(int(2), int(2)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)));
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_DEAD(false), true))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           continue;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         for(_GLF_struct_93 _GLF_struct_replacement_93 = _GLF_struct_93(_GLF_struct_90(vec2(1.0), _GLF_struct_88(mat4x3(1.0), uvec3(1u), mat4x3(1.0), mat2(1.0), mat3x4(1.0), uvec3(1u)), ivec3(1), ivec4(1), _GLF_struct_89(mat2(1.0), 1.0)), _GLF_struct_91(mat2x3(1.0)), uvec2(1u), _GLF_struct_92(1u, mat3x2(1.0), bvec2(true)), mat4x3(1.0), 0, ivec4(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_93._injected_loop_counter < 1); _GLF_struct_replacement_93._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0))).y) || false)))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) - vec2(0.0, 0.0)).y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.2) : injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true, true)))) && true)))))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(vec2(965.421, 16.99)) : injectionSwitch)).y))), true, true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-873.414 - 685.003)), _GLF_FUZZED(397.409)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))), true, true))), false))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))), false))))), false)))))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (injectionSwitch.x > injectionSwitch.y)))))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)), false)), ! (! (bool(bvec2((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)), false))))))))), true, true)))), true))))), false))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(max(int(0), int(0)), (0 | (43593 & 0)) + (max(int(0), int(0)))))))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          break;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) - abs(vec2(0.0, 0.0))).y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
             break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              break;
            }
           break;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-443.616, -1.7)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-478.547), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.3)), bvec2(true, false))), vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                barrier();
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), true))))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))), bool(bvec3(! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))), false, false)))))) && true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(27.56)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         for(_GLF_struct_98 _GLF_struct_replacement_98 = _GLF_struct_98(mat4x3(1.0), _GLF_struct_97(ivec2(1), 1.0, _GLF_struct_94(1, 1.0, mat3(1.0)), _GLF_struct_95(1.0, uvec3(1u)), _GLF_struct_96(_GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(vec3(1.9, 32.90, 597.726)) : _GLF_IDENTITY(vec3(1.0), vec3(mat3x2(vec3(1.0), 0.0, 1.0, 0.0))))), uvec2(1u), mat2x4(1.0), bvec3(true)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_98._f1._f2._injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(2))))))); _GLF_struct_replacement_98._f1._f2._injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))) || false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))));
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, false)))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0)), ! (! (_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0)), false || (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (_GLF_IDENTITY(0, 0 | (0))) | (_GLF_IDENTITY(0, 0 | (0)))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false))))))))))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true, false)), false || (bool(bvec4(true, true, true, false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-437.821)))))) - 0.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[_GLF_struct_replacement_1.virtual_gid], _GLF_IDENTITY(4, (4) * 1), 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), bool(bvec4(false, false, false, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 atomicStore(checker[_GLF_struct_replacement_1.virtual_gid], _GLF_IDENTITY(read, (read) << 0u), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
}
