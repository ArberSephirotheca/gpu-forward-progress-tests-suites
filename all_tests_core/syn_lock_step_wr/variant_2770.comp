#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id;
 uvec3 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec3(true, false, true))), true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, true && (true)), true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(true, false, true, true)))))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), false || (bool(bvec4(false, false, true, true))))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) * 1.0) < injectionSwitch.y))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))))), true && (bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))))), false)))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true))))), false)))), true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))), false, true, true))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), true))), true))))), _GLF_IDENTITY(true, true && (true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, true, true))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false), true), _GLF_IDENTITY(true, true && (true))))), true))))), _GLF_IDENTITY(true, true && (true)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))), false, false)))))))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | _GLF_IDENTITY(0, max(0, 0))))
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-272.373, 82.41)) : injectionSwitch))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8374.0929), _GLF_FUZZED(-13.69)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8374.0929), _GLF_FUZZED(-13.69)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8374.0929), _GLF_FUZZED(-13.69)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))).y, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8374.0929), _GLF_FUZZED(-13.69)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8374.0929), _GLF_FUZZED(-13.69)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8374.0929), _GLF_FUZZED(-13.69)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))).y, 0.0, 1.0, sin(0.0), cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z = subgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-531.712, mix(float(_GLF_IDENTITY(-531.712, min(-531.712, -531.712))), float(_GLF_FUZZED((-602.428 * -197.809))), bool(false))), 834.061)) : mat2(1.0) * (injectionSwitch)))))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-385.401) : (injectionSwitch)[1]))), vec2(_GLF_FUZZED(72.12), _GLF_FUZZED((-9.0 + -1.6))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-385.401) : (injectionSwitch)[1]))), vec2(_GLF_FUZZED(72.12), _GLF_FUZZED((-9.0 + -1.6))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y), false, false, true))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, bool(bvec2(false, true))))))))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.y = GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))))))))
        barrier();
      }
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.y;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w = subgroup_size;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5)))))))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5)))))))))))) >> _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5)))))))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5)))))))))))) >> _GLF_IDENTITY(int(5), int(5)))) | (0 ^ 0)), int(int(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (83118 & 0) | (int(5))), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)))), int(5))))), min((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, (_GLF_IDENTITY((int(5)) ^ 0, ~ (~ ((int(5)) ^ 0)))) - 0)), int(5))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (int(5))), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))), int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), int(ivec4(0 | (1), 0, 1, 0)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), int(5))))), min((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1 ^ 1)), 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) - 0)), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-94097) : int(5))))))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, _GLF_IDENTITY(((int(5)) ^ 0) - 0, min(((int(5)) ^ 0) - 0, ((int(5)) ^ 0) - 0)))), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))), 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, false))))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)) * (injectionSwitch)), injectionSwitch)).y))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
            barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, abs(0.0), 1.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch.x, abs(0.0), 1.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, abs(0.0), 1.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch.x, abs(0.0), 1.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0))))) : _GLF_FUZZED(-8.2)))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - 0.0) < injectionSwitch.y))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y))))))), false, false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size, (true ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size, uvec4(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size[0], GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size[1], GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size[2], GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size[3])) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id))).z;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.z = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) / uvec4(1u, 1u, 1u, 1u)), GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id)).w) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, (true ? GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w)))))) + (0u & 72816u));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.x = _GLF_IDENTITY(num_workgroup, (num_workgroup) << 0u);
 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.x = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), clamp(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), (clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)) << 0u)))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) + 0u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 1, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1)), (1 | 1) | (1 | 1)), int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), false))), true)))))))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.z = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z = workgroup_id, (GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z = workgroup_id) >> 0u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), bool(bvec3(true, true, true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8998.8622)), vec2(_GLF_FUZZED(8900.7879), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 1.0)))), float(_GLF_FUZZED(-14.30)), bool(false)))), bvec2(false, true))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id), (uvec3(0u, 0u, 0u) | (GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id)) | uvec3(0u, 0u, 0u))).z;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - _GLF_IDENTITY(0, clamp(0, 0, 0))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.7) : injectionSwitch.y))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.7) : injectionSwitch.y)))))) || false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) << 0), min(((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) << 0), ((1 | 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) << 0))))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)) && true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 uint workgroup_base = GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), min((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w) / 1u)) ^ 0u)), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), ((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w)) | (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), max((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w))))), min((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w)))))) >> 0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w), (_GLF_IDENTITY(true, ! (! (true))) ? ~ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w) : _GLF_FUZZED(subgroup_id)))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
  }
 else
  {
   GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y = workgroup_base;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((32353 & 0) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false, true, false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, ~ (~ (1))) & _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(max(~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(max(~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1, 0, 1), (true ? ivec4(max(~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1, 0, 1) : _GLF_FUZZED(ivec4(-25807, -45955, -79911, 11993))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(ivec4(max(~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1, 0, 1), (true ? ivec4(max(~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1, 0, 1) : _GLF_FUZZED(ivec4(-25807, -45955, -79911, 11993))))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id) << uvec4(0u, 0u, 0u, 0u)).w * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x + GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.z;
 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x = virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.w = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true)), ! _GLF_IDENTITY((! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))), bool(bvec3(_GLF_IDENTITY((! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))), true && ((! (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))))), false, false))))))))
  {
   _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid, uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid, max(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid, GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid)))).w, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid, uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid, max(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid, GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid)))).w) | 0u);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0)))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, max(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))))) + ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.z + _GLF_IDENTITY(1, 0 + (1))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u)).x, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, max(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))))) + ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.z + _GLF_IDENTITY(1, 0 + (1))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u)).x, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) >> 0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, max(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))))) + ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.z + _GLF_IDENTITY(1, 0 + (1))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u)).x, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) >> 0u)), 1u * (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, 0u + (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, max(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)))))) + ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.z + _GLF_IDENTITY(1, 0 + (1))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id) ^ uvec4(0u, 0u, 0u, 0u)).x, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x) >> 0u)))), 1u, 0u)))) | 0u);
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.x = next_virtual_gid;
 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.x = GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_11next_virtual_gidsubgroup_idsubgroup_local_idvirtual_gid.x;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0), vec2(mat2x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0), vec2(mat4(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, sqrt(0.0), 1.0))) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_IDENTITY(((injectionSwitch))[1], clamp(((injectionSwitch))[1], ((injectionSwitch))[1], ((injectionSwitch))[1]))), vec2(_GLF_FUZZED(-78.29), _GLF_FUZZED((1.5 + 9.1))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))).y), bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), vec2(0.0, 0.0) + (injectionSwitch)).y))), clamp(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), vec2(0.0, 0.0) + (injectionSwitch)).y), clamp(clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), vec2(0.0, 0.0) + (injectionSwitch)).y), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), vec2(0.0, 0.0) + (injectionSwitch)).y), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), vec2(0.0, 0.0) + (injectionSwitch)).y))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(acosh(vec3(8.1, 88.28, -4846.4528)).yz) : (injectionSwitch)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - sqrt(vec2(0.0, 0.0)))).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), vec2(0.0, 0.0) + (injectionSwitch)).y))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))) + (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-8169.7241)), float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-8163.3305 - -8.9)), _GLF_FUZZED(-2860.9603)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), mix(vec2((vec2(0.0, 0.0) + (injectionSwitch))[0], _GLF_FUZZED(-51.80)), vec2(_GLF_FUZZED(5.9), (vec2(0.0, 0.0) + (injectionSwitch))[1]), bvec2(false, true)))).y))))), float(_GLF_FUZZED(-3.5)), bool(false)))))))
            {
             for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)) | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 ^ (1 ^ 1)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > (0 ^ (1 ^ 1)), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > (0 ^ (1 ^ 1)), (_injected_loop_counter > (0 ^ (1 ^ 1))) && true), false)))), ! (! (! (_GLF_IDENTITY(_injected_loop_counter > (0 ^ (1 ^ 1)), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > (0 ^ (1 ^ 1)), (_injected_loop_counter > (0 ^ (1 ^ 1))) && true), false)))))))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), ! _GLF_IDENTITY((! (! (false))), (_GLF_IDENTITY((! (! (false))), ! (! ((_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))) || _GLF_IDENTITY(false, true && (false))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)))).x], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(64, 64, 64)), _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, min(64, 64)), 64, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | 0)))))), ((_GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, min(64, 64)), 64, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | 0))))))) ^ 0) + 0), 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(512.872, -7260.1662)))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y, min(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y))) >> 0u)], 4, 64, 0);
 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.y = read;
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size, (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id) : GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size)).y;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.y = GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))]), clamp(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))]), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))]), mat2(1.0) * (vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))]))), vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))])))).y)))))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.y, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.y) ^ 0u);
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), mix(float(float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), float(_GLF_FUZZED(9.2)), bool(false))))), float(_GLF_FUZZED(4846.4178)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true))))))
          barrier();
        }
      }
     do
      {
       atomicStore(checker[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)).z, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}
