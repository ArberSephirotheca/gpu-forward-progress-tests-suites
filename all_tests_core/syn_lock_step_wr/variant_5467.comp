#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_17 {
 ivec4 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 uvec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_16 {
 bvec3 _f0;
 bool _f1;
 uint _f2;
 mat3 _f3;
 mat2x3 _f4;
 vec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 mat3 _f1;
 _GLF_struct_17 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_15 {
 mat2 _f0;
} ;

struct _GLF_struct_19 {
 _GLF_struct_15 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 uint workgroup_size;
 _GLF_struct_18 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
} ;

struct _GLF_struct_11 {
 ivec4 _f0;
 mat2 _f1;
 vec4 _f2;
 mat3 _f3;
 bool _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 bool _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 bvec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_6 {
 bvec4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_5 {
 bool _f0;
 vec4 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 bvec2 _f1;
 _GLF_struct_6 _f2;
 mat3 _f3;
 _GLF_struct_7 _f4;
 float _f5;
} ;

struct _GLF_struct_14 {
 _GLF_struct_8 _f0;
 bool _f1;
 _GLF_struct_10 _f2;
 uint next_virtual_gid;
 uvec4 _f3;
 _GLF_struct_13 _f4;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 mat4x3 _f1;
 mat2x3 _f2;
 mat2x4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_1 {
 float _f0;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 _GLF_struct_3 _f1;
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
} ;

struct _GLF_struct_0 {
 uint workgroup_base;
 mat2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) / (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7)))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (_GLF_IDENTITY(! (bool(_GLF_WRAPPED_IF_TRUE(true))), false || (! (bool(_GLF_WRAPPED_IF_TRUE(true)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (_GLF_IDENTITY(! (bool(_GLF_WRAPPED_IF_TRUE(true))), false || (! (bool(_GLF_WRAPPED_IF_TRUE(true)))))))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (_GLF_IDENTITY(! (bool(_GLF_WRAPPED_IF_TRUE(true))), false || (! (bool(_GLF_WRAPPED_IF_TRUE(true)))))))))))) && true)))
      {
       do
        {
         GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
          }
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))) & 1)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec2(0, 1)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) << 0)))))); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(abs(888.597)))) > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), abs(1.0), determinant(mat3(1.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0)))).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (((injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(bool((injectionSwitch.x > injectionSwitch.y))), false, true, false))))), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true)))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), abs(1.0), determinant(mat3(1.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0)))).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (((injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(bool((injectionSwitch.x > injectionSwitch.y))), false, true, false))))), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), abs(1.0), determinant(mat3(1.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0)))).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (((injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(bool((injectionSwitch.x > injectionSwitch.y))), false, true, false))))), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true))))))) && true))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), true))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), true))))))))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))), false || ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))))))))))))) && true)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(7, ~ (~ (7))))), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (~ (int(_GLF_IDENTITY(7, ~ (~ (7))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), max((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_4 _GLF_struct_replacement_4;
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED((750.994 * 649.614))), (false ? _GLF_FUZZED(-7841.6631) : _GLF_IDENTITY(float(_GLF_FUZZED((750.994 * 649.614))), (float(_GLF_FUZZED((750.994 * 649.614)))) - 0.0))), float(injectionSwitch.y), bool(true)))))))
  {
   GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.z = _GLF_IDENTITY(num_workgroup, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(num_workgroup), clamp(_GLF_IDENTITY(uint(num_workgroup), (uint(num_workgroup)) << 0u), uint(num_workgroup), uint(num_workgroup)))), (0u & (+ 93003u)) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(num_workgroup), clamp(_GLF_IDENTITY(uint(num_workgroup), _GLF_IDENTITY((uint(num_workgroup)), max((uint(num_workgroup)), (uint(num_workgroup)))) << 0u), uint(num_workgroup), uint(num_workgroup)))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(num_workgroup), clamp(_GLF_IDENTITY(uint(num_workgroup), _GLF_IDENTITY((uint(num_workgroup)) << 0u, (_GLF_IDENTITY((uint(num_workgroup)) << 0u, ((uint(num_workgroup)) << 0u) - 0u)) | 0u)), uint(_GLF_IDENTITY(num_workgroup, _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) ^ (num_workgroup))), uint(num_workgroup)))), clamp(uint(_GLF_IDENTITY(uint(num_workgroup), clamp(_GLF_IDENTITY(uint(num_workgroup), _GLF_IDENTITY((uint(num_workgroup)) << 0u, ((uint(num_workgroup)) << 0u) * (1u & 1u))), uint(num_workgroup), _GLF_IDENTITY(uint(num_workgroup), uint(uvec4(uint(num_workgroup), 0u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u)))))), uint(_GLF_IDENTITY(uint(num_workgroup), clamp(_GLF_IDENTITY(uint(num_workgroup), _GLF_IDENTITY((_GLF_IDENTITY(uint(num_workgroup), (uint(num_workgroup)) >> 0u)), ~ (~ ((_GLF_IDENTITY(uint(num_workgroup), (uint(num_workgroup)) >> 0u))))) << 0u), uint(num_workgroup), uint(num_workgroup)))), uint(_GLF_IDENTITY(uint(num_workgroup), clamp(_GLF_IDENTITY(uint(num_workgroup), (uint(num_workgroup)) << 0u), uint(num_workgroup), uint(num_workgroup)))))))))));
  }
 else
  {
  }
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_15(mat2(1.0)), mat4x2(1.0), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0))), float(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(min(vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2741.6496)), bool(false))), 1.0)), _GLF_IDENTITY(min(min(vec2(1.0, 1.0), vec2(1.0, 1.0)), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), (_GLF_IDENTITY(true ? min(min(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(1.0, 1.0)), min(vec2(1.0, 1.0), vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(true ? min(min(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(1.0, 1.0)), min(vec2(1.0, 1.0), vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch), vec2(_GLF_IDENTITY(mat2x3(true ? min(min(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(1.0, 1.0)), min(vec2(1.0, 1.0), vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch), 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x3(true ? min(min(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(1.0, 1.0)), min(vec2(1.0, 1.0), vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch), 0.0, 0.0, 1.0, 0.0)))))), true ? min(min(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(1.0, 1.0)), min(vec2(1.0, 1.0), vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch)))))), (false ? _GLF_FUZZED(vec2(227.780, 7474.5063)) : min(vec2(1.0, 1.0), vec2(1.0, 1.0)))))))), _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec4(gl_WorkGroupSize.x, 0u, 1u, 1u)), (_GLF_IDENTITY(uint(uvec4(gl_WorkGroupSize.x, 0u, 1u, 1u)), uint(uvec4(uint(uvec4(gl_WorkGroupSize.x, 0u, 1u, 1u)), 0u, 0u, 1u)))) - 0u)), _GLF_struct_18(_GLF_struct_16(bvec3(true), true, 1u, mat3(1.0), mat2x3(1.0), vec3(1.0), bvec4(true)), mat3(1.0), _GLF_struct_17(_GLF_IDENTITY(ivec4(1), _GLF_IDENTITY((ivec4(1)), ~ (~ ((ivec4(1))))) | (_GLF_IDENTITY(ivec4(1), (ivec4(1)) << ivec4(0, 0, 0, 0)))), mat2x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 1.0, log(1.0), 0.0, 0.0, abs(0.0), 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch.x, 1.0, log(1.0), 0.0, 0.0, abs(0.0), 1.0, 0.0)))))) < injectionSwitch.y)) && _GLF_IDENTITY((true), false || ((true))))), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | uvec4(0u, 0u, 0u, 0u))) << uvec4(0u, 0u, 0u, 0u))) + _GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u))), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))), 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u, 0u)))))) - uvec4(0u, 0u, 0u, 0u))), uvec4(1u)), ivec3(1)), uvec2(1u));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
  }
 else
  {
   _GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = _GLF_struct_replacement_19.workgroup_size;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)), false, false))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, true && ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)) && true)), (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (true ? vec2(injectionSwitch[0], injectionSwitch[1]) : _GLF_FUZZED(vec2(16.40, -7.8))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))[1])).x)) < injectionSwitch.y))) || false)))))
  {
   do
    {
     GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y = workgroup_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y, mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0), (max(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, ((1.0) - 0.0) * 1.0)), 1.0)) + 0.0)) : _GLF_FUZZED(-4.0)))));
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.y = _GLF_struct_replacement_0.workgroup_base;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)), _GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)))) * GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(96.12) : _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (true ? (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)) : _GLF_FUZZED((_injected_loop_counter | -78030)))), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
  }
 _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))) >> 0u)) << 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.y + _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, min(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id)).x + _GLF_IDENTITY(_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 & 1), ((1 & 1)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w = virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_8(_GLF_struct_5(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || false))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.2)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))), max(_GLF_IDENTITY(((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))), mix(vec4((((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))))[0], (((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))))[1], _GLF_FUZZED(-69.60), _GLF_FUZZED(6.3)), vec4(_GLF_FUZZED(2365.9117), _GLF_FUZZED(-9999.7075), (((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))))[2], (((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))))[3]), bvec4(false, false, true, true))), ((_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))))))) + vec4(0.0, 0.0, 0.0, 0.0)) * vec4(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), (false ? _GLF_FUZZED(vec4(-96.84, -6225.4218, 54.24, 498.542)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(mat2(vec4(1.0)))), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), (_GLF_IDENTITY(vec4(1.0), clamp(_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), vec4(1.0), vec4(1.0)))) * vec4(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-895.121)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))) + abs(vec2(0.0, 0.0))).y))))), 1.0))))), bvec2(true), _GLF_struct_6(bvec4(true), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))))), ivec2(0, 0) | _GLF_IDENTITY((ivec2(1)), _GLF_IDENTITY(ivec2(ivec2((ivec2(1)))), (false ? _GLF_FUZZED(ivec2(-98091, 37146)) : ivec2(ivec2((ivec2(1))))))))), mat3(1.0), _GLF_struct_7(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-503.427)), bool(false))) : _GLF_FUZZED(vec3(9.6, 91.48, 5.7)[1]))), 1.0))), bvec2(true), uvec2(1u)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0, min(_GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0, mix(float((_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0), float(_GLF_FUZZED(3.5)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0, (true ? (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0 : _GLF_FUZZED(-4.8))))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ((_GLF_IDENTITY(true, ! (! (true))))) && _GLF_IDENTITY(true, true && (true))), true, _GLF_IDENTITY(false, (false) || false)))))), _GLF_struct_10(_GLF_struct_9(uvec2(1u), true, _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (true ? ivec4(1) : _GLF_FUZZED(ivec4(-91457, -271, 12515, -27298)))), max(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (1))), ivec4(1)))) ^ ivec4(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) ^ 0), 0, 0)))), _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.y, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.y) / 1u) + _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id) | _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (_GLF_IDENTITY(uvec2(0u, 0u), clamp(uvec2(0u, 0u), uvec2(0u, 0u), uvec2(0u, 0u))))))), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, _GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) | 0u)), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(5u), uvec2(5u))) ^ _GLF_IDENTITY((uvec2(0u, 0u)), clamp((uvec2(0u, 0u)), _GLF_IDENTITY((uvec2(0u, 0u)), max((uvec2(0u, 0u)), (uvec2(0u, 0u)))), (uvec2(0u, 0u))))) ^ (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id)) : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), uvec2(0u, 0u) ^ (_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base))), uvec2(0u, 0u) ^ (_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id))), uvec2(1u, 1u) * (_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), uvec2(0u, 0u) ^ (_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id)))))) << uvec2(0u, 0u))) - uvec2(0u, 0u))) << uvec2(0u, 0u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec2(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, _GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(5u), uvec2(5u))) ^ _GLF_IDENTITY(_GLF_IDENTITY((uvec2(0u, 0u)), clamp((uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), _GLF_IDENTITY((uvec2(0u, 0u)), max((uvec2(0u, 0u)), (uvec2(0u, 0u)))), (_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) : uvec2(0u, 0u)))))), (_GLF_IDENTITY((uvec2(0u, 0u)), clamp((uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), _GLF_IDENTITY((uvec2(0u, 0u)), max((uvec2(0u, 0u)), (uvec2(0u, 0u)))), (_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) : uvec2(0u, 0u))))))) << uvec2(0u, 0u))) ^ (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id)) : _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id), uvec2(0u, 0u) ^ (_GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, (false ? _GLF_FUZZED(uvec2(67158u, 173910u)) : _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id) | (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id)))))))) - uvec2(0u, 0u))) << uvec2(0u, 0u))))) : _GLF_FUZZED(_GLF_IDENTITY(floatBitsToUint(injectionSwitch), ~ (~ (floatBitsToUint(injectionSwitch)))))))) << _GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u)))))).x + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, (_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / _GLF_IDENTITY(1u, min(1u, 1u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY((_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size), ((_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)) | uvec2(0u, 0u)) ^ uvec2(0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) ^ uvec2(0u, 0u)), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) ^ uvec2(0u, 0u)))))) | uvec2(0u, 0u)).x, (_GLF_struct_replacement_4.GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u) : _GLF_FUZZED(subgroup_size))) + _GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)), (_GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)), 0 | (max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))))) / 1), (max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))) >> (0 ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), ((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) - 0))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), ((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) - 0))), 0 + (int(int(_GLF_IDENTITY((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), ((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) - 0)))))) | (int(int(_GLF_IDENTITY((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), ((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) - 0)))))), 0 | (_GLF_IDENTITY((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (clamp(1, 1, 1))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), ((max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), ~ (~ (_GLF_IDENTITY(clamp(1, 1, 1), clamp(clamp(1, 1, 1), clamp(1, 1, 1), clamp(1, 1, 1))))))) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) / 1))) | (max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (true ? ~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))) : _GLF_FUZZED(-9153))), (_GLF_IDENTITY(~ (1), clamp(_GLF_IDENTITY(~ (1), (~ (1)) >> 0), ~ (1), _GLF_IDENTITY(~ (1), (~ (1)) | (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))))) << 0), ~ (1)))))) + 0)), min((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), min(_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1))), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (~ (1)) << 0), ~ (1)))) + 0)))) + 0), (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)) : _GLF_FUZZED(-52583)))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), (_GLF_IDENTITY(1, (_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), 1 * (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), min((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583)))))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52583))))))) | 0)) << 0))), (~ _GLF_IDENTITY((1), ((1)) | (0 ^ 0))) << 0), ~ (1)))) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) ^ (0 ^ 0)))) * 1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((vec3(-177.465, -28.46, 5.2) , -41447)) : ~ (1)))) << 0, max(_GLF_IDENTITY((~ (1)) << 0, clamp((~ (1)) << 0, (~ (1)) << _GLF_IDENTITY(0, max(0, 0)), (~ (1)) << 0)), (~ (1)) << 0))), ~ (1)))) + 0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-93945) : _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY((~ (1)) << 0, max(_GLF_IDENTITY((~ (1)) << 0, clamp((~ (1)) << 0, (~ (_GLF_IDENTITY(1, (1) - 0))) << 0, (~ (1)) << 0)), (~ (1)) << 0))), ~ (1)))) + 0)), int(ivec3((_GLF_IDENTITY(~ (1), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(_GLF_IDENTITY((~ (1)), ((~ (1))) * 1) << 0, max(_GLF_IDENTITY((~ (1)) << 0, clamp((~ (1)) << 0, (~ (1)) << 0, (~ (1)) << 0)), (_GLF_IDENTITY(~ (1), 0 + (_GLF_IDENTITY(~ (1), (~ (1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0))), ~ (1)))) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)), ((_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(_GLF_IDENTITY((~ (1)), ((~ (1))) * 1) << 0, max(_GLF_IDENTITY((~ (1)) << 0, clamp((~ (1)) << 0, (~ (1)) << 0, (~ (1)) << 0)), (_GLF_IDENTITY(~ (1), 0 + (_GLF_IDENTITY(~ (1), (~ (1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0))), ~ (1)))) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))))), 0, 0))), (false ? _GLF_FUZZED(-93945) : _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY((~ (1)) << 0, max(_GLF_IDENTITY((~ (1)) << 0, clamp((~ (1)) << 0, (~ (_GLF_IDENTITY(1, (1) - 0))) << 0, (~ (1)) << 0)), (~ (1)) << 0))), ~ (_GLF_IDENTITY(1, (1) | (1)))))) + 0)), int(ivec3((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), max(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(_GLF_IDENTITY((~ (1)), ((~ _GLF_IDENTITY((1), 0 | ((1))))) * 1) << 0, max(_GLF_IDENTITY(_GLF_IDENTITY((~ (1)) << 0, int(ivec2((~ (1)) << 0, 1))), clamp((~ (1)) << 0, (~ (1)) << 0, (~ (1)) << 0)), (_GLF_IDENTITY(~ _GLF_IDENTITY((1), ((1)) | 0), 0 + (_GLF_IDENTITY(~ (1), (~ (1)) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) << 0))), ~ (1)))) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)))), 0, 0)))) | 0)))))))) % GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.xy.x), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) ^ uvec4(0u, 0u, 0u, 0u)), _GLF_struct_13(_GLF_struct_11(ivec4(1), mat2(_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), vec4(1.0), mat3(1.0), true, ivec2(1)), _GLF_struct_12(bvec4(_GLF_IDENTITY(true, (true) || false)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))) && true)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (4480 & _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))) && true))))))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))) && true), _GLF_IDENTITY((bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true && ((bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
         atomicStore(buf[_GLF_struct_replacement_14.next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) >> 0))), _GLF_IDENTITY(min(4, 4), _GLF_IDENTITY((_GLF_IDENTITY(min(4, 4), (min(4, 4)) | (min(4, 4)))) ^ (1 ^ 1), int(ivec2((_GLF_IDENTITY(min(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 1 * (_GLF_IDENTITY(4, max(4, 4)))), 4)), 4), (min(4, 4)) | (min(4, 4)))) ^ (1 ^ 1), 1))))), 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint read = atomicLoad(buf[GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w], 4, _GLF_IDENTITY(64, max(64, 64)), 2);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     subgroupBarrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(checker[_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w, max(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w, 0u ^ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w)), 1u, 1u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w, 0u ^ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w)), 1u, 1u))))), 0u + (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basenum_workgroupvirtual_gid.w))))], read, 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), (float(_GLF_IDENTITY(float(injectionSwitch.y), (float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) / 1.0))) + 0.0))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false)))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
}
