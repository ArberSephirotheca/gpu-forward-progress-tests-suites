#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-75403) : int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))))))); _injected_loop_counter ++)
          {
           return;
          }
        }
       return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, ~ (~ (0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec4(_GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (1 ^ 1), 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
            {
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))) && true))
                return;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)), int(ivec4(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)), clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)))), 0, 0, 0)))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(940.443), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-751.904)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y))) / 1)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.8) : injectionSwitch.y))))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true))));
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))) || false))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))) || false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))) || false))))), true))), false, false))))))));
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) ^ 0u)))) + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) | 0)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-92.22)), float(injectionSwitch[1]), bool(true))))).y))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)))), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)), injectionSwitch)).y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, (6) | (6)))))), int(6)), (_GLF_IDENTITY(int(6), int(6))) * 1), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (0 | 0) ^ (6)), 6))), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_injected_loop_counter) ^ 0) != 0)) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 | (int(6)))) | (_GLF_IDENTITY(int(6), 0 ^ (int(6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, log(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec4(1.0, log(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED(vec4(659.673, 32.41, -3276.8418, 48.70)))))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) - vec2(0.0, 0.0)), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, length(vec3(0.0, 0.0, 0.0)) + (1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(1.0, 1.0)))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(_GLF_IDENTITY(abs(1.0), float(mat2x4(abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(3.8, 2.4)))), vec2(0.0, 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), mix(float(_GLF_FUZZED(-4667.3482)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), bool(true))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)) : _GLF_FUZZED(5403.8964))))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(_GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-858.049)), bool(false))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), max(float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(259.124)))), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.2) : 1.0)), 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.5)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)), (float(mat2x3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (true ? mat4(0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat4(-9992.7587, -9.8, 723.319, -3064.4099, 0.1, 4483.6503, 5.5, -4.2, -826.323, 9.4, -3272.0061, 8642.6313, -87.88, 5.3, -7.0, -3.1)))))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0))) - 0.0)))), 1.0))) * _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (false ? _GLF_FUZZED(vec2(391.518, 9.4)) : _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (true ? _GLF_IDENTITY(sqrt(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8011.3889)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))))), max(sqrt(vec2(1.0, 1.0)), sqrt(vec2(1.0, 1.0)))) : _GLF_FUZZED(vec2(-9.6, _GLF_IDENTITY(5.0, mix(float(5.0), float(_GLF_FUZZED(8.6)), bool(false))))))))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))) : _GLF_FUZZED(roundEven(_GLF_IDENTITY(3.8, max(_GLF_IDENTITY(3.8, _GLF_IDENTITY(float(mat4(3.8, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0)), mix(float(float(mat4(3.8, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0))), float(_GLF_FUZZED(5.7)), bool(false)))), _GLF_IDENTITY(3.8, (true ? 3.8 : _GLF_FUZZED(-433.325))))))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * abs(1.0)), 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(55.44)), float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0), (mat4x3(0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0)) * mat4(1.0))))), bool(true))), 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (mat3x4(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)) + mat3x4(_GLF_IDENTITY(0.0, (0.0) / cos(0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0)), 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0), (mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)) * mat4(1.0))), clamp(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0), (mat4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0), mix(vec4((vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0))[0], (vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0))[1], (vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0))[2], _GLF_FUZZED(-1.5)), vec4(_GLF_FUZZED(-23.96), _GLF_FUZZED(4862.1719), _GLF_FUZZED(823.731), (vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0))[3]), bvec4(false, false, false, true))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)) * mat4(1.0))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0), (mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)) * mat4(1.0))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 1.0), (mat4(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 1.0)) * mat4(1.0)))))), 1.0)), 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(500.231)), bool(false))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9345.7595) : 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(sign(-9.7)) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0), mat2x4(_GLF_IDENTITY(mat4(mat2x4(1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), transpose(transpose(_GLF_IDENTITY(mat4(mat2x4(1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)), (true ? mat4(mat2x4(1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) : _GLF_FUZZED(mat4(-473.641, -4.4, -3.5, 3.9, 281.439, -82.47, 99.22, 87.73, 8327.5492, 8.5, 53.12, -3111.4567, 991.433, -6735.2168, 640.973, 9.5))))))))))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6137.3646) : 1.0)))), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(9258.8651, 9.3)))))))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), float(1.0), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), _GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), float(1.0), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), float(1.0), bool(true))), min(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1.6)), 1.0 * (float(_GLF_FUZZED(1.6)))), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.6)), float(1.0), bool(true)))))))))))))) * sqrt(vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), _GLF_IDENTITY(mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(9.0), _GLF_IDENTITY(((injectionSwitch))[1], (true ? ((injectionSwitch))[1] : _GLF_FUZZED(smoothstep(-1.4, -483.535, -8.0))))), vec2(((injectionSwitch))[0], _GLF_FUZZED((-0.9))), bvec2(true, false)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-553.827))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(50.22)), float(1.0), bool(true))))))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) - determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), (false ? _GLF_FUZZED((- mat4(5.4, -7.0, 5.6, -4725.9017, -4854.4666, -25.71, 1452.1883, -7.0, -4.8, 3781.3363, -6792.6999, 700.577, 23.67, 3196.5125, 1182.8118, -7403.0090))) : mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), 1.0))) * _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(_GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(sqrt(vec2(1.0, 1.0)), _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), vec2(mat2x3(sqrt(vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0))))), sqrt(vec2(1.0, 1.0)))))))[0], _GLF_FUZZED(-1.5)), vec2(_GLF_FUZZED(-2.7), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(1.0, 1.0)))))[1]), bvec2(false, true)), clamp(mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(9.0), _GLF_IDENTITY(((injectionSwitch))[1], (true ? ((injectionSwitch))[1] : _GLF_FUZZED(smoothstep(-1.4, -483.535, -8.0))))), vec2(((injectionSwitch))[0], _GLF_FUZZED((-0.9))), bvec2(true, false)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-553.827))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(50.22)), float(1.0), bool(true))))))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) - determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), (false ? _GLF_FUZZED((- mat4(5.4, -7.0, 5.6, -4725.9017, -4854.4666, -25.71, 1452.1883, -7.0, -4.8, 3781.3363, -6792.6999, 700.577, 23.67, 3196.5125, 1182.8118, -7403.0090))) : mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), 1.0))) * _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(_GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(sqrt(vec2(1.0, 1.0)), _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), vec2(mat2x3(sqrt(vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0))))), sqrt(vec2(1.0, 1.0)))))))[0], _GLF_FUZZED(-1.5)), vec2(_GLF_FUZZED(-2.7), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(1.0, 1.0)))))[1]), bvec2(false, true)), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(9.0), _GLF_IDENTITY(((injectionSwitch))[1], (true ? ((injectionSwitch))[1] : _GLF_FUZZED(smoothstep(-1.4, -483.535, -8.0))))), vec2(((injectionSwitch))[0], _GLF_FUZZED((-0.9))), bvec2(true, false)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-553.827))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(50.22)), float(1.0), bool(true))))))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) - determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), (false ? _GLF_FUZZED((- mat4(5.4, -7.0, 5.6, -4725.9017, -4854.4666, -25.71, 1452.1883, -7.0, -4.8, 3781.3363, -6792.6999, 700.577, 23.67, 3196.5125, 1182.8118, -7403.0090))) : mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), 1.0))) * _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(_GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(sqrt(vec2(1.0, 1.0)), _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), vec2(mat2x3(sqrt(vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0))))), sqrt(vec2(1.0, 1.0)))))))[0], _GLF_FUZZED(-1.5)), vec2(_GLF_FUZZED(-2.7), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(1.0, 1.0)))))[1]), bvec2(false, true)), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(9.0), _GLF_IDENTITY(((injectionSwitch))[1], (true ? ((injectionSwitch))[1] : _GLF_FUZZED(smoothstep(-1.4, -483.535, -8.0))))), vec2(((injectionSwitch))[0], _GLF_FUZZED((-0.9))), bvec2(true, false)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-553.827))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(50.22)), float(1.0), bool(true))))))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) - determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), (false ? _GLF_FUZZED((- mat4(5.4, -7.0, 5.6, -4725.9017, -4854.4666, -25.71, 1452.1883, -7.0, -4.8, 3781.3363, -6792.6999, 700.577, 23.67, 3196.5125, 1182.8118, -7403.0090))) : mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), 1.0))) * _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(_GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), min(sqrt(vec2(1.0, 1.0)), _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), vec2(mat2x3(sqrt(vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0))))), sqrt(vec2(1.0, 1.0)))))))[0], _GLF_FUZZED(-1.5)), vec2(_GLF_FUZZED(-2.7), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0))) * sqrt(vec2(1.0, 1.0)))))[1]), bvec2(false, true))))))))).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), true, false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false)))) || false)) && true))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))), false, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))), false, true)), false)))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-89.84, 37.01)))))).x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true)))) || false)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.7)), float(injectionSwitch.y), bool(true))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.7)), float(injectionSwitch.y), bool(true)))))) && true)) || false))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true)))) || false, ((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, (false) || false), true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED(4257.8437)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))), _GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (false)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true)) || false) || false))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false, true, true)))) || false) && true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((13.87 * (true ? -630.949 : 9459.1481))), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
  return;
 do
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1))) || false), true, false))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), false || ((! (false)))))), false || (! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), false || ((! (false)))))))))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
    continue;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), (! (_injected_loop_counter != 0)) || false)))), false || (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), (! (_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0))))) || false))))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, (1 & 1) / 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != ((0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (_GLF_IDENTITY(39259 / -97469, clamp(_GLF_IDENTITY(39259 / -97469, max(39259 / -97469, 39259 / -97469)), 39259 / -97469, 39259 / -97469)))))) | 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != ((0 & _GLF_IDENTITY(_GLF_IDENTITY((39259 / _GLF_IDENTITY(-97469, (-97469) - 0)), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), (_GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469)))) | 0)) | 0), (_injected_loop_counter != ((_GLF_IDENTITY(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | (_GLF_IDENTITY((39259 / -97469), min((_GLF_IDENTITY(39259 / -97469, clamp(_GLF_IDENTITY(39259 / -97469, 0 | (39259 / -97469)), 39259 / -97469, 39259 / -97469))), (39259 / -97469))))), (_GLF_IDENTITY(39259, (39259) / 1) / _GLF_IDENTITY(-97469, (false ? _GLF_FUZZED(67859) : _GLF_IDENTITY(-97469, max(-97469, -97469))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((_GLF_IDENTITY(39259, max(39259, 39259)) / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1))), ivec3(1, 1, 1) * (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY(_GLF_IDENTITY((39259 / -97469), ((39259 / -97469)) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), 0 + (_GLF_IDENTITY((39259 / -97469), _GLF_IDENTITY(0 | ((39259 / -97469)), (0 | ((39259 / -97469))) >> (0 & 70970))))), (39259 / -97469))), 0, 1))), min(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1))), _GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((_GLF_IDENTITY(39259, (39259) | 0) / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / _GLF_IDENTITY(-97469, (true ? -97469 : _GLF_FUZZED(10721)))))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((_GLF_IDENTITY(39259 / -97469, (0 | 0) ^ (_GLF_IDENTITY(39259 / -97469, (39259 / -97469) * 1)))), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1)))))))), min(int(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / _GLF_IDENTITY(-97469, int(ivec4(_GLF_IDENTITY(-97469, (-97469) | _GLF_IDENTITY((-97469), ((-97469)) / (1 & 1))), 0, 0, 0)))))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((_GLF_IDENTITY(39259 / -97469, int(int(39259 / -97469)))), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY(_GLF_IDENTITY((39259 / -97469), min((39259 / -97469), (_GLF_IDENTITY(39259 / -97469, max(39259 / -97469, _GLF_IDENTITY(39259 / -97469, 0 | (39259 / -97469))))))), 0 | ((39259 / -97469))), (_GLF_IDENTITY(39259 / -97469, 0 | (39259 / -97469))))), 0, 1), clamp(ivec3(_GLF_IDENTITY(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), int(int(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469)))))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1)))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / _GLF_IDENTITY(-97469, (false ? _GLF_FUZZED(89725) : -97469))))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), _GLF_IDENTITY(0, (0) / 1) | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1))), ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / _GLF_IDENTITY(-97469, (false ? _GLF_FUZZED(89725) : -97469))))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), _GLF_IDENTITY(0, (0) / 1) | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1)))))), int(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((_GLF_IDENTITY(39259, (39259) / 1) / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) / 1), int(0))))))))), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), _GLF_IDENTITY(0, (0) << 0), 1)))), int(_GLF_IDENTITY(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), clamp(ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((_GLF_IDENTITY(39259 / -97469, (true ? _GLF_IDENTITY(39259 / -97469, (39259 / -97469) | (39259 / -97469)) : _GLF_FUZZED(-47410)))))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1), ivec3(0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), 0, 1)))))))))) | 0)) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_injected_loop_counter != ((0 & _GLF_IDENTITY((39259 / _GLF_IDENTITY(-97469, min(-97469, -97469))), max(_GLF_IDENTITY(_GLF_IDENTITY((39259 / -97469), (_GLF_IDENTITY((39259 / -97469), ((39259 / -97469)) | 0)) | (_GLF_IDENTITY((39259 / -97469), ((39259 / -97469)) | ((39259 / -97469))))), 0 | ((_GLF_IDENTITY(39259 / -97469, min(39259 / -97469, 39259 / -97469))))), (39259 / -97469)))) | 0), false, true)), (bool(bvec3(_injected_loop_counter != ((0 & _GLF_IDENTITY((39259 / _GLF_IDENTITY(-97469, min(-97469, -97469))), max(_GLF_IDENTITY((39259 / -97469), 0 | ((_GLF_IDENTITY(39259 / -97469, min(39259 / -97469, 39259 / -97469))))), (39259 / -97469)))) | 0), false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bvec3(_injected_loop_counter != (_GLF_IDENTITY((0 & _GLF_IDENTITY((_GLF_IDENTITY(39259 / -97469, (39259 / -97469) >> 0)), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469)))), ((0 & _GLF_IDENTITY(_GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))), (_GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469)))) >> 0))) | (_GLF_IDENTITY((0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), _GLF_IDENTITY(0 | ((39259 / -97469)), ~ (~ (_GLF_IDENTITY(0 | ((39259 / -97469)), (0 | ((39259 / -97469))) - 0))))), (39259 / -97469)))), ~ (~ ((0 & _GLF_IDENTITY((39259 / -97469), max(_GLF_IDENTITY((39259 / -97469), 0 | ((39259 / -97469))), (39259 / -97469))))))))) | 0), false, true))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) ^ 0), 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))), (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false, true && (false))))))))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)), (bool(bvec4(false, true, false, true))) || false))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3197.1586)), bool(false))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false)))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false)), true, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))) || (_GLF_DEAD(false)), true, true, true))) && true)))))))))))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (virtual_gid) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))))) >> 0u)))), (true ? (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (virtual_gid) : _GLF_FUZZED(subgroup_id))) >> 0u)))) : _GLF_FUZZED(workgroup_size)))))], uint(uvec2(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], clamp(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], _GLF_IDENTITY(uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], (0u | 0u), 1u, 1u)), (0u & 153640u) | (uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], (0u | 0u), 1u, 1u)))))) | 0u))), 0u))), 4, 64, 0);
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u)) + uvec2(0u, 0u))) + uvec2(0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u)) + uvec2(0u, 0u))) + uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u)) + uvec2(0u, 0u))) + uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), clamp(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))))), 1u)) + uvec2(0u, 0u))) + uvec2(0u, 0u)))))), max(_GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) + 0u), (virtual_gid))), _GLF_IDENTITY((virtual_gid), max(_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) << 0u), ((virtual_gid)) + 0u), (virtual_gid))))))) | (virtual_gid))], read, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(1402) : _GLF_IDENTITY(4, clamp(4, 4, 4)))), 64, 4);
 if(_GLF_DEAD(false))
  return;
}
