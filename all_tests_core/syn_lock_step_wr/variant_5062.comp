#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 ivec4 _f0;
 vec2 _f1;
 mat4 _f2;
 bvec3 _f3;
 float _f4;
 mat2 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_1 {
 int _f0;
 vec3 _f1;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 bvec3 _f1;
 mat4 _f2;
 int _f3;
 uvec4 _f4;
 bvec2 _f5;
 mat2x4 _f6;
 uint subgroup_id;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 _GLF_struct_2 _f1;
 mat3x2 _f2;
 _GLF_struct_4 _f3;
 mat4x3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat4(1.0), _GLF_struct_2(_GLF_struct_0(mat4x3(1.0), bvec3(true), mat4(1.0), 1, uvec4(1u), bvec2(true), mat2x4(1.0), gl_SubgroupID), _GLF_struct_1(1, vec3(1.0))), mat3x2(1.0), _GLF_struct_4(_GLF_struct_3(ivec4(1), vec2(1.0), mat4(1.0), bvec3(true), 1.0, mat2(1.0))), mat4x3(1.0));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_5._f1._f0.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_5._f1._f0.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
