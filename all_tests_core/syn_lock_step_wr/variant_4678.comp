#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))) && true), false || (! (false))))), (false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false)))))))), ! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false)))))))))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false)))))))), ! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false))))))))))))) && true)))) && true), false || (! (false)))))) || false)))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))) || (false))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)))), bool(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)))), false))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), int(5))))) / 1))), clamp(_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) - 0)), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))) ^ 0)), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_injected_loop_counter), min(_GLF_IDENTITY((_injected_loop_counter), 0 | ((_injected_loop_counter))), _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) + 0)))))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)) < _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))) | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(((1 | 1) & _GLF_IDENTITY(((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), int(5))), min(((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) >> 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), int(5))), ((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 ^ (1)), 1)), 1)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) << 0), int(5)))))), clamp(_GLF_IDENTITY(((1 | 1) & (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) ^ (0 << _GLF_IDENTITY(int(2), int(2))))))))), clamp((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) ^ (0 << _GLF_IDENTITY(int(2), int(2))))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) ^ (0 << _GLF_IDENTITY(int(2), int(2))))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) ^ (0 << _GLF_IDENTITY(int(2), int(2))))))))))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), ((_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(1 | 1, clamp(_GLF_IDENTITY(1 | 1, int(int(1 | 1))), 1 | 1, 1 | 1))) >> 0)) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))) ^ 0), min(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, (1 | 1) | (_GLF_IDENTITY(1 | 1, 0 | (1 | 1))))) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(96634) : 5))), int(5)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))) >> 0)), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(_injected_loop_counter) : int(5))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))))) | 0), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) | (int(5)))), int(ivec4((_GLF_IDENTITY(int(5), (int(5)) | (int(5)))), 0, 0, 1)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (5))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), clamp((1 << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), (true ? (1 << _GLF_IDENTITY(int(5), int(5))) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, min(5, 5)))) | (int(5))))), int(5))))))), max((_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (5))), (int(5)) | (int(5)))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))), int(5))))))), (_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | _GLF_IDENTITY(0, (0) >> ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))), ((_GLF_IDENTITY(1, 0 + (1)) | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))), int(5))))))))), _GLF_IDENTITY((_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (5) - 0), _GLF_IDENTITY(5, (5) << 0)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 | (5))) | (5)))))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))))), (((1 | 1) & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec3(int(5), 1, 0))), 1 * (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))), int(5))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) >> 0)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(_GLF_IDENTITY(1, 0 | (1)) | 1, 1 | 1))) & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), 1 * (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) << 0)))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY((((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0, (_GLF_IDENTITY((((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0, ~ (~ ((((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0)))) | 0)), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(5, 0, 1, 0)), 0 | (int(ivec4(5, 0, 1, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) ^ 0) | (int(5))))), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(ivec4(-12527, -14157, 11396, 43346)[3]) : int(5))))))))), ~ (~ ((_GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), 0, 0), (ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1))) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), 0, 0)) - ivec3(0, 0, 0)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))), int(5))))))))))))))) ^ 0), _GLF_IDENTITY(((1 | 1) & _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 | 1) & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(5), int(5))), max(_GLF_IDENTITY(int(1 << _GLF_IDENTITY(int(5), int(5))), (int(1 << _GLF_IDENTITY(int(5), int(5)))) - 0), int(1 << _GLF_IDENTITY(int(5), int(5)))))))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) | 0, ~ (~ (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) | 0))))), (~ (_GLF_IDENTITY((1 | 1) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((1 | 1) & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) | 0))) >> _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(1 | 1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1 | 1))) << 0)) & _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5)))))))), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-22147) : 5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-22147) : 5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), 1, 1, 1), ivec4(0, 0, 0, 0) | (ivec4(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-22147) : 5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), 1, 1, 1)))), (true ? int(_GLF_IDENTITY(ivec4(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-22147) : 5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), 1, 1, 1), ivec4(0, 0, 0, 0) | (ivec4(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-22147) : 5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), 1, 1, 1)))) : _GLF_FUZZED(_injected_loop_counter)))), 0, 0), (ivec3(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | 0)) << 0)), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5)))))))) | (_GLF_IDENTITY(int(5), int(5))))), 0, 0)) | _GLF_IDENTITY((ivec3(1, 1, 1) ^ ivec3(1, 1, 1)), ((ivec3(1, 1, 1) ^ ivec3(1, 1, 1))) - ivec3(0, 0, 0)))))), (((1 | 1) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (int(_GLF_IDENTITY(5, (5) | 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | 0)), (int(_GLF_IDENTITY(5, (5) | 0))) ^ 0))))) >> _GLF_IDENTITY(int(5), int(5))))) | 0), ((1 | 1) & ((_GLF_IDENTITY(1, int(ivec3(1, 1, 0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) - 0)) - 0), int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), ((1 | 1) & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))) + (int(5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))) ^ 0)))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.3)), bool(false))), exp(0.0), 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0)), sin(0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.0)), bool(false))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0)))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.2)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false)))))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false)), (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))) - 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bvec3(bool(bvec2((false), false)), false, true))))) || false) && true), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true))), false)), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(false || (_GLF_IDENTITY(false, (false) && true)), true, false)))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(false || (_GLF_IDENTITY(false, (false) && true)), true, false)))), false), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(false || (_GLF_IDENTITY(false, (false) && true)), true, false)))), false), false), false)))))), _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 1u), max(uvec2(subgroup_local_id, 1u), uvec2(subgroup_local_id, 1u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) || false)))
      barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-81.84), clamp(_GLF_FUZZED(-81.84), _GLF_IDENTITY(_GLF_FUZZED(-81.84), mix(float(_GLF_FUZZED(-81.84)), float(_GLF_FUZZED(float(true))), bool(false))), _GLF_FUZZED(-81.84))))))) < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(-30248 & int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(4.6) : _GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (-30248 & int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))), min((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))))) ^ _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))), min((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(bitfieldInsert(-11059, -4198, _injected_loop_counter, _injected_loop_counter))))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))) | _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, 1 * (0)), 1, 1))))))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), (false ? _GLF_FUZZED((atomicExchange(_injected_loop_counter, 35992) / 90721)) : (1))) | 0)))))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0))), int(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), 1)), 1, _GLF_IDENTITY(1, (1) | 0))))))))), min((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(67848) : _GLF_IDENTITY(1, max(1, 1)))), 1)), clamp(1, 1, _GLF_IDENTITY(1, (1) | 0)))))) ^ 0)) >> 0, _GLF_IDENTITY((false ? _GLF_FUZZED(19705) : (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))), ~ (~ (_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0)))))))))))), ((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))), ~ (~ (_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))))))))) | 0), min((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0))), max(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0))), (true ? _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0))) : _GLF_FUZZED(65022)))))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)))) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), 0 | ((~ (_GLF_IDENTITY(1, (1) | 0))))), ((~ (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, 0 + (0)))))) * 1))))))))) ^ 0)) >> 0), max((false ? _GLF_FUZZED(_GLF_IDENTITY(19705, (19705) | (_GLF_IDENTITY(19705, (19705) | (19705))))) : (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec4((1), 1, 0, 0)), 0 + (_GLF_IDENTITY(int(ivec4((1), 1, 0, 0)), min(int(ivec4((1), 1, 0, 0)), int(ivec4((1), 1, 0, 0))))))) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))), (clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))), ~ (~ (~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0)))))))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ _GLF_IDENTITY((~ ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(55231)))) | 0))))), clamp((~ ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(55231)))) | 0))))), _GLF_IDENTITY((~ ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(55231)))) | 0))))), min((~ ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(55231)))) | 0))))), (~ ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(55231)))) | 0))))))), (~ ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(55231)))) | 0))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1)) / 1)))))) + 0))))) ^ 0)) >> 0), _GLF_IDENTITY((false ? _GLF_FUZZED(19705) : (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0)))))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))) ^ 0)))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec3(1, 1, 1))), 1))) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), ~ (~ ((1)))), (1))) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(int(1))))), (1) | 0)))) * 1))))))))) ^ 0)) >> 0), max((false ? _GLF_FUZZED(19705) : (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))) ^ 0)) >> 0), _GLF_IDENTITY((false ? _GLF_FUZZED(19705) : (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))), (false ? _GLF_FUZZED(-49715) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))), 0, 0, 1))))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) << 0), clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))))) ^ 0)) >> 0), 0 ^ ((false ? _GLF_FUZZED(19705) : (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)), (0) << 0), _GLF_IDENTITY(clamp((1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0)), (clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(70944) : 1))))) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0), (1) | _GLF_IDENTITY(0, (0) << 0))) * 1)))))), min((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) | 0)))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ~ (~ ((~ (_GLF_IDENTITY(1, (1) | 0))))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | 0))), ((~ (_GLF_IDENTITY(1, (1) | 0)))) * 1))))))))) ^ 0)) >> 0)))))))))) ^ 0)), 4, 64, 4);
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 0.0), mix(vec2(_GLF_FUZZED(-699.475), _GLF_FUZZED(6753.0217)), vec2((vec2(injectionSwitch.x, 0.0))[0], (vec2(injectionSwitch.x, 0.0))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(554.087), _GLF_FUZZED(-428.275)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = ((0 | _GLF_IDENTITY(0, (0 & 27101) ^ (0))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(3, 3))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))) && true)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(42.84, -6.4)) : injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) + 0)), int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9.9)), bool(false))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.7))))) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), float(_GLF_FUZZED((true ? -1313.8547 : 4.6))), bool(false))), 0.0)) + _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(6352.4547) : (injectionSwitch.y)))) : _GLF_FUZZED(-6390.9650)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, ~ (~ (64))))), 2);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     subgroupBarrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.7), _GLF_FUZZED(-9502.3525)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * sqrt(vec2(1.0, 1.0)))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 0)))) - 0)], (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false) ? (injectionSwitch)[0] : _GLF_FUZZED(16.37))), (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = ((1 ^ 0) | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0)))), true && (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0))), (_GLF_IDENTITY(min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0))), 0 + (min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), min(0, 0)))))) * 1)))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (true ? vec2(injectionSwitch.x, 0.0) : _GLF_FUZZED(vec2(-45.80, 559.329)))))) > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(5))))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) ^ 0)))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 0, 0)))) ^ _GLF_IDENTITY(0, ~ (~ (0)))) != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
              {
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) * 1.0)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)), bool(bvec4(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)), false, false, false)))) && true)), false, true))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), false), false)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))), false), false))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, length(0.0), abs(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))))).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0)))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.2)), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))), bool(true)))), float(mat3(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.2)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(true), (bool(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (true ? clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.2), clamp(_GLF_FUZZED(9.2), _GLF_FUZZED(9.2), _GLF_FUZZED(9.2)))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.3)), bool(false))), max(injectionSwitch.y, injectionSwitch.y))), bool(true)))) : _GLF_FUZZED(-5239.8199))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), clamp(int(ivec4(4, 1, 0, 0)), int(_GLF_IDENTITY(ivec4(4, 1, 0, 0), ivec4(0, 0, 0, 0) + (ivec4(4, 1, 0, 0)))), int(_GLF_IDENTITY(ivec4(4, 1, _GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (0) | (0)), 0))), 0), ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (ivec4(4, 1, _GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (0) | (0)), 0))), 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, clamp(4, 4, 4)))), 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, clamp(4, 4, 4))))))), max(max(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(4, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(abs(17916)) : 1))))), 0, 0)), _GLF_IDENTITY(clamp(int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, _GLF_IDENTITY(0, ~ (~ (0))), 0))), (_GLF_IDENTITY(clamp(int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, _GLF_IDENTITY(0, ~ (~ (0))), 0))), (true ? clamp(int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) : _GLF_FUZZED(_injected_loop_counter)))) | (clamp(int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, _GLF_IDENTITY(0, ~ (~ (0))), 0)))))), int(ivec3(_GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), clamp(int(ivec4(_GLF_IDENTITY(4, (4) - 0), 1, 0, 0)), _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), 0 | (int(ivec4(4, 1, 0, 0)))), int(_GLF_IDENTITY(ivec4(4, 1, 0, 0), max(ivec4(4, 1, 0, 0), ivec4(4, 1, 0, 0)))))), 1, 1)))), 4), max(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), clamp(int(ivec4(4, 1, 0, _GLF_IDENTITY(0, (0) << 0))), int(ivec4(4, 1, 0, 0)), int(ivec4(4, 1, 0, 0))))), 4)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
