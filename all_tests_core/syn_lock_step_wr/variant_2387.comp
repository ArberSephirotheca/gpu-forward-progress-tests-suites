#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 uvec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 uvec4 _f1;
 uvec2 _f2;
 vec3 _f3;
 mat2x4 _f4;
 vec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat2x4 _f1;
 ivec2 _f2;
 _GLF_struct_1 _f3;
 mat4x3 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 mat4 _f1;
 uint subgroup_local_id;
 mat3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 vec3 _f2;
 _GLF_struct_3 _f3;
 vec2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_0(mat2(1.0), mat4(1.0), gl_SubgroupInvocationID, mat3(1.0), ivec3(1)), vec4(1.0), vec3(1.0), _GLF_struct_3(mat4(1.0), mat2x4(1.0), ivec2(1), _GLF_struct_1(bvec4(true), uvec4(1u), uvec2(1u), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat2x4(1.0), vec3(1.0), mat4x3(1.0)), mat4x3(1.0), _GLF_struct_2(uvec2(1u), 1u)), vec2(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u ^ (gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_4._f0.subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_4._f0.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_4._f0.subgroup_local_id, (_GLF_struct_replacement_4._f0.subgroup_local_id) - 0u)) << 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_4._f0.subgroup_local_id), (true ? ~ (_GLF_struct_replacement_4._f0.subgroup_local_id) : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((~ (~ (_GLF_struct_replacement_4._f0.subgroup_local_id))), (false ? _GLF_FUZZED((subgroup_id / subgroup_size)) : (~ (~ (_GLF_struct_replacement_4._f0.subgroup_local_id))))) ^ 0u)))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))) >> 0u) + subgroup_id * subgroup_size + ((_GLF_struct_replacement_4._f0.subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) + 0), 0);
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
