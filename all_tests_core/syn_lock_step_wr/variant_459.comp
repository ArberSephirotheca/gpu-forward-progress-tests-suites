#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) << 0))
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << (uvec3(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u)), 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(_GLF_IDENTITY(7u, uint(uvec4(_GLF_IDENTITY(7u, max(7u, _GLF_IDENTITY(7u, clamp(7u, 7u, 7u)))), (1u | 0u), 0u, 1u))))))).x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(min(gl_WorkGroupSize.x, gl_WorkGroupSize.x), (false ? _GLF_FUZZED(clamp(_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, max(num_workgroup, num_workgroup)), (num_workgroup) / 1u), uvec4(103066u, _GLF_IDENTITY(197289u, 0u | _GLF_IDENTITY((_GLF_IDENTITY(197289u, clamp(197289u, 197289u, 197289u))), ((_GLF_IDENTITY(197289u, clamp(197289u, 197289u, 197289u)))) | 0u)), 178387u, 1064u)[1], 113251u)) : min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))) && true); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u + (uint(3u))), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u))))))), (uint(uvec2(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u + (uint(3u))), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u)))))))) | (uint(uvec2(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u + (uint(3u))), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(1u, (1u) | (1u)) * (uint(3u)))))))))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(workgroup_id)))) | (workgroup_id));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, int(ivec3(6, 1, 1))), _GLF_IDENTITY(6, (_GLF_IDENTITY(6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(65529) : 6))) | (6))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))), clamp(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))), uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))), uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))))))))))) | (uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, _GLF_IDENTITY(23837u, (23837u) >> 0u))) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))))))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, 23837u)) : _GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec2(0u, 0u))) >> uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, 23837u)) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), (min(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, 23837u)) : _GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec2(0u, 0u))) >> uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, 23837u)) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | (min(uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, 23837u)) : _GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec2(0u, 0u))) >> uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(uvec2(132109u, 23837u)) : uvec2(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) / (_GLF_IDENTITY((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(6u), uint(6u))), 0u ^ ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))))))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), 1u)), clamp(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(workgroup_size) : workgroup_base)), 0u ^ (workgroup_base)), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, (0u) >> 0u) ^ (workgroup_base)), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), 1u, 1u))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), ~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | _GLF_IDENTITY(((~ (workgroup_base))), ~ (~ (((~ (workgroup_base)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), ~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | _GLF_IDENTITY(((~ (workgroup_base))), ~ (~ (((~ (workgroup_base)))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), ~ _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | _GLF_IDENTITY(((~ (workgroup_base))), ~ (~ (((~ (workgroup_base)))))))))) + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) | (~ (int(1)))))))) | (1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) << 0)), (~ (_GLF_IDENTITY(1, (1) << 0))) | 0)))) % subgroup_size), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u), 1u)))) ^ 0u) % subgroup_size), _GLF_IDENTITY(clamp(((subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u)), ((subgroup_local_id + 1) % subgroup_size)), (true ? _GLF_IDENTITY(clamp(((subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u)), ((subgroup_local_id + 1) % subgroup_size)), (true ? clamp(((subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u)), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)) : _GLF_FUZZED(workgroup_base))) : _GLF_FUZZED((subgroup_local_id | workgroup_id))))), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u), (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, (1u & 1u))), clamp(uint(uvec3((subgroup_local_id + 1), 0u, (1u & 1u))), uint(uvec3((subgroup_local_id + 1), 0u, (1u & 1u))), _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, (1u & 1u))), 0u + (uint(uvec3((subgroup_local_id + 1), 0u, (1u & 1u)))))))) % subgroup_size)))), (clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u), 1u)))) ^ 0u) % subgroup_size), clamp(((subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u)), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))) | (clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))))), ((subgroup_local_id + 1)) | 0u), 1u)))) ^ 0u) % subgroup_size), clamp(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 | (1)), min(subgroup_local_id + _GLF_IDENTITY(1, 0 | (1)), subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) >> 0u)), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), clamp(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), max((ivec3(1, 0, 0)) | (ivec3(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-5873))), 0)), (ivec3(1, 0, 0)) | (ivec3(1, 0, 0)))))))), uint(uvec3(uint(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), max((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), (ivec3(1, 0, 0)) | (ivec3(1, 0, 0)))), min(_GLF_IDENTITY((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), max((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), (ivec3(1, 0, 0)) | (ivec3(1, 0, 0)))), _GLF_IDENTITY((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), max((ivec3(1, 0, 0)) | (ivec3(1, 0, 0)), (ivec3(1, 0, 0)) | (ivec3(1, 0, 0)))))))))), 1u, 1u))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 ^ (64))) << 0), 64)), 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY((_GLF_IDENTITY(-53882 & 0, (false ? _GLF_FUZZED(int(-2.5)) : -53882 & 0))), ((-53882 & 0)) | ((-53882 & 0))) ^ _GLF_IDENTITY(1, (1) - 0)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)) * 1), (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++))) / 1))
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), _GLF_IDENTITY((int(ivec2(0, 0))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY((int(ivec2(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z)))))), min((int(ivec2(0, _GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z)), ((true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z))) ^ 0))))), _GLF_IDENTITY((int(ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-95094, 75582, 25899, 347).z, (_GLF_IDENTITY(ivec4(-95094, 75582, 25899, 347).z, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4(-95094, 75582, 25899, 347).z, (ivec4(-95094, 75582, 25899, 347).z) * 1)), (~ (_GLF_IDENTITY(ivec4(-95094, 75582, 25899, 347).z, (ivec4(-95094, 75582, 25899, 347).z) * 1))) << 0)))) / 1))))))), 0 | ((int(ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z))), (false ? _GLF_FUZZED(-88245) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z)))))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(78542, (78542) >> 0)) : (int(ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) ^ 0)))))), _GLF_IDENTITY((int(ivec2(0, 0))), min((int(ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(0, 0))))), 0))), _GLF_IDENTITY(_GLF_IDENTITY((int(ivec2(0, 0))), clamp((int(ivec2(0, 0))), (int(ivec2(0, 0))), (int(ivec2(0, 0))))), (_GLF_IDENTITY((int(ivec2(0, 0))), clamp((int(ivec2(0, 0))), (int(ivec2(0, 0))), (int(ivec2(0, 0)))))) + 0)))), 0 | (min(_GLF_IDENTITY(_GLF_IDENTITY((int(ivec2(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z)))))), min((int(ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z)))))), _GLF_IDENTITY((int(ivec2(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec4(-95094, 75582, 25899, 347).z)))))), 0 | ((int(ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(ivec4(_GLF_IDENTITY(-95094, (-95094) | (-95094)), 75582, 25899, 347).z)))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(78542, (78542) >> 0)) : (int(ivec2(0, _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(53305)))))))), _GLF_IDENTITY((int(ivec2(0, 0))), min((int(ivec2(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(0, 0))))), 0))), _GLF_IDENTITY((int(ivec2(0, 0))), clamp((int(ivec2(0, 0))), (int(ivec2(0, 0))), (int(ivec2(0, 0))))))))))) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-43560))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(0.0), log(_GLF_IDENTITY(1.0, max(1.0, 1.0))), abs(0.0), 0.0))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-38.24), _GLF_FUZZED(42.92)), vec2(mat4x3(_GLF_IDENTITY(vec2(_GLF_FUZZED(-38.24), _GLF_FUZZED(42.92)), clamp(vec2(_GLF_FUZZED(-38.24), _GLF_FUZZED(42.92)), vec2(_GLF_FUZZED(-38.24), _GLF_FUZZED(42.92)), vec2(_GLF_FUZZED(-38.24), _GLF_FUZZED(42.92)))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), sin(0.0)))), vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), tan(0.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), abs(0.0), 0.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(0.0), log(1.0), abs(0.0), 0.0))))[_GLF_IDENTITY(1, (1) | (1))], ((_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), tan(0.0), log(1.0), abs(0.0), 0.0))))[_GLF_IDENTITY(1, (1) | (1))]) + determinant(mat2(abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(8.4, float(mat3x4(8.4, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(0.0), 1.0, 1.0, _GLF_IDENTITY(exp(0.0), min(exp(0.0), _GLF_IDENTITY(exp(0.0), (_GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0)))) + 0.0))), 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))))), bool(false))), 1.0) * (injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, 1.0, determinant(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.1) : _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))))))), 1.0, 1.0, 1.0), (mat3(injectionSwitch.y, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(roundEven(floor(3.8))) : 0.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_ZERO(0.0, injectionSwitch.x) + (1.0)))), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0) / 1.0), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2471.6222)), float(0.0), bool(true))), 1.0, 1.0, 1.0)), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), (mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), float(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-317.208)), float(0.0), bool(true))), 1.0, 1.0, 1.0)) / mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.3) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((false ? -2359.3347 : 9817.7977))), float(1.0), bool(true))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), max((injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))))), injectionSwitch))) / vec2(1.0, 1.0)).y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch.y, 0.0, 1.0, determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-50.84) : _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, length(vec2(0.0, 0.0)), abs(1.0))), 0.0), (mat2(1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, length(vec2(0.0, 0.0)), abs(1.0))), 0.0)) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true, false)), ! (! (bool(bvec3(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true, false))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((5.9 - 47.59)), _GLF_FUZZED(861.045)), bvec2(false, _GLF_IDENTITY(false, (false) || false)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0, 0.0), mat2x3(mat4(mat2x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))))))))))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, 6))), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) + 0), (_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), max((_GLF_IDENTITY(int(6), (int(6)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))), (_GLF_IDENTITY(int(6), 0 ^ (int(6)))))) + 0)) | (_GLF_IDENTITY(int(6), (int(6)) + 0))), int(6)))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), false || (((false))))))))) && true))) && true)))))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, cos(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 ^ 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       return;
      }
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, min(read, read)), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) ^ 0, 0 | _GLF_IDENTITY(((4) ^ 0), ~ (~ (((4) ^ 0)))))), (_GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (~ ((4)))) ^ 0)) - 0)) >> _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0))))), 64, 4);
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2.2)))) - _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(0.0), 1.0, abs(0.0), determinant(mat2(0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)), 1.0)), (true ? float(mat4x2(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(0.0), 1.0, abs(0.0), determinant(mat2(0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)), 1.0)) : _GLF_FUZZED(-6.6))))) > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.5)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-0.5), (injectionSwitch)[1]), (_GLF_IDENTITY(vec2(_GLF_FUZZED(-0.5), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(float(33599u)), (vec2(_GLF_FUZZED(-0.5), (injectionSwitch)[1]))[1]), vec2((vec2(_GLF_FUZZED(-0.5), (injectionSwitch)[1]))[0], _GLF_FUZZED(-86.91)), bvec2(true, false)))) * abs(vec2(1.0, 1.0))), bvec2(false, true))), mix(vec2(_GLF_FUZZED(-976.173), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1)), min((_GLF_IDENTITY(1, (1) * 1)), (_GLF_IDENTITY(1, (1) * 1))))), _GLF_IDENTITY(int(int(1)), (true ? int(int(1)) : _GLF_FUZZED(-54834))))], _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))], min((injectionSwitch)[1], (injectionSwitch)[1])), (true ? _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) | (1))) | (1)), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))))], min((injectionSwitch)[1], (injectionSwitch)[1])) : _GLF_FUZZED(45.20))), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[1]), (true ? max(_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec2(injectionSwitch[1], _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))))))), max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), 0.0, 1.0))))[1])), (injectionSwitch)[1]) : _GLF_FUZZED(-398.606))))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.1)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))))], _GLF_FUZZED(-9.1)), max(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))))], _GLF_FUZZED(-9.1)), _GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))))], _GLF_FUZZED(-9.1)), mix(vec2(_GLF_FUZZED(-744.631), _GLF_FUZZED(1.1)), vec2((vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))))], _GLF_FUZZED(-9.1)))[0], (vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))))], _GLF_FUZZED(-9.1)))[1]), bvec2(true, true))))))[0], max((_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.1, clamp(_GLF_IDENTITY(-9.1, mix(float(_GLF_FUZZED(-304.602)), float(_GLF_IDENTITY(-9.1, clamp(-9.1, -9.1, -9.1))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(-9.1, min(-9.1, -9.1)), -9.1))), (_GLF_FUZZED(-9.1)) + 0.0)), mix(vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(-4630.4417)), vec2((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.1, clamp(_GLF_IDENTITY(-9.1, mix(float(_GLF_FUZZED(-304.602)), float(_GLF_IDENTITY(-9.1, clamp(-9.1, -9.1, -9.1))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(-9.1, min(-9.1, -9.1)), -9.1))), (_GLF_FUZZED(-9.1)) + 0.0)))[0], (vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.1, clamp(_GLF_IDENTITY(-9.1, mix(float(_GLF_FUZZED(-304.602)), float(_GLF_IDENTITY(-9.1, clamp(-9.1, -9.1, -9.1))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(-9.1, min(-9.1, -9.1)), -9.1))), (_GLF_FUZZED(-9.1)) + 0.0)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))[0], (vec2((injectionSwitch)[0], _GLF_FUZZED(-9.1)))[0])), _GLF_IDENTITY((_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4715.1029)), bool(false))))) * (injectionSwitch)), injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-9.1)), (_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, -3030.4128))))) - vec2(0.0, 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, -3030.4128))))) - vec2(0.0, 0.0)))), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, -3030.4128))))) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, -3030.4128))))) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, -3030.4128))))) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, -3030.4128))))) - vec2(0.0, 0.0)))))), injectionSwitch)))[0], _GLF_FUZZED(-9.1)), vec2(mat4x2(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-73.00), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(6.5, 4.0, 1132.5978, 490.329).r)), bvec2(true, false))) : _GLF_FUZZED(injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, _GLF_IDENTITY(-3030.4128, float(mat2x4(-3030.4128, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, length(vec2(0.0, 0.0)))))))), clamp((true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, _GLF_IDENTITY(-3030.4128, float(mat2x4(-3030.4128, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, length(vec2(0.0, 0.0)))))))), (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, _GLF_IDENTITY(-3030.4128, float(mat2x4(-3030.4128, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, length(vec2(0.0, 0.0)))))))), (true ? injectionSwitch : _GLF_FUZZED(vec2(-80.04, _GLF_IDENTITY(-3030.4128, float(mat2x4(-3030.4128, 1.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, length(vec2(0.0, 0.0)))))))))))) - vec2(0.0, 0.0)))), injectionSwitch)))[0], _GLF_FUZZED(-9.1)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), cos(0.0), 0.0, 0.0, 0.0, 0.0)))) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), (float(float(1.0))) / sqrt(1.0))))))[1], float(float((vec2((injectionSwitch)[0], _GLF_FUZZED(-9.1)))[1])))), vec2(_GLF_FUZZED(5.7), _GLF_FUZZED(-7.7)), bvec2(false, false))), bvec2(true, false))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = ((0 & 51880) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, true, false, true)))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))));
   if(_GLF_DEAD(false))
    return;
  }
}
