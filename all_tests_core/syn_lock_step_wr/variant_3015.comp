#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, 0.0, 0.0), vec4(abs(1.0), 1.0, 1.0, 1.0)), dot(vec4(sqrt(0.0), 0.0, 0.0, 0.0), vec4(abs(1.0), 1.0, 1.0, 1.0))) + ((injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-928.882), _GLF_FUZZED(194.665)), bvec2(false, false))).y, false, true)))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3101.5249) : injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4273.4437), _GLF_FUZZED((242.157 * -7.2))), bvec2(false, false))))), 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))), mix(vec2(_GLF_FUZZED(float(false)), (vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4273.4437), _GLF_FUZZED((242.157 * -7.2))), bvec2(false, false))))), 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))))[1]), vec2((vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4273.4437), _GLF_FUZZED((242.157 * -7.2))), bvec2(false, false))))), 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))))[0], _GLF_FUZZED(-4678.0962)), bvec2(true, false)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4273.4437), _GLF_FUZZED((242.157 * -7.2))), bvec2(false, false))))), 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))), mix(vec2(_GLF_FUZZED(float(false)), (vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4273.4437), _GLF_FUZZED((242.157 * -7.2))), bvec2(false, false))))), 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))))[1]), vec2((vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4273.4437), _GLF_FUZZED((242.157 * -7.2))), bvec2(false, false))))), 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))))[0], _GLF_FUZZED(-4678.0962)), bvec2(true, false)))).x > injectionSwitch.y)) && true))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), true && ((_GLF_IDENTITY(false, (false) && true)))) && true)))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.7)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0)), clamp(float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0)), float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0)), 0.0 + (float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, length(sin(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))))))) > injectionSwitch.y)))) && true))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true), _GLF_IDENTITY(true, ! (! (true))), false)))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(float(53607)))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_ONE(1.0, injectionSwitch.y)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))) || (bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)))[0], 0.0 + (_GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)))[0], (((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)))[0]) + 0.0))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), vec2(mat4(((injectionSwitch) * mat2(1.0)), sqrt(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), float(mat4(dot(vec3(0.0, 0.0, 1.0), vec3(sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0)))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), clamp(_GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY(_GLF_FUZZED(60.36), clamp(_GLF_FUZZED(60.36), _GLF_IDENTITY(_GLF_FUZZED(60.36), (false ? _GLF_FUZZED(-7270.1853) : _GLF_FUZZED(60.36))), _GLF_IDENTITY(_GLF_FUZZED(60.36), (false ? _GLF_FUZZED(-92.28) : _GLF_FUZZED(60.36))))), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), max(mix(vec2(((injectionSwitch) * mat2(1.0))[0], (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) * mat2(1.0))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(60.36), max(_GLF_FUZZED(60.36), _GLF_FUZZED(60.36))), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)))), _GLF_IDENTITY(_GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), mat2(1.0) * (mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), mat2(1.0) * (mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)))), mat2(1.0) * (_GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), mat2(1.0) * (mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)))))), _GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), mat2(1.0) * (mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)))), _GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)), mat2(1.0) * (mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(false, false)))))), mix(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (((injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0))[0], ((injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, (1) << 0)]), vec2(_GLF_FUZZED(60.36), _GLF_FUZZED(-7415.9954)), bvec2(_GLF_IDENTITY(false, (false) || false), false))))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-95.68, -766.933)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(9253.0196) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(vec4((false ? _GLF_FUZZED(9253.0196) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 0.0, 1.0, 1.0))))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))), ! (! ((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))) || false)))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.1, 8125.4595)) : injectionSwitch)).y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.1, 8125.4595)) : injectionSwitch)).y))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6189.1803)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? 2.7 : -445.512))), float(injectionSwitch.x), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false, true), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), bool(bvec3(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), false, true))))), bool(bvec2((! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), bool(bvec3(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), false, true))))), true))))) || false), true))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), true))))
          return;
        }
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))) || false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec3(false, false, true))), (_GLF_IDENTITY(bool(bool(bvec3(false, false, true))), false || (bool(bool(bvec3(false, false, true)))))) || false)), true && (bool(_GLF_IDENTITY(bool(bool(bvec3(false, false, true))), (_GLF_IDENTITY(bool(bool(bvec3(false, false, true))), false || (bool(bool(bvec3(false, false, true)))))) || false))))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))), false, true)))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec3(false, false, true))))) || false)), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, false, false))) && true), true)))), (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec4((! (_GLF_IDENTITY(false, true && (false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec4((! (_GLF_IDENTITY(false, true && (false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec4((! (_GLF_IDENTITY(false, true && (false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec4(! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec4((! (_GLF_IDENTITY(false, true && (false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec4((! (_GLF_IDENTITY(false, true && (false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true, true, false)))))), false, true))))) || false)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 | (7))), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), (int(_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) - 0)), clamp((_GLF_IDENTITY(int(7), (int(7)) - 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) - 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) - 0)), (true ? (_GLF_IDENTITY(int(7), (int(7)) - 0)) : _GLF_FUZZED(-98154))), (_GLF_IDENTITY(int(7), (int(7)) - 0)))), (_GLF_IDENTITY(int(7), (int(7)) - 0)))) << 0))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), (int(7)) - 0)) << 0)), 0 | (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), (int(7)) - 0)) << 0)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0), min(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))))) ^ 0))), ~ (~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))) - 0), (int(7)) - 0)) << 0)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) ^ 0)) | (7)))) - 0)) << 0)), ~ _GLF_IDENTITY((~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)), 0 ^ (~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))) - 0)) << 0)))), max((~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)), 0 ^ (~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))) - 0)) << 0)))), _GLF_IDENTITY((~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)), 0 ^ (~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))) - 0)) << 0)))), clamp((~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)), 0 ^ (~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))) - 0)) << 0)))), (~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)), 0 ^ (~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))) - 0)) << 0)))), (~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)), 0 ^ (~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))))) - 0)) << 0)))))))))))))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(int(0))), 0)))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(28893), (_GLF_FUZZED(28893)) << 0) : _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(ivec3(int(7), 0, 0)), (int(ivec3(int(7), 0, 0))) | (_GLF_IDENTITY(int(ivec3(int(7), 0, 0)), min(int(ivec3(int(7), 0, 0)), int(ivec3(int(7), 0, 0)))))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)) | 0)), 0 | (int(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)) | 0)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))) << 0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))) ^ 0))), ~ (~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))) - 0), (int(7)) - 0)) << 0)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), ~ (~ (int(_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))) - 0)) << 0, ((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))) - 0)) << 0) >> 0))))))))))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, _GLF_IDENTITY(0, int(int(0))), 0), 0 + (clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> (0 ^ 0)), int(int(0))), 0)))))))))), (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec4(7, (0 ^ 1), 1, 1), (ivec4(7, (0 ^ 1), 1, 1)) * ivec4(1, 1, 1, 1)))))) - 0)) << 0)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))) << 0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), (int(7)) - 0)) << 0))) ^ 0))), ~ (~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))) - 0), _GLF_IDENTITY((int(7)) - 0, ~ (~ (_GLF_IDENTITY((int(7)) - 0, max((int(7)) - 0, _GLF_IDENTITY((int(7)) - 0, ((int(7)) - 0) << 0)))))))) << 0)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) - 0)) << 0)), ~ _GLF_IDENTITY((~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))) - 0)) << 0)))), ((~ (int(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - 0)))) - 0)) << 0))))) - 0))))))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(int(0))), 0))))))))) ^ 0))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, 1 * (1))), (int(1)) - 0)) | (_GLF_IDENTITY(int(1), (int(1)) - 0)))), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (_GLF_IDENTITY((1) | (1), ((1) | (1)) ^ (0 << _GLF_IDENTITY(int(8), int(8))))) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))), (int(_GLF_IDENTITY(1, int(ivec3(1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))) - 0)), (((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-8032) : 7)), (0 >> _GLF_IDENTITY(int(4), int(4))), 0, 1)), (int(ivec4(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-8032) : 7)), (0 >> _GLF_IDENTITY(int(4), int(4))), 0, 1))) / 1))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (0) / 1)))), int(0)), min(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, _GLF_IDENTITY(0, ~ (~ (0))))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), clamp(0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-41474) : int(0)))), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec3(int(0), (1 ^ 1), 0))), int(_GLF_IDENTITY(0, max(0, 0)))), 0 >> _GLF_IDENTITY(int(0), int(0))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 | (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))))) ^ 0), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)), ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, false || _GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))), true && ((_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0)))))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, (_GLF_IDENTITY((! (false)) && true, bool(bool((! (false)) && true)))) || false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), true, false)))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), true, false)))))))) && true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (false) || false)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), ! (! ((! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
    continue;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (! (bool(bvec3(true, false, false))))))) && true)))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1), true && (_injected_loop_counter != (_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), int(_GLF_IDENTITY(7, (7) | 0)))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1, 0 + (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y)), true)))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-821.126)), bool(false))), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 1.0 * (float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-821.126)), bool(false))), 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))))) : _GLF_IDENTITY(_GLF_FUZZED(-9804.4588), clamp(_GLF_IDENTITY(_GLF_FUZZED(-9804.4588), (false ? _GLF_FUZZED(152.401) : _GLF_FUZZED(-9804.4588))), _GLF_IDENTITY(_GLF_FUZZED(-9804.4588), min(_GLF_FUZZED(-9804.4588), _GLF_FUZZED(-9804.4588))), _GLF_IDENTITY(_GLF_FUZZED(-9804.4588), (_GLF_FUZZED(-9804.4588)) * 1.0))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))))
              continue;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u), ~ (~ (workgroup_size))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u), ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) | (~ (workgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u), ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) | (~ (workgroup_size)))))) << 0u))) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, min(0 | 0, _GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))) / 1))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(bvec3(false, true, true)))))));
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(vec2(-9.9, -2455.2633)) : mat2(1.0) * (injectionSwitch)))).x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-1165.6841) : _GLF_ZERO(0.0, injectionSwitch.x)))))) | (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), subgroup_id * subgroup_size)), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), (~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))))) / 1u)))))), (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)))) + 0u))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(min(subgroup_size, subgroup_size)), (uint(min(subgroup_size, subgroup_size))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(min(subgroup_size, subgroup_size)), (uint(min(subgroup_size, subgroup_size))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u))), subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), subgroup_id * subgroup_size)), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), (~ (subgroup_id * subgroup_size)) + 0u))))))), (true ? (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), clamp(_GLF_IDENTITY(min(subgroup_size, subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : min(subgroup_size, subgroup_size))), min(subgroup_size, subgroup_size), _GLF_IDENTITY(min(subgroup_size, subgroup_size), 0u | (_GLF_IDENTITY(min(subgroup_size, subgroup_size), ~ (~ (min(subgroup_size, subgroup_size))))))))))), subgroup_id * subgroup_size)), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, ~ (_GLF_IDENTITY(~ ((subgroup_size) * 1u), 0u | (_GLF_IDENTITY(~ ((subgroup_size) * 1u), min(~ ((subgroup_size) * 1u), ~ ((subgroup_size) * 1u))))))))), (~ (subgroup_id * subgroup_size)) + 0u))))))) : _GLF_FUZZED(21529u)))) ^ 0u) ^ 0u))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec4(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)), (false ? _GLF_FUZZED(subgroup_local_id) : (subgroup_local_id + _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(7), int(7))) + (_GLF_IDENTITY(1, (1) >> 0)))))) % subgroup_size, _GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, (0u) | (0u))), ~ (~ (min(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (0u) | (0u))))))), (0u) * 1u)), 1u * ((_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), ~ (~ ((0u)))))), ~ (~ (min(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) * 1u))))) | (0u))))))), (0u) * 1u)))) | (0u)), ((((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, (4u) * 1u), 4u, 4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, min(0u, 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))));
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false, true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))), false, true, true)), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))), false, true, true)), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))), false, true, true)), false, false))), true))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))), int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 1, 1)), (int(ivec4(1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 1, 1))) >> 0))), _GLF_IDENTITY(4, max(4, 4)), 64, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(min(45543, 78105)) : 4)));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0))) < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))) ? injectionSwitch.x : _GLF_FUZZED(37.17))) < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), ! (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((9.8))), float(injectionSwitch.y), bool(true))))))), false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))) && ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))))))))))) && ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) / 1.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4x2(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))).x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), ! (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5529.9980))))), injectionSwitch.x)) < injectionSwitch.y))))))))))) && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), abs(1.0), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)), clamp(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), abs(1.0), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), abs(1.0), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), abs(1.0), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)) : _GLF_FUZZED(vec2(6.7, -0.6)))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), abs(1.0), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))) && true))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, (64) - 0), (0 ^ 0), 1, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, (64) - 0), (0 ^ 0), 1, 0))))), 0 | (_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, (64) - 0), (0 ^ 0), 1, 0)))))))) | (_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, (64) - 0), (0 ^ 0), 1, 0))))))), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-45.79), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-25595) : _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))))], mix(float(_GLF_FUZZED(879.477)), float((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-25595) : _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))))]), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / determinant(mat2(abs(1.0), 0.0, log(1.0), exp(0.0))))), (mat2x4((injectionSwitch)[0], 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_FUZZED(-42.84)), bvec2(true, false))).x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false), false, true, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))) && true))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9084.0253) : 1.0)))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9084.0253) : 1.0)))).x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.4)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.4)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))).x < injectionSwitch.y)), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
