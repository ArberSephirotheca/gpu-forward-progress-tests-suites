#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.6)), float(injectionSwitch.y), bool(true)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.6, mix(float(_GLF_FUZZED(-41.00)), _GLF_IDENTITY(float(-4.6), (float(-4.6)) - 0.0), bool(true))))), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5035.4308), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7749.9125)), bvec2(true, false))), injectionSwitch)))).y), bool(true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), tan(0.0), 0.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0))) > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(false || (injectionSwitch.x > injectionSwitch.y))), true && (bool(bool(false || (injectionSwitch.x > injectionSwitch.y)))))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(max(gl_WorkGroupSize.x, gl_WorkGroupSize.x), (max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)) / 1u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (! (false)))), false || ((_GLF_IDENTITY(! (false), true && (! (false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! (false)))), false || (! (_GLF_IDENTITY(! (false), true && (! (false))))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), true))))))))), true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))))))) && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) && true), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec3((false), false, true))), true)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))) || false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true)))) && (false)))) && true)) && true) && true), _GLF_IDENTITY((false) && true, true && ((false) && true)))), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), false || (! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (_GLF_IDENTITY(! (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))), ! (! (! (bool(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true))))))))))))))))))))) || false), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))), (_GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))), ! (! (_GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))), false || (! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))))))) || false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), false || (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), bool(bvec2((! (_GLF_IDENTITY(false, (false) && true))), true)))))))))))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), bool(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))) || false)), ! (! (! (bool(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true))))))))))))))))))))) || false)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false), ! (! ((false)))) && true)))), ! (! (! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true, true, true))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, true, false, true))))), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))) || false))))), ! (! ((bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (false) && true)), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, true && ((false) && true)))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, true && ((false) && true)))), (bool(bool(_GLF_IDENTITY((false) && true, true && ((false) && true))))) && true)))))))))))))))), ! (! (! (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))))) || false)), false, false), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_IDENTITY(false, true && (false)), false))) && true)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! ((! (! (_GLF_IDENTITY(false, (false) && true)))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), true && ((! (_GLF_IDENTITY(false, (false) && true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), bool(bvec4(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, (false) && true)))), (! (! (! (_GLF_IDENTITY(false, (false) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), false))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (_GLF_IDENTITY(! (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))) && true, false))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) && true))))))), ! (! (! (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))))) || false)), false, false)))))))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(bitfieldExtract(subgroup_size, -48296, -12282)) : workgroup_size))) ^ 0u), workgroup_size)), ~ (~ (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size))) - 0u)))) * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true))), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true))), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true)))) || false), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true))), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true)))) || false)) && true)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true))), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true)))) || false), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2((false), true))), _GLF_IDENTITY(false, (false) && true)))) || false)) && true))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y)) || (! (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ~ (~ _GLF_IDENTITY((subgroup_base), ((subgroup_base)) >> 0u))), (_GLF_IDENTITY(subgroup_base, ~ (~ _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(((subgroup_base)) >> 0u, uint(uvec2(((subgroup_base)) >> 0u, 1u))))))) - 0u) + subgroup_local_id, _GLF_IDENTITY(clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), uint(uvec3(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), 0u, 1u)))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : subgroup_base)) + subgroup_local_id, max(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))), (_GLF_IDENTITY(clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), uint(uvec3(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), 0u, 1u)))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : subgroup_base)) + subgroup_local_id, max(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), uint(uvec3(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), 0u, 1u)))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : subgroup_base)) + subgroup_local_id, max(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))), (clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), ((workgroup_base + subgroup_base + subgroup_local_id)) ^ 0u), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(0u, (0u) + 0u) ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), uint(uvec3(uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), (true ? (workgroup_base + subgroup_base + subgroup_local_id) : _GLF_FUZZED(subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((workgroup_base), 0u ^ ((workgroup_base)))) + subgroup_base + subgroup_local_id)), 1u)), 0u, 1u)))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : subgroup_base)) + subgroup_local_id, max(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id)))) / 1u)))) - 0u));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_IDENTITY(false, false || (false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true, true)), (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-810.395, -4.6)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), true, true, true)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true, true)))))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x))))) - 0.0) > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))) && true))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u), 0u + (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u), (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 1u, 1u))))) + ((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(21339), ~ (~ (_GLF_FUZZED(21339))))), ((true ? 1 : _GLF_FUZZED(21339))) * 1)) : _GLF_FUZZED(abs(_GLF_IDENTITY(_GLF_IDENTITY(-99717, clamp(_GLF_IDENTITY(-99717, max(-99717, -99717)), -99717, -99717)), (_GLF_IDENTITY(-99717, clamp(_GLF_IDENTITY(-99717, max(-99717, -99717)), -99717, -99717))) ^ 0))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) + (1)), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) + (1))) << 0), _GLF_IDENTITY(1, ~ (~ (1)))))) % _GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, log(1.0), 0.0, sqrt(0.0), 0.0, abs(1.0), sqrt(0.0), sqrt(1.0), 0.0, 0.0, 0.0)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8)), vec2(_GLF_FUZZED(-698.050), (injectionSwitch)[1]), bvec2(false, true))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(-698.050), (injectionSwitch)[1]), bvec2(false, true))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8)), vec2(_GLF_FUZZED(-698.050), (injectionSwitch)[1]), bvec2(false, true))))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8)), vec2(_GLF_FUZZED(-698.050), (injectionSwitch)[1]), bvec2(false, true))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(-698.050), (injectionSwitch)[1]), bvec2(false, true))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.8)), vec2(_GLF_FUZZED(-698.050), (injectionSwitch)[1]), bvec2(false, true))))))).x) - 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(false, false || (false)))), (bool(bvec4(false, false, false, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, length(vec2(0.0, 0.0)) + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x) - 0.0)), clamp(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(_GLF_IDENTITY(-5290.3236, max(-5290.3236, -5290.3236)))))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true))))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, float(vec2((injectionSwitch.x) - 0.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true)))))), max(min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, float(vec2((injectionSwitch.x) - 0.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true)))))), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, float(vec2((injectionSwitch.x) - 0.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-5290.3236)), max(float(_GLF_FUZZED(-5290.3236)), float(_GLF_FUZZED(-5290.3236)))), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), true)))))))))) - 0.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))), min(1, 1))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(smoothstep(roundEven(147.673), -3.1, exp(9494.5197)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), bool(bool((_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, false, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), true)))))), bool(bool(! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), true))))))))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, abs(1.0), 1.0)))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, 1u * (read)))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) || false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true))))))))), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2.6), _GLF_FUZZED(-45.09)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.3), _GLF_FUZZED(vec2(7.1, 2.4).g)), bvec2(false, false))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(mat3x2(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 0.0, 1.0, 0.0, 0.0, 1.0))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
