#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 uint read;
 mat4 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 bvec3 _f1;
 uint workgroup_size;
 bool _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 uvec3 _f1;
 ivec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 uvec4 _f1;
 bvec3 _f2;
 bvec4 _f3;
 vec4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 bvec3 _f1;
 mat2 _f2;
 float _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 uvec3 _f3;
 bvec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_9 _f2;
 uint _f3;
 _GLF_struct_10 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 mat2 _f1;
 ivec3 _f2;
 int _f3;
 float _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 vec3 _f1;
 vec3 _f2;
 vec2 _f3;
 ivec3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_2 {
 uint _f0;
 _GLF_struct_0 _f1;
 vec4 _f2;
 _GLF_struct_1 _f3;
 float _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 vec3 _f1;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = (((1 | 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))))) < injectionSwitch.y)) ? int(0) : _GLF_FUZZED(-91732))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(pow(-7.0, -1144.9576)) : injectionSwitch.x)) > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))) > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), (true && ((injectionSwitch.x > injectionSwitch.y))) && true)))) && true)), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) + 0.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(-7.8)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))), bool(bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(59323) : int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(-37833) : int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), bool(true)))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) && true))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))) && true))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (injectionSwitch.x < injectionSwitch.y))) && true)))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-626.369), _GLF_FUZZED(9455.2486)), bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))).y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(vec4(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)), 0.0, 1.0)))))[1]), vec2(_GLF_FUZZED(-626.369), _GLF_FUZZED(9455.2486)), bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))).y)), false, true)))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, exp(0.0))))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x > injectionSwitch.y)) || false), true, true, true))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 | (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((_GLF_IDENTITY((0 | 1), max(_GLF_IDENTITY((0 | 1), _GLF_IDENTITY(int(ivec4((0 | 1), 1, 1, 0)), clamp(_GLF_IDENTITY(int(ivec4((0 | 1), 1, 1, 0)), max(int(ivec4((0 | 1), 1, 1, 0)), int(ivec4((0 | 1), 1, 1, 0)))), int(ivec4((0 | 1), 1, 1, 0)), int(ivec4((0 | 1), 1, 1, 0))))), (0 | 1))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z = subgroup_size;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(56.93), _GLF_FUZZED(39.76)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), true))).y, true && (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.4)), bool(false)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(1u, _GLF_struct_0(mat3x4(1.0), vec3(1.0), vec3(1.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY((false ? _GLF_FUZZED(-6854.0049) : 1.0), max((false ? _GLF_FUZZED(-6854.0049) : 1.0), (false ? _GLF_FUZZED(-6854.0049) : 1.0))))), ivec3(1), mat2x4(1.0)), vec4(1.0), _GLF_struct_1(_GLF_IDENTITY(vec3(1.0), mix(vec3((vec3(1.0))[0], (vec3(1.0))[1], (vec3(1.0))[2]), vec3(_GLF_FUZZED((623.185 + -1.8)), _GLF_FUZZED(-5950.0404), _GLF_FUZZED(3983.6155)), bvec3(_GLF_IDENTITY(false, false || (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mat2(1.0), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(int(_GLF_IDENTITY(9.9, (true ? 9.9 : _GLF_FUZZED(-25.12))))) : 1), min((false ? _GLF_FUZZED(int(_GLF_IDENTITY(9.9, (true ? 9.9 : _GLF_FUZZED(-25.12))))) : 1), (false ? _GLF_FUZZED(int(_GLF_IDENTITY(9.9, (true ? 9.9 : _GLF_FUZZED(-25.12))))) : 1))))), 1, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3496.6904)), bool(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), ivec2(1)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(sinh(971.410)))), min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-783.535)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))), _GLF_IDENTITY(float(mat2(float(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))), exp(0.0), 1.0, 0.0)), clamp(float(mat2(float(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))), exp(0.0), 1.0, 0.0)), float(mat2(float(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))), exp(0.0), 1.0, 0.0)), float(mat2(float(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))), exp(0.0), 1.0, 0.0))))), bool(true))), 1.0))), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-5.1) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(23.92)), float(1.0), bool(true))), min(false ? _GLF_FUZZED(-5.1) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(23.92)), float(1.0), bool(true))), false ? _GLF_FUZZED(-5.1) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(23.92)), float(1.0), bool(true)))))))), gl_SubgroupInvocationID);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false, true, false))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), sqrt(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))))).y) || false))))) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, false || (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(35261) : 1, (false ? _GLF_FUZZED(35261) : 1) | (false ? _GLF_FUZZED(35261) : 1)))), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y = _GLF_struct_replacement_3.subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  return;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.x = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y))), min(((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y))), (((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y)))) * 1))), ((1 | 1) | int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))))), (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))) || false)))))), ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))))), (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))) || false))))))) && true)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y), clamp(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(asinh(-5.4), clamp(asinh(-5.4), asinh(-5.4), asinh(-5.4)))) : 1.0)), mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asinh(_GLF_IDENTITY(-5.4, (-5.4) - 0.0))) : 1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(391.058)), max(float(_GLF_FUZZED(391.058)), float(_GLF_FUZZED(391.058)))), bool(false))), 0.0, 1.0, 0.0)), max(float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asinh(-5.4)) : 1.0)), 0.0, 1.0, 0.0)), float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asinh(-5.4)) : 1.0)), 0.0, 1.0, 0.0))))), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.6) : 1.0)), injectionSwitch.y), (false ? _GLF_FUZZED(4413.3037) : _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.7)), 0.0 + (_GLF_IDENTITY(float(_GLF_FUZZED(-2.7)), float(mat2x3(float(_GLF_FUZZED(-2.7)), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0)), (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0))) + 0.0)) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat3x2(0.0, cos(0.0), 1.0, 1.0, 1.0, 0.0))), (0.0) + 0.0)))))), bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), 0 | (int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y), clamp(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asinh(-5.4)) : 1.0)), 0.0, 1.0, 0.0)), max(float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asinh(-5.4)) : 1.0)), 0.0, 1.0, 0.0)), float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asinh(-5.4)) : 1.0)), 0.0, 1.0, 0.0))))), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.6) : 1.0)), injectionSwitch.y), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(4413.3037, clamp(4413.3037, 4413.3037, 4413.3037))) : _GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(6.3) : _GLF_IDENTITY(false ? _GLF_FUZZED(4413.3037) : _GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(false ? _GLF_FUZZED(4413.3037) : _GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(4413.3037) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)), float(_GLF_FUZZED(3.8)), bool(false))), _GLF_IDENTITY(dot(vec2(1.0, sqrt(1.0)), vec2(0.0, 0.0)), dot(vec2(1.0, sqrt(1.0)), vec2(0.0, 0.0))), sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(length(vec3(0.0, 0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)))) / 1.0)) - tan(0.0))))))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.7)), 0.0 + (_GLF_IDENTITY(float(_GLF_FUZZED(-2.7)), _GLF_IDENTITY(float(mat2x3(float(_GLF_FUZZED(-2.7)), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0))), ((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0)))) / _GLF_ONE(1.0, injectionSwitch.y)) / 1.0), 0.0)), max(_GLF_IDENTITY(float(mat2x3(float(_GLF_FUZZED(-2.7)), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0))), ((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0)))) / _GLF_ONE(1.0, injectionSwitch.y)) / 1.0), 0.0)), (float(mat2x3(float(_GLF_FUZZED(-2.7)), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0))), ((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0)))) / _GLF_ONE(1.0, injectionSwitch.y)) / 1.0), 0.0))) + 0.0), _GLF_IDENTITY(float(mat2x3(float(_GLF_FUZZED(-2.7)), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0))), ((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0)))) / _GLF_ONE(1.0, injectionSwitch.y)) / 1.0), 0.0)), (float(mat2x3(float(_GLF_FUZZED(-2.7)), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0))), ((_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9787.1380) : 0.0)))) / _GLF_ONE(1.0, injectionSwitch.y)) / 1.0), 0.0))) - 0.0)))))), bool(false))))))))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec4(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4695.1065) : 1.0)), 1.0, 1.0))))), _GLF_struct_7(_GLF_struct_4(ivec4(1), bvec3(true), mat2(1.0), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), (float(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))) - 0.0)) : _GLF_FUZZED(-8.6))), 1.0))), _GLF_struct_5(uvec4(1u), uvec4(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, 0u, 1u), clamp(uvec3(1u, 0u, 1u), uvec3(1u, 0u, 1u), uvec3(1u, 0u, 1u)))))), bvec3(true), bvec4(true), vec4(1.0), mat3x2(1.0)), _GLF_struct_6(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), uvec3(1u), _GLF_IDENTITY(ivec3(1), (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(4), ivec3(4))) | (ivec3(1))), mat3(1.0)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), 0u, 1u)))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), min(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), vec3(mat3x4(vec3(0.0, 0.0, 0.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))), vec3(0.0, 0.0, 0.0)))), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), 0u, 1u)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, (0.0) - 0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0), mix(vec3((vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0))[0], _GLF_FUZZED(1567.1496), _GLF_FUZZED(9.5)), vec3(_GLF_FUZZED(4.2), (vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0))[1], (vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0))[2]), bvec3(false, true, true))), vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0), vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec4(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), 1.0, 0.0))))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), 0u, 1u)))), (uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false))))), (mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-42.78) : 0.0)))), length(vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.7)), float(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 1.0)))), bool(true))), 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0), clamp(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0), vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0), _GLF_IDENTITY(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0), clamp(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0), vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0), vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0))))))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false)))))) * 1.0))), 0u, 1u))))) + uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), 0u, 1u)))), uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec3(float(_GLF_IDENTITY(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))), 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0))))), float(_GLF_FUZZED(60.56)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), 0u, 1u)))))), bvec2(true), bvec3(true)), _GLF_struct_9(vec2(1.0), _GLF_struct_8(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) && true)))) && (true))), bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))), gl_WorkGroupSize.x, true, uvec3(1u))), 1u, _GLF_struct_10(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) * uvec4(1u, 1u, 1u, 1u))), mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0)));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, true))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) ^ (0 ^ 0))) | (0 ^ 0)), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED(-51356) : _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_DEAD(false), false, true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED((_injected_loop_counter --)) : _GLF_IDENTITY(1, ~ (~ (1)))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (bool(bool(! (false)))) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0))).y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) | 0)); _injected_loop_counter --)
              {
               return;
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), bool(bool(_injected_loop_counter < (_GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, (1 ^ 0) | (1 ^ 0)), _GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))))))))) || false)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) || false)))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0))), dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0, 0.0))).y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0))), dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0))), float(vec4(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0, cos(0.0), 0.0))), 0.0, 0.0))).y)), true, true)), false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0))), dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0), (true ? vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0) : _GLF_FUZZED(vec3(5.3, 7.8, 1.7))))), dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.8)), float(0.0), bool(true))))), 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0, 0.0))).y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0))), dot(vec3(1.0, 0.0, 1.0), vec3(log(1.0), 1.0, abs(0.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0), (true ? vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0) : _GLF_FUZZED(vec3(5.3, 7.8, 1.7))))), dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.8)), float(0.0), bool(true))))), 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0, 0.0))).y)), true, true), false)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
            }
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_struct_replacement_11._f2._f1.workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, 1u * (workgroup_id))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), int(1))) | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.z = workgroup_base;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.z + subgroup_id * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, uint(uint(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid)).z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z))))), (GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.z + subgroup_id * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, uint(uint(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z)))))) + (1u ^ 1u)) + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
     if(_GLF_DEAD(false))
      break;
    }
   for(int _injected_loop_counter = (((((0 ^ 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
      return;
    }
   return;
  }
 uint next_virtual_gid = GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.z + subgroup_id * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY(clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y), min(clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y), clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, min(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid) + uvec4(0u, 0u, 0u, 0u)))).y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(1u, (1u) | (1u))))) >> 0u)) >> 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), _GLF_IDENTITY((uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))), max((uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))))) >> 0u)) >> 0u) + 1, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), min((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid)).y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))) >> 0u)) >> 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))) >> 0u)) >> 0u) + 1, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))) >> 0u)) >> 0u) + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY(clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y), max(clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y), clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))))), 1u))) >> 0u)) >> 0u) + 1)))))) | 0u), max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), uint(uvec3(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), 1u, 0u))), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(1u, (1u) ^ 0u)))) >> 0u)) >> 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid, ~ (~ (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid))).y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u)), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))) * 1u), (uint(uvec2((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, clamp(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.y))), 1u))) >> 0u)) >> 0u) + 1))) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.z);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) * 1.0) > injectionSwitch.y)) ? _GLF_FUZZED(-7.0) : injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
             barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.x = next_virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (false), true, false)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base, (GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base) - uvec3(0u, 0u, 0u)).x], uint(1), 4, 64, 4);
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_12(atomicLoad(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w], 4, 64, 0), mat4(1.0)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.y = _GLF_struct_replacement_13._f0.read;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       atomicStore(checker[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11num_workgroupsubgroup_local_idsubgroup_sizevirtual_gid.w], GLF_merged3_0_1_16_1_1_4_2_1_14next_virtual_gidreadworkgroup_base.y, _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
