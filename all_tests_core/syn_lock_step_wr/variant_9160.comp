#version 460
struct _GLF_struct_5 {
 ivec4 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 uvec2 _f3;
 bvec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 ivec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_2 {
 uint next_virtual_gid;
 mat3x2 _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 ivec4 _f1;
 uint _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_7 {
 int _f0;
 _GLF_struct_6 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_0 {
 uint subgroup_id;
 uint _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupID, 1u);
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_struct_replacement_0.subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1, _GLF_struct_6(_GLF_struct_1(ivec3(1), ivec4(1), 1u, uvec4(1u)), _GLF_struct_2(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), mat3x2(1.0)), _GLF_struct_3(mat2(1.0), mat2x4(1.0), mat3x2(1.0), ivec2(1), bvec4(true)), _GLF_struct_4(vec4(1.0)), _GLF_struct_5(ivec4(1), mat4x2(1.0), mat3x2(1.0), uvec2(1u), bvec2(true), 1u), uvec3(1u)), mat3(1.0));
 atomicStore(buf[_GLF_struct_replacement_7._f1._f1.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}
