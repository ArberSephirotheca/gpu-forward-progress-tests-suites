#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(3, int(int(3)))), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(64563) : 1)), 0))), 0, 1, 1)))) << 0)) + (int(_GLF_IDENTITY(3, (3) - 0)))))) << 0))), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (int(3)), (0 ^ _GLF_IDENTITY((int(3)), ~ (~ (_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))))))) / 1), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(3), 0 | (int(3)))), max(0 ^ (_GLF_IDENTITY(int(3), 0 | (int(3)))), 0 ^ (_GLF_IDENTITY(int(3), 0 | (int(3)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ 1), (true ? (1 ^ 1) : _GLF_FUZZED(35044))) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ 1), (true ? (1 ^ 1) : _GLF_FUZZED(35044))) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ 1), (true ? (1 ^ 1) : _GLF_FUZZED(35044))) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ 1), (true ? (1 ^ 1) : _GLF_FUZZED(35044))) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), _GLF_IDENTITY((1 ^ 1), (true ? (1 ^ 1) : _GLF_FUZZED(35044))) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0))) * 1)))) | 0))), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (int(3)), (0 ^ (int(3))) / 1), 0 ^ (int(3))))))) >> _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY((int(0)), ((int(0))) << 0)))), ~ (~ ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), min(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))))))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) + 0, 0 + ((0) + 0)))))), clamp(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), int(ivec2(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), 1))), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))), max(_GLF_IDENTITY(0 ^ (int(3)), (0 ^ (int(3))) / 1), 0 ^ (int(3))))))) >> (0 >> _GLF_IDENTITY(int(0), int(0))), ((_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), min(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))))))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) + 0, 0 + ((0) + 0)))))), clamp(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), int(ivec2(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), 1))), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(3), ~ (~ (int(3))))), max(_GLF_IDENTITY(0 ^ (int(3)), (0 ^ (int(3))) / 1), 0 ^ (int(3))))))) >> (0 >> _GLF_IDENTITY(int(0), int(0)))) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, 1 * (3))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1)))) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (int(3)), _GLF_IDENTITY((0 ^ (int(3))), 0 + (_GLF_IDENTITY((0 ^ (int(3))), ~ (~ ((0 ^ (int(3)))))))) / 1), 0 ^ (int(3))))))) >> (0 >> _GLF_IDENTITY(int(0), int(0))), clamp((_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, 1 * (3))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1)))) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, (0) + 0)))), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (int(3)), _GLF_IDENTITY(_GLF_IDENTITY((0 ^ (int(3))), ((0 ^ (int(3)))) | 0), 0 + (_GLF_IDENTITY((0 ^ (int(3))), ~ (~ ((0 ^ (int(3)))))))) / 1), 0 ^ (int(3))))))) >> (0 >> _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, 1 * (3))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 1, (1 ^ 1) << (0 ^ 0)), ~ (~ (1 ^ 1)))) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, _GLF_IDENTITY((0), (false ? _GLF_FUZZED(-56905) : _GLF_IDENTITY((0), 0 ^ ((0))))) + 0)))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(3), (int(3)) / 1)), max(_GLF_IDENTITY(0 ^ (int(3)), _GLF_IDENTITY((0 ^ (int(3))), 0 + (_GLF_IDENTITY((0 ^ (int(3))), ~ (~ ((0 ^ (int(3)))))))) / 1), 0 ^ (_GLF_IDENTITY(int(3), (int(3)) ^ 0))))))) >> (0 >> _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, 1 * (3))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1)))) + (int(3)))), (int(_GLF_IDENTITY(int(3), (1 ^ 1) + (int(3))))) << _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) * int(_GLF_ONE(1.0, injectionSwitch.y))) + 0)))), _GLF_IDENTITY(0 ^ (int(3)), max(_GLF_IDENTITY(0 ^ (int(3)), _GLF_IDENTITY((0 ^ (int(3))), 0 + (_GLF_IDENTITY((0 ^ (int(3))), ~ (~ ((0 ^ (int(3)))))))) / 1), 0 ^ (int(3))))))) >> (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0 & -95443) ^ (0))))))))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true) && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         break;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) << _GLF_IDENTITY(int(2), int(2)), 1, 0)), (int(ivec3(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) << _GLF_IDENTITY(int(2), int(2)), 1, 0))) | ((0 ^ 0) << _GLF_IDENTITY(int(1), int(1)))), (int(ivec3(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)).x)) << _GLF_IDENTITY(int(2), int(2)), 1, 0))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) * 1), 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
              break;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < (1 | 1), true, true)), (bool(bvec3(_injected_loop_counter < (1 | 1), true, true))) && true)), (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), (_injected_loop_counter < (1 | 1)) && true)) || false)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, clamp(_GLF_IDENTITY((injectionSwitch.x) + 0.0, mix(float((injectionSwitch.x) + 0.0), float(_GLF_FUZZED(-0.0)), bool(false))), (injectionSwitch.x) + 0.0, _GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - 0.0)))) < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mat2(1.0) * (injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) < injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false, false), true))))), true, true, true)))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true, true)))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)) && true, false || ((bool(true)) && true)))))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false)))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, false))))))))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    break;
   for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(((-71941 - 82943) * 50624)))), 0 | (0)) ^ 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 & 1), _GLF_IDENTITY(min((1 & 1), (1 & 1)), (min((1 & 1), (1 & 1))) ^ 0)), min(_GLF_IDENTITY((1 & 1), _GLF_IDENTITY(min((1 & 1), (1 & 1)), (min((1 & 1), (1 & 1))) ^ 0)), _GLF_IDENTITY((1 & 1), _GLF_IDENTITY(min((1 & 1), (1 & 1)), (min((1 & 1), (1 & 1))) ^ 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1)) & 1), min((1 & 1), (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))))), (true ? 1 & 1 : _GLF_FUZZED(bitfieldReverse(92602)))))))) - 0)) - _GLF_IDENTITY(0, (0) >> 0))); _GLF_IDENTITY(_injected_loop_counter ++, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter ++), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_injected_loop_counter ++) : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(~ (_injected_loop_counter ++), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_injected_loop_counter ++) : _GLF_FUZZED(_injected_loop_counter))))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-71555))), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])).x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(injectionSwitch[0], length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0)])).x > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true, true))))), bool(bool(injectionSwitch.x > injectionSwitch.y)))))))) || false))))));
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(81463u, 153275u, 96017u)))).x, ~ (~ (gl_NumWorkGroups.x)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(41.43)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0)))) > injectionSwitch.y)))))))
        continue;
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      continue;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]), (true ? _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))) : _GLF_FUZZED(vec2(408.025, -494.824))))) : _GLF_FUZZED(vec2(9.3, -2.1)))).y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0)))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0)), (true ? ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((+ -23974), max(_GLF_IDENTITY((+ -23974), (true ? (+ -23974) : _GLF_FUZZED(-55402))), (+ -23974))), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))), (false ? _GLF_FUZZED(-79005) : _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))))) | 0, (1 | 0) + 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) : 1))))) | 0, (1 | 0) + 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974))), (_GLF_IDENTITY((+ -23974), clamp((+ -23974), (+ -23974), (+ -23974)))) | 0)) : 1))))) | 0, (1 | 0) + 0)))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(_GLF_IDENTITY(6, 0 | (6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0)) : _GLF_FUZZED(-44371)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), true))), true, true))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))), bool(bvec2(! (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))), false)))) && true))))))
          continue;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(int(int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) > (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(0, int(ivec2(0, 0))))))) ^ 0)); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.7)), float(injectionSwitch.x), bool(true))), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4198.1074)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y = workgroup_size;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, int(ivec2(0, 0))) & (-56801 * -20266))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true, true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * 1), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY((~ (int(4))) / 1, ((~ (int(4))) / 1) / 1))), (false ? _GLF_FUZZED(-23861) : ~ (_GLF_IDENTITY(~ (int(4)), _GLF_IDENTITY((~ (int(4))) / 1, ((~ (int(4))) / 1) / 1))))))))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), (int(int(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))) >> 0)))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), false)), ! (! (_GLF_IDENTITY(bool(bvec2(! (false), false)), ! (! (bool(bvec2(! (false), false)))))))))))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec2(! ((false)), true), bvec2(bvec3(bvec2(! ((false)), true), false))))))) || false)))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.y * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)))))))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), subgroup_id))) - 0u))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u)))) | (0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)), (0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)), (0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)), (0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)), (0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)), (0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size)), (0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (1u ^ 1u)))), subgroup_size))))))))) - 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))) << 0u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec4(bool(bvec3(false, true, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))), true && (false)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), bool(bvec2(_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (! (bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))) || false), true)))))), true)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (! ((_GLF_WRAPPED_IF_FALSE(false))))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (! ((_GLF_WRAPPED_IF_FALSE(false))))))))), false))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0)))))
                    break;
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), (false ? _GLF_FUZZED(-1108.5855) : _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-429.377)), vec2(_GLF_FUZZED(4.3), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))) : _GLF_FUZZED(injectionSwitch), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-429.377), clamp(_GLF_FUZZED(-429.377), _GLF_FUZZED(-429.377), _GLF_IDENTITY(_GLF_FUZZED(-429.377), max(_GLF_FUZZED(-429.377), _GLF_FUZZED(-429.377)))))), vec2(_GLF_FUZZED(4.3), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch), (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))[1], min(injectionSwitch[1], injectionSwitch[1])))), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])))), _GLF_FUZZED(-429.377)), vec2(_GLF_FUZZED(4.3), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1], (injectionSwitch)[1]))))), bvec2(false, true))), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)) / vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.3) : 1.0))))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(-429.377)), vec2(_GLF_FUZZED(4.3), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))) : _GLF_FUZZED(injectionSwitch))))).y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), (int(6)) >> 0), 1, 1))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), clamp(~ (int(6)), ~ (int(6)), ~ (int(6))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y)))))))))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(19770))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((_GLF_IDENTITY(2, max(2, 2))), _GLF_IDENTITY((2), 0 | ((2))))) | (_GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-16033) : 0)), 1)))))), (int(2)) >> 0)), max(_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), 0 | ((2))))) | (_GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-16033) : 0)), 1)))))), (int(2)) >> 0)), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), 0 | ((2))))) | (_GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-16033) : 0)), 1)))))), (int(2)) >> 0)), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), 0 | ((2))))) | (_GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-16033) : 0)), 1)))))), (int(2)) >> 0)))), 1 * (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), 0 | ((2))))) | (_GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-16033) : 0)), 1)))))), (int(2)) >> 0)))), 0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), 0 | ((2))))) | (_GLF_IDENTITY(2, int(ivec3(2, _GLF_IDENTITY(0, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true))))) ? _GLF_FUZZED(-16033) : 0)), 1)))))), (int(2)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false, true, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))))))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(atanh(0.9)) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(! (! (bool(false))), false || (_GLF_IDENTITY(! (! (bool(false))), ! (! (! (! (bool(false)))))))))), true && (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false))))))) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (false) && true)), false)))), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))), false))))))), false), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(! (! (bool(false))), false || (_GLF_IDENTITY(! (! (bool(false))), ! (! (! (! (bool(false)))))))))), true && (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false))))))) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, false), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (false) && true)), false)))), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))), false))))))), false)))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 1 * (0)), 0)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY((true) || false, ((true) || false) && true)))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(int(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))))) > ((0 ^ 0) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), min(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))))) / (1 ^ 0), max((_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), min(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))))) / (1 ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), min(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))))) / (1 ^ 0))))) - (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))), true && (_GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) | (0)), 0))), 0 ^ ((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) | (0)), 0)))))), (~ (~ (0))) | 0))), ! (! ((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY((~ (~ (0))) | 0, (_GLF_IDENTITY((~ (~ (0))) | 0, ~ (~ ((~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))))) | 0)))) - 0))))))))), bool(bool((_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (0)), ((~ (0))) << (0 << _GLF_IDENTITY(int(6), int(6)))), (~ (~ (0))) | 0)), ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))), true && (_GLF_IDENTITY((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) | (0)), 0))), 0 ^ ((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) | (0)), 0)))))), (~ (~ (0))) | 0))), ! (! _GLF_IDENTITY(((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY((~ (~ (0))) | 0, (_GLF_IDENTITY(_GLF_IDENTITY((~ (~ (0))) | 0, ~ (_GLF_IDENTITY(~ ((~ (~ (0))) | 0), (_GLF_IDENTITY(~ ((~ (~ (0))) | 0), clamp(~ ((~ (~ (0))) | 0), ~ ((~ (~ (0))) | 0), ~ ((~ (~ (0))) | 0)))) - 0))), ~ (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(~ (0), (~ (0)) | _GLF_IDENTITY((~ (0)), ((~ (0))) | ((~ (0))))))) | 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((~ (_GLF_IDENTITY(~ (0), (~ (0)) | _GLF_IDENTITY((~ (0)), ((~ (0))) | ((~ (0))))))) | 0) : _GLF_FUZZED(atomicMax(_injected_loop_counter, 91869))))))) - 0))))), (((_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY((~ (~ (0))) | 0, (_GLF_IDENTITY(_GLF_IDENTITY((~ (~ (0))) | 0, ~ (_GLF_IDENTITY(~ ((~ (~ (0))) | 0), (_GLF_IDENTITY(~ ((~ (~ (0))) | 0), clamp(~ ((~ (~ (0))) | 0), ~ ((~ (~ (0))) | 0), ~ ((~ (~ (0))) | 0)))) - 0))), ~ (~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(~ (0), (~ (0)) | _GLF_IDENTITY((~ (0)), ((~ (0))) | ((~ (0))))))) | 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((~ (_GLF_IDENTITY(~ (0), (~ (0)) | _GLF_IDENTITY((~ (0)), ((~ (0))) | ((~ (0))))))) | 0) : _GLF_FUZZED(atomicMax(_injected_loop_counter, 91869))))))) - 0)))))) && true))))), bool(bool((_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (0)), ((~ (0))) << (0 << _GLF_IDENTITY(int(6), int(6)))), (~ (~ (0))) | 0)), ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | 0))))))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))
      break;
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, false)))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x = next_virtual_gid) >> 0u)) >> 0u);
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
          break;
        }
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0))), clamp(~ (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0))), ~ (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0))), ~ (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(1))) ^ (0)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * 1), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) << 0)), false || _GLF_IDENTITY((_injected_loop_counter > (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) + 0)))) ^ (0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ((int(5))) >> 0) ^ _GLF_IDENTITY(0, max(0, 0)))))), bool(bvec4((_injected_loop_counter > (_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) + 0)))) ^ (0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(_GLF_IDENTITY(5, (5) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((int(5))) >> 0) ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), false || (! (_injected_loop_counter < 1)))))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(mix(30093, 12092, true)))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 0), max(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 0), ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-6.4))))).y, injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, _GLF_IDENTITY(min(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), uvec2(uvec2(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size)))), max(_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), uvec2(uvec2(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), uvec2(uvec2(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size)))), uvec2(uvec2(_GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), uvec2(uvec2(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))))))))), _GLF_IDENTITY(_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), uvec2(0u, 0u) | (_GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))))) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), 0u)), _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : (0u)), ((false ? _GLF_FUZZED(virtual_gid) : (0u))) - (0u ^ 0u)))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (false ? _GLF_FUZZED(uvec2(188985u, 136798u)) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (false ? _GLF_FUZZED(uvec2(188985u, 136798u)) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), min((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (false ? _GLF_FUZZED(uvec2(188985u, 136798u)) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (false ? _GLF_FUZZED(uvec2(188985u, 136798u)) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size)))))) | uvec2(0u, 0u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, uvec2(0u, 0u) | (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))) && (false)))) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) : GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size))))))))))))))))).x, GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x), _GLF_IDENTITY(min(min(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) | (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size)).x, _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x) >> 0u)), min(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x)), 0u ^ (_GLF_IDENTITY(uint(uint(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x)), (uint(uint(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x))) - 0u)))), GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x)), 1u * (min(min(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size, (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size) | _GLF_IDENTITY((GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), max((GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size), (GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size)))).x, GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x), min(GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x, GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_size.x))))))], uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (_GLF_IDENTITY(1, 0 ^ (1))) * 1), _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> 0))))), 4, 64, 4);
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, abs(1.0), 0.0)), vec2(0.0, 0.0) + (vec2(mat2(injectionSwitch, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, abs(1.0), 0.0)), vec2(0.0, 0.0) + (vec2(mat2(injectionSwitch, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, abs(1.0), 0.0)), vec2(0.0, 0.0) + (vec2(mat2(injectionSwitch, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))), ! (! (bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, abs(1.0), 0.0)), vec2(0.0, 0.0) + (vec2(mat2(injectionSwitch, abs(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))))))))) || false)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(13.93) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(13.93) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(13.93) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))), true, true, false)), true, true, false)))));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            return;
           continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - tan(sin(0.0))) > injectionSwitch.y))));
    }
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 ^ (int(0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) << 0)) - 0), 0 ^ (int(0)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && true, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false)))) && true)), bool(bvec2(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && true)), ! (! (bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false)), true, false)), bool(bool(bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false)), true, false))))))) || false))) && true))))), false)))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false)))), true))))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && true)))), false)))), true && _GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), bool(bvec2((! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || _GLF_IDENTITY(false, false || (false)))), false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (_GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))) || false), ((_GLF_DEAD(false))) || false)), false || ((! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) || false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, ((virtual_gid) << 0u) | ((virtual_gid) << 0u)))], 4, 64, _GLF_IDENTITY(0, min(0, 0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))))))))), true && (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         atomicStore(checker[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], read, 4, 64, 4);
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
