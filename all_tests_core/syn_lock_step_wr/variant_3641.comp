#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_24 {
 mat2x4 _f0;
 ivec2 _f1;
 mat3x2 _f2;
 bvec4 _f3;
 ivec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_23 {
 bvec2 _f0;
 float _f1;
 uint next_virtual_gid;
 bool _f2;
} ;

struct _GLF_struct_22 {
 vec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 bvec3 _f2;
 ivec4 _f3;
 _GLF_struct_24 _f4;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
 vec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_19 {
 float _f0;
 vec4 _f1;
 mat2x3 _f2;
 mat3x4 _f3;
 ivec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_18 {
 int _f0;
 float _f1;
} ;

struct _GLF_struct_17 {
 bvec4 _f0;
 float _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 bvec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 uvec4 _f2;
 _GLF_struct_18 _f3;
 _GLF_struct_19 _f4;
} ;

struct _GLF_struct_21 {
 ivec4 _f0;
 uint subgroup_id;
 _GLF_struct_20 _f1;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 mat4 _f1;
 uvec2 _f2;
 float _f3;
} ;

struct _GLF_struct_12 {
 int _f0;
 float _f1;
 bvec3 _f2;
 ivec3 _f3;
 ivec2 _f4;
 int _f5;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
 uint _f1;
 int _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 bool _f2;
 mat3x4 _f3;
 _GLF_struct_13 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 ivec3 _f1;
 bvec3 _f2;
 ivec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
 uvec3 _f1;
 mat4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 uvec3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 float _f1;
 int _f2;
 mat4 _f3;
 bool _f4;
} ;

struct _GLF_struct_4 {
 mat4 _f0;
 vec4 _f1;
 mat3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 bvec4 _f1;
 ivec2 _f2;
 uvec4 _f3;
 bool _f4;
 mat4 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 int _f1;
 _GLF_struct_4 _f2;
 mat4x2 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_15 {
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_14 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 mat3 _f1;
 uint workgroup_size;
 ivec2 _f2;
 _GLF_struct_1 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_15 _GLF_struct_replacement_15;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(ivec4(1), gl_SubgroupID, _GLF_struct_20(_GLF_struct_16(mat3x2(1.0), bvec3(true), ivec4(1)), _GLF_struct_17(bvec4(true), 1.0, mat3x2(1.0)), uvec4(1u), _GLF_struct_18(1, 1.0), _GLF_struct_19(1.0, vec4(1.0), mat2x3(1.0), mat3x4(1.0), ivec3(1), mat3x4(1.0))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(ivec2(1), mat3(1.0), gl_WorkGroupSize.x, ivec2(1), _GLF_struct_1(_GLF_struct_0(vec3(1.0)), uvec2(1u)));
 _GLF_struct_replacement_15.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = _GLF_struct_replacement_2.workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_15.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 uint subgroup_base = _GLF_struct_replacement_21.subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 _GLF_struct_replacement_15.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_25(_GLF_struct_22(vec3(1.0), ivec3(1)), _GLF_struct_23(bvec2(true), 1.0, workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), true), bvec3(true), ivec4(1), _GLF_struct_24(mat2x4(1.0), ivec2(1), mat3x2(1.0), bvec4(true), ivec2(1), uvec4(1u))), vec4(1.0), uvec3(1u));
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_struct_replacement_26._f0._f1.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[_GLF_struct_replacement_15.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], 4, 64, 2);
 subgroupBarrier();
 atomicStore(checker[_GLF_struct_replacement_15.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
}
