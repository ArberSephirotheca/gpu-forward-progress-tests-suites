#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))))), false, false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)))), true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-83.85, -6.3)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(84.54)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-252.885)))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true)), ! (! (bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true)))))))), ! (! ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true)), ! (! (bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true))))))))))) || false)))))))))) || false), true), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bool((false))))) || false)))), true), true))), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bool((false))))) || false)))), true), true))), false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bool((false))))) || false)))), true), true))), false))))))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true)), ! (! (bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true)))))))), ! (! ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true)), ! (! (bool(bvec4(bool(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true))))))))))) || false)))))))))) || false), true), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bool((false))))) || false)))), true), true))), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bool((false))))) || false)))), true), true))), false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bool((false))))) || false)))), true), true))), false))))))))))), false, true)))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), (1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), _GLF_IDENTITY(int(ivec3((1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 1, 0)), int(_GLF_IDENTITY(int(int(ivec3((1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 1, 0))), ~ (~ (int(int(ivec3((1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), 1, 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_base), (false ? _GLF_FUZZED((-- subgroup_local_id)) : uint(subgroup_base)))), ~ (~ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))), (false ? _GLF_FUZZED((_GLF_IDENTITY(-- subgroup_local_id, (false ? _GLF_FUZZED(uaddCarry(subgroup_local_id, workgroup_id, workgroup_id)) : _GLF_IDENTITY(-- subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(-- subgroup_local_id, (-- subgroup_local_id) << 0u))))))) : uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u))))))))) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_base), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY((-- subgroup_local_id), ~ (~ ((-- subgroup_local_id))))) : uint(subgroup_base)), ~ (~ (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY((-- subgroup_local_id), ~ (~ ((-- subgroup_local_id))))) : uint(subgroup_base)), 0u | ((false ? _GLF_FUZZED(_GLF_IDENTITY((-- subgroup_local_id), ~ (~ ((-- subgroup_local_id))))) : uint(subgroup_base))))))))), _GLF_IDENTITY(~ (~ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))), (false ? _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-- subgroup_local_id, (false ? _GLF_FUZZED(uaddCarry(subgroup_local_id, workgroup_id, workgroup_id)) : -- subgroup_local_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(-- subgroup_local_id, (false ? _GLF_FUZZED(uaddCarry(subgroup_local_id, workgroup_id, workgroup_id)) : -- subgroup_local_id)), (_GLF_IDENTITY(-- subgroup_local_id, (false ? _GLF_FUZZED(uaddCarry(subgroup_local_id, workgroup_id, workgroup_id)) : -- subgroup_local_id))) ^ 0u)))))) : uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u))))))), (true ? ~ (~ (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))), (false ? _GLF_FUZZED((_GLF_IDENTITY(-- subgroup_local_id, (false ? _GLF_FUZZED(uaddCarry(subgroup_local_id, workgroup_id, workgroup_id)) : -- subgroup_local_id)))) : uint(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u))))))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))))) + subgroup_local_id) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (true ? _GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (true ? mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4(-4.1, -532.715, 811.074, 844.605, -56.16, -5853.7526, -5.4, 511.973, -8613.8371, -14.84, 1041.5820, -7.0, -9040.6534, 83.13, -5884.7578, -496.203)))) : _GLF_FUZZED(mat4(-67.02, 1.8, -98.75, -4025.1151, -7.0, 880.313, 948.853, -6.2, -99.99, 0.6, 6796.2393, -9.4, -5.1, 4.6, 34.65, -7.0)))))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - log(1.0)), 0.0)), 0.0)))))), transpose(transpose(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-8.5))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(52.05) : 0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0))))))))))), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0), mat3(1.0) * (mat2x3(1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0))))), 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9474.4353) : 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))))), transpose(transpose(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0))))))))))), float(mat3(float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))))), transpose(transpose(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, length(0.0), tan(0.0), 0.0))), 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0))))))))))), 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-627.507)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7.9)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))))), transpose(transpose(mat4x2(mat4(mat4x2(injectionSwitch.y, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((1.9))), bool(false))), 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), clamp(float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((1.9))), bool(false))), 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((1.9))), bool(false))), 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((1.9))), bool(false))), 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), max(float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((1.9))), bool(false))), 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), float(mat3x4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((1.9))), bool(false))), 1.0, 1.0, 0.0, 0.0, exp(0.0), sqrt(1.0), 0.0, sqrt(0.0), 0.0, 1.0, 0.0))))))), 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))))), 1.0, sqrt(1.0), determinant(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-906.909)), float(1.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), min(vec4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))))), 1.0, sqrt(1.0), determinant(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-906.909)), float(1.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))))), 1.0, sqrt(1.0), determinant(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-906.909)), float(1.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))) / 1.0))))))))), float(mat3(float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)))))), transpose(transpose(mat4x2(mat4(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, sqrt(sqrt(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, sqrt(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 0.0))))))))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) && true)))))))))
      barrier();
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
      return;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u | (_GLF_FUZZED(subgroup_base)))) | (_GLF_FUZZED(subgroup_base))), 0u ^ (_GLF_FUZZED(subgroup_base)))), max(_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u | (_GLF_FUZZED(subgroup_base)))) | (_GLF_FUZZED(subgroup_base))), 0u ^ (_GLF_FUZZED(subgroup_base)))), _GLF_IDENTITY(uint(uvec3((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u | (_GLF_FUZZED(subgroup_base)))) | (_GLF_FUZZED(subgroup_base))), 0u ^ (_GLF_FUZZED(subgroup_base)))), 0u, 1u)), (uint(uvec3((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u | (_GLF_FUZZED(subgroup_base)))) | (_GLF_FUZZED(subgroup_base))), 0u ^ (_GLF_FUZZED(subgroup_base)))), 0u, 1u))) + 0u)), (true ? next_virtual_gid : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u | (_GLF_FUZZED(subgroup_base)))) | (_GLF_FUZZED(subgroup_base))), 0u ^ (_GLF_FUZZED(subgroup_base)))))), (_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), uint(uvec4((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), 0u, (_GLF_IDENTITY(0u, (0u) ^ 0u) << _GLF_IDENTITY(uint(8u), uint(8u))), 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), (_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), ((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base))))) << 0u)) ^ 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), (_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), ((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base))))) << 0u)) ^ 0u), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))) ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), (_GLF_IDENTITY((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base)))), ((true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base))))) << 0u)) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : 0u))) | (0u))))))))))], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uint(1)), ((uint(1))) >> 0u), clamp(_GLF_IDENTITY((uint(1)), min((uint(1)), (uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(8444) : 1)), 1)))))), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), (uint(1)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1))))), min(uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1))))), uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1))))))), uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1))))), uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (false ? _GLF_FUZZED(num_workgroup) : (uint(1)))))) | 0u, clamp((uint(1)) | 0u, _GLF_IDENTITY((uint(1)) | 0u, 0u ^ ((uint(1)) | 0u)), _GLF_IDENTITY((uint(1)) | 0u, 1u * (_GLF_IDENTITY((uint(1)) | 0u, ((uint(1)) | _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) >> 0u))) / 1u)))))), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, min(4, 4)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}
