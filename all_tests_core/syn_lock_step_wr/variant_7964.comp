#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 bvec3 _f0;
 mat3x2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 mat2x4 _f1;
 ivec2 _f2;
 bvec4 _f3;
 mat4x3 _f4;
 bool _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 mat2 _f1;
 vec3 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
} ;

struct _GLF_struct_1 {
 int _f0;
 ivec2 _f1;
 mat2x4 _f2;
 bool _f3;
 mat4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_3 {
 uint workgroup_size;
 bool _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 uvec4 _f1;
 _GLF_struct_3 _f2;
 vec2 _f3;
 mat3 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 vec4 _f1;
 ivec4 _f2;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)))))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), max(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((5.1)), _GLF_FUZZED(2.4)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(dot(vec2(sin(0.0), exp(0.0)), vec2(0.0, 1.0)), dot(vec2(sin(0.0), exp(0.0)), vec2(0.0, 1.0))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 0.0, 1.0))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false))))))), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false))))))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false))))))), true))))) && true)) || false)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x) - 0u, (_GLF_IDENTITY((gl_NumWorkGroups.x) - 0u, ((gl_NumWorkGroups.x) - _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))) * 1u)) / 1u));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false), bvec3(bvec4(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false), false)))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(bvec4(true), uvec4(_GLF_IDENTITY(1u, 0u ^ (1u))), _GLF_struct_3(gl_WorkGroupSize.x, true, _GLF_struct_1(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))), 1, 1)), ivec2(1), mat2x4(1.0), true, mat4(1.0), ivec2(1)), _GLF_struct_2(mat4(1.0))), vec2(1.0), mat3(1.0), _GLF_struct_7(mat3x4(1.0), _GLF_struct_4(bvec3(true), mat2(1.0), vec3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7444.3664) : 1.0))), mat3x2(1.0), mat2x3(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0) + (vec3(1.0, 1.0, 1.0))), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[0], max((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[0])), (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), vec3(_GLF_FUZZED(-249.695), _GLF_FUZZED((- -4.4)), _GLF_FUZZED(-1545.7644)), bvec3(false, false, false)))))) - vec3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(3.1))), 0.0, 0.0)) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (float(mat2x3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + _GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_struct_5(uvec3(1u), mat2x4(1.0), ivec2(1), bvec4(true), mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), mat3x4(1.0)), _GLF_struct_6(bvec3(true), mat3x2(1.0), mat3x4(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)))))))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), vec4(1.0), ivec4(1), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID)).x), (max(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u), gl_WorkGroupID.x)) / 1u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8._f2.workgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_8._f2.workgroup_size, min(_GLF_struct_replacement_8._f2.workgroup_size, _GLF_struct_replacement_8._f2.workgroup_size))) | (_GLF_struct_replacement_8._f2.workgroup_size)), min(_GLF_IDENTITY(_GLF_struct_replacement_8._f2.workgroup_size, clamp(_GLF_struct_replacement_8._f2.workgroup_size, _GLF_struct_replacement_8._f2.workgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_8._f2.workgroup_size, uint(_GLF_IDENTITY(uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)), ((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u))) | ((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)))) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)), (_GLF_IDENTITY((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u), (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)), (_GLF_IDENTITY((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)), (_GLF_IDENTITY((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)), ((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u))) / uvec4(1u, 1u, 1u, 1u))) / (uvec4(1u, 1u, 1u, 1u) & uvec4(1u, 1u, 1u, 1u))) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u))) | _GLF_IDENTITY(((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u))), ~ (_GLF_IDENTITY(~ (((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)))), uvec4(0u, 0u, 0u, 0u) + (~ (((uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u)) | (uvec4(_GLF_struct_replacement_8._f2.workgroup_size, 1u, 0u, 1u))))))))))))) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(_GLF_struct_replacement_8._f2.workgroup_size, uint(uvec2(_GLF_struct_replacement_8._f2.workgroup_size, 0u))))) * _GLF_struct_replacement_0.workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false || (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false || (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))) || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(abs(vec2(45.18, -5028.6788))))).y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), false))) && true)))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    return;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.1) : injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), _GLF_IDENTITY(false, ! (! (false))), true, _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) || false)))), (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))), true && (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true)))) && true)))))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))) || false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))), bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)) + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(0u, (0u) ^ 0u) | (subgroup_base))) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)) * 1u), subgroup_base)), (subgroup_base) / 1u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))) | (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (_GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (1u & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec2(194711u, 103440u)), (_GLF_FUZZED(uvec2(194711u, 103440u))) | (_GLF_FUZZED(uvec2(194711u, 103440u)))) : (uvec2(1u, (1u & 1u))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))) | (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (_GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (1u & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec2(194711u, 103440u)), (_GLF_FUZZED(uvec2(194711u, 103440u))) | (_GLF_FUZZED(uvec2(194711u, 103440u)))) : (uvec2(1u, (1u & 1u))))))))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))) | (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (_GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (1u & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec2(194711u, 103440u)), (_GLF_FUZZED(uvec2(194711u, 103440u))) | (_GLF_FUZZED(uvec2(194711u, 103440u)))) : (uvec2(1u, (1u & 1u)))))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))) | (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (_GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (1u & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec2(194711u, 103440u)), (_GLF_FUZZED(uvec2(194711u, 103440u))) | (_GLF_FUZZED(uvec2(194711u, 103440u)))) : (uvec2(1u, (1u & 1u))))))))))))), subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base)), max(~ (clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base)), ~ (clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base))))))))), ((~ (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base), ~ (_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base)), max(~ (clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base)), ~ (clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (1u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(uvec4(uvec2(1u, (1u & 1u)), 1u, 0u))), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), (_GLF_IDENTITY((1u & 1u), _GLF_IDENTITY(uint(uint((1u & 1u))), clamp(uint(uint((1u & 1u))), uint(uint((1u & 1u))), uint(uint((1u & 1u))))))) / 1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u)))), (false ? _GLF_FUZZED((uvec2(1178u, 40121u) & bitfieldReverse(workgroup_base))) : _GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, _GLF_IDENTITY((1u & 1u), ((1u & 1u)) / 1u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * (uvec2(1u, (1u & 1u))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), _GLF_IDENTITY(uvec2(1u, 1u), clamp(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), uvec2(uvec3((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u), min(uvec2(1u, 1u), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))), 0u)))) << uvec2(0u, 0u)) * uvec2(1u, 1u)), uvec2(1u, 1u))) * (_GLF_IDENTITY(uvec2(1u, (1u & 1u)), (true ? uvec2(1u, (_GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) & 1u)) : _GLF_FUZZED(uvec2(subgroup_base))))))), uint(_GLF_IDENTITY(uvec2(1u, (1u & 1u)), uvec2(1u, 1u) * _GLF_IDENTITY((uvec2(1u, (1u & 1u))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(194711u, 103440u), min(uvec2(194711u, 103440u), uvec2(194711u, 103440u)))), (_GLF_FUZZED(uvec2(194711u, 103440u))) | _GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), (_GLF_IDENTITY((_GLF_FUZZED(uvec2(194711u, 103440u))), uvec2(uvec2((_GLF_FUZZED(uvec2(194711u, 103440u))))))) | ((_GLF_FUZZED(uvec2(194711u, 103440u)))))) : (uvec2(1u, (1u & 1u))))))))))), subgroup_base)))))))))) / 1u)), _GLF_IDENTITY((subgroup_base), clamp((subgroup_base), (subgroup_base), (subgroup_base))) / 1u)))) - 0u) + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))))) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), true && (_GLF_IDENTITY(! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), _GLF_IDENTITY(bool(bool(! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), bool(bvec3(bool(bool(! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), false, true))))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))))) || false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_IDENTITY(true, (true) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atanh((true ? vec2(-1.0, 5092.5187) : vec2(-40.41, -3.1)))) : injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true)), true, true))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))) || false)))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))) && true), false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, length(vec2(0.0, 0.0)) + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) % subgroup_size), (_GLF_IDENTITY(0u ^ 0u, (_GLF_IDENTITY(0u ^ 0u, (0u ^ 0u) + 0u)) | 0u)) | (((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false), bvec3(bvec3(bvec3(false, true, false))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), false), bvec3(bvec3(bvec3(false, true, false))))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.5) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))) && (true)), false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, (true) || false), false))))), true, true), false))))))))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (4) - 0));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false), false, true), bvec3(bvec4(bvec3(! (_GLF_DEAD(false)), false, true), false)))), (bool(_GLF_IDENTITY(bvec3(! (_GLF_DEAD(false)), false, true), bvec3(bvec4(bvec3(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) && true))))), false, true), false))))) && true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), vec2(mat2x4((injectionSwitch), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) && true))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false, false))) || false)) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), (2) | (2)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) + vec2(0.0, 0.0)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) << 0)))) | (4)), _GLF_IDENTITY(64, (64) | 0), _GLF_IDENTITY(4, clamp(4, 4, 4)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))) || (false))), true, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bool(false), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))), false))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), bool(bvec3(bool(bool(bool(false))), false, true)))), true, false)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))), _GLF_IDENTITY(true, ! (! (true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bool(false), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bool(false), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bool(false), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bool(false), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(bool(false), true, false)))))))))))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(false), true, false)), bvec3(bvec4(bvec3(bvec3(bool(false), true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true)))))))))))))))) || (false))))))
  barrier();
}
