#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0) + (_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))))), 0.0, 1.0)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-7.5) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0))))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch))) * exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))))), false || ((! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))))))) && true)))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))))), 0.0, 1.0)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-7.5) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), min((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86))), mix(float(_GLF_FUZZED(82.69)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(24.86)))), bool(true)))) - determinant(mat2(0.0, 1.0, 0.0, 0.0))))))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch))) * exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))))), false || ((! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))))))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((0 | 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y = _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(13235)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
  barrier();
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x = subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (! (false)))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), (false || (_GLF_IDENTITY(false, (false) && true))) && true))), false || (bool(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), (false || (_GLF_IDENTITY(false, (false) && true))) && true)))))), (false || (_GLF_IDENTITY(false, (false) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_IDENTITY(false || (false), (false || (false)) && true), true, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, true && (true))))))))
  barrier();
 do
  {
   GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z, (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z) | 0u);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x = _GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), false)))))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.x = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x, _GLF_IDENTITY(~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x)), (~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x))) >> 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x, (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x) | (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x))) << 0u)));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size, (true ? GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size : _GLF_FUZZED(48094u)));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY((! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, _GLF_IDENTITY(false, true && (false)), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false))))), true, true, false)))))))), _GLF_IDENTITY((_GLF_IDENTITY((! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))), false || (false))), false, false, false))))))) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))), false || (false))), false, false, false))))))) || false)), ((! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))), false || (false))), false, false, false))))))) || false))) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))), false || (false))), false, false, false))))))) || false)), ((! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))), false || (false))), false, false, false))))))) || false))) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), true, false))))), (((! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), false, false, false)))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false || (false))), false, false, false)), false || (bool(bvec4((_GLF_IDENTITY(false, false || (false))), false, false, false))))))) || false)))) || false) && true) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1659.3902)), float(injectionSwitch.y), bool(true)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-22.12), _GLF_FUZZED(-2.7)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true))).y))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))) && true)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))).x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))).x : _GLF_FUZZED(-9221.0511))) : _GLF_FUZZED(refract(-6.0, 1727.5389, -241.811)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (injectionSwitch) * mat2(1.0)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false, true)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))), ((bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false))))))) || false)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true)))))))), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, abs(1.0), 1.0))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), _GLF_IDENTITY(false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true))))), ((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, abs(1.0), 1.0))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), _GLF_IDENTITY(false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true)))))) && true)), ((! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)).y), true, true, true))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(vec3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0)), (true ? vec2(vec3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0)) : _GLF_FUZZED(vec2(-4.2, 2.5))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(false, ! (! (false))))))) && true, (((injectionSwitch.x > injectionSwitch.y)) && true) || false))), false, true)), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-29.90)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), false, true))))))))) || false)) && true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0)), mix(vec2(_GLF_FUZZED(9.6), _GLF_FUZZED(9.7)), vec2((vec2(mat2x4(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))[0], (vec2(mat2x4(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), uint(uvec3(_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), max(_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), (~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w)) | (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), min(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), ~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w))))), ~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w))), 1u, 1u)))), ((_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), uint(uvec3(_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), max(_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), (~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w)) | (_GLF_IDENTITY(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), min(~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w), ~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w))))), ~ (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w))), 1u, 1u))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.z;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y * subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, min(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) * subgroup_size) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | 0u), 1u, 1u)), 0u + (1u))))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y) ^ (0u | 0u)), min(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) * subgroup_size) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), clamp(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y * subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, min(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) * subgroup_size) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y * subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, min(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) * subgroup_size) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u))))), workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y * subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, min(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) * subgroup_size) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u + (1u)))))))) | 0u) + GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y;
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.y = virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)))), bool(true))))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)))), bool(true))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)))), bool(true))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)))), bool(true))))).x)) < _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (normalize(vec2(1.0, 1.0))) - abs(sin(vec2(0.0, 0.0)))))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), max(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))), 0.0))).y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & (ivec3(-91496, -82116, 90842) - ivec3(-19489, -95243, -59942)).z, (true ? 0 & (ivec3(-91496, -82116, 90842) - ivec3(-19489, -95243, -59942)).z : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.w = GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.y;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(924.092, 626.194, 3.9).r)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(924.092, 626.194, 3.9).r)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(924.092, 626.194, 3.9).r)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))) && true))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), ! (! (false)))))) || false))));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-569.388) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.9)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.2)), bool(false)))), bool(true)))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) - 0u) + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y * subgroup_size + ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1) | 0u), (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), _GLF_IDENTITY(0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), uint(uvec3(_GLF_IDENTITY(0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) + _GLF_IDENTITY((0u), min((0u), (0u))))) + 0u) + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1)), clamp(int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1)), int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1)), int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1)))))), _GLF_IDENTITY(clamp(0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), 0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), 0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1)), (clamp(0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), 0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1), 0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) - 0u)), 0u + (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))) + 0u), GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + _GLF_IDENTITY(1, ~ (~ (1))), GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y + 1))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.w], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y, (GLF_merged3_0_1_13_1_1_17_2_1_12num_workgroupsubgroup_local_idworkgroup_id.y) ^ 0u) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, 1, 1), ~ (~ (ivec4(1, 1, 1, 1)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, 1, 1), ~ (~ (ivec4(1, 1, 1, 1)))), min(_GLF_IDENTITY(ivec4(1, 1, 1, 1), ~ (~ (ivec4(1, 1, 1, 1)))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ~ (~ (ivec4(1, 1, 1, 1)))))))))) | (ivec4(1, 1, 1, 1))))) < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, false, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true, ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ((bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y : _GLF_FUZZED(-94.38))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)), ! (! (injectionSwitch.x > injectionSwitch.y))))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false))), ! (! (bool(bool(_GLF_IDENTITY((bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))) || false))))))))) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.0)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(359.139)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(359.139)), bool(false))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(359.139)), bool(false))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.0)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(359.139)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(359.139)), bool(false))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(359.139)), bool(false))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ! (! ((! (_GLF_IDENTITY(true, ! (! (true))))))))))))))))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(92.83)), bool(false))))) > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(! (! (! (! (false)))), false || (! (! (! (! (false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (_GLF_IDENTITY(false, (false) && true))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)), bool(bvec3(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))), (false ? _GLF_FUZZED(vec2(9.7, 4.1)) : vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), min(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))))))).x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))) || false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), false))) || _GLF_IDENTITY(false, false || (false))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) && true))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.5) : injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true)))) || false))))))));
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))) > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
          barrier();
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0), (mat3x2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0)) * mat3(1.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, 0 + (2))), 4, 64, 4);
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))))))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ 272.622))), bool(false))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, (true) && true) && (_GLF_WRAPPED_IF_FALSE(false))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))) && true)), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))) || false)))))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))) && true), (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))), true && (! (! (_GLF_DEAD(false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (0 | _GLF_IDENTITY((1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1))))), clamp(_GLF_IDENTITY((1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1))))), int(int((1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1)))))))), _GLF_IDENTITY((1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1))))), min((1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1))))), (1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1))))))), (1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, 0 ^ (1)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4) | 0, clamp(_GLF_IDENTITY((4) | 0, (_GLF_IDENTITY((4) | 0, ((4) | 0) | (_GLF_IDENTITY((4) | 0, ((4) | 0) - 0)))) ^ 0), (4) | 0, _GLF_IDENTITY(_GLF_IDENTITY((4) | 0, 0 ^ ((4) | 0)), ((4) | 0) >> _GLF_IDENTITY(0, max(0, 0)))))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             return;
            }
          }
         else
          {
           do
            {
             subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(_GLF_IDENTITY(true, false || (true)), true))), false, true))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
}
