#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 bool _f0;
 mat2x3 _f1;
 bvec3 _f2;
 bvec4 _f3;
 vec3 _f4;
 mat4x3 _f5;
 int _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 bool _f0;
} ;

struct _GLF_struct_1 {
 uint _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 uint virtual_gid;
 _GLF_struct_5 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat3 _f1;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x = subgroup_local_id;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec4(1u), mat3(1.0), gl_NumWorkGroups.x);
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y = workgroup_base;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(_GLF_struct_1(1u), _GLF_struct_2(true), vec2(1.0)), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + subgroup_id * subgroup_size + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, _GLF_struct_5(_GLF_struct_4(true, mat2x3(1.0), bvec3(true), bvec4(true), vec3(1.0), mat4x3(1.0), 1), bvec2(true)), bvec4(true));
 uint next_virtual_gid = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + subgroup_id * subgroup_size + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1) % subgroup_size);
 atomicStore(buf[_GLF_struct_replacement_6.virtual_gid], uint(1), 4, 64, 4);
 if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     subgroupAll(false);
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   subgroupAll(true);
  }
}
