#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_26 {
 int _injected_loop_counter;
 mat3x4 _f0;
} ;

struct _GLF_struct_23 {
 mat2x3 _f0;
 uint _f1;
 mat3x4 _f2;
 mat2x3 _f3;
 float _f4;
 uint workgroup_id;
} ;

struct _GLF_struct_24 {
 _GLF_struct_23 _f0;
} ;

struct _GLF_struct_21 {
 bvec3 _f0;
 bvec4 _f1;
 bvec2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_20 {
 vec3 _f0;
 float _f1;
 vec3 _f2;
 vec2 _f3;
 vec3 _f4;
 ivec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_19 {
 mat2x4 _f0;
 mat2 _f1;
 bool _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 vec4 _f1;
 mat2x3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_22 {
 _GLF_struct_18 _f0;
 ivec3 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 _GLF_struct_24 _f1;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 int _f1;
 mat2x3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_14 {
 vec3 _f0;
 mat2 _f1;
 mat2x4 _f2;
 mat3 _f3;
 uvec3 _f4;
 mat2x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_16 {
 vec4 _f0;
 int _f1;
 uvec4 _f2;
 _GLF_struct_14 _f3;
 mat2x4 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_12 {
 uint virtual_gid;
 mat3x2 _f0;
 int _f1;
 mat4 _f2;
 mat3x2 _f3;
 mat4x3 _f4;
 ivec3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_10 {
 bvec2 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 uvec2 _f1;
 float _f2;
} ;

struct _GLF_struct_17 {
 mat4 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_16 _f3;
 float _f4;
 mat3 _f5;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 mat4x2 _f1;
 vec3 _f2;
 vec2 _f3;
 float _f4;
 ivec2 _f5;
 uint num_workgroup;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 _GLF_struct_7 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 int _f1;
 uvec4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 bvec2 _f1;
 ivec2 _f2;
 mat4 _f3;
 vec3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 bool _f1;
 bvec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 bvec4 _f3;
 mat2 _f4;
 mat4x3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 uvec3 _f1;
 _GLF_struct_1 _f2;
 uvec2 _f3;
 uvec3 _f4;
 _GLF_struct_2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 _GLF_struct_4 _f1;
 bvec4 _f2;
 mat2 _f3;
 _GLF_struct_5 _f4;
 mat2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_8(mat3x2(1.0), _GLF_struct_7(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true)), float(vec3(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true)), float(_GLF_IDENTITY(vec2(mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true)), 0.0), (vec2(mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true)), 0.0)) / vec2(1.0, 1.0)))), 1.0, 0.0))))), clamp(min(_GLF_IDENTITY(1.0, float(mat3x4(1.0, sqrt(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec4(length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true)))), min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true)))), min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-88.49)), _GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0), bool(true))))))), clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true))))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.49, clamp(-88.49, -88.49, _GLF_IDENTITY(-88.49, (false ? _GLF_FUZZED(-6.2) : -88.49)))))), float(1.0), bool(true))))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-88.49)), float(1.0), bool(true))))))), 1.0))), mat4x2(1.0), vec3(1.0), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true)), clamp(mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true)), mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true)), _GLF_IDENTITY(mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true)), clamp(mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true)), mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true)), mix(vec2((vec2(1.0))[0], _GLF_FUZZED(688.829)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)), ((vec2(1.0))) / vec2(1.0, 1.0)) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x2(mat2(1.0)), transpose(transpose(mat4x2(mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-25.55))), 1.0)))))))))))[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-60013)))], clamp((vec2(1.0))[1], (vec2(1.0))[1], (vec2(1.0))[1]))), bvec2(false, true))))))), 1.0, _GLF_IDENTITY(ivec2(1), (ivec2(1)) | (_GLF_IDENTITY(ivec2(1), ivec2(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1))), 0))))), gl_NumWorkGroups.x)));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.4)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), mix(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.4)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), float(_GLF_FUZZED(9.0)), bool(false))), tan(0.0))), (dot(vec4(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0, _GLF_IDENTITY(float(mat3x4((_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0, length(sin(0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, abs(1.0), abs(1.0))), clamp(float(mat3x4((_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0, length(sin(0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, abs(1.0), abs(1.0))), float(mat3x4((_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0, length(sin(0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, abs(1.0), abs(1.0))), float(mat3x4((_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0, length(sin(0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, abs(1.0), abs(1.0))))))), 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0)))) - 0.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(-833.283)), float(_GLF_IDENTITY(tan(0.0), min(tan(0.0), _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0)))))), bool(true))), 0.0, 1.0, 1.0, sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, sqrt(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-129.091 * -7.4))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), exp(0.0), 1.0, 0.0)), _GLF_IDENTITY(min(float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0))), (dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 1.0, tan(0.0)))) - 0.0)), 1.0, 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, sqrt(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((3798.6456)) : _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), clamp(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))))))), exp(0.0), 1.0, 0.0)), float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.0))))), vec4(1.0, 0.0, 1.0, tan(0.0))), (dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0)))) - 0.0)), _GLF_IDENTITY(1.0, sin(0.0) + (1.0)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), max(sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 1.0, 0.0, sqrt(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), _GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0))), 1.0, 0.0))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-4.9) : min(float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(tanh(-33.02)) : 0.0)), cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), mix(float(_GLF_FUZZED(-617.733)), float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), bool(true))), tan(0.0))), (dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0)))) - 0.0)), 1.0, 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, sqrt(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), exp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec4(113.137, 3888.7520, 3.4, -286.249).r) : _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 1.0, 0.0)), float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, _GLF_IDENTITY(1.0, float(float(1.0))), tan(0.0))), (dot(vec4(0.0, 1.0, 0.0, cos(0.0)), vec4(1.0, 0.0, 1.0, tan(0.0)))) - 0.0)), 1.0, 1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, sqrt(round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0))))), 1.0, 0.0, sqrt(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), exp(0.0), 1.0, 0.0))))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_22(_GLF_struct_18(bvec3(true), vec4(1.0), mat2x3(1.0), mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), ivec3(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1)))))))), _GLF_struct_19(mat2x4(1.0), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))) / mat2(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(true, false || (true)), uvec3(1u)), _GLF_struct_20(_GLF_IDENTITY(vec3(1.0), clamp(_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), vec3(1.0), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) - vec3(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.3) : _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))) : _GLF_FUZZED(-621.228))), 0.0, 0.0)))), 1.0, vec3(1.0), vec2(1.0), vec3(1.0), ivec4(1), 1u), _GLF_struct_21(bvec3(true), bvec4(true), bvec2(true), bvec4(true))), _GLF_struct_24(_GLF_struct_23(mat2x3(1.0), 1u, mat3x4(1.0), mat2x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(6.9, 0.0 + (6.9)))), float(1.0), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), float(1.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), float(1.0), bool(true))), (true ? _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(6.9)), min(_GLF_IDENTITY(float(_GLF_FUZZED(6.9)), 1.0 * (_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(6.9, (_GLF_IDENTITY(6.9, max(6.9, _GLF_IDENTITY(6.9, clamp(6.9, 6.9, 6.9))))) * 1.0))), (true ? float(_GLF_FUZZED(6.9)) : _GLF_FUZZED(-4.7))))), float(_GLF_FUZZED(6.9)))), float(1.0), bool(true))) : _GLF_FUZZED(61.54))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), float(1.0), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), _GLF_IDENTITY(float(1.0), (false ? _GLF_FUZZED(-2.3) : float(1.0))), bool(true))))))), gl_WorkGroupID.x)));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_25._f1._f0.workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, bool(bvec3((false) && true, true, true)))))), bool(bvec3(_GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY((_GLF_IDENTITY((false) && true, bool(bvec3((false) && true, _GLF_IDENTITY(true, (true) && true), true)))), bool(bool((_GLF_IDENTITY((false) && true, bool(bvec3((false) && true, _GLF_IDENTITY(true, (true) && true), true))))))))), true, false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4(1.1, -75.28, 1.2, 0.2, 351.831, 7202.2698, -0.7, -1.4, -810.198, -9.5, 746.776, 1.1, -0.1, 4.6, 7491.7468, -342.616)) : mat4(1.0))), (false ? _GLF_FUZZED(mat4(-462.579, -38.79, -1.8, 0.8, -52.61, 594.987, -8192.8611, 55.55, -26.70, -3755.3078, -2.0, -462.568, -83.65, 0.2, 9895.3308, _GLF_IDENTITY(-18.76, (-18.76) * 1.0))) : mat4(1.0))), _GLF_struct_11(_GLF_struct_10(bvec2(true)), uvec2(1u), 1.0), _GLF_struct_13(_GLF_struct_12(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))) ^ _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | (0u))))), mat3x2(1.0), _GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(1.0))), mat3x2(1.0), mat4x3(1.0), ivec3(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(bitfieldReverse(50370))))), mat4x2(1.0))), _GLF_struct_16(vec4(1.0), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, (1 ^ 1)), max(ivec3(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0), (1 ^ 1)), ivec3(1, 0, (1 ^ 1))))), (int(_GLF_IDENTITY(ivec3(1, 0, (1 ^ 1)), _GLF_IDENTITY(max(ivec3(1, 0, (1 ^ 1)), ivec3(1, 0, (1 ^ 1))), min(max(ivec3(1, 0, (1 ^ 1)), ivec3(1, 0, (1 ^ 1))), max(ivec3(1, 0, (1 ^ 1)), ivec3(1, 0, (1 ^ 1)))))))) + 0)), 1)), uvec4(1u), _GLF_struct_14(vec3(1.0), mat2(1.0), mat2x4(1.0), mat3(1.0), uvec3(1u), mat2x4(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))), mix(vec3(((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))))[0], ((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))))[1], _GLF_FUZZED(2090.3334)), vec3(_GLF_FUZZED(-3735.5861), _GLF_FUZZED(-2.9), ((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))))[2]), bvec3(false, false, true))) + vec3(0.0, 0.0, 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-48.99, 22.93, 989.840)) : _GLF_IDENTITY((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))), mix(vec3(((_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0) * (vec3(1.0)), (vec3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, 0.0 + (1.0)) : _GLF_FUZZED(4.5))), 1.0, 1.0) * (vec3(1.0))) + vec3(0.0, 0.0, 0.0)))))[0], ((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))))[1], _GLF_FUZZED(2090.3334)), vec3(_GLF_FUZZED(-3735.5861), _GLF_FUZZED(-2.9), ((_GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * _GLF_IDENTITY((vec3(1.0)), ((vec3(1.0))) - sin(log(vec3(1.0, 1.0, 1.0)))))))[2]), bvec3(false, false, true))) + vec3(0.0, 0.0, 0.0))))), mat2x4(1.0), _GLF_struct_15(mat4x2(1.0), 1, mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))))))) ? _GLF_FUZZED(534.271) : 1.0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))))))) ? _GLF_FUZZED(534.271) : 1.0, mix(float(_GLF_FUZZED(-89.06)), float(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))))))) ? _GLF_FUZZED(534.271) : 1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) / 1.0)))), ivec4(1))), 1.0, mat3(1.0));
 for(int _injected_loop_counter = (0 | ((0 >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(_GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(1, mat3x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_26._injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(85333)))))), (7) | 0))), (_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(85333)))))), (7) | 0)))) << 0))); _GLF_struct_replacement_26._injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(1.0), length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), true))) && true))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat4x2(1.0), _GLF_struct_4(_GLF_struct_0(vec3(1.0), mat2x4(1.0), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(1.3)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))))))))))), 0.0 + (mix(float(_GLF_FUZZED(1.3)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec4(true), mat2(1.0), mat4x3(1.0), bvec4(true)), uvec3(1u), _GLF_struct_1(mat3x2(1.0), true, bvec3(true), vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) >> 0u)), max(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) >> 0u)), uvec2(uvec3(uvec2(_GLF_IDENTITY(1u, (1u) >> 0u)), 1u))), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u)))), uvec3(1u), _GLF_struct_2(bvec2(true), bvec2(true), ivec2(1), mat4(1.0), vec3(1.0), mat4x3(1.0)), _GLF_struct_3(mat4x2(1.0), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(7), int(7)))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))), _GLF_IDENTITY(((~ (1))), (((~ (1)))) << 0) + 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), clamp((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(uint(2u), uint(2u)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), max(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))), 1u * (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(uint(2u), uint(2u)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), max(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id)))))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), clamp((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), min((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) / 1u)))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))))), ((_GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (true ? _GLF_IDENTITY(uint(2u), uint(2u)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(uint(2u), uint(2u))))), clamp(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), uint(_GLF_IDENTITY(uvec3((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 1u), (uvec3((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 1u)) | (uvec3((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 1u))))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))) | ((_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ~ (~ ((1u)))) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), clamp((0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(2u), uint(2u)), (false ? _GLF_FUZZED(subgroup_id) : 0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(uint(2u), uint(2u))) + 0u)) ^ 0u))))))))) | (0u ^ 0u)) >> 0u)), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) ^ uvec4(0u, 0u, 0u, 0u))) << uvec4(0u, 0u, 0u, 0u)))), bvec4(true), mat2(1.0), _GLF_struct_5(vec3(1.0), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + 1) % subgroup_size)), mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-3.9) : 1.0))) - 0.0, (_GLF_IDENTITY((_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.9) : 1.0))), _GLF_IDENTITY(float(vec4((_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.9) : 1.0))), 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(fract(6.9)) : float(vec4((_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.9) : 1.0))), 1.0, 0.0, 1.0))))) - 0.0) - log(1.0)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), min(_GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(0, 1 * (0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY((-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))) | (-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))), (_GLF_IDENTITY((-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))) | (-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))), ((-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))) | (-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0)))))) | ((-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))) | (-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0)))))))) | ((-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))) | (-4181 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) & 1) * (_GLF_IDENTITY(1, clamp(1, 1, 1))), max((int(_GLF_ONE(1.0, injectionSwitch.y)) & 1) * (_GLF_IDENTITY(1, clamp(1, 1, 1))), (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1) * (_GLF_IDENTITY(1, clamp(1, 1, 1))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(findLSB(workgroup_size)) : _injected_loop_counter ++)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(58.59), _GLF_FUZZED(-814.405)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y)))), bool(bool(bool(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false)) && true)))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))), max((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))), (true ? (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(_injected_loop_counter))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))), (true ? _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 + (6)), 6, 6)))) : _GLF_FUZZED(_injected_loop_counter)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false)))))) || false))) ? _GLF_FUZZED(67720) : ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false)))))) || false))) ? _GLF_FUZZED(67720) : ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) ^ 0)), (_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(67720) : ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(3579) : int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! _GLF_IDENTITY((! (false)), ((! (false))) || false)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_17._f2._f0.virtual_gid, min(_GLF_struct_replacement_17._f2._f0.virtual_gid, _GLF_struct_replacement_17._f2._f0.virtual_gid))], _GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true, true, false))), bool(bvec2(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), (vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), (vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))) * mat2(1.0)))[0], (_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))), (vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(93.50), _GLF_FUZZED(-69.97)), bvec2(false, false))), mix(vec2(_GLF_FUZZED(1.0), _GLF_FUZZED(-8224.7528)), vec2((vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0))))), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, 0.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2x4(-9.0, -77.12, -69.18, 2411.3567, 1.3, -1.1, 7101.3244, 51.85)) : mat2x4(1.0, 0.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0, 1.0)))), (float(_GLF_IDENTITY(mat2x4(1.0, 0.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2x4(-9.0, -77.12, -69.18, 2411.3567, 1.3, -1.1, 7101.3244, 51.85)) : mat2x4(1.0, 0.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0, 1.0))))) * 1.0)), 0.0))))), clamp(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec2(1.0, 0.0))))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec2(1.0, 0.0)))), (_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec2(1.0, 0.0))))) * sqrt(1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec2(1.0, 0.0))))), mix(float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec2(1.0, 0.0)))))), float(_GLF_FUZZED(0.3)), bool(false))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, cos(0.0))))[1]), bvec2(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), (! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), bool(bvec4(_GLF_IDENTITY(! (true), ! (! (! (true)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))) < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))) && (true), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))) && (true), false, false))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), vec2(_GLF_IDENTITY(mat2x3(vec2(1.0, 1.0) * (injectionSwitch), 1.0, 1.0, 1.0, log(1.0)), transpose(transpose(mat2x3(vec2(1.0, 1.0) * (injectionSwitch), 1.0, 1.0, 1.0, log(1.0)))))))).y, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, true))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))) || false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(991.782))) < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, true)))))))))) && (true))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             atomicStore(buf[_GLF_struct_replacement_6._f4.next_virtual_gid], uint(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))), 4, 64, 4);
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.4)), bool(false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         atomicStore(buf[_GLF_struct_replacement_6._f4.next_virtual_gid], uint(2), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, cos(0.0), 0.0, log(1.0), tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, cos(0.0), 0.0, log(1.0), tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, cos(0.0), 0.0, log(1.0), tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(true);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(0.6, -0.8)) : injectionSwitch)).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(0.6, -0.8)) : injectionSwitch)).y))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)), false || (bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))), (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))))) && true)))))), false, true, false)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)), false || (bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))), (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))))) && true)))))), false, true, false))))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)), false || (bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, _GLF_IDENTITY(false, false || (false)))))))), true)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.9), _GLF_IDENTITY(_GLF_FUZZED(-7525.1621), float(mat4x2(_GLF_FUZZED(-7525.1621), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.9), _GLF_IDENTITY(_GLF_FUZZED(-7525.1621), float(mat4x2(_GLF_FUZZED(-7525.1621), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.9), _GLF_IDENTITY(_GLF_FUZZED(-7525.1621), float(mat4x2(_GLF_FUZZED(-7525.1621), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.9), _GLF_IDENTITY(_GLF_FUZZED(-7525.1621), float(mat4x2(_GLF_FUZZED(-7525.1621), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (false ? _GLF_FUZZED(-96.70) : _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).y)))))))), false)))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0)))))), int(0))) & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))), true, false, false)))))))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) << 0)) << (0 << _GLF_IDENTITY(int(3), int(3)))), int(2))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) << 0)) << (0 << _GLF_IDENTITY(int(3), int(3)))), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) << 0)) << (0 << _GLF_IDENTITY(int(3), int(3)))), int(2)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
