#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))))), injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mix(vec2(_GLF_IDENTITY((min(injectionSwitch, injectionSwitch))[0], clamp((min(injectionSwitch, injectionSwitch))[0], (min(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY((min(injectionSwitch, injectionSwitch))[0], max((min(injectionSwitch, injectionSwitch))[0], (min(injectionSwitch, injectionSwitch))[0])))), (min(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(9.5), _GLF_FUZZED(-8.2)), bvec2(false, false))), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, sqrt(0.0), log(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, abs(length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 1u * (workgroup_id)), workgroup_id)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u)))) / 1u), (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), workgroup_id)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u)), min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u)), 0u | (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u)), (false ? _GLF_FUZZED(172617u) : 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u)))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u)))))) / 1u)) * 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), min(0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * subgroup_size))))))) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), min(0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * subgroup_size))))))) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), min(0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * subgroup_size))))))) + subgroup_local_id) - 0u)) << 0u), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_size)))))) * subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) + subgroup_local_id) ^ 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size), ~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (4) - (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))))) << _GLF_IDENTITY(int(2), int(2)))), 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y))), ! (! ((_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(float(76663)), ((injectionSwitch) * mat2(1.0))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED((+ 12.86))), bvec2(true, false)))))).y)))))), true && (! _GLF_IDENTITY((_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(813.647)), bool(false))))), _GLF_IDENTITY(bool(bvec2((_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(813.647)), bool(false))))), true)), false || (bool(bvec2((_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(813.647)), bool(false))))), true)))))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (false ? _GLF_FUZZED(asin(vec2(8.3, 49.96))) : (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), injectionSwitch)).y))), ! (! ((_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(float(76663)), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), clamp(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED((+ 12.86))), bvec2(true, false)))))).y)))))), true && (! _GLF_IDENTITY((_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(813.647)), bool(false))))), _GLF_IDENTITY(bool(bvec2((_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(813.647)), bool(false))))), true)), false || (bool(bvec2((_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(float(_GLF_FUZZED(813.647)), (true ? float(_GLF_FUZZED(813.647)) : _GLF_FUZZED(-6621.3703))), bool(false))))), true)))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))).y) && true)))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3x4((injectionSwitch), sin(0.0), exp(log(1.0)), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), vec3(1.0, 0.0, 0.0)), dot(vec3(log(1.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 1.0))) - vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(0.0, exp(0.0) * (0.0))))))) > injectionSwitch.y, true, true, false))))), bool(bvec2((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, true, true, false))))), false))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true, true, false))))), bool(bvec2((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, bool(bvec2((injectionSwitch.x > injectionSwitch.y) || false, false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), false)))))))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))))))))), true && (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, bool(bvec2((injectionSwitch.x > injectionSwitch.y) || false, false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), false)))))))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))))))))), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, bool(bvec2((injectionSwitch.x > injectionSwitch.y) || false, false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), false)))))))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))))), (! ((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, bool(bvec2((injectionSwitch.x > injectionSwitch.y) || false, false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false), bvec3(bvec3(bvec3(bvec2(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true), false)))))), false)))))))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))))))))))) || false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) ^ 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, false), false)), false)))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))) || false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false)))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY((((0 << _GLF_IDENTITY(int(0), int(0))))) | (((0 << _GLF_IDENTITY(int(0), int(0))))), min(_GLF_IDENTITY((((_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(0), int(0))))) | (((0 << _GLF_IDENTITY(int(0), int(0))))), max((((0 << _GLF_IDENTITY(int(0), int(0))))) | (((0 << _GLF_IDENTITY(int(0), int(0))))), (((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))))) | (((0 << _GLF_IDENTITY(int(0), int(0))))))), (((0 << _GLF_IDENTITY(int(0), int(0))))) | _GLF_IDENTITY((((0 << _GLF_IDENTITY(int(0), int(0))))), (_GLF_IDENTITY((((0 << _GLF_IDENTITY(int(0), int(0))))), (_GLF_IDENTITY((((0 << _GLF_IDENTITY(int(0), int(0))))), min((((0 << _GLF_IDENTITY(int(0), int(0))))), (((0 << _GLF_IDENTITY(int(0), int(0)))))))) - 0)) * 1)))) / 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), vec2(1.0, 1.0) * (vec2(vec3(injectionSwitch, 0.0))))).y))), true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.9)), float(1.0), bool(true))), injectionSwitch.y))))))), bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y)), false || (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), false || ((true))))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(false), false))) && true)));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1)))) < subgroup_size)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u | _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), clamp(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid)), next_virtual_gid))) << 0u), min(_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(subgroup_size)))))))), next_virtual_gid))), (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))))))], _GLF_IDENTITY(uint(2), uint(_GLF_IDENTITY(uvec4(uint(2), (0u ^ 1u), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u), ~ (~ (uvec4(uint(2), (0u ^ 1u), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)))))), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         subgroupAll(false);
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x)) > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.8)), float(0.0), bool(true)))))) - 0.0), 1.0, length(vec3(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), 0.0, 0.0)), 1.0, log(1.0), cos(length(vec2(0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)))), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(((4.9 / -824.631) + -35.00))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(((4.9 / -824.631) + -35.00))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(((4.9 / -824.631) + -35.00))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(((4.9 / -824.631) + -35.00))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))) - vec2(0.0, 0.0))).y)))), false, false, true)))))))))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(max(next_virtual_gid, next_virtual_gid), min(max(next_virtual_gid, next_virtual_gid), max(next_virtual_gid, next_virtual_gid))))], uint(2), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, 0 + _GLF_IDENTITY((_GLF_IDENTITY(4, (4) ^ 0)), 0 + ((_GLF_IDENTITY(4, (4) ^ 0))))), 4)), 64, _GLF_IDENTITY(4, _GLF_IDENTITY(min(4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), clamp(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_injected_loop_counter))), 4)), _GLF_IDENTITY(4, (4) | (4))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4)))), (_GLF_IDENTITY(0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4)))), clamp(_GLF_IDENTITY(0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4)))), min(0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4)))), 0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4)))))), 0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4)))), 0 | (_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (4))), 0 | (min(4, 4))))))) | 0))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED(2.0)), bool(false))), _GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED((+ 90.14))), bool(false))))) + 0.0) > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))), (bool((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))) && true))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))), (_GLF_DEAD(false)) || false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         subgroupAll(true);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) && true)))), (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((true), false || ((true))))) || false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), true), bvec3(bvec3(bvec3(bvec2(false, true), true)))))))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), true), bvec3(bvec3(bvec3(bvec2(false, true), true)))))))))) || false), ! (! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), true), bvec3(bvec3(bvec3(bvec2(false, true), true)))))))))) || false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)), ((_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false))) || false))), ! (! (! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)), ! (! (! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)), false || (! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), _GLF_IDENTITY((! (! (bool(bvec2(false, true))))), bool(bvec4((! (! (bool(bvec2(false, true))))), true, true, true))) || false)))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(bvec2(false, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), true, true))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), true, true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), true, true))))), true, true)))))))))))))), true, true, false))))), bool(bvec4(bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true, false))))), false, true, true)))), _GLF_IDENTITY((! (! (bool(bvec2(false, true))))) || false, ! (! ((! (! _GLF_IDENTITY((bool(bvec2(false, true))), ! (_GLF_IDENTITY(! ((bool(bvec2(false, true)))), (_GLF_IDENTITY(! ((bool(bvec2(false, true)))), bool(bvec4(! ((bool(bvec2(false, true)))), true, false, false)))) || false))))) || _GLF_IDENTITY(false, true && (false))))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), _GLF_IDENTITY((! (! (bool(bvec2(false, true))))) || false, bool(bvec4((! (! (bool(bvec2(false, true))))) || false, true, true, false))))), ! (! (! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, true))))) || false)))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), (! (! (bool(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))))) || false)), false || (! (_GLF_IDENTITY(! (! (bool(bvec2(false, true)))), _GLF_IDENTITY((! (! (bool(bvec2(false, true))))), bool(bvec4((! (! (bool(bvec2(false, true))))), true, true, true))) || false)))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-732.481))))), injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))), (_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))), ! (! (bool(bool(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(bvec2(false, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), true, true))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), true, true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true)), true, true))))), true, true)))))))))))))), true, true, false))))), bool(bvec4(bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool((! (_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), true && (bool(bvec3(true, false, false))))))), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY((bool(bvec2(false, true))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((bool(bvec2(false, true))) || false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((bool(bvec2(false, true))) || false, true, false), bvec3(bvec3(bvec3((bool(bvec2(false, true))) || false, true, false)))), true)))), bool(bool(bool(_GLF_IDENTITY(bvec3((bool(bvec2(false, true))) || false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((bool(bvec2(false, true))) || false, true, false), bvec3(bvec3(bvec3((bool(bvec2(false, true))) || false, true, false)))), true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))), true, true, false))))), false, true, true)))), _GLF_IDENTITY(_GLF_IDENTITY((! (! (bool(bvec2(false, true))))), ((! (! (bool(bvec2(false, true)))))) || false) || false, ! (! ((! (! _GLF_IDENTITY((bool(bvec2(false, true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))), (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), false || (((_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))), bool(bvec4(! _GLF_IDENTITY(((bool(bvec2(false, true)))), ! (! (((bool(bvec2(false, true))))))), true, false, false)))) || false))))) || _GLF_IDENTITY(false, true && (false))))))))))))))))) && true)))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), ((0 | 0)) >> _GLF_IDENTITY(0, (0) << 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(7), int(7))), max(_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(7), int(7))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, (1 & 1) * 1)) | 0)) << _GLF_IDENTITY(int(7), int(7))), clamp(((1 & 1) << _GLF_IDENTITY(int(7), int(7))), ((1 & 1) << _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(7), int(7)), clamp((1 & 1) << _GLF_IDENTITY(int(7), int(7)), (1 & 1) << _GLF_IDENTITY(int(7), int(7)), (1 & 1) << _GLF_IDENTITY(int(7), int(7))))))), ((1 & 1) << _GLF_IDENTITY(int(7), int(7))), ((1 & 1) << _GLF_IDENTITY(int(7), int(7))))), ((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(ivec3(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), 0 | (~ (7))))), 0, 1)))), int(7))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))), int(7))), _GLF_IDENTITY((_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ((_injected_loop_counter != ((_GLF_IDENTITY((1 & 1) << _GLF_IDENTITY(int(7), int(7)), int(ivec4((1 & 1) << _GLF_IDENTITY(int(7), int(7)), 0, 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) + 0)) ^ 0)) / 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(int(5), int(5))))))))) >> _GLF_IDENTITY(int(7), int(7))))) || false) && true)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(bool(bool(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(bool(bool(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(233.867, -630.591)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)))), false, true, true))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_IDENTITY(true, (true) && true), true, true)))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false), (false) && true)))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))) && true), true))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
