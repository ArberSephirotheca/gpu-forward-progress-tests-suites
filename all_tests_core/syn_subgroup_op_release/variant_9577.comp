#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (gl_NumWorkGroups.x)), (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x)) ^ (gl_NumWorkGroups.x))) >> 0u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u)) ^ (gl_NumWorkGroups.x)) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (19735u) >> 0u), -79041, -65702)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, 0 ^ (-79041)), -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(19735u, -79041, -65702), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)) | (_GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), min(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), _GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u) : _GLF_FUZZED(uvec3(63329u, 147654u, 61111u))))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)) | (uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))), (true ? uint(_GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), 0u), (uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)) | (uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))) : _GLF_FUZZED(subgroup_id)))) | (uint(_GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (uvec3(bitfieldExtract(19735u, -79041, -65702), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(uvec3(uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)))) | 0u), 0u)) | (_GLF_IDENTITY(uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (true ? uvec3(bitfieldExtract(19735u, -79041, -65702), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u) : _GLF_FUZZED(uvec3(41372u, 188312u, 76845u))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, min(19735u, 19735u))) + 0u), -79041, -65702))))) >> 0u, _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, min(19735u, 19735u))) + 0u), -79041, -65702))))) >> 0u, 1u)), clamp(uint(uvec2((_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, min(19735u, 19735u))) + 0u), -79041, -65702))))) >> 0u, 1u)), uint(uvec2((_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, min(19735u, 19735u))) + 0u), -79041, -65702))))) >> 0u, 1u)), uint(uvec2((_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, min(19735u, 19735u))) + 0u), -79041, -65702))))) >> 0u, 1u)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), (clamp(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) | 0u), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, max(-79041, _GLF_IDENTITY(-79041, 0 | (-79041)))), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(_GLF_IDENTITY(-65702, (-65702) - 0), -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)), min(_GLF_IDENTITY(true ? gl_NumWorkGroups.x : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), min(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(19735u, -79041, -65702), ~ (~ (bitfieldExtract(19735u, -79041, -65702))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), min(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, ~ (~ (-65702)))))), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), 1u * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) ^ (70696 & 0)), -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, int(int(-65702))))))) << 0u)))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, _GLF_IDENTITY(0 ^ (-79041), max(0 ^ (-79041), 0 ^ (-79041)))), _GLF_IDENTITY(-65702, (-65702) - 0))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))) + 0u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), min(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, ~ (~ (-65702)))))), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), 1u * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) ^ (70696 & 0)), -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, int(int(-65702))))))) << 0u)))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, _GLF_IDENTITY(0 ^ (-79041), max(0 ^ (-79041), 0 ^ (-79041)))), _GLF_IDENTITY(-65702, (-65702) - 0))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))) + 0u)) | (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), min(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, ~ (~ (-65702)))))), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), 1u * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) ^ (70696 & 0)), -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, int(int(-65702))))))) << 0u)))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, _GLF_IDENTITY(0 ^ (-79041), max(0 ^ (-79041), 0 ^ (-79041)))), _GLF_IDENTITY(-65702, (-65702) - 0))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))) + 0u), min(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), min(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, ~ (~ (-65702)))))), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), 1u * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) ^ (70696 & 0)), -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, int(int(-65702))))))) << 0u)))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, _GLF_IDENTITY(0 ^ (-79041), max(0 ^ (-79041), 0 ^ (-79041)))), _GLF_IDENTITY(-65702, (-65702) - 0))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))) + 0u), false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), min(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, ~ (~ (-65702)))))), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), 1u * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) ^ (70696 & 0)), -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, int(int(-65702))))))) << 0u)))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, _GLF_IDENTITY(0 ^ (-79041), max(0 ^ (-79041), 0 ^ (-79041)))), _GLF_IDENTITY(-65702, (-65702) - 0))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))) + 0u))))))), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, 0u + (19735u))) / 1u), -79041, -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(_GLF_IDENTITY(19735u, (19735u) | (_GLF_IDENTITY(19735u, 0u | (19735u)))), max(19735u, 19735u)), -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, 0u | (19735u)), -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), clamp(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), min(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), _GLF_IDENTITY((_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))))))) << 0u)))), ~ (~ (clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) << (-87795 & 0)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), clamp(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), min(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) | (_GLF_IDENTITY(uint(6u), uint(6u))))) * (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), min(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, _GLF_IDENTITY(min(-65702, -65702), (min(-65702, -65702)) - 0)))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))))) | (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_IDENTITY((_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, max(19735u, 19735u))) - 0u), -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0))))))).x)) ^ ((_GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))), ~ (~ (_GLF_IDENTITY(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))), min(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))), bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))))))))) << 0u)))))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)), max(true ? gl_NumWorkGroups.x : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, ~ (~ (19735u))), -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) / 1u)), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) / 1u)), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, max(_GLF_IDENTITY(-65702, (-65702) >> 0), _GLF_IDENTITY(-65702, clamp(-65702, -65702, -65702)))))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) / 1u)), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) / 1u)), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u))) | (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) / 1u)), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (true ? 19735u : _GLF_FUZZED(subgroup_size))), -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) / 1u)), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))) / 1u)))))), _GLF_IDENTITY(true ? gl_NumWorkGroups.x : _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) - 0u))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) | (_GLF_IDENTITY(-79041, 1 * (-79041)))), -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) | (_GLF_IDENTITY(-79041, _GLF_IDENTITY(1, (1) ^ (8540 & 0)) * (-79041)))), -65702))) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), (clamp(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, ~ _GLF_IDENTITY((~ (-65702)), (_GLF_IDENTITY((~ (-65702)), ((~ (-65702))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (0 & int(56749u)))))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, _GLF_IDENTITY((19735u), 0u | (_GLF_IDENTITY((19735u), min((19735u), (19735u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) - 0u)) << 0u), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, max(-65702, _GLF_IDENTITY(-65702, (-65702) + 0))), (true ? _GLF_IDENTITY(-65702, (-65702) ^ 0) : _GLF_FUZZED(87165))))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (_GLF_IDENTITY(_GLF_IDENTITY(-79041, (-79041) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(-79041, (-79041) ^ 0), int(int(_GLF_IDENTITY(-79041, (-79041) ^ 0))))))) ^ 0), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, clamp(-79041, -79041, _GLF_IDENTITY(-79041, 0 | (-79041)))), -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), ~ (~ (_GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, min(-65702, -65702)), (_GLF_IDENTITY(-65702, min(-65702, -65702))) - 0)), 0u ^ (bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, min(-65702, -65702)), (_GLF_IDENTITY(-65702, min(-65702, -65702))) - 0)))))))) : _GLF_FUZZED(min(subgroup_local_id, 174023u)), max(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), ~ (~ (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, min(-65702, -65702)), (_GLF_IDENTITY(-65702, _GLF_IDENTITY(min(-65702, -65702), (0 << _GLF_IDENTITY(int(6), int(6))) | (min(-65702, -65702))))) - 0)))))) : _GLF_FUZZED(min(subgroup_local_id, 174023u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702)))), (false ? _GLF_FUZZED(144548u) : _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(-65702, -65702))))))) + 0u), ~ (~ (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, min(-65702, -65702)), (_GLF_IDENTITY(-65702, min(-65702, -65702))) - 0)))))) : _GLF_FUZZED(min(subgroup_local_id, 174023u))) * 1u), true ? _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(-79041, _GLF_IDENTITY(-79041, ~ (~ (-79041))))), _GLF_IDENTITY(_GLF_IDENTITY(-65702, 0 | (-65702)), min(_GLF_IDENTITY(-65702, (-65702) ^ 0), -65702)))), ~ _GLF_IDENTITY((~ (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, min(-65702, -65702)), (_GLF_IDENTITY(-65702, min(-65702, -65702))) - 0))))), ((~ (_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(_GLF_IDENTITY(-65702, min(-65702, -65702)), (_GLF_IDENTITY(-65702, min(-65702, -65702))) - 0)))))) + 0u)) : _GLF_FUZZED(min(subgroup_local_id, 174023u)))))))), _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) ^ 0), -65702), (false ? _GLF_FUZZED(180780u) : bitfieldExtract(19735u, -79041, -65702)))))) / 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, uint(uvec2(19735u, 1u))), _GLF_IDENTITY(-79041, (false ? _GLF_FUZZED(-78502) : _GLF_IDENTITY(-79041, (_GLF_IDENTITY(-79041, 0 | (-79041))) - 0))), -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(_GLF_IDENTITY(19735u, max(19735u, 19735u)), (_GLF_IDENTITY(19735u, max(19735u, 19735u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) - 0u), -79041, -65702)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, (_GLF_IDENTITY(-65702, (-65702) / 1)) | 0))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) | 0), -65702)))), clamp(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, (_GLF_IDENTITY(-65702, (-65702) / 1)) | 0))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) | 0), -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, (_GLF_IDENTITY(-65702, (-65702) / 1)) | 0))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) | 0), -65702)))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, (_GLF_IDENTITY(-65702, (-65702) / 1)) | 0))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, (-79041) | 0), -65702)))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, (19735u) >> 0u)) | (19735u)), -79041, -65702)) : _GLF_FUZZED(subgroup_id))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, _GLF_IDENTITY(int(ivec4(-79041, 0, 0, 1)), int(ivec4(int(ivec4(-79041, 0, 0, 1)), 1, 1, 0)))), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(_GLF_IDENTITY(-65702, ~ (~ (_GLF_IDENTITY(-65702, clamp(-65702, -65702, -65702))))), -65702)))))), _GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, uint(_GLF_IDENTITY(uint(19735u), (false ? _GLF_FUZZED(135904u) : _GLF_IDENTITY(uint(19735u), (uint(19735u)) - 0u))))), -79041, -65702)))) / 1u)))))), true ? gl_NumWorkGroups.x : _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, max(19735u, 19735u)), -79041, -65702)), _GLF_IDENTITY(clamp(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, (_GLF_IDENTITY(19735u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(104581u) : 19735u))) | (_GLF_IDENTITY(19735u, max(19735u, 19735u)))), -79041, -65702)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(_GLF_IDENTITY(-79041, int(_GLF_IDENTITY(ivec4(-79041, 0, 0, 0), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(-79041, 0, 0, 0), min(ivec4(-79041, 0, 0, 0), ivec4(-79041, 0, 0, 0))))))), -79041)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(-79041, -79041)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), max(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), (_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u)) / 1u)))))), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(-79041, -79041)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(19735u, -79041, -65702), ~ (~ (_GLF_IDENTITY(bitfieldExtract(19735u, -79041, -65702), ~ (~ (bitfieldExtract(19735u, -79041, -65702))))))))) << 0u), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, 1 * (_GLF_IDENTITY(-65702, (-65702) << 0))))), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(-79041, -79041)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))))) ^ 0u), 0u, 1u, 0u), (true ? uvec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(-79041, -79041)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), (_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702))) << 0u), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, min(-79041, -79041)), -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)))))) ^ 0u), 0u, 1u, 0u) : _GLF_FUZZED(uvec4(_GLF_IDENTITY(58425u, ~ (~ (_GLF_IDENTITY(58425u, (58425u) | 0u)))), 60309u, 16095u, 166428u)))))))), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-65702, (-65702) | (_GLF_IDENTITY(-65702, ~ (~ (-65702))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))), 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-65702, (-65702) | (_GLF_IDENTITY(-65702, ~ (~ (-65702))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))), 1), (ivec3(_GLF_IDENTITY(-65702, (-65702) | (_GLF_IDENTITY(-65702, ~ (~ (-65702))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))), 1)) << ivec3(0, 0, 0)))), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-65702, (-65702) | (_GLF_IDENTITY(-65702, ~ (~ (-65702))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), max(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), min(int(6), int(6))))))), 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-65702, (-65702) | (_GLF_IDENTITY(_GLF_IDENTITY(-65702, (true ? -65702 : _GLF_FUZZED(-54892))), ~ (~ (-65702))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))), 1), (ivec3(_GLF_IDENTITY(-65702, (-65702) | (_GLF_IDENTITY(-65702, ~ _GLF_IDENTITY((~ (-65702)), min((~ (-65702)), (~ (-65702))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), (true ? (1 << _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(75151))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), int(6))), (1 << _GLF_IDENTITY(int(6), int(6)))))))), (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), _GLF_IDENTITY(int(6), min(int(6), int(6))))), 1)) << ivec3(0, 0, 0))))) / ivec3(1, 1, 1))))))), (clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(19735u, _GLF_IDENTITY(-79041, int(ivec4(-79041, 1, 1, 1))), -65702)), clamp(_GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, -65702)), _GLF_FUZZED(bitfieldExtract(19735u, -79041, _GLF_IDENTITY(-65702, min(_GLF_IDENTITY(-65702, clamp(_GLF_IDENTITY(-65702, max(-65702, -65702)), _GLF_IDENTITY(-65702, (-65702) << _GLF_IDENTITY(0, (0) | (0))), -65702)), _GLF_IDENTITY(-65702, min(-65702, _GLF_IDENTITY(-65702, max(_GLF_IDENTITY(-65702, int(ivec2(-65702, 1))), -65702)))))))))), _GLF_IDENTITY(_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, max(19735u, 19735u)), -79041, _GLF_IDENTITY(-65702, (-65702) / 1))), (_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, max(19735u, 19735u)), -79041, _GLF_IDENTITY(-65702, (-65702) / 1)))) | (_GLF_FUZZED(bitfieldExtract(_GLF_IDENTITY(19735u, max(19735u, 19735u)), -79041, _GLF_IDENTITY(-65702, (-65702) / 1))))))) / 1u))))));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), gl_WorkGroupSize)), gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) * (uvec3(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u) | uvec3(1u, 1u, 1u))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5.4, 422.365)))).y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), min(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(injectionSwitch.x, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), injectionSwitch.y)))))) > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))))))))), (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), min(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-2.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))))))))), ((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(radians(injectionSwitch)))).x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), injectionSwitch.y)), min(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))))))) > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(inversesqrt(vec2(83.47, 1916.1288))))).y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (bool(bvec2(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))), false, false, true)))))))))) && true)) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = (-94842 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ! (_GLF_IDENTITY(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec3(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), false, false)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0))), injectionSwitch[1])).y))))
        return;
       return;
      }
    }
   return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))) | (subgroup_size)), (subgroup_size) * 1u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), ~ (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 1u)), ~ (~ (uint(uvec3(subgroup_size, 0u, 1u)))))))), (subgroup_size) * 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), ~ (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 1u)), ~ (~ (uint(uvec3(subgroup_size, 0u, 1u)))))))), (subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), ~ (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 0u, 1u)), ~ (~ (uint(uvec3(subgroup_size, 0u, 1u)))))))), (subgroup_size) * 1u)))))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_size))) | (subgroup_size))), ~ (~ (_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), 1u * (min((subgroup_size), (subgroup_size))))) - 0u))))))) | (subgroup_size), (true ? _GLF_IDENTITY((subgroup_size), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), min(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (false ? _GLF_FUZZED(subgroup_local_id) : (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))))) | (subgroup_size) : _GLF_FUZZED(workgroup_size)))), (subgroup_size) * 1u)))) >> 0u, (false ? _GLF_FUZZED(workgroup_size) : ((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_size))) | (subgroup_size))), ~ (~ (_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), 1u * (min((subgroup_size), (subgroup_size))))) - 0u))))))) | (subgroup_size), (true ? _GLF_IDENTITY((subgroup_size), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), min(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (false ? _GLF_FUZZED(subgroup_local_id) : (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))))) | (subgroup_size) : _GLF_FUZZED(workgroup_size)))), 0u + (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_size))) | (subgroup_size))), ~ (~ (_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), 1u * (min((subgroup_size), (subgroup_size))))) - 0u), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), 1u * (min((subgroup_size), (subgroup_size))))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), 1u * (min((subgroup_size), (subgroup_size))))) - 0u), (true ? _GLF_IDENTITY(min((subgroup_size), (subgroup_size)), (_GLF_IDENTITY(min((subgroup_size), (subgroup_size)), 1u * (min((subgroup_size), (subgroup_size))))) - 0u) : _GLF_FUZZED((workgroup_base)))))))))))) | (subgroup_size), (true ? _GLF_IDENTITY((subgroup_size), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), min(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (false ? _GLF_FUZZED(subgroup_local_id) : (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))), (~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), max((_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), ((_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))) * 1u)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), max(_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))))) * 1u))))) | (subgroup_size) : _GLF_FUZZED(workgroup_size)))))), (subgroup_size) * 1u)))) >> 0u))))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) * 1u)) - 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u, ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) * (0u ^ 1u)) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size) * 1u, clamp((subgroup_size) * 1u, (subgroup_size) * 1u, (subgroup_size) * 1u))))), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u, ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) * (0u ^ 1u)) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size) * 1u, clamp((subgroup_size) * 1u, (subgroup_size) * 1u, (subgroup_size) * 1u))))), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u, ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) * (0u ^ 1u)) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size) * 1u, clamp((subgroup_size) * 1u, (subgroup_size) * 1u, (subgroup_size) * 1u))))), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u, ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) * (0u ^ 1u)) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size) * 1u, clamp((subgroup_size) * 1u, (subgroup_size) * 1u, (subgroup_size) * 1u))))), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u, ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) * (0u ^ 1u)) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u) | ((_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) * 1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size) * 1u, clamp((subgroup_size) * 1u, (subgroup_size) * 1u, (subgroup_size) * 1u))))), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))))) | 0u)))), 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u)))))))) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) * 1)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((subgroup_local_id + 1))), ((subgroup_local_id + 1)) + 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((subgroup_local_id + 1))), ((subgroup_local_id + 1)) + 0u)))) | 0u)) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(0, 0 | (0)) | (64)), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(23393))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))), true, true)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true, false, false)))), false, false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false) && true)))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid))], uint(2), 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))) || false))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), (! (false)) || false))), ! (! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), false, false))) || false)))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), (! (false)) || false))), ! _GLF_IDENTITY((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3(_GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), true && ((! (false)))))), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))), ! (! (_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false)))))) || false)), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))), ! (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))))), (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))))), true && (! ((! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))) && true)))))))))), ! (! (_GLF_IDENTITY((! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))))))), false || (! ((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))))))))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))))))), false || (! ((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(! ((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))))))), false || (! _GLF_IDENTITY(((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3((! (false)), false, false)), bvec3(bvec4(bvec3(bvec3((! (false)), false, false)), true))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false, bool(bvec3(_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false, true, false))))), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false)))))))))))), ! (! (((! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3((! (false)), false, false)), bvec3(bvec4(bvec3(bvec3((! (false)), false, false)), true))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false, bool(bvec3(_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false, true, false))))), ! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), false, false))) || false))))))))))))))))))))) && true)))))))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7827.0599)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))), false)))))) && true)));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(int(int(7)), 1 * (int(int(7)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) + 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), false, true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
              break;
             break;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false, (false) || false) || (false)) || false))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), true, true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false || (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (false || _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)), ! (_GLF_IDENTITY(! (! (false || (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(! (! (false || (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))))), false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))))), false)))))), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), true, true))))))) || false))))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), true, false)))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), true, false)))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), false))))), true, false)))))))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))), true, false)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))), true, false))))), true), false))))))), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), false, false))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), false, false))), true)))), false, false)))))))))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), false, false))), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))) && true)) && true)))), true), false)), false, false))), true)))), false, false))))))))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(86.00) : injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))), true, false)), true), bvec2(bvec3(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)), true), _GLF_IDENTITY(false, (false) && true)))))))), _GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true))) || (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((mat4x2(0.0, 91.14, 4444.9953, -86.45, -58.36, -896.966, 1361.3989, -8.0) * vec4(783.680, -88.48, 3.7, 5.4))))).y), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), true, true))))), (! (bool(_GLF_IDENTITY(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(! (! ((injectionSwitch.x < injectionSwitch.y))), false), true, true)))))) || false)))))) || false)))))))) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0 * (injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-8559.0005)), float(_GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y)))), bool(true))))))))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (false ? _GLF_FUZZED(vec2(3173.3541, 5.7)) : vec2(vec2(injectionSwitch))))).y))))
            {
             return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 1.0, abs(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0))).x < injectionSwitch.y)))) && true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY((2), min((2), (2))))))), 4, 64, 4);
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))), false, true, true)))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))))))).y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false)))), (_GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false)))), (! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)))))))))), false))))) && true)) && true)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))))), (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))))) || _GLF_IDENTITY(false, ! (! (false))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).y)))) ^ 1)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec3((false) || false, true, false)))), false, false))), (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, sin(0.0))))) * 1.0) < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, length(vec4(0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y)) : _GLF_FUZZED(-53.66))))))), ! (! (bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, length(vec4(0.0, 0.0, 0.0, 0.0)) + (injectionSwitch.y)) : _GLF_FUZZED(_GLF_IDENTITY(-53.66, (_GLF_IDENTITY(-53.66, float(_GLF_IDENTITY(vec3(-53.66, 1.0, 0.0), (vec3(-53.66, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))))) + determinant(mat2(0.0, 0.0, 0.0, 0.0))))))))))))))));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), true && ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))));
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec2(true, false))) && ((injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0)), min(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(19.33)), bool(false)))), 0.0, 0.0)), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0))))) > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec4(bool(bvec4(false, false, false, true)), true, false, false))))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y)) || false))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-46106))))) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8))), ! (_GLF_IDENTITY(! (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))), ! (! (! (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))))))))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), bool(bool(_GLF_IDENTITY(true, bool(bvec2(true, false)))))));
  }
 if(_GLF_DEAD(false))
  return;
}
