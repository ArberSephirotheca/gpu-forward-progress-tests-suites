#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat2x3 _f0;
 bool _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_6 {
 bvec2 _f0;
 vec4 _f1;
 mat4x3 _f2;
 bool _f3;
} ;

struct _GLF_struct_8 {
 float _f0;
 ivec2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_9 {
 bvec2 _GLF_SWITCH_1_3v;
 _GLF_struct_8 _f0;
 vec4 _f1;
 uint _f2;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 uvec2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 bvec4 _f1;
 ivec3 _f2;
 uint _f3;
 int _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_0 {
 bool _f0;
 float _f1;
 mat3x4 _f2;
 mat2x3 _f3;
 uvec2 _f4;
 mat3x2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uint workgroup_base;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_4 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(vec4(1.0), _GLF_struct_2(_GLF_struct_0(true, 1.0, mat3x4(1.0), mat2x3(1.0), uvec2(1u), mat3x2(1.0), mat3x2(1.0)), workgroup_size * workgroup_id, _GLF_struct_1(uvec3(1u), bvec4(true), ivec3(1), 1u, 1, ivec4(1))), _GLF_struct_4(_GLF_struct_3(ivec4(1), uvec2(1u), ivec2(1))), mat4x3(1.0), mat3x4(1.0));
 uint virtual_gid = _GLF_struct_replacement_5._f1.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_5._f1.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))))
    {
     case 81:
     (~ -84181);
     case 0:
     case 33:
     case 2:
     case 35:
     case 41:
     case 57:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     case 54:
     case 75:
     case 85:
     case 13:
     subgroupAll(false);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 18:
     while(false)
      {
       switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(7), int(7)))))
        {
         case 58:
         while((15378 < 63250))
          {
           ivec3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
           vec3 _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v[1];
           mat2x4(mat3(279.514, -7.2, 8378.1291, 1658.9745, -6.6, 652.378, -34.83, 537.504, -52.56));
          }
         case 0:
         if(((mat2x4(7.4, -5.0, -7718.8013, 30.03, -48.40, 39.62, 6110.2878, -42.24) * mat3x2(-8.1, 1405.4171, 468.406, -7.1, -63.97, -6.0)) == mat3x4(4.8, -6.4, -2441.5125, -7.4, 10.60, -3.2, -6.5, 1.2, -3.8, 4651.9478, -9.4, -9.8)))
          {
           for(ivec4 _GLF_SWITCH_1_0v[76], _GLF_SWITCH_1_1v; (-8989.5810 > 1.8); tan(injectionSwitch))
            {
             switch(_GLF_SWITCH((0 | 0)))
              {
               case 0:
               bvec3(false, true, false);
               break;
               case 31:
               mat4x2(-0.7, -63.64, 7.2, -163.484, -87.83, 3.8, -69.69, 4468.8637);
               case 38:
               mat2x3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
               default:
               1;
              }
            }
           while(false)
            {
             radians(vec4(-32.47, 4052.2581, 6.6, -6.7));
             uvec3 _GLF_SWITCH_1_2v;
             _GLF_struct_9 _GLF_struct_replacement_9;
            }
           uvec2 _GLF_SWITCH_1_4v;
          }
         else
          {
           mat3x4(-8863.2182, 5652.3711, 0.5, -1461.3428, -0.8, -92.91, -99.38, 3.0, -4173.2586, 928.768, 4.3, 3.8);
          }
         do
          {
           ;
           uvec2 _GLF_SWITCH_1_5v;
          }
         while(true);
         case 87:
         mat4x3 _GLF_SWITCH_1_6v[94], _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v;
         vec3 _GLF_SWITCH_1_9v[28], _GLF_SWITCH_1_10v[83];
         {
          switch(_GLF_SWITCH((0 ^ 0)))
           {
            case 2:
            mat2x4 _GLF_SWITCH_0_0v;
            case 0:
            if(true)
             {
              ;
              ivec2 _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v;
              mat3x2(-32.00, -4.1, -472.914, -1.5, 4.7, -4.3);
              bvec2 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v;
              ;
              mat2x3 _GLF_SWITCH_1_16v;
              float _GLF_SWITCH_1_17v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_19v;
             }
            break;
            default:
            1;
           }
         }
         break;
         case 37:
         ;
         case 81:
         if(bool(bitfieldInsert(2112, 69574, -34659, 41616)))
          {
          }
         default:
         1;
        }
      }
     case 0:
     case 10:
     case 54:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     case 22:
     subgroupAll(true);
     break;
     default:
     1;
    }
  }
}
