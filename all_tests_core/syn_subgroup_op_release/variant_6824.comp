#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 bvec4 _f0;
 uvec2 _f1;
 mat4 _f2;
 mat2x4 _f3;
 uint workgroup_size;
} ;

struct _GLF_struct_6 {
 uint _f0;
 uint _f1;
 mat4 _f2;
 uvec2 _f3;
 ivec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 mat4 _f1;
 vec2 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_8 {
 mat2x3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 mat2 _f3;
 _GLF_struct_7 _f4;
 bool _f5;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat2x3 _f1;
 _GLF_struct_3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 mat2x4 _f1;
 int _f2;
 uint _f3;
 mat4x2 _f4;
 bvec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_2 {
 uint _f0;
 uvec2 _f1;
 _GLF_struct_1 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_0 _f0;
 _GLF_struct_2 _f1;
 int _f2;
 int _f3;
 bool _f4;
 _GLF_struct_4 _f5;
 _GLF_struct_8 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_0(mat4x3(1.0), mat3(1.0)), _GLF_struct_2(1u, uvec2(1u), _GLF_struct_1(ivec2(1), mat2x4(1.0), 1, 1u, mat4x2(1.0), bvec3(true), bvec4(true)), mat2(1.0)), 1, 1, true, _GLF_struct_4(vec3(1.0), mat2x3(1.0), _GLF_struct_3(mat3x4(1.0)), mat2(1.0)), _GLF_struct_8(mat2x3(1.0), _GLF_struct_5(mat4x2(1.0), mat4(1.0), vec2(1.0), mat4x3(1.0)), _GLF_struct_6(1u, 1u, mat4(1.0), uvec2(1u), ivec3(1), true), mat2(1.0), _GLF_struct_7(bvec4(true), uvec2(1u), mat4(1.0), mat2x4(1.0), gl_WorkGroupSize.x), true));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_9._f6._f4.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}
