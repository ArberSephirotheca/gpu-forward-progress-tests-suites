#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)) || false)) && true))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true)))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false)))))))), true))))))), true, true, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))), false, false, true)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_IDENTITY(_GLF_FUZZED(8.7), float(vec3(_GLF_FUZZED(8.7), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.7))), determinant(_GLF_IDENTITY(mat3(1.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0), mat3(mat4x3(mat3(1.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0))))))))), bool(false))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) - 0.0)), float(_GLF_IDENTITY(_GLF_FUZZED(8.7), float(vec3(_GLF_FUZZED(8.7), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5.7))), determinant(_GLF_IDENTITY(mat3(1.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0), mat3(mat4x3(mat3(1.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0))))))))), bool(false))) > injectionSwitch.y)))) && true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true))), (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true)))) && true)), false || (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true))), (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true)))) && true))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))) && true))), (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) && true)))) && true)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) ^ 0) * (int(1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                          {
                           barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, false))))))))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), false, false)))))))) && true), (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))) / 1) < 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && true))))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(52.70)), vec2(_GLF_FUZZED(float(false)), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, false || (true))))).y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((1164.1558 / 3.9))), bool(false))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << (54742u & _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED((mat3x4(6.3, -7.8, -0.0, 258.467, 0.0, -6.2, 2.9, -26.43, -3318.8163, -86.88, 8024.2356, -350.978) , workgroup_size)))))) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-59.37, -9.9)) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-59.37, -9.9)) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-59.37, -9.9)) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-59.37, -9.9)) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-83.25), _GLF_FUZZED(12.63)), bvec2(false, false))))))).y)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-59.37, -9.9)) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.58), _GLF_FUZZED(-5.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.58), _GLF_FUZZED(-5.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.58), _GLF_FUZZED(-5.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.58), _GLF_FUZZED(-5.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1]), bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x)) > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-59.37, -9.9)) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) && true)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.9)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 & -21294); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) / (_GLF_IDENTITY(1 | 1, (false ? _GLF_FUZZED(17190) : _GLF_IDENTITY(1 | 1, (1 | 1) | 0))))) < subgroup_size, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0)))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) | (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))))) / (1 | _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED((+ -45264)) : 1)), 1)))))) < subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), 0 ^ ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1)))))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), 0 ^ ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1)))))), 0u | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), 0 ^ ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1)))))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), 0 ^ ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))))))) / 1u)))) | (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))), 0 ^ ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1))))), (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) << ivec2(0, 0))))) / (1 | _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) >> 0), 1)))))))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), ! (! ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(_GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1)))), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), max(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(_GLF_IDENTITY(ivec4(ivec2(1, 1), 1, 1), ~ (_GLF_IDENTITY(~ (ivec4(ivec2(1, 1), 1, 1)), (~ (ivec4(ivec2(1, 1), 1, 1))) >> ivec4(0, 0, 0, 0)))))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))), min(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), _GLF_IDENTITY(ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))), max(ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(_GLF_IDENTITY(ivec2(1, 1), min(ivec2(1, 1), _GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1)))))), 1, 1)))))))))), ~ (~ (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(2), int(2))) | (1)), 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))))))))))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / int(_GLF_ONE(1.0, injectionSwitch.y))))), 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))), max(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))), ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec4(ivec2(1, 1), 1, 1)), (ivec2(ivec4(ivec2(1, 1), 1, 1))) | (_GLF_IDENTITY(ivec2(ivec4(ivec2(1, 1), 1, 1)), (ivec2(ivec4(ivec2(1, 1), 1, 1))) << ivec2(0, 0))))))), ivec2(1, 1) * (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))))), max(_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))))), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))) | (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))))), ivec2(0, 0) + (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), ivec2(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))))))))), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (true ? ~ (0) : _GLF_FUZZED(bitCount(-23378))))) << 0)))) | (0))))))))), 0 ^ ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(_GLF_IDENTITY(1, (1) + 0), 1), 1, 1))))), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1))))), _GLF_IDENTITY(min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-17888) : 1))) | (0 >> _GLF_IDENTITY(int(6), int(6))))))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))), min(min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-17888) : 1))) | (0 >> _GLF_IDENTITY(int(6), int(6))))))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))), min(ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-17888) : 1))) | (0 >> _GLF_IDENTITY(int(6), int(6))))))))), ivec2(ivec2(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, 1)))))))))))), (ivec2(1, 1)) << ivec2(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (true ? ~ (0) : _GLF_FUZZED(bitCount(-23378))))), min((_GLF_IDENTITY(~ (0), (true ? ~ (0) : _GLF_FUZZED(bitCount(-23378))))), (_GLF_IDENTITY(~ (0), (true ? ~ (0) : _GLF_FUZZED(bitCount(-23378))))))) << 0)))) | (0))))))))))) / _GLF_IDENTITY((1 | _GLF_IDENTITY(1, clamp(1, 1, 1))), ((1 | _GLF_IDENTITY(1, clamp(1, 1, 1)))) | ((1 | _GLF_IDENTITY(1, clamp(1, 1, 1)))))) < subgroup_size))))) || false) || false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 ^ 0)) != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(virtual_gid) : uint(2))), uint(2))), 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(0, int(ivec4(0, (0 | 0), (0 | 1), 0))) | (64)), (true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(73259))), 4);
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
      }
     else
      {
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false || (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))), (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))), true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), (! (! (_GLF_WRAPPED_IF_TRUE(true)))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), (! (! (_GLF_WRAPPED_IF_TRUE(true)))) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), (! (! (_GLF_WRAPPED_IF_TRUE(true)))) && true))) || false)) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(84625))), 5)), (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), (_GLF_IDENTITY((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_GLF_IDENTITY(-99898, int(ivec3(-99898, 1, 0)))) : _GLF_IDENTITY(5, 0 ^ (5))))), ((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_GLF_IDENTITY(-99898, int(ivec3(-99898, 1, 0)))) : _GLF_IDENTITY(5, 0 ^ (5)))))) * (0 | 1)), _GLF_IDENTITY((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), max((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, _GLF_IDENTITY(0 ^ (5), (0 ^ (5)) | 0))))), (_GLF_IDENTITY(5, (_GLF_IDENTITY(false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5)), (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))) + 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5)))), (true ? _GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5)))) : _GLF_FUZZED(-22481)))), int(int((_GLF_IDENTITY(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5)))), (true ? _GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5)))) : _GLF_FUZZED(-22481)))))))))) << 0) / 1)), int(ivec4(int(_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(5, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(_GLF_IDENTITY(5, 0 ^ (5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 0 ^ (5))), (~ (_GLF_IDENTITY(5, 0 ^ (5)))) | (~ (_GLF_IDENTITY(5, 0 ^ (5))))))), ~ (~ (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(_GLF_IDENTITY(5, 0 ^ (5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 0 ^ (5))), (~ (_GLF_IDENTITY(5, 0 ^ (5)))) | (~ (_GLF_IDENTITY(5, 0 ^ (5))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), ! (! (bool(bvec4(false, true, false, false)))))), (false) && true) ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(_GLF_IDENTITY(5, 0 ^ (5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 0 ^ (5))), (~ (_GLF_IDENTITY(5, 0 ^ (5)))) | (~ (_GLF_IDENTITY(5, 0 ^ (5))))))))) << 0))), (_GLF_IDENTITY((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), clamp((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), _GLF_IDENTITY((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), max((_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))), (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5))))))), (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-99898) : _GLF_IDENTITY(5, 0 ^ (5)))))))) << 0) / 1)), 0, 0, 1))), int(5))), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / _GLF_IDENTITY((1 | 1), ~ (~ ((1 | 1))))), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9879.9225)), float(injectionSwitch.y), bool(true)))))))
              barrier();
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), false))))))) && true)) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, true && (false)))))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))) || false))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, min(2, 2)), 2))), 4, 64, 4);
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(true);
  }
}
