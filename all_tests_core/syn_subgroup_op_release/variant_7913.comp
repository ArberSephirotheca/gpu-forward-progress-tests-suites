#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).y))))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))) || false))))) || false)))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) && true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) && true, ! (! ((_GLF_IDENTITY(true, false || (true))) && true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) && true, ! (! ((_GLF_IDENTITY(true, false || (true))) && true)))), bool(bvec2(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) && true, ! (! ((_GLF_IDENTITY(true, false || (true))) && true)))), true)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) || (false)), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(! (false), ! (! (! (false))))))), ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-6384.6929)))))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(9.9) : injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec2(true, true))), false, true)))), true && (_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(bool(injectionSwitch.x > injectionSwitch.y), true, false)), false || (bool(bvec3(bool(injectionSwitch.x > injectionSwitch.y), true, false))))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y))))))) && true)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true && (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))))))))))) && true)) || false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(true, ! (! (true))) && (_injected_loop_counter != 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, false || (true)) ? _injected_loop_counter ++ : _GLF_FUZZED(bitfieldReverse(-95744)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 0.0, sin(0.0), 1.0, 0.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 0.0, sin(0.0), 1.0, 0.0, 1.0))))), min(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 0.0, sin(0.0), 1.0, 0.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 0.0, sin(0.0), 1.0, 0.0, 1.0))))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 0.0, sin(0.0), 1.0, 0.0, 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 0.0, sin(0.0), 1.0, 0.0, 1.0)))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (false ? _GLF_FUZZED(51.83) : _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-18.69)), (_GLF_IDENTITY(float(_GLF_FUZZED(-18.69)), float(_GLF_IDENTITY(mat2x3(float(_GLF_FUZZED(-18.69)), 1.0, 0.0, 0.0, 0.0, 1.0), mat2x3(mat2x3(mat2x3(float(_GLF_FUZZED(-18.69)), 1.0, 0.0, 0.0, 0.0, 1.0))))))) * 1.0), float(injectionSwitch.y), bool(true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(-0.0)), bvec2(false, false))).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x), 0u | (_GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x), 0u + (min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x))))), max(_GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x), 0u | (_GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x), 0u + (min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x))))), _GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x), 0u | (_GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x), 0u + (min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u)), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u)) - 0u), gl_WorkGroupID.x)), ~ (~ (_GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), (false ? _GLF_FUZZED(11052u) : _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), (_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x)))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))))), _GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))))), ((gl_WorkGroupID.x)) << 0u) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))), (gl_WorkGroupID.x))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))), (_GLF_IDENTITY((gl_WorkGroupID.x), _GLF_IDENTITY(min((gl_WorkGroupID.x), (gl_WorkGroupID.x)), min(min((gl_WorkGroupID.x), (gl_WorkGroupID.x)), _GLF_IDENTITY(min((gl_WorkGroupID.x), (gl_WorkGroupID.x)), (min((gl_WorkGroupID.x), (gl_WorkGroupID.x))) << 0u))))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), _GLF_IDENTITY(min((gl_WorkGroupID.x), (gl_WorkGroupID.x)), min(min((gl_WorkGroupID.x), (gl_WorkGroupID.x)), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (gl_WorkGroupID.x))))), _GLF_IDENTITY((gl_WorkGroupID.x), min((_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u)), (gl_WorkGroupID.x))))), ((gl_WorkGroupID.x)) << 0u) >> 0u) / 1u)))), gl_WorkGroupID.x))))), _GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min(_GLF_IDENTITY((gl_WorkGroupID.x), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((gl_WorkGroupID.x), (true ? (gl_WorkGroupID.x) : _GLF_FUZZED(num_workgroup))))), (gl_WorkGroupID.x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, max(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), gl_WorkGroupID.x)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID.x), min((gl_WorkGroupID.x), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)).x))), ((gl_WorkGroupID.x)) << 0u) >> 0u), gl_WorkGroupID.x))))) | 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, true && ((injectionSwitch.x > injectionSwitch.y) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, true && ((injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, true && ((injectionSwitch.x > injectionSwitch.y) && true))))))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) || false))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ (subgroup_local_id));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1), 0u | _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1)), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1)), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1))) / 1u)) >> (0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) ^ 0u))))) % subgroup_size) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) % subgroup_size), 1u, ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) * _GLF_IDENTITY(1u, (1u) | (1u)))), uint(uvec2(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), clamp(_GLF_IDENTITY(uint(4u), (uint(4u)) / 1u), uint(4u), uint(4u))), (uint(4u)) * 1u)), 0u)))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)), (_GLF_IDENTITY(4u, min(4u, 4u))) | (4u))), uint(4u), uint(4u))))), 1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false))))), false || (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (true)))))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false)))))))))) || false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))), _GLF_IDENTITY(bool(bool(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))), ! (! (bool(bool(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))))))) || false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y)) && true), (! (((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y)) && true), (! (((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0), vec2(0.0, 1.0))), 1.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0), vec2(0.0, 1.0))), 1.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))));
    }
   atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | 0));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << (0 | 0)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(7), int(7))))]), clamp(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(7), int(7))))]), vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(7), int(7))))]), vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(7), int(7))))])))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(496.542), _GLF_FUZZED(0.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y)) || false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) - 0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(determinant(mat2(7.6, -8.0, 7.2, 3508.4598))) : injectionSwitch.y))))))
                barrier();
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(smoothstep(-73.95, dot(vec3(399.086, 549.574, 9071.8603), vec3(3741.3235, -2888.0430, 3.6)), 3115.6168)))) > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           continue;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))) && true))
        continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY((_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, int(ivec3(_GLF_IDENTITY(5, min(5, 5)), 1, 0)))), int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), (((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), int(int(~ (int(5))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, 0 ^ (5)))), 1)))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) >> 0))))))) | (((1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) >> 0)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))))), min((_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, int(ivec3(_GLF_IDENTITY(5, min(5, 5)), 1, 0)))), int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), (((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), int(int(~ (int(5))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, 0 ^ (5)))), 1)))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) >> 0))))))) | (((1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) >> 0)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))))), (_GLF_IDENTITY(((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, int(ivec3(_GLF_IDENTITY(5, min(5, 5)), 1, 0)))), int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))), (((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), int(int(~ (int(5))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, 0 ^ (5)))), 1)))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) >> 0))))))) | (((1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) >> 0)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(subgroup_local_id + 1 < subgroup_size)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
              barrier();
             atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) << 0)], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)), mix(float(_GLF_FUZZED(3.7)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0))), bool(true))))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)), min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)))), 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (true ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-1.9, 6.3)))))))[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch)[0] : _GLF_FUZZED(3.7))), _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) / 1.0), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)))).y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) << 0)], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)), mix(float(_GLF_FUZZED(3.7)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0))), bool(true))))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)), min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)))), 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (true ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-1.9, 6.3)))))))[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch)[0] : _GLF_FUZZED(3.7))), _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) / 1.0), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)))).y))), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) << 0)], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0)), mix(float(_GLF_FUZZED(3.7)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0))), bool(true))))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)), min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0))) / exp(0.0)))), 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (true ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-1.9, 6.3)))))))[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch)[0] : _GLF_FUZZED(3.7))), _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) / 1.0), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)))).y))), false), true))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(7.7, float(float(7.7)))), _GLF_IDENTITY((injectionSwitch), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat4x2((injectionSwitch) * mat2(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))) / vec2(1.0, 1.0))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) - vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), _GLF_IDENTITY(float(1.0), 0.0 + (float(1.0))), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), (_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))], _GLF_FUZZED(-32.11)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, true))))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), _GLF_IDENTITY(mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)), mix(vec2(_GLF_FUZZED(7520.3286), _GLF_FUZZED(-6903.2559)), vec2((mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)))[0], (mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)))[1]), bvec2(true, true))))) * mat2(1.0))).y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0))))) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(7.7, float(float(7.7)))), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), _GLF_IDENTITY(mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))), (_GLF_IDENTITY(mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))), (mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))) + vec2(0.0, 0.0)), 0.0), vec3(mat3x4(vec3(_GLF_IDENTITY(mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))), (mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))) + vec2(0.0, 0.0)), 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))) - sin(vec2(0.0, 0.0)))), (_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(_injected_loop_counter)))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, _GLF_IDENTITY(false, true && (false))))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), ((1.0)) * 1.0)))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) * mat2(1.0))).y)), bool(bool(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))) * (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(7.7, float(float(7.7)))), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), 0.0, 1.0, round(length(_GLF_IDENTITY(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)), (_GLF_IDENTITY(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)), (normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0))) * mat3(1.0))) - abs(vec3(0.0, 0.0, 0.0))))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))))[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))), 0.0)), (_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0)) + 0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0), (mat3x2(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0))), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))))))), (_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(0, max(0, 0)) | (int(0)))))], _GLF_FUZZED(-32.11)), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(vec2(2.0, -1.0).r), _GLF_FUZZED(-225.614), _GLF_FUZZED(249.092)), vec3((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, true, true)))))), 1.0)), mix(vec2((vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-98.38)), float(1.0), bool(true))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), sin(0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0)))), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(-32.11)), bvec2(true, false))), 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), 1.0)))[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(-9.1)), bvec2(false, false)))) * mat2(1.0))).y))))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               subgroupAll(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = (0 & 18210); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), true, true, true)))))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x))) + 0.0)))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         for(int _injected_loop_counter = (29991 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) || false); _injected_loop_counter ++)
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) | (2))))), 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_DEAD(false))
          barrier();
         subgroupAll(true);
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), false)))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), false))))))), ! (! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false)), (bool(bvec4(false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 1.0, 1.0))) > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
  return;
}
