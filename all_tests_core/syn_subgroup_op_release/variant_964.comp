#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 1u, 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) * _GLF_IDENTITY(1u, (1u) ^ 0u)), clamp(_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u), virtual_gid, _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, 1u * (virtual_gid))) | 0u)))], uint(_GLF_IDENTITY(1, (1) >> 0)), 4, 64, 4);
 if(_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) / 1), (subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(20971)))) | (subgroup_local_id + 1)))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) + (uint(2))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, (false) && true));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     switch(_GLF_SWITCH(0))
      {
       case 38:
       mat2(-95.91, 802.164, -891.906, 368.874);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       case 0:
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 0, 1)), max(int(ivec3(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 0, 1)), int(ivec3(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 0, 1)))))); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       if(_GLF_DEAD(false))
        barrier();
       case 84:
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       break;
       case 65:
       if(_GLF_DEAD(false))
        barrier();
       {
        if(_GLF_DEAD(false))
         {
          for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
           {
            do
             {
              if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y)), false), _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))))))
               return;
             }
            while(_GLF_WRAPPED_LOOP(false));
           }
          do
           {
            barrier();
           }
          while(_GLF_WRAPPED_LOOP(false));
         }
        if(_GLF_DEAD(false))
         barrier();
        if(_GLF_DEAD(false))
         return;
        if(true)
         {
          for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
           {
            for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
             {
              if(_GLF_DEAD(false))
               barrier();
              mat2(-2.4, -0.2, 707.980, -879.970);
             }
            if(_GLF_DEAD(false))
             barrier();
           }
          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
           {
            if(_GLF_DEAD(false))
             barrier();
            do
             {
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
               }
              else
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  bvec2(true, true);
                 }
               }
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(false))
             barrier();
           }
          while((_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), true))), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, true && (false)), false), bvec3(bvec3(bvec3(true, _GLF_IDENTITY(false, true && (false)), false)))), true))), true))))))))) == bvec3(true, false, false)))
           {
            vec4 _GLF_SWITCH_0_0v[88], _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), false, true, true))))))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                barrier();
               }
              if(_GLF_DEAD(false))
               barrier();
              if(_GLF_DEAD(false))
               barrier();
              barrier();
             }
            uintBitsToFloat(uvec2(3793u, 52856u));
            uvec2(137413u, _GLF_IDENTITY(93068u, (93068u) / 1u));
            if(_GLF_DEAD(false))
             barrier();
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
             {
              do
               {
                ;
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(_GLF_DEAD(false))
               barrier();
              do
               {
                if(_GLF_DEAD(false))
                 barrier();
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                     {
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                       }
                      else
                       {
                        barrier();
                       }
                     }
                    return;
                   }
                  if(_GLF_DEAD(false))
                   barrier();
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   {
                    for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), 1 * (_GLF_IDENTITY(1, int(int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                     {
                      barrier();
                     }
                    if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                     barrier();
                   }
                  break;
                 }
                barrier();
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                if(_GLF_DEAD(false))
                 {
                  do
                   {
                    barrier();
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  if(_GLF_DEAD(false))
                   barrier();
                 }
               }
             }
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
              if(_GLF_DEAD(false))
               barrier();
             }
            else
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                   barrier();
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                    return;
                   }
                 }
               }
              else
               {
               }
             }
            mat3x2 _GLF_SWITCH_0_3v[25], _GLF_SWITCH_0_4v;
            if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
             break;
            mat2x3 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v[70], _GLF_SWITCH_0_7v;
            if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
             break;
            if(_GLF_DEAD(false))
             barrier();
            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
             {
              (vec4(-4.3, 2188.7133, -867.108, 542.262) == _GLF_SWITCH_0_2v);
              if(_GLF_DEAD(false))
               barrier();
             }
           }
         }
        if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          barrier();
         }
        ivec3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
           {
            if(_GLF_DEAD(false))
             barrier();
            _GLF_SWITCH_0_9v;
           }
          if(_GLF_DEAD(false))
           barrier();
         }
        else
         {
         }
        mat2x3 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           barrier();
          barrier();
         }
        while(true)
         {
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(false))
           barrier();
          do
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          do
           {
            if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
             barrier();
           }
          while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
          for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
           {
            bvec4(false, false, true, true);
            if(_GLF_DEAD(false))
             barrier();
           }
          atan(vec2(-5.1, -422.502));
         }
        for(        mat2(50.82, 9.4, -8.3, -4.3);
 (mat2(_GLF_IDENTITY(determinant(mat2(3593.6551, -204.854, -3.3, -4450.8509)), max(determinant(mat2(3593.6551, -204.854, -3.3, -4450.8509)), determinant(mat2(3593.6551, -204.854, -3.3, -4450.8509))))) == mat2(_GLF_IDENTITY(-796.520, float(vec3(-796.520, 1.0, 1.0))), -958.619, -82.67, 53.67)); isinf(vec2(9.3, 577.756)))
         {
          do
           {
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             barrier();
           }
          while(_GLF_WRAPPED_LOOP(false));
          while(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))
           {
            if(_GLF_DEAD(false))
             barrier();
            _GLF_IDENTITY((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), _GLF_IDENTITY(max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id))), uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id))), uvec2(0u, 0u) | (max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)))))), max(uvec2(_GLF_IDENTITY(max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id))), uvec2(0u, 0u) | (max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)))))), uvec2(_GLF_IDENTITY(max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id))), uvec2(0u, 0u) | (max((uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)), (uvec2(47125u, 133320u) >> (subgroup_id << workgroup_id)))))))))));
            mat3(-2124.9310, 8.2, 563.545, -516.827, -9.2, 643.160, -2.7, -68.53, 7.3);
            (bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY((true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), false || (_GLF_IDENTITY((true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false))) && true)))))))));
            if(_GLF_DEAD(false))
             barrier();
           }
          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
           }
          else
           {
            if(_GLF_DEAD(false))
             barrier();
            -218.018;
            if(_GLF_DEAD(false))
             barrier();
           }
          if(_GLF_DEAD(false))
           barrier();
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         barrier();
        if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
         barrier();
        if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || (_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))))))
         return;
        bitfieldInsert((_GLF_IDENTITY(ivec2(22094, -82736) - ivec2(-84652, -64457), max(ivec2(22094, -82736) - ivec2(-84652, -64457), ivec2(22094, -82736) - ivec2(-84652, -64457)))), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(-88565, 0 | (_GLF_IDENTITY(-88565, (false ? _GLF_FUZZED(43854) : _GLF_IDENTITY(-88565, (-88565) - 0))))), (_GLF_IDENTITY(-88565, 0 | (_GLF_IDENTITY(-88565, (false ? _GLF_FUZZED(43854) : _GLF_IDENTITY(-88565, (-88565) - 0)))))) | 0), 30140), -11419, -45022);
        do
         {
          mat4x3(_GLF_IDENTITY(3.6, (true ? _GLF_IDENTITY(3.6, min(3.6, 3.6)) : _GLF_FUZZED(_GLF_IDENTITY(6.3, clamp(6.3, 6.3, 6.3))))), 2.5, -1.3, 6.8, -49.31, _GLF_IDENTITY(4788.6485, min(_GLF_IDENTITY(4788.6485, 1.0 * (4788.6485)), 4788.6485)), 6.1, 8.1, 4.2, 2303.1690, -6.6, -255.540);
         }
        while(_GLF_WRAPPED_LOOP(false));
       }
       case 32:
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       for(       _GLF_IDENTITY((mat4(-40.91, 435.643, -768.817, -7.8, 8.5, -15.99, -13.72, -1642.8153, -80.25, 14.69, 7.8, 323.321, -301.235, 7.9, -80.12, 5.7)), mat4(1.0) * (_GLF_IDENTITY((mat4(-40.91, 435.643, -768.817, -7.8, 8.5, -15.99, -13.72, -1642.8153, -80.25, 14.69, _GLF_IDENTITY(7.8, (7.8) / 1.0), 323.321, -301.235, 7.9, -80.12, 5.7)), (true ? (mat4(-40.91, 435.643, -768.817, -7.8, 8.5, -15.99, -13.72, -1642.8153, -80.25, 14.69, 7.8, 323.321, -301.235, 7.9, -80.12, 5.7)) : _GLF_FUZZED(mat4(109.553, -5.4, 27.07, -2803.0816, 2.7, 0.2, _GLF_IDENTITY(511.220, clamp(511.220, _GLF_IDENTITY(511.220, max(511.220, 511.220)), 511.220)), -0.9, 9.0, _GLF_IDENTITY(-70.71, min(-70.71, -70.71)), 6.9, 9.9, -3.3, -4778.0054, -1.6, _GLF_IDENTITY(-3.5, (-3.5) + length(0.0))))))));
 (mat2x4(_GLF_IDENTITY(-7.8, float(vec3(-7.8, 0.0, 0.0))), 1.2, 8.9, _GLF_IDENTITY(7.6, clamp(7.6, 7.6, 7.6)), 0.6, -2.8, 20.60, -219.773) != mat2x4(mat3x4(799.001, -402.818, -9736.3171, 8.5, _GLF_IDENTITY(-425.420, min(-425.420, _GLF_IDENTITY(-425.420, clamp(-425.420, -425.420, _GLF_IDENTITY(-425.420, mix(float(_GLF_FUZZED(-6.4)), float(-425.420), bool(true))))))), _GLF_IDENTITY(-1.2, (-1.2) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(18.38, 1.0 * (18.38)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) + (18.38)), 5.1, 7.3, 23.74, 7.8, -8136.9879))); -24426)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         uint _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v[88];
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2657.8911)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x : _GLF_FUZZED(-7414.9369))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x))) - 0.0) > injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x : _GLF_FUZZED(-7414.9369))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x))) - 0.0) > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x : _GLF_FUZZED(-7414.9369))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x))) - 0.0) > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x : _GLF_FUZZED(-7414.9369))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))).x))) - 0.0) > injectionSwitch.y)))), true))))), true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(4.6, -75.38).g), _GLF_FUZZED(-8.0)), bvec2(false, false))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false))))))))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false, false))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, false)))), bool(bool(bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), false, false)))))))), false || (! (false))))))), false || (_GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           bvec3(false, _GLF_IDENTITY(true, (true) || false), true);
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             for(mat3x2 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[94]; false; bvec4(false, false, true, true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               mod(vec2(6545.0692, 628.831), -28.27);
               uvec2 _GLF_SWITCH_0_18v[12], _GLF_SWITCH_0_19v;
               for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), clamp(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, true)), false || (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, true))))))))
                  {
                   true;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v; (true != true); (+ mat4(mat2x3(_GLF_IDENTITY(3784.6358, clamp(3784.6358, 3784.6358, 3784.6358)), -5.2, -3841.2279, 4.4, -1.2, -292.563))))
          {
           mat3x4(transpose(mat3x2(736.988, 9.7, -700.289, 750.983, 4.9, -0.8)));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             mat3x2(-22.72, _GLF_IDENTITY(8.1, max(8.1, 8.1)), 3.8, 29.15, -12.32, 6.8);
            }
           if(_GLF_DEAD(false))
            barrier();
           uvec4(50036u, _GLF_IDENTITY(101734u, (101734u) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | _GLF_IDENTITY((uint(5u)), ((uint(5u))) >> 0u))))), 39185u, 23935u);
           bvec2 _GLF_SWITCH_0_22v[36], _GLF_SWITCH_0_23v[72];
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           {
            (_GLF_IDENTITY(3.6 - mat2(-653.994, -862.234, -0.9, -9.4), (3.6 - mat2(-653.994, -862.234, -0.9, -9.4)) + mat2(0.0, 0.0, 0.0, 0.0)));
            mat2 _GLF_SWITCH_0_24v;
            mat2x3 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              do
               {
                if(_GLF_DEAD(false))
                 {
                  for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                   {
                    barrier();
                   }
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            else
             {
             }
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
             break;
            if(_GLF_DEAD(false))
             barrier();
            bvec2 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v;
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               barrier();
              barrier();
             }
            mat4 _GLF_SWITCH_0_29v;
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))), (bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))), (bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (false)))))), (bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true)))))))) || false)))))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              break;
             }
            equal(tanh(vec4(-820.206, -9.4, -0.0, -0.3)), vec4(52.90, -6743.0334, -6285.3520, _GLF_IDENTITY(-2.9, (-2.9) - _GLF_IDENTITY(sqrt(sin(0.0)), float(_GLF_IDENTITY(mat4x2(sqrt(sin(0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat4x2(mat4x3(mat4x2(sqrt(sin(0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))))));
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              virtual_gid;
             }
            else
             {
              if(_GLF_DEAD(false))
               barrier();
             }
           }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
         while(false)
          {
           if(_GLF_DEAD(false))
            barrier();
           vec3 _GLF_SWITCH_0_30v;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           ivec4 _GLF_SWITCH_0_31v;
           if(_GLF_DEAD(false))
            barrier();
           ;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           for(mat2x3 _GLF_SWITCH_0_32v; _GLF_IDENTITY(false, (false) && true); (ivec2(81386, -43392) , mat4x3(-7.1, 72.70, 193.870, -19.04, -9598.5955, 905.464, 34.56, 57.27, 8.9, _GLF_IDENTITY(0.6, mix(float(_GLF_FUZZED(1.1)), float(0.6), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), 366.246, 8755.8468)))
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) || false))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
              {
               mat4(3.3, _GLF_IDENTITY(-1842.9747, max(-1842.9747, -1842.9747)), 4.8, -2145.9372, -3351.8543, -57.66, -5.6, 26.78, 228.507, 64.04, _GLF_IDENTITY(1600.9549, 0.0 + (1600.9549)), -8986.7233, _GLF_IDENTITY(527.927, mix(float(527.927), float(_GLF_FUZZED(-6.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 2.6, -9366.1114, 31.83);
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           mat2x3(mat4x3(mat4x2(-7405.6711, -19.04, -8555.9512, 7.2, -8.6, -29.58, 21.64, -7.8)));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _injected_loop_counter)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         {
          _GLF_IDENTITY((mat2(mat4x3(47.62, -3.2, 73.46, -91.21, -4.0, -3961.6787, -7.4, 72.29, 1.2, 261.473, -7.5, -51.51)) * mat2(_GLF_IDENTITY(0.8, (0.8) / 1.0), 6316.0455, 0.6, 64.26)), (true ? _GLF_IDENTITY((mat2(mat4x3(47.62, -3.2, 73.46, -91.21, -4.0, -3961.6787, -7.4, 72.29, 1.2, 261.473, -7.5, -51.51)) * mat2(_GLF_IDENTITY(0.8, (0.8) / 1.0), 6316.0455, 0.6, 64.26)), ((mat2(mat4x3(47.62, -3.2, 73.46, -91.21, -4.0, -3961.6787, -7.4, 72.29, 1.2, 261.473, -7.5, -51.51)) * mat2(_GLF_IDENTITY(0.8, (0.8) / 1.0), 6316.0455, 0.6, 64.26))) - mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED((- mat2(95.68, -3.8, -501.311, 6351.5209)))));
          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
           {
            (mat2x3(65.37, -3.2, -1.9, 5708.2709, -754.146, _GLF_IDENTITY(1.6, (1.6) * determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))) * mat4x2(-90.56, 76.08, -49.98, -8213.1864, 3.1, -151.977, -4642.8074, 4.6));
           }
          if((ivec2(66056, 80734) != ivec2(25228, 72483)))
           {
            if(_GLF_DEAD(false))
             barrier();
            (-5.2 - mat4(-454.516, 4.3, 9.5, 4.3, 9.2, -179.718, 7.9, 786.776, 131.504, -654.175, -6259.9655, 64.73, 7188.3677, -261.896, 608.535, 931.419));
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            if(_GLF_DEAD(false))
             continue;
           }
          if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)), clamp(float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)), float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)), float(mat2x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0))))))), 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0))), max(vec3(injectionSwitch.x, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0))), vec3(injectionSwitch.x, 1.0, determinant(mat4(1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0)))))), (float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, determinant(mat4(1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0))), max(vec3(injectionSwitch.x, 1.0, determinant(mat4(1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0))), vec3(injectionSwitch.x, 1.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.8) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(38.82)), float(1.0), bool(true))))), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0), 0.0, 0.0, 1.0))))))) - 0.0)) > injectionSwitch.y)))))))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            barrier();
           }
          bvec3 _GLF_SWITCH_0_33v[29], _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v;
          do
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u)), ~ (_GLF_IDENTITY(~ (((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u))), (~ (((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u)))) - uvec3(0u, 0u, 0u)))), (false ? _GLF_FUZZED(uvec3(171464u, 84975u, 56775u)) : _GLF_IDENTITY(((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u)), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u)), ~ (~ (((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u))))), (_GLF_IDENTITY(((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u)), ~ (~ (((subgroup_local_id --) * uvec3(198348u, 72655u, 126669u)))))) - uvec3(0u, 0u, 0u))) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))));
                 }
                else
                 {
                 }
               }
              else
               {
               }
             }
            else
             {
             }
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(958.566)), vec2(_GLF_FUZZED((+ float(true))), (injectionSwitch)[1]), bvec2(false, true))).y))))
             return;
            if(_GLF_DEAD(false))
             barrier();
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             barrier();
            barrier();
           }
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(false))
           barrier();
          mat2(737.808, 2829.9117, 3.0, _GLF_IDENTITY(-382.174, max(-382.174, -382.174)));
          if(_GLF_DEAD(false))
           {
            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
             {
              barrier();
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
           }
          mat3x4(598.412, -5.0, -486.496, 9.2, _GLF_IDENTITY(829.148, (_GLF_IDENTITY(829.148, _GLF_IDENTITY((false ? _GLF_FUZZED(5.5) : _GLF_IDENTITY(829.148, (829.148) - 0.0)), max((false ? _GLF_FUZZED(5.5) : _GLF_IDENTITY(829.148, (829.148) - 0.0)), (false ? _GLF_FUZZED(5.5) : _GLF_IDENTITY(829.148, (829.148) - 0.0)))))) / 1.0), _GLF_IDENTITY(-74.28, (-74.28) + 0.0), -1.8, -7.0, -9207.8283, 8710.4406, 7.0, _GLF_IDENTITY(708.713, 1.0 * (708.713)));
          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
           {
            for(            -56789;
 isnan(8977.9953); ivec3(-32562, 11787, -15832))
             {
              mat2x3 _GLF_SWITCH_0_36v[9];
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0)), vec2(1.0, 1.0) * (vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))))).y)), true, false)))))
               barrier();
              if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
               {
               }
              else
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              (+ (-34390 ^ bitfieldReverse(ivec3(-43680, -79113, -25920))));
              ivec4 _GLF_SWITCH_0_37v;
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
               barrier();
              if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
               {
                bvec4(false, true, false, true);
               }
              else
               {
                do
                 {
                  do
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                     {
                      if(_GLF_DEAD(false))
                       barrier();
                      barrier();
                     }
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 }
                while(_GLF_WRAPPED_LOOP(false));
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    barrier();
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                   }
                 }
               }
              if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
               barrier();
              vec4(8.9, _GLF_IDENTITY(vec3(9.9, 5.2, 203.341), clamp(vec3(9.9, 5.2, 203.341), vec3(9.9, 5.2, 203.341), vec3(9.9, 5.2, 203.341))));
             }
           }
          if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
           barrier();
         }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         while(false)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(false)
            {
             vec2 _GLF_SWITCH_0_38v[79];
            }
           else
            {
             uint _GLF_SWITCH_0_39v;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 ivec4(-76614, -43418, -23189, -28984);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             mat3x2 _GLF_SWITCH_0_40v[95], _GLF_SWITCH_0_41v[23];
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             (ivec4(-96170, -82448, _GLF_IDENTITY(-97561, min(-97561, -97561)), 76142) * ivec4(86921, 86201, _GLF_IDENTITY(47647, (_GLF_IDENTITY(47647, (_GLF_IDENTITY(47647, max(47647, 47647))) / 1)) | (47647)), -38532));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))))
              continue;
             int _GLF_SWITCH_0_42v;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             mix((ivec4(-6198, -74748, 48362, 67252) & ivec4(_GLF_IDENTITY(53584, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(53584, min(53584, _GLF_IDENTITY(53584, int(int(53584))))))), -30389, -86874, -65612)), (ivec4(ivec2(88092, 7085), 12649, 393)), bvec4(false, _GLF_IDENTITY(bvec3(true, true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), false)))), bvec3(bvec4(bvec3(bvec3(true, true, true)), true)))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               uvec4(72755u, 100380u, _GLF_IDENTITY(30419u, min(30419u, 30419u)), 190510u);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           bvec4(true, true, _GLF_IDENTITY(true, ! (! (true))), false);
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
             barrier();
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  barrier();
                 }
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                 }
               }
             }
            else
             {
             }
            if(_GLF_DEAD(false))
             barrier();
            do
             {
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
               barrier();
              ;
              if(_GLF_DEAD(false))
               barrier();
              if(_GLF_DEAD(false))
               barrier();
             }
            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
             barrier();
            if(_GLF_DEAD(false))
             continue;
            if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), true, false))))
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
               barrier();
              barrier();
             }
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))); _injected_loop_counter ++)
               {
                mat3(-466.945, 445.920, -4302.4662, -5799.9091, 185.810, 1080.7127, _GLF_IDENTITY(-968.499, max(-968.499, _GLF_IDENTITY(-968.499, max(-968.499, -968.499)))), 21.90, -7.4);
               }
             }
            else
             {
             }
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              uvec2(199078u, 134044u);
             }
            if(_GLF_DEAD(false))
             barrier();
            (vec4(_GLF_IDENTITY(37.95, float(_GLF_IDENTITY(mat3x4(37.95, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-47.33)))), vec2(1.0, 0.0)))), determinant(mat2(determinant(mat4(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, (0.0) * 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.7)), float(1.0), bool(true))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / abs(1.0)))), 1.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3x4(37.95, sin(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) : _GLF_FUZZED(3.7))), 0.0, 0.0, 1.0, 1.0, 1.0))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), determinant(mat2(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0)), 1.0)))))), -3.5, injectionSwitch) / vec4(-293.427, 28.76, -816.161, 62.25));
           }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           (acos(injectionSwitch) * mat2(_GLF_IDENTITY(-9.9, clamp(_GLF_IDENTITY(-9.9, clamp(-9.9, -9.9, -9.9)), _GLF_IDENTITY(-9.9, min(-9.9, -9.9)), -9.9)), _GLF_IDENTITY(-6099.5046, max(-6099.5046, _GLF_IDENTITY(-6099.5046, float(mat2x3(-6099.5046, 1.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))))))), 537.028, -7394.5817));
          }
         ;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       default:
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.1), _GLF_FUZZED(6.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat4x3((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)))), bvec2(true, true))).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       1;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
