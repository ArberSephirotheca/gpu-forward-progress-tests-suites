#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false || ((((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), true)))) || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(((bool(bvec2(false, true)))))
    return;
   return;
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((true && ((false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if(((((! (! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if(((((mix(float((clamp((mix(float((- 39.33)), float((9027.8771)), bool(false))), (- 39.33), (- 39.33)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      return;
     if((false))
      return;
     if(((bool(bvec4(false, true, true, false)))))
      return;
     return;
     if((((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y))))) || false)))))
      {
       if((false))
        return;
       return;
      }
    }
   if((! (! (((! (! ((((((bool(bvec2(false, true))) && true))) || false)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if(((false || (false))))
      return;
     return;
    }
   return;
  }
 if(((true && ((! (! (false))) || ((! (false || ((false || ((! (((((! ((((bool(bvec2(! ((false || (((false)) && true))), (! (false || ((! (false))))))))) && true)))) && true))))))))))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    return;
   if(((! ((false || (! (((! ((! (! (! (bool(bvec2(false, true))))))))))))))))
    {
     if((false))
      {
       if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
       if((false))
        return;
      }
     return;
    }
   if((false))
    return;
   if((false))
    {
     if(((((min((mix(float((float(67108))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
  }
 uint workgroup_base = (uint(((vec2(injectionSwitch[0], injectionSwitch[1])).x)) ^ (workgroup_size * workgroup_id));
 uint subgroup_base = (clamp((((0u | ((max(subgroup_id, subgroup_id))))) >> 0u), ((subgroup_id) ^ (168233u & 0u)), subgroup_id)) * subgroup_size;
 if((false))
  {
   if((((bool(bool(bool((bvec3(bvec4((bvec3(bvec4(bvec3(((((injectionSwitch.x < injectionSwitch.y)) && (((((bool(bvec2((((false || ((true && (false))))) && true), true))) && true)))))), true, false), false))), true)))))))) && true))
    return;
   if(((((((((clamp((mix(float((- 7.9)), float(injectionSwitch.x), bool((! (! (true)))))), (float(mat2(injectionSwitch.x, 0.0, 0.0, 0.0))), (min(injectionSwitch.x, injectionSwitch.x))))) - log(1.0)) > injectionSwitch.y)))) && true))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((false) && true)))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(write_val, (max(uint(virtual_gid), (clamp(uint(virtual_gid), uint(virtual_gid), uint(((((false ? ((max(uvec2(42279u, 33433u), uvec2(42279u, 33433u))).t) : virtual_gid) / 1u)))))))), 4, 64, (min(4, 4)));
 uint read_val = (((bool(bvec4(false, true, false, true))) ? (subgroup_size) : ((true ? atomicLoad(write_val, 4, 64, 2) : (virtual_gid)))));
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > (clamp(injectionSwitch.y, ((injectionSwitch.y) / 1.0), injectionSwitch.y))))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   return;
   if((((bool(bvec3((false), false, false)))) && true))
    return;
  }
 if((((((((((clamp((((float(((vec4(true ? float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0)) : (4.4), sqrt(0.0), 0.0, sqrt(1.0))) * cos(vec4(0.0, 0.0, 0.0, 0.0))))))), float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0)), float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0))))) + 0.0))) + tan(0.0)) > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((false || (false))))
  {
   if(((! (((! (false)) || false)))))
    return;
   return;
  }
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(((true && (false))))
  {
   if((bool(bool((bool(bvec4((false), true, false, true)))))))
    {
     if(((((! (! (false)))) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       return;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
