#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 bool _f0;
 uint _f1;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 bool _f1;
 ivec3 _f2;
 bvec2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_1 {
 uint _f0;
 float _f1;
 vec2 _f2;
 vec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(bvec2(true), _GLF_struct_1(1u, 1.0, vec2(1.0), vec2(1.0), ivec2(1)), _GLF_struct_2(bvec4(true), true, ivec3(1), bvec2(true), vec4(1.0)), _GLF_struct_3(true, 1u), bvec2(true)), gl_SubgroupSize);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(bvec3(true), gl_NumWorkGroups.x);
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (gl_WorkGroupID)).x));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_5.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_5.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_5.subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < _GLF_struct_replacement_5.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}
