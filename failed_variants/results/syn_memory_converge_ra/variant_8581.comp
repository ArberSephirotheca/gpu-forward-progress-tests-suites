#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
      {
       GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id;
      }
    }
  }
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.w;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.y;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_base;
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_13_1_1_13_2_1_14_3_1_12subgroup_basesubgroup_sizeworkgroup_baseworkgroup_id.x + GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y = virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 do
  {
   atomicStore(write_val, uint(GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   buf[GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y] = uint(subgroupAllEqual(read_val));
  }
}
