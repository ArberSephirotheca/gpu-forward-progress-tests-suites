#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), (false ? _GLF_FUZZED(-720.676) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))))), float(_GLF_FUZZED(873.497)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-772.227), _GLF_FUZZED(191.596)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, sqrt(1.0), 1.0, 1.0, log(1.0), 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(3.9) : (injectionSwitch.x))), (injectionSwitch.x))) - 0.0, clamp(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(3.9) : (injectionSwitch.x))), (injectionSwitch.x))) - 0.0, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(3.9) : (injectionSwitch.x))), (injectionSwitch.x))) - 0.0, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(3.9) : (injectionSwitch.x))), (injectionSwitch.x))) - 0.0, (false ? _GLF_FUZZED(450.621) : _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(3.9) : (injectionSwitch.x))), (injectionSwitch.x))) - 0.0))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(atan(328.947, 2.3)) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, min(false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, _GLF_IDENTITY(false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, (false ? _GLF_FUZZED(-870.744) : injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, false ? _GLF_FUZZED(-870.744) : injectionSwitch.x)), float(vec4(false ? _GLF_FUZZED(-870.744) : injectionSwitch.x, 0.0, 0.0, 0.0))), false ? _GLF_FUZZED(-870.744) : injectionSwitch.x)))))))))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), bool(bvec4((false) && true, false, _GLF_IDENTITY(false, false || (false)), false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), (uint(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))) | 0u))) | 0u)), clamp(uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), (uint(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))) | 0u))) | 0u)), uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), (uint(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))) | 0u))) | 0u)), uint(_GLF_IDENTITY(uint(gl_WorkGroupID.x), (uint(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))) | 0u))) | 0u)))), uint(uint(uint(uint(gl_WorkGroupID.x))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (2))), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(((+ vec2(5920.1893, -2784.5290)) - injectionSwitch)))).y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true)))) - 0.0))), float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true)))) - 0.0))), abs(0.0), sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.31, 2.8)) : injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.31, 2.8)) : injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.31, 2.8)) : injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.31, 2.8)) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.31, 2.8)) : injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(47.31, 2.8)) : injectionSwitch)).y)), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true)))) - 0.0))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true)))) - 0.0))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || _GLF_IDENTITY((false), false || ((false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(false))), vec2(_GLF_FUZZED(_GLF_IDENTITY(47.17, clamp(47.17, 47.17, 47.17))), (injectionSwitch)[_GLF_IDENTITY(1, (1 & 1) * (1))]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))
              break;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0))))), float(mat2x3(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 1.0, sqrt(1.0), 1.0)))) > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), true)))) && true))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec4(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false)))))), (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, false))))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, false))))))), false))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true)))))) && true))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))) || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bool((false))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), false || (bool(bvec2(true, false))))))), ! (! (bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)), max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(step(injectionSwitch, injectionSwitch)) : injectionSwitch, (false ? _GLF_FUZZED(step(injectionSwitch, injectionSwitch)) : injectionSwitch) * mat2(1.0)))).y, injectionSwitch.y)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, bool(bool((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(vec4(-5.4, -4738.5725, -8.8, 31.53))) : injectionSwitch)).x > injectionSwitch.y) && true, bool(bool((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-761.355) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.7) : injectionSwitch.x)))) > injectionSwitch.y) && true)))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(inversesqrt(390.906)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0)))), max(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0))))))).y, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0)))), max(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0))))))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0)))), max(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0)))) - vec2(0.0, 0.0))))))).y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.3)), _GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(6.3, 1.0 * (6.3)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, min(1, 1))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (subgroup_id)), subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << (0 >> _GLF_IDENTITY(int(8), int(8)))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))) | 1) | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u), min(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u), _GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) >> 0)); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))))), _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), ((_GLF_DEAD(false))) && true))) || false)))) || false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false, (_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), max(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(injectionSwitch.y, 1.0, 1.0, 0.0))))))))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! ((_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), max(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(injectionSwitch.y, 1.0, 1.0, 0.0))))))))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false))))), ((! (_GLF_DEAD(false)))) || false)))) || false))), false, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), bool(bool(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))) || false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))))) && true), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true)))), ((! (_GLF_DEAD(false)))) || false)))) || false), ((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))))) && true), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true)))), ((! (_GLF_DEAD(false)))) || false)))) || false)) && true))), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)), ! (! (bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)))))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), ! (! (! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))))))))) || false), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)), ! (! (bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)))))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), ! (! (! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), false || ((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)), ! (! (bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)))))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), ! (! (! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))))))))) || false), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)), ! (! (bool(bvec4(! ((! (_GLF_DEAD(false)))), false, false, false)))))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), ! (! (! (! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))), false, false))) || false)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || _GLF_IDENTITY(false, ! (! (false))))))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), true && (_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bvec2(! ((_GLF_DEAD(false))), false)))))))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)))))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)), bool(bool(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))) || false))), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))) && true)), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))) && true)))))))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y)))))))) && true), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false, false)))))))) || false)))) || false))), false, false))) || false))), true && (_GLF_IDENTITY(bool(! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || _GLF_IDENTITY(false, ! (! (false))))))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), true && (_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bvec2(! ((_GLF_DEAD(false))), false)))))))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)))))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)), bool(bool(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))) || false))), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))) && true)), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))) && true)))))))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y)))))))) && true), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false, false)))))))) || false)))) || false))), false, false))) || false))), ! (! (bool(! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || _GLF_IDENTITY(false, ! (! (false))))))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), true && (_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bvec2(! ((_GLF_DEAD(false))), false)))))))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)))))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)), bool(bool(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))))))) || false))), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))) && true)), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))) && true)))))))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((! (_GLF_DEAD(false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y)))))))) && true), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), false, false)))))))) || false)))) || false))), false, false))) || false)))))))))))))) || false)))))
    break;
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true))))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  break;
                 break;
                }
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) | (1))) << ((0 << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), int(0)))) << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, 0 + (1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) >> (0 | 0)), (_GLF_IDENTITY((0), ((0)) >> (0 | 0))) / 1) + int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), clamp(int(7), int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, 0 | (7)), 7))), int(7)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                    barrier();
                   break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(93.91, 1.2)) : injectionSwitch)).y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 continue;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(sign(_GLF_IDENTITY(40.57, max(40.57, _GLF_IDENTITY(40.57, float(mat4x3(40.57, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0)))))))) : injectionSwitch.x)) > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(92.33)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ((_GLF_IDENTITY(true, false || (true)))) || false) && true) ? injectionSwitch.y : _GLF_FUZZED(-524.085)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(mat2x3(mat2(injectionSwitch, 0.0, 1.0))))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(mat2x3(mat2(injectionSwitch, 0.0, 1.0))))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(mat2x3(mat2(injectionSwitch, 0.0, 1.0))))), vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(mat2x3(mat2(injectionSwitch, 0.0, 1.0)))))))))))).y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5760.8353) : 0.0))), float(_GLF_FUZZED(-18.97)), bool(false)))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (false) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(false, (false) || false)))))))))))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), min(64, 64)), _GLF_IDENTITY(4, _GLF_IDENTITY((4) << 0, max(_GLF_IDENTITY((4) << 0, 0 | ((4) << 0)), (4) << 0))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(58181) : _injected_loop_counter)) < _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), min(0 >> _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), (true ? 0 >> _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(99923))))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false))))), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)))))) && true), true, false, true)))) && true)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
      return;
    }
  }
}
