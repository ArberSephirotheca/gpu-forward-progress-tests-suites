#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec4 GLF_merged2_0_2_52_2_2_53GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec4 GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size;
 uvec4 GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))) && true))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_52_2_2_53GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.xy = GLF_merged2_0_2_52_2_2_53GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.zw;
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(acos(injectionSwitch)))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size;
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))));
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true, false)))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(9.0, -6847.8935, -234.317, 2174.6938))))).y))));
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 GLF_merged2_0_2_52_2_2_53GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u))));
 GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.xy = GLF_merged2_0_2_52_2_2_53GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeGLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.xy;
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy = GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.xy;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(242.899) : _GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))) && true)))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true))))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) || false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) || false), true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, true && (false))), true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), vec2(_GLF_FUZZED(-1.9), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))).x < injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9800.4184)))), sqrt(0.0), 1.0, 0.0, tan(0.0), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(0.0), 1.0, 0.0, tan(0.0), 1.0))) + 0.0))), float(_GLF_FUZZED(vec4(48.57, -11.99, -8.1, -77.53).b)), bool(false))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), true && ((_GLF_DEAD(false)))))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true))) && true))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2615.9752) : injectionSwitch.y))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2615.9752) : injectionSwitch.y))))))), true && ((! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2615.9752) : injectionSwitch.y)))))))))))))
        continue;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | 0, ((int(7)) | 0) | ((int(7)) | 0)))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) || false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, true, false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.w = subgroup_size;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))), ((_GLF_IDENTITY(1, max(1, 1)))) / ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))) ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, _GLF_IDENTITY(1, (1) ^ 0)))), (false ? _GLF_FUZZED(29953) : (1 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.w = GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.w;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy.x = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size)).w;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((vec3(7.2, -53.22, 3634.5131) * mat2x3(-6.5, -8129.4591, -3634.8151, 5069.6753, 406.066, -9748.0295)).g)), float(injectionSwitch.y), bool(true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.xy.x = subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x = GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.xy.x;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) != (66745 & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u)))).x;
 GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.z = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec2(-45.99, 5.5), injectionSwitch))))), (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec2(-45.99, 5.5), injectionSwitch)))))) - vec2(0.0, 0.0))).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec2(-45.99, 5.5), injectionSwitch))))), (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec2(-45.99, 5.5), injectionSwitch)))))) - vec2(0.0, 0.0))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec2(-45.99, 5.5), injectionSwitch))))), (min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mod(vec2(-45.99, 5.5), injectionSwitch)))))) - vec2(0.0, 0.0))).y)) || false), false, true, false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.x = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size, (GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size) | (GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size))))).z;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))));
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.0)), _GLF_IDENTITY(float(injectionSwitch.y), 0.0 + (float(injectionSwitch.y))), bool(true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.x, (true ? GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.x : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size, uvec4(GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size[0], GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size[1], GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size[2], GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size[3])).w)))) << 0u);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))), true, true, true))) || false)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, (true) || false))))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((bool((injectionSwitch.x > injectionSwitch.y))), ! (! ((bool((injectionSwitch.x > injectionSwitch.y))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z = workgroup_size;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy.y = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), vec2(_GLF_FUZZED(-7.7), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED((+ -392.560))), bool(false)))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.w = GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy.y;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), false))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0)))), false)), false || (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.6)))))))))
        return;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), 0.0), transpose(transpose(mat3x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), 0.0)))))), (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-10.90)), bool(false)))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))), clamp(float(_GLF_IDENTITY(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))), (float(_GLF_IDENTITY(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)))))) - 0.0), float(_GLF_IDENTITY(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), transpose(transpose(mat2x4(0.0, sqrt(0.0), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)))))))), 1.0, 0.0))))), 0.0), transpose(transpose(mat3x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), 0.0)))))), (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) || false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false), false))))))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID) >> uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), 0u), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupID) >> uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(uvec2(uvec2(0u, 0u))), clamp(uvec2(uvec2(uvec2(0u, 0u))), uvec2(uvec2(uvec2(0u, 0u))), uvec2(uvec2(uvec2(0u, 0u)))))))), 0u)), _GLF_IDENTITY(min(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))))), 0u), ~ (~ (_GLF_IDENTITY(min(0u, 0u), ~ (~ (min(0u, 0u))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(0u, 0u)))) * 1u, (((_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(0u, 0u)))) * 1u) | 0u)) - 0u), 0u))), uvec3(uvec3((_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID))) >> uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(_GLF_IDENTITY(0u, (0u) * 1u), 0u), 0u | (min(0u, 0u))))) - 0u), 0u)))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u)) + (_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID) >> _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), 0u ^ (_GLF_IDENTITY(min(0u, 0u), clamp(min(0u, 0u), min(0u, 0u), min(0u, 0u)))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), 0u ^ (_GLF_IDENTITY(min(0u, 0u), clamp(min(0u, 0u), min(0u, 0u), min(0u, 0u))))))) - 0u)) - 0u), 0u), (false ? _GLF_FUZZED(uvec3(69137u, _GLF_IDENTITY(61932u, (_GLF_IDENTITY(61932u, 0u | (_GLF_IDENTITY(61932u, min(61932u, 61932u))))) * 1u), 54811u)) : uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), 0u ^ (_GLF_IDENTITY(min(0u, 0u), clamp(min(0u, 0u), _GLF_IDENTITY(min(0u, 0u), max(min(0u, 0u), min(0u, 0u))), min(0u, 0u))))))) - 0u), 0u))), uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY(((gl_WorkGroupID) >> uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), ~ (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u)))))), 0u)), max(((gl_WorkGroupID) >> uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), ~ (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u)))))), 0u)), ((gl_WorkGroupID) >> uvec3(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), ~ (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u)))))), 0u))))), uvec3(uvec3((_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) | (0u)))), 0u, 0u) | (gl_WorkGroupID))) >> _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (uint(uint(0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (uint(uint(0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (false ? _GLF_FUZZED(GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size) : uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (uint(uint(0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | uvec3(0u, 0u, 0u)))))))).x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.y = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, (true ? _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, min(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y)) : _GLF_FUZZED(subgroup_size)))) >> _GLF_IDENTITY(0u, 0u + (0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, ~ (~ (GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size))).w, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.w, (GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.w) | (GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.w))))) * GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.y;
 _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base, (false ? _GLF_FUZZED((true ? subgroup_local_id : write_val)) : GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base));
 GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.z = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(6.9)), bvec2(false, false))).x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy) ^ uvec2(0u, 0u)).y) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(max(subgroup_id, subgroup_id), ~ (~ (_GLF_IDENTITY(max(subgroup_id, subgroup_id), 0u | (max(subgroup_id, subgroup_id))))))))), (true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy) ^ uvec2(0u, 0u)).y) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_id), ~ (~ (_GLF_IDENTITY(max(subgroup_id, subgroup_id), 0u | (max(subgroup_id, subgroup_id)))))))), ((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy) ^ uvec2(0u, 0u)).y) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_id), ~ (~ (_GLF_IDENTITY(max(subgroup_id, subgroup_id), 0u | (max(subgroup_id, subgroup_id))))))))) | ((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy, (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy) ^ uvec2(0u, 0u)).y) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_id), ~ (~ (_GLF_IDENTITY(max(subgroup_id, subgroup_id), 0u | (max(subgroup_id, subgroup_id))))))))))) : _GLF_FUZZED(subgroup_id))) * GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.xy.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.w = subgroup_base;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.z = GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.w, (GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.z = GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.w) ^ 0u);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))))))
    {
    }
   else
    {
     barrier();
    }
  }
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.z = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)) || (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))), min(_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), int(1)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(1), int(1)))), ~ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(int(1), int(1))))), max(~ (~ (~ (_GLF_IDENTITY(int(1), int(1))))), ~ (~ (~ (_GLF_IDENTITY(int(1), int(1)))))))))))), min(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (~ (1)))))))))), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))))), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, (true) && true))) && true) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (false ? _GLF_FUZZED(ivec4(-4153, -52572, 82695, 66506)) : _GLF_IDENTITY(ivec4(5, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), min(ivec4(5, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(5, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), _GLF_IDENTITY(int(2), 1 * (_GLF_IDENTITY(int(2), (int(2)) / 1))))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY((0 | 0) ^ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(max(int(2), int(2)), (_GLF_IDENTITY(max(int(2), int(2)), min(max(int(2), int(2)), _GLF_IDENTITY(max(int(2), int(2)), (max(int(2), int(2))) | (max(int(2), int(2))))))) >> 0)), _GLF_IDENTITY(int(2), 1 * (_GLF_IDENTITY(int(2), (int(2)) / 1))))) >> _GLF_IDENTITY(int(2), int(2)))), int(int((0 | 0) ^ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(max(int(2), int(2)), (_GLF_IDENTITY(max(int(2), int(2)), min(max(int(2), int(2)), _GLF_IDENTITY(max(int(2), int(2)), (max(int(2), int(2))) | (max(int(2), int(2))))))) >> 0)), _GLF_IDENTITY(int(2), 1 * (_GLF_IDENTITY(int(2), (int(2)) / 1))))) >> _GLF_IDENTITY(int(2), int(2))))))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(7.7) : injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, max(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, clamp(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, max(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, max(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, clamp(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, max(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(498.265)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x))) / 1.0))) > injectionSwitch.y)) ? _GLF_FUZZED(7.7) : injectionSwitch.y)))))) - 0.0)))))) || false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))));
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, max(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size)).z, clamp(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.z, _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.z) / 1u, uint(uvec2((GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.z) / 1u, 0u)))), GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.z, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, clamp(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size) : GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size)))).z)) + GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.z + GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x;
 GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.xy.y = virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, false)))))) || false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w = GLF_merged3_0_2_53_2_1_13_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_size.xy.y;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) || false)))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(-7.8)), bvec2(false, false))).x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(-7.8)), bvec2(false, false)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(-7.8)), bvec2(false, false))) * mat2(1.0))).x > injectionSwitch.y)))) && true));
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), false || (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   atomicStore(write_val, _GLF_IDENTITY(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), min(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), uint(uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w, min(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)), GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)))))), _GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) * 1u))), clamp(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w, (true ? GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w : _GLF_FUZZED(subgroup_size)))), uint(uint(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u), workgroup_size, workgroup_size))) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), _GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))) | 0u)))), 1u)))), min(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid, ~ (~ (GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid))).w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), 0u + (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) : _GLF_FUZZED(subgroup_base)))), 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)), clamp(uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)), (uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u))) | uvec2(0u, 0u)))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (false ? _GLF_FUZZED(workgroup_size) : uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), 1u)))))))))))), _GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) * 1u))), _GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid, clamp(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid, GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid)).w, uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)))), uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) << 0u)), min(~ (_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) << 0u)), ~ (_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) << 0u)))))), ~ (~ (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)))), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) * 1u))), _GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), min(_GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), _GLF_IDENTITY(uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), clamp(uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), _GLF_IDENTITY(uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), clamp(uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))), uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w))))), uint(uint(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)))))), _GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w), (uint(GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w)) * 1u))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.9), _GLF_FUZZED(57.22)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false)) && true)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))) || false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0 + (injectionSwitch.x), 0.0 + (_GLF_IDENTITY(0.0 + (injectionSwitch.x), (false ? _GLF_FUZZED(-703.491) : _GLF_IDENTITY(0.0 + (injectionSwitch.x), clamp(0.0 + (injectionSwitch.x), 0.0 + (injectionSwitch.x), 0.0 + (injectionSwitch.x)))))))) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || _GLF_IDENTITY(false, (false) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), ((1 | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (1))) | (1)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), _GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) + _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, min(0, 0))))))), (0 & -16957) + (clamp(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), (false ? _GLF_FUZZED(-46805) : ~ (int(5)))), 0 + (~ (int(5))))), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) + _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, min(0, 0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) + _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, min(0, 0))))))) | 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))), (0 ^ 0) | (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))))), clamp(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), _GLF_IDENTITY(0 + (~ (int(5))), ~ (~ (_GLF_IDENTITY(0 + (~ (int(5))), (_GLF_IDENTITY(0 + (~ (int(5))), (true ? 0 + (~ (int(5))) : _GLF_FUZZED(-76715)))) | (_GLF_IDENTITY(0 + (~ (int(5))), clamp(0 + (~ (int(5))), 0 + (~ (int(5))), 0 + (~ (int(5))))))))))), 0 | (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))))), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), _GLF_IDENTITY(0 + (~ (int(5))), ~ (~ (_GLF_IDENTITY(0 + (~ (int(5))), (_GLF_IDENTITY(0 + (~ (int(5))), (true ? 0 + (~ (int(5))) : _GLF_FUZZED(-76715)))) | (_GLF_IDENTITY(0 + (~ (int(5))), clamp(0 + (~ (int(5))), 0 + (~ (int(5))), 0 + (~ (int(5))))))))))), 0 | (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))), (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5))))) + 0)), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))), 0 + (~ (int(5))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))), 0 + (~ (int(5)))))) >> 0), (~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))) + 0))))) << 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         break;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), false))))), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true && (bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)), true, true)))))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & int(8.8))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), false || (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))) || false))) && true)))
          {
           for(int _injected_loop_counter = (0 & (70231 | -71479)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(false)), true && (_GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(false)), false || (false || (_GLF_WRAPPED_LOOP(false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch)).x > injectionSwitch.y)))))))
              break;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true)), (_GLF_IDENTITY(false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true)), ! (! (false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1)))), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true)))))) && true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))), true && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))), true && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))))), true))), bool(bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))), true && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))), true && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))))) << (1 ^ 1)) != 1))) && true)))))), true))))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), false)))), true && (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), (bool(bvec4(_GLF_DEAD(false), true, false, false))) || false)))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && ((_GLF_WRAPPED_LOOP(false)))))));
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false) || false), false, true, true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) / cos(vec2(0.0, 0.0))), injectionSwitch)).y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-71415)))) + 0))), ! (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? int(3) : _GLF_FUZZED(-71415), ~ (_GLF_IDENTITY(~ (true ? int(3) : _GLF_FUZZED(-71415)), max(~ (true ? int(3) : _GLF_FUZZED(-71415)), _GLF_IDENTITY(~ (true ? int(3) : _GLF_FUZZED(-71415)), (~ (true ? int(3) : _GLF_FUZZED(-71415))) << 0)))))))) + 0))))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-71415)))) + 0)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, true))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true))), true, false, true)))))) || false, (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), ! (! ((false)))), false, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, true))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), true))), true, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), ! (! ((false)))), false, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, true))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), true))), true, false, true)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), ! (! ((false)))), false, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, true))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), true))), true, false, true)))))), (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), ! (! ((false)))), false, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, false, true))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), true))), true, false, true))))))) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false) || false))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) || false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(intBitsToFloat(bitCount(-45885))) : injectionSwitch.y))))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, 0 ^ (2)), max(2, _GLF_IDENTITY(2, 0 | (2)))), (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 ^ (2)), max(2, _GLF_IDENTITY(2, 0 | (2))))) / 1));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.z = read_val;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.y = GLF_merged3_0_2_52_2_1_8_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_base.z;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (false) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false)), false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), false)), ! (! (bool(bvec2(false, false))))), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), ! (_GLF_IDENTITY(! (! (! (bool(bvec2(false, false))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), ! (! (! (! (bool(bvec2(false, false)))))))), ! (! ((! (! (bool(bvec2(false, false)))))))))))))), true, true, false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(6.4)))) - 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))) - 0.0), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, bool(bool(false))), false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))))), false, false)), true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       return;
      }
     do
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(_GLF_IDENTITY(int(2), (int(2)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), 0))), (_GLF_IDENTITY(int(2), int(ivec2(_GLF_IDENTITY(int(2), (int(2)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), 0)))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch.y, injectionSwitch.y)), float(float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch.y, injectionSwitch.y)))))), float(_GLF_FUZZED(-2.7)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-2.3, float(mat2x3(_GLF_IDENTITY(-2.3, (-2.3) / 1.0), 1.0, 0.0, 0.0, sqrt(0.0), sqrt(0.0))))) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-2.3, float(mat2x3(_GLF_IDENTITY(-2.3, (-2.3) / 1.0), 1.0, 0.0, 0.0, sqrt(0.0), sqrt(0.0))))) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))) - 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), 1.0 * (abs(0.0))), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.2)), float(1.0), bool(true))), 1.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))))), 0.0, exp(0.0), 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, exp(0.0), 0.0), vec4(sqrt(0.0), 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, exp(0.0), 0.0), vec4(sqrt(0.0), 1.0, 0.0, 1.0))), 0.0, abs(0.0), 0.0, sin(0.0)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-856.263))), 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), float(mat4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) - 0.0, max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), float(mat4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) - 0.0, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), float(mat4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) - 0.0))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2241.5313) : 0.0)), 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-2.3) : float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))))))), injectionSwitch.y, injectionSwitch.y))) + 0.0))))))));
 GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size.y = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_13num_workgroupread_valsubgroup_basesubgroup_size.y;
 _GLF_IDENTITY(buf[GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w] = uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec4(107496u, _GLF_IDENTITY(180141u, (180141u) - (1u ^ 1u)), 47943u, 164071u)), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u))), (~ (_GLF_FUZZED(uvec4(_GLF_IDENTITY(107496u, (107496u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 180141u, 47943u, 164071u)))) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY((~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, _GLF_IDENTITY(164071u, ~ (~ (164071u))))))), (_GLF_IDENTITY((~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, _GLF_IDENTITY(164071u, ~ (~ (164071u))))))), ((~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, _GLF_IDENTITY(164071u, ~ (~ (164071u)))))))) ^ uvec4(0u, 0u, 0u, 0u))) + uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u)))))) : GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size)).y)), (buf[GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_basevirtual_gid.w] = uint(subgroupAllEqual(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size, ~ (~ (GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size))), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u)), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u)), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u))), _GLF_IDENTITY((~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u)))), uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, 0u | (1u))) * ((~ (_GLF_FUZZED(uvec4(107496u, 180141u, 47943u, 164071u)))))) - uvec4(0u, 0u, 0u, 0u)))))) : GLF_merged4_0_1_13_1_1_8_2_1_14_3_1_14num_workgroupread_valworkgroup_baseworkgroup_size)).y))) * 1u);
}
