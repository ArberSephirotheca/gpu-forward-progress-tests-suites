#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4x3 _f0;
 uint _f1;
 vec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 vec2 _f1;
 bvec2 _f2;
 uint _f3;
 mat4 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 mat2x4 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 vec3 _f1;
 vec4 _f2;
 mat2 _f3;
 uint _f4;
 bvec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 uint _f1;
} ;

struct _GLF_struct_5 {
 uint workgroup_size;
 ivec4 _f0;
 mat4x2 _f1;
 bool _f2;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 vec3 _f1;
 _GLF_struct_5 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 bool _f1;
 uvec4 _f2;
 mat3 _f3;
 bvec4 _f4;
 bvec4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_2 {
 float _f0;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 ivec3 _f1;
 bvec2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 uvec4 _f1;
 mat2 _f2;
 bool _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 ivec4 _f1;
 _GLF_struct_1 _f2;
 bvec4 _f3;
 _GLF_struct_2 _f4;
 ivec2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_11 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(bvec2(true), _GLF_struct_4(_GLF_struct_0(ivec4(1), uvec4(1u), mat2(1.0), true, ivec2(1)), ivec4(1), _GLF_struct_1(mat2x3(1.0), ivec3(1), bvec2(true), bvec4(true)), bvec4(true), _GLF_struct_2(1.0), ivec2(1), _GLF_struct_3(mat3x4(1.0), true, uvec4(1u), mat3(1.0), bvec4(true), bvec4(true), uvec3(1u))), _GLF_struct_6(vec2(1.0), vec3(1.0), _GLF_struct_5(gl_WorkGroupSize.x, ivec4(1), mat4x2(1.0), true), mat3x4(1.0)), _GLF_struct_8(_GLF_struct_7(mat3(1.0), vec3(1.0), vec4(1.0), mat2(1.0), 1u, bvec4(true), 1u), 1u), _GLF_struct_11(_GLF_struct_9(mat4x3(1.0), vec2(1.0), bvec2(true), 1u, mat4(1.0)), mat2x4(1.0), _GLF_struct_10(mat4x3(1.0), 1u, vec4(1.0), uvec2(1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_struct_replacement_12._f2._f2.workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 4);
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
