#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size;
 uvec4 GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id;
 uvec4 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size;
 GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz = GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 uvec4 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 do
  {
   GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))), true, true), false))))));
 GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz = GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.xyz;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid;
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id;
 uvec4 GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.w = GLF_merged2_0_3_70_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizesubgroup_id.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (int(ivec2(1, 1))) | (int(ivec2(1, 1))))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.z = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.w;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.z = subgroup_size;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz.x = GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.z;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   do
    {
     GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.z = GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz.x;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), min(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0)))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), min(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0)))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), min(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0)))))))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), min(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(sin(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0)))))))[1]), vec2(_GLF_FUZZED(1944.4369), _GLF_FUZZED(8548.0340)), bvec2(false, false))))).y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.w = GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.z;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.w = subgroup_local_id;
 GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.y = _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.w, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.w : _GLF_FUZZED(13125u)));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (int(int(0))) + 0))], injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
       do
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), clamp(_GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), clamp(_GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))))), _GLF_IDENTITY(int(5), 0 + (int(5))))), min(_GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            break;
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), max(min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))))))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), false || (bool(bool(_GLF_WRAPPED_LOOP(false)))))))));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) + (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (int(0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.x = _GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(num_workgroup)));
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size.z = workgroup_size;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, sin(0.0), log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat2x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec3(-338.749, -0.0, _GLF_IDENTITY(-85.10, (true ? -85.10 : _GLF_FUZZED(-1.1)))).b)), bool(false))), sin(0.0), log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0)))))) < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz.z = GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size.z;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size.y = workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))
  return;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.y = GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true) || false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, ~ (~ (0))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(0, 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) - 0.0))))))))) * 1), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0)))) & ivec2(-44044, 41227).r), bool(bool(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0)))) & ivec2(-44044, 41227).r))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
              }
            }
          }
        }
       return;
      }
    }
  }
 uint workgroup_base = GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz.z * GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.y;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.x = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter --, (0 >> _GLF_IDENTITY(int(8), int(8))) | (_injected_loop_counter --)))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.y = GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.x;
    }
  }
 uint subgroup_base = GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.z * GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.w;
 GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x = subgroup_base;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(3572) : _GLF_IDENTITY(0, (0) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
      {
       if(_GLF_DEAD(false))
        continue;
       GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.y = _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x, clamp(GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x, 0u | (GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x)), (_GLF_IDENTITY(GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x, (GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x) | 0u)) / 1u), GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.x));
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.2)), float(0.0), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), min(_GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), max(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), 1.0 * (clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) && true)), ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.z = GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, sqrt(0.0)), transpose(transpose(mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, sqrt(0.0))))))).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.y = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.z;
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy, (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy) + (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u)))).y + GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.y + GLF_merged2_0_3_75_3_1_17GLF_merged3_0_1_13_1_1_17_2_1_13subgroup_basesubgroup_local_idsubgroup_sizesubgroup_local_id.xyz.y;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.x = virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz.y = GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.x;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.w = GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.xyz.y;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(ivec4(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(int(_GLF_IDENTITY(int(7), int(7)))))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), 0 | (int(ivec4(0 >> _GLF_IDENTITY(int(7), int(7)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
   return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true)), (! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true))) && true)))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec2((false), true))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0), (mat4x2(injectionSwitch, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(65.40)), bool(false))), injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0)) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch)).y))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(289.102) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5202.9046)), bool(false))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(289.102) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5202.9046)), bool(false))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(289.102) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5202.9046)), bool(false)))))))) && true))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         atomicStore(write_val, uint(GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.w), _GLF_IDENTITY(4, (4) - 0), _GLF_IDENTITY(64, 0 | (64)), 4);
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read_val = _GLF_IDENTITY(atomicLoad(write_val, 4, 64, _GLF_IDENTITY(2, (2) | 0)), (atomicLoad(write_val, 4, 64, 2)) | 0u);
 GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size.x = read_val;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.w = GLF_merged3_0_1_8_1_1_12_2_1_14read_valworkgroup_idworkgroup_size.x;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.x = GLF_merged2_0_3_70_3_1_8GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_sizeread_val.w;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
  {
   GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.y = GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.x;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3(mat4(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))), float(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3(mat4(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))), float(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0))), min(_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3(mat4(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))), float(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0))), _GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3(mat4(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))), float(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0)))))), float(_GLF_FUZZED(752.173)), bool(false))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) - 0.0), 1.0, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat2(float(vec2(injectionSwitch.y, determinant(mat3(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-0.4)), bool(false)))) - 0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0), mat2(1.0) * (mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0)))))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y) * (_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.3))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))))), 0.0, 1.0)))), 1.0, 0.0, 0.0), mat2(1.0) * (mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0)))))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0), mat2(1.0) * (mat2(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0)))))))))))) || false)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))));
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, true && (false)), true, false)))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(trunc(vec2(4.2, -4.1))))).x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], _GLF_FUZZED(-9.8)), vec2(_GLF_FUZZED(785.851), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-423.409, 1.4)))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))) || false); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.x = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_11num_workgroupread_valsubgroup_basesubgroup_id.y;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED((78.01 - float(1959u))), clamp(_GLF_FUZZED((78.01 - float(1959u))), _GLF_FUZZED((_GLF_IDENTITY(78.01 - float(1959u), min(78.01 - float(1959u), 78.01 - float(1959u))))), _GLF_FUZZED((_GLF_IDENTITY(78.01 - float(1959u), (78.01 - float(1959u)) + 0.0))))), _GLF_FUZZED(float((13170u < _GLF_IDENTITY(187591u, (187591u) | (187591u)))))), bvec2(false, false))).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) && true))))), bool(bvec4(_GLF_DEAD(false), false, false, true))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   buf[GLF_merged4_0_1_8_1_1_13_2_1_13_3_1_11read_valsubgroup_basesubgroup_sizevirtual_gid.w] = uint(subgroupAllEqual(GLF_merged4_0_1_8_1_1_13_2_1_11_3_1_13read_valsubgroup_basesubgroup_idsubgroup_size.x));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
  return;
}
