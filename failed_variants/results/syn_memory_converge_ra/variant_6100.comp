#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 mat3x2 _f0;
 uint _f1;
 ivec2 _f2;
 mat4 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_18 {
 mat2 _f0;
 mat3x4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_20 {
 ivec4 _f0;
 bvec2 _f1;
 float _f2;
 ivec3 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
} ;

struct _GLF_struct_17 {
 mat4x2 _f0;
 _GLF_struct_16 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_21 {
 float _f0;
 _GLF_struct_17 _f1;
 mat4x2 _f2;
 _GLF_struct_20 _f3;
 uvec3 _f4;
 uint workgroup_id;
 vec2 _f5;
 bool _f6;
} ;

struct _GLF_struct_13 {
 bvec4 _f0;
 mat3x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
} ;

struct _GLF_struct_11 {
 bool _f0;
 uvec3 _f1;
 bool _f2;
 mat3 _f3;
 vec3 _f4;
 mat3x2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 uint _f3;
 mat2x4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 mat4x2 _f1;
 float _f2;
 mat2x4 _f3;
 mat3 _f4;
 mat4x3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 uvec4 _f1;
 mat4x2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 bool _f1;
 uvec2 _f2;
 uvec3 GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size;
 uvec3 _f3;
} ;

struct _GLF_struct_6 {
 uint _f0;
 uvec3 _f1;
 mat3x2 _f2;
 _GLF_struct_5 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_3 {
 float _f0;
 vec3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 int _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 vec2 _f4;
 bvec3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 mat4 _f1;
 bool _f2;
 _GLF_struct_3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_10 _f4;
 uvec2 _f5;
 _GLF_struct_14 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_15 _GLF_struct_replacement_15;
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_replacement_15._f2._f3.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_replacement_15._f2._f3.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size.z = workgroup_size;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(1.0, _GLF_struct_17(mat4x2(1.0), _GLF_struct_16(ivec4(1)), bvec4(true)), mat4x2(1.0), _GLF_struct_20(ivec4(1), bvec2(true), 1.0, ivec3(1), _GLF_struct_18(mat2(1.0), mat3x4(1.0), uvec2(1u)), _GLF_struct_19(mat3x2(1.0), 1u, ivec2(1), mat4(1.0), vec3(1.0))), uvec3(1u), gl_WorkGroupID.x, vec2(1.0), true);
 uint workgroup_base = _GLF_struct_replacement_15._f2._f3.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size.z * _GLF_struct_replacement_21.workgroup_id;
 uint subgroup_base = _GLF_struct_replacement_15._f2._f3.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size.y * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 4);
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 _GLF_struct_replacement_15._f2._f3.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size.x = read_val;
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_struct_replacement_15._f2._f3.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_size.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
}
