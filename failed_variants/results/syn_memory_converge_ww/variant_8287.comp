#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, determinant(mat4(1.0, cos(0.0), 0.0, 1.0, sqrt(0.0), exp(0.0), 1.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), 0.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, exp(0.0), 1.0, 1.0)))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false || (false)), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, false, true, false)))))
              continue;
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((+ -4481.6944)), _GLF_FUZZED(66.40)), bvec2(false, false))).x > injectionSwitch.y)))))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, false))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6594.9515))) : _GLF_FUZZED(-6049.4128))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, round(length(normalize(1.0))), sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, 1.0, abs(1.0), tan(0.0))), mat2(1.0) * (vec2(mat4x3(injectionSwitch, 0.0, 0.0, round(length(normalize(1.0))), sqrt(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, 1.0, abs(1.0), tan(0.0)))))).y, mix(float(_GLF_FUZZED(-435.076)), float(injectionSwitch.y), bool(true)))) + 0.0)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), false || (bool(injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), false || (bool(injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-94.41))), _GLF_FUZZED(vec3(0.4, 8.1, 3298.5053).s)), vec2(_GLF_FUZZED(0.1), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, ! (! (true)))))).x > injectionSwitch.y)), false)))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             return;
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))), (bool(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))) && true)))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) && true))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
        }
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bool(bvec2(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.2)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u))), uvec3(uvec3(_GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED((uvec3(193228u, 28607u, 43596u) >> subgroup_local_id)) : clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u))))))))).x;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), max(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize))))) * uvec3(1u, 1u, 1u)))).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), float(_GLF_FUZZED(83.43)), bool(false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), false, false), bvec3(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))), false, false), bvec3(bvec3(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), min(mat2(1.0) * (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), max(mat2(1.0) * (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), mat2(1.0) * (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))))).y))), false, false))))))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    break;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 1u * (gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + (0 << _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ((1)) | (_GLF_IDENTITY((1), ((1)) << 0))), (1))) + 0)); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, false, false))) && true))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))) && true)))))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_base + subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id))) | (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id))))) / 1u);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(8.5)), bool(false))), mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true))))))), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))))), false, true), _GLF_IDENTITY(true, bool(bvec3(true, false, false))))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))))), false, true), _GLF_IDENTITY(true, bool(bvec3(true, false, false))))), true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(_GLF_IDENTITY(true, ! (! (true)))))))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), float(vec3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0)))), bool(true))))), false, true), true))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-694.079))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec3(1, 0, 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(0, 0 ^ (0)));
 if(_GLF_DEAD(false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1, 0 + (1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), max(_GLF_IDENTITY((2), clamp(_GLF_IDENTITY(_GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ ((2)), max(_GLF_IDENTITY(~ ((2)), (true ? ~ ((2)) : _GLF_FUZZED(72505))), ~ ((2)))))), int(ivec2((2), 1))), _GLF_IDENTITY(_GLF_IDENTITY((2), ((2)) ^ 0), (_GLF_IDENTITY((2), ((2)) ^ 0)) >> (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 1)), _GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0)))))), (2))) << 0)), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))), (true ? _GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))) : _GLF_FUZZED(19384))))), 0, 1), (ivec3(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))), 1 * (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, _GLF_IDENTITY(1, (1) / 1)), ivec2(2, 1)))), ivec2(0, 0) + ((false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, _GLF_IDENTITY(1, (1) / 1)), ivec2(2, 1))))))))))))), 0, 1)) / ivec3(1, 1, 1))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))))), 0, _GLF_IDENTITY(1, clamp(1, 1, 1))), (ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, _GLF_IDENTITY((2) / 1, ~ (~ ((2) / 1)))), 1), clamp(ivec2(2, _GLF_IDENTITY(1, int(int(1)))), ivec2(2, 1), ivec2(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(68465) : _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), (2) << 0))), 2, 2)), 1))))), clamp(_GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) + 0)), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))), _GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec3(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec3(ivec4(ivec3(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), 0)))))))), _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(0, 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(ivec4(_GLF_FUZZED(ivec2(-24936, 35966)), 1, 1))))) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)) | (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)))) | ivec2(0, 0)), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1)))), (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(0, 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(ivec4(_GLF_FUZZED(ivec2(-24936, 35966)), 1, 1))))) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)) | (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)))) | ivec2(0, 0)), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1)))), ivec2(1, 1) * ((false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(0, 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(ivec4(_GLF_FUZZED(ivec2(-24936, 35966)), 1, 1))))) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)) | (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)))) | ivec2(0, 0)), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))) | ((false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(0, 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-24936, 35966)), ivec2(ivec4(_GLF_FUZZED(ivec2(-24936, 35966)), 1, 1))))) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, 0 | (2)), 1), (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)) | (ivec2(_GLF_IDENTITY(2, 0 | (2)), 1)))) | ivec2(0, 0)), clamp(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), ivec2(2, 1), ivec2(2, 1))))))), _GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) * 1)), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))))))), _GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(8), int(8)))), 1)) / ivec3(1, 1, 1))), (true ? int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 ^ (2)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (2) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(ivec2(-24936, 35966), (ivec2(-24936, 35966)) << ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1)))))))))))), 0, 1), (ivec3(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))), ivec2(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(_GLF_IDENTITY(2, 0 ^ (2)), 1), ivec2(2, 1))))), ~ (~ (_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, max(1, 1))), clamp(ivec2(2, 1), ivec2(_GLF_IDENTITY(2, 0 ^ (2)), 1), ivec2(2, 1)))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(2, 1), ivec2(2, 1))))))), (~ (~ (_GLF_IDENTITY(ivec2(2, 1), (false ? _GLF_FUZZED(ivec2(-24936, 35966)) : _GLF_IDENTITY(ivec2(2, 1), clamp(ivec2(2, 1), ivec2(_GLF_IDENTITY(2, 0 + (2)), 1), ivec2(2, 1)))))))) | (ivec2(0, 0) << _GLF_IDENTITY(ivec2(1), ivec2(1))))), 0))))))), 0, 1)) / ivec3(1, 1, 1))) : _GLF_FUZZED(12415))), 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), (false ? _GLF_FUZZED(84335) : ~ (~ (_injected_loop_counter)))))) >> 0), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, _GLF_IDENTITY(1, (1) - 0), 0, 1)), (int(ivec4(_injected_loop_counter, _GLF_IDENTITY(1, (1) - 0), 0, 1))) + 0)))) != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), (false ? _GLF_FUZZED(48.55) : _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), (clamp(0.0, 0.0, 0.0)) - 0.0)))))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) / 1.0), 0.0 + (_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch), clamp((false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch)))).x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.3)), float(1.0), bool(true)))))) - 0.0))))), min(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), mat2(1.0) * (vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0))))), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0) : _GLF_FUZZED(vec2(-6.3, -8.2)))), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))) ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) * mat2(1.0))).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) / 1.0), 0.0 + (_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch)).x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(449.143)), float(injectionSwitch.y), bool(true)))), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) - 0.0))))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) / 1.0), 0.0 + (_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch)).x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) - 0.0))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(float(float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), (float(float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) * 1.0))) - 0.0), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) / 1.0), 0.0 + (_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch)).x, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), min(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), round(length(normalize(1.0))), 0.0, exp(0.0))), (true ? float(mat3x4(_GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), min(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), round(length(normalize(1.0))), 0.0, exp(0.0))) : _GLF_FUZZED(530.633)))), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), log(1.0), 1.0))), 1.0))) - 0.0))))) : _GLF_FUZZED(7881.5427))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), 0.0 + (dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)))), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.6)))) - 0.0), 0.0, 0.0)), injectionSwitch.x), 1.0))) / 1.0), 0.0 + (_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), (vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0)) / vec2(1.0, 1.0)))), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch)).x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))))), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))) - vec2(0.0, 0.0)), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) - 0.0))))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-237.922, 3657.2334)))).x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(inversesqrt(2.7))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0))), vec2(0.0, 0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-90.24)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 1.0)), (float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(trunc(inversesqrt(2.7)), max(trunc(inversesqrt(2.7)), trunc(inversesqrt(2.7))))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) / 1.0), 0.0 + (_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(53.55, 4.7)) : injectionSwitch)).x, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))) - 0.0))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))), true))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-314.004)), _GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(float(vec3(float(injectionSwitch.x), 0.0, round(length(normalize(1.0))))), (true ? float(vec3(float(injectionSwitch.x), 0.0, round(length(normalize(1.0))))) : _GLF_FUZZED(vec2(-5496.1166, 6.6).g)))), bool(true))) > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), ~ (_GLF_IDENTITY(~ (buf[virtual_gid] = uint(subgroupAllEqual(read_val))), (true ? ~ (buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), 0u ^ _GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ((uint(subgroupAllEqual(read_val)))) << 0u))) ^ 0u)) : _GLF_FUZZED(read_val)))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}
