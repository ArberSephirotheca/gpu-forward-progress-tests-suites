#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.4) : injectionSwitch.x))) * 1.0) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(4.4), 1.0 * (_GLF_FUZZED(4.4))) : injectionSwitch.x))) * 1.0) < injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-74.88) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-87.06, 1240.6409)))), vec2(injectionSwitch[0], injectionSwitch[1])))))).y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-87.06, 1240.6409)))), vec2(injectionSwitch[0], injectionSwitch[1])))))).y) - 0.0)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (0 << _GLF_IDENTITY(int(2), int(2))))), ~ (~ (int(ivec2(0, (0 << _GLF_IDENTITY(int(2), int(2))))))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                                break;
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) || false)));
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     return;
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     for(int _injected_loop_counter = (0 | (0 | (1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (7223 & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), ((false)) || false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
           return;
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9.2), _GLF_FUZZED(float((35920 - -34725)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false))))).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(uvec3((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)), 1u, 0u)), (uint(uvec3((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(1u, (1u) >> 0u), 0u))) | (uint(uvec3((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)), 1u, 0u)))))))) | (_GLF_IDENTITY(0u, (0u) << 0u))), min(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, clamp(2u, 2u, 2u))), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(0u, (0u) << 0u))), (false ? _GLF_FUZZED(146966u) : _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(0u, (0u) << 0u))))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(0u, (0u) << 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))), (true ? (_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (uint(2u)) | (_GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))), uint(2u))))) : _GLF_FUZZED(subgroup_size)))) | ((_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))))) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u)), (false ? _GLF_FUZZED((-- subgroup_id)) : (_GLF_IDENTITY(0u, (0u) << 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, 0u + (0u))))), (false ? _GLF_FUZZED(146966u) : _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (true ? (0u) : _GLF_FUZZED(88147u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((0u), ((0u)) << (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) * 1u)))) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, max(2u, 2u))), uint(2u))))) | (_GLF_IDENTITY(0u, (0u) << 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(clamp(0u, 0u, 0u), (_GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) * 1u)) ^ 0u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(clamp(0u, 0u, 0u), (_GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) * 1u)) ^ 0u), (_GLF_IDENTITY(clamp(0u, 0u, 0u), (_GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) * 1u)) ^ 0u)) | 0u)))))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | _GLF_IDENTITY(_GLF_IDENTITY((0u), min((0u), (0u))), min((0u), (0u)))), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, 1u * (0u))))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), min(uvec3(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(uaddCarry(subgroup_size, 53634u, subgroup_id)) : _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))), min(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | 0u)) | (1u)))))), uint(_GLF_IDENTITY(uvec4(1u, 0u, 1u, 1u), clamp(_GLF_IDENTITY(uvec4(1u, 0u, 1u, 1u), (uvec4(1u, 0u, 1u, 1u)) << _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)) | (uvec4(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(99117u))), 0u, 0u)))), uvec4(1u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u, 1u), uvec4(1u, 0u, 1u, 1u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (_GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) * 1u)) ^ 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u | (0u))), min((0u), (0u)))), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, 1u * (0u))))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(_GLF_IDENTITY(0u, 1u * (0u)), 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), min(uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(uvec4(119624u, 98935u, 40600u, 37454u))))), uvec3(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u)) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | _GLF_IDENTITY((0u), 0u + ((0u)))), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), _GLF_IDENTITY((uvec3(uvec3(uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + ((uvec3(uvec3(uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u | (1u)))), uint(_GLF_IDENTITY(uvec4(1u, _GLF_IDENTITY(0u, 1u * (0u)), 1u, 1u), clamp(_GLF_IDENTITY(uvec4(1u, 0u, 1u, 1u), (uvec4(1u, 0u, 1u, 1u)) << _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u)))), uvec4(1u, 0u, 1u, 1u), uvec4(1u, 0u, 1u, 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (_GLF_IDENTITY(clamp(0u, 0u, 0u), (clamp(0u, 0u, 0u)) * 1u)) ^ 0u))) | (0u)), 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(1u, 1u, 1u) * (uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | _GLF_IDENTITY((0u), min((0u), (0u)))), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, 1u * (0u))))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), min(uvec3(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u), uvec3(0u, 0u, 0u)), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), uvec3(uvec4(_GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), _GLF_IDENTITY((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), clamp((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), _GLF_IDENTITY((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), clamp((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), _GLF_IDENTITY((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) + ((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))), _GLF_IDENTITY((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), max((clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))), (clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)), 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))))) + uvec3(0u, 0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec3(uvec3(0u, 0u, 0u))), (uvec3(uvec3(uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(1u, 0u | (1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (true ? _GLF_IDENTITY(1u, 0u | (1u)) : _GLF_FUZZED(subgroup_id))))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, min(1u, 1u)), 0u, 1u, 1u), clamp(_GLF_IDENTITY(uvec4(1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) >> 0u), 1u, 1u), (uvec4(1u, 0u, 1u, 1u)) << _GLF_IDENTITY(uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (uvec4(0u, 0u, 0u, 0u)) | (uvec4(0u, 0u, 0u, 0u)))), uvec4(1u, 0u, 1u, 1u), uvec4(1u, 0u, 1u, 1u))))))))))) ^ uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) | (_GLF_IDENTITY(0u, (0u) | 0u))))) | _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(42358u, 21234u, 73964u))))), ((_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(_GLF_IDENTITY(42358u, 0u | (42358u)), 21234u, 73964u)))))) >> uvec3(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packSnorm4x8(vec4(-8.8, 316.000, 9.0, 99.18)))))) | (0u))) | (0u)))))), 0u))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) - 0)))), (int(0)) | 0), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) - 0)))), (int(0)) | 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) - 0)))), (int(0)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) - 0)))), (int(0)) | 0), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) - 0)))), (int(0)) | 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) - 0)))), (int(0)) | 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(4)), (int(int(4))) | 0)), (int(_GLF_IDENTITY(int(int(4)), (int(int(4))) | 0))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), max((int(4)), (int(4)))), (int(4)))) | 0))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec4(_GLF_IDENTITY(int(4), (int(4)) >> 0), (0 << _GLF_IDENTITY(int(2), int(2))), 0, 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, bool(bool(false))))), true), bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, bool(bool(false))))), true))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))).y)) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u)))) | (subgroup_id * subgroup_size)) + subgroup_local_id, 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u)))) | (subgroup_id * subgroup_size)) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u)))) | (subgroup_id * subgroup_size)) + subgroup_local_id, max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u)))) | (subgroup_id * subgroup_size)) + subgroup_local_id, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u)))) | (subgroup_id * subgroup_size)) + subgroup_local_id))) / 1u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), (false ? _GLF_FUZZED(workgroup_base) : (subgroup_id))), _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(max((subgroup_id), (subgroup_id)), (max((subgroup_id), (subgroup_id))) | 0u)))) << 0u)) - 0u) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true ? subgroup_size : _GLF_FUZZED(virtual_gid), 0u ^ (true ? subgroup_size : _GLF_FUZZED(virtual_gid))))) + ((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) << _GLF_IDENTITY(0u, (0u) ^ 0u), min((subgroup_id) << 0u, (subgroup_id) << 0u)), (_GLF_IDENTITY((subgroup_id) << _GLF_IDENTITY(0u, (0u) ^ 0u), min((subgroup_id) << 0u, (subgroup_id) << 0u))) >> 0u), (subgroup_id) << 0u)))) - _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), 1u * ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, max(_GLF_IDENTITY((subgroup_id) << _GLF_IDENTITY(0u, (0u) ^ 0u), min((subgroup_id) << 0u, _GLF_IDENTITY((subgroup_id) << 0u, ((subgroup_id) << 0u) >> 0u))), _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id)))))) << 0u)))) - 0u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)) - _GLF_IDENTITY(0u, (0u) >> 0u)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)) - _GLF_IDENTITY(0u, (0u) >> 0u)) * subgroup_size) | 0u)) | (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), (subgroup_id) << 0u)) - 0u) * subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), (subgroup_id) - 0u))) : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)), (subgroup_id) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id), uint(uint(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id), uint(uint(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)))), 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id), uint(uint(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)))), 0u)), uint(uint(uint(uvec2(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id), uint(uint(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)))), 0u))))), uint(uvec2(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id), uint(uint(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)))), 0u)))))), (subgroup_id) << 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id)), (subgroup_id) << 0u)))) - 0u) * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u | 0u)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) | (4)))), _GLF_IDENTITY(64, min(64, 64)), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)) || false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        continue;
      }
     else
      {
       return;
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))), (false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))) || false)))), (false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-204.496))), (injectionSwitch.x) * 1.0) > injectionSwitch.y))))))))))) || false))) && true)))
            return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        break;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(0, 0 + (0)))), min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3x2(mat2(1.0) * (injectionSwitch), 0.0, 0.0, 0.0, 1.0)))).x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
              break;
             return;
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(bool(bvec2(! ((false)), true)), bool(bool(bool(bvec2(! ((false)), true)))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
              }
             atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, 1 * (4)), 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)), (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))) || false)))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.0), _GLF_FUZZED(7341.7955)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), vec2(mat3x4((injectionSwitch), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)))).y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.0), _GLF_FUZZED(7341.7955)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, mix(float(_GLF_FUZZED((901.485 / 7938.7299))), float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), float(_GLF_FUZZED(-9.8)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y) + 0.0))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_IDENTITY(_GLF_FUZZED(6022.1315), max(_GLF_FUZZED(6022.1315), _GLF_FUZZED(6022.1315)))), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || (true)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))), _GLF_IDENTITY(true, (true) && true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))), _GLF_IDENTITY(true, (true) && true)))), bvec3(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))), _GLF_IDENTITY(true, (true) && true)))))))))))))))))), bool(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, mix(float(_GLF_FUZZED((901.485 / 7938.7299))), float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), float(_GLF_FUZZED(-9.8)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y) + 0.0))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_IDENTITY(_GLF_FUZZED(6022.1315), max(_GLF_FUZZED(6022.1315), _GLF_FUZZED(6022.1315)))), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || (true)), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))), _GLF_IDENTITY(true, (true) && true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))), _GLF_IDENTITY(true, (true) && true)))), bvec3(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false))), _GLF_IDENTITY(true, (true) && true)))))))))))))))))), false))))));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))), false, true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && _GLF_IDENTITY(_GLF_IDENTITY(((false) || false), bool(bool(((false) || false)))), _GLF_IDENTITY(! (! (((false) || false))), bool(bvec2(! (! (_GLF_IDENTITY(((false) || false), ! (! (((false) || false)))))), false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))) || false))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))) && _GLF_IDENTITY(true, false || (true)))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(15503), (_GLF_FUZZED(15503)) >> (0 << _GLF_IDENTITY(int(7), int(7)))) : _GLF_IDENTITY(0, 0 | (0))))), (true ? ~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(15503) : _GLF_IDENTITY(0, 0 | (0))))) : _GLF_FUZZED(42429)))))], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(7.0)))), vec2(_GLF_FUZZED(362.256), _GLF_FUZZED(24.21)), bvec2(false, false))).x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))).x)), (false ? _GLF_FUZZED(1.6) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))), 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))), 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), float(_GLF_FUZZED(-386.435)), bool(false))), 1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0)))) * cos(vec2(0.0, 0.0)))) + vec2(0.0, 0.0)).x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec2((int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))), 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        return;
                       return;
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                          {
                           return;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                    continue;
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false))))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true))))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (true))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (_GLF_IDENTITY(! ((true)), bool(bvec2(! ((true)), false)))) && true))))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), true && (true))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, true && (true))) && true)), false, true))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           else
            {
            }
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                  continue;
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 + (_GLF_IDENTITY(1, (1) ^ 0))) < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (true ? uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)) : _GLF_FUZZED(subgroup_id))) * (subgroup_size)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false), true))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false), true))))))), false))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1, (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1) | (((_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_injected_loop_counter))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter > 0), bool(bvec2((_injected_loop_counter > 0), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter > 0), ! (! ((_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _injected_loop_counter, _injected_loop_counter)) > 0))))), (! (_GLF_IDENTITY((_injected_loop_counter > 0), ! (! ((_injected_loop_counter > 0)))))) && true))) || false)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), false)))))))))))))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                    {
                     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(next_virtual_gid)))) | (read)), _GLF_IDENTITY(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) / 1u)), clamp(uint(1u), uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))), clamp(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(clamp(uint(1u), uint(1u), uint(1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(clamp(uint(1u), uint(1u), uint(1u)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), ~ (~ (uvec3(clamp(uint(1u), uint(1u), uint(1u)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))))), uint(uint(uint(_GLF_IDENTITY(uvec3(clamp(uint(1u), uint(1u), uint(1u)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), ~ (~ (uvec3(clamp(uint(1u), uint(1u), uint(1u)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))))))), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))), uint(uvec2(_GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(_GLF_IDENTITY(1u, (1u) * 1u)))), 0u))))))))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, min(1u, 1u))))), clamp(((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), 0u | (uint(1u))), clamp(uint(_GLF_IDENTITY(1u, (1u) << 0u)), uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u))))), uint(1u), uint(1u))))), ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u))))), uint(1u), uint(1u)))))) | (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u))))), uint(1u), uint(1u))))), ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u))))), uint(1u), uint(1u)))))) | ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u))))), uint(1u), uint(1u))))))))) >> _GLF_IDENTITY(uint(1u), uint(1u))), ((_GLF_IDENTITY(1u, (1u) / 1u) << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, 1u * (1u))), uint(1u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), _GLF_IDENTITY(uint(1u), 0u | (uint(1u))), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))), (((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (uint(1u)) - 0u), clamp(uint(1u), uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)) + (_GLF_IDENTITY(1u, (1u) >> 0u)))) ^ 0u)), uint(1u)))) / 1u)) << 0u))), (((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), clamp(uint(1u), uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, min(1u, 1u)))))) / 1u) * (read)), _GLF_IDENTITY(4, (4) * 1), 64, 4);
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) | (read)), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         break;
        }
      }
    }
  }
}
