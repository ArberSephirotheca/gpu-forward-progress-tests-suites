#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bool(true)))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))))), ! (! (! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))))), ! (! (! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))))), ! (! (! (! (false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))))), ! (! (_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))))), ! (! (! (! (false)))))))) && true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), (bool(bvec4(false, false, true, false))) && true))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) >> 0), 1, 1))), int(1))), max((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) >> 0), 1, 1))), int(1))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) >> 0), 1, 1))), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) >> 0), 1, 1))), int(1)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u);
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_IDENTITY(false, true && (false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, true)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bvec3(! (false), false, true))), ! (! (! (bool(bvec3(! (false), false, true))))))), (! (_GLF_IDENTITY(! (bool(bvec3(! (false), false, true))), ! (! (! (bool(bvec3(! (false), false, true)))))))) || false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)) | 0u, ((workgroup_base) | 0u) - (0u | 0u))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED((++ subgroup_local_id)))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), true, true, false)))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true))))))), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y, true, true))) && true), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false))))))), (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))))))) || false)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.6)), float(injectionSwitch.y), bool(true))))), true, false))), true, true, false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true), bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true)))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))))) && true, bool(bvec3((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))), false), false))))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), true, true, false)))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true))))))), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y, true, true))) && true), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false))))))), (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))))))) || false)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.6)), float(injectionSwitch.y), bool(true))))), true, false))), true, true, false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true), bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true)))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))))) && true, bool(bvec3((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))), false), false))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), true, true, false)))), bool(bvec4(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true))))))), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y, true, true))) && true), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false))))))), (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), false)))))))) || false)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.6)), float(injectionSwitch.y), bool(true))))), true, false))), true, true, false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true), bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2.8)), bool(false))), true, true)))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))))) && true, bool(bvec3((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))), false), false)))))))) || false)) || false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), injectionSwitch))) * mat2(1.0))) - vec2(0.0, 0.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, (false ? _GLF_FUZZED(pow(vec2(-1.8, -7.4), injectionSwitch)) : _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 8542.0340)), _GLF_IDENTITY(vec2(vec4(_GLF_FUZZED(_GLF_IDENTITY(vec2(-2.8, 8542.0340), (vec2(_GLF_IDENTITY(-2.8, clamp(-2.8, _GLF_IDENTITY(-2.8, float(mat4(-2.8, 1.0, 1.0, sqrt(0.0), round(length(normalize(1.0))), 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), -2.8)), 8542.0340)) - vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) + tan(0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0), mix(vec4((vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))[0], (vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))[1], (vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))[2], (vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))[3]), vec4(_GLF_FUZZED(-3471.3790), _GLF_FUZZED(-7340.3243), _GLF_FUZZED(3.8), _GLF_FUZZED(140.780)), bvec4(false, false, false, false))))))) : injectionSwitch, _GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), min(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), _GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 8542.0340)), (false ? _GLF_FUZZED(vec2(-419.021, _GLF_IDENTITY(1533.6047, min(1533.6047, 1533.6047)))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 8542.0340)), clamp(_GLF_FUZZED(vec2(-2.8, 8542.0340)), _GLF_FUZZED(vec2(-2.8, _GLF_IDENTITY(8542.0340, (true ? 8542.0340 : _GLF_FUZZED(-3.6))))), _GLF_FUZZED(vec2(-2.8, 8542.0340)))))) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))), clamp(_GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), (min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, _GLF_IDENTITY(8542.0340, clamp(8542.0340, 8542.0340, 8542.0340)))) : injectionSwitch)) - _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0))), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)))))))))).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - vec2(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), sin(tan(0.0)), 0.0, 1.0))), 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(pow(vec2(-1.8, -7.4), injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : pow(vec2(-1.8, -7.4), injectionSwitch)))) : _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 8542.0340)), _GLF_IDENTITY(vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0)), vec2(1.0, 1.0) * _GLF_IDENTITY((vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))), vec2(vec2((vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0)))))))) : injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), min(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), _GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), clamp(_GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8)), 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), (min(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-2.8, 8542.0340), max(vec2(-2.8, 8542.0340), vec2(-2.8, 8542.0340)))) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, _GLF_IDENTITY(8542.0340, clamp(8542.0340, 8542.0340, 8542.0340)))) : injectionSwitch), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)))))))), mix(vec2((_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(pow(vec2(-1.8, -7.4), injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : pow(vec2(-1.8, -7.4), injectionSwitch)))) : _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 8542.0340)), _GLF_IDENTITY(vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0)), vec2(1.0, 1.0) * _GLF_IDENTITY((vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))), vec2(vec2((vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0)))))))) : injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), min(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), _GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), clamp(_GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8)), 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), (min(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-2.8, 8542.0340), max(vec2(-2.8, 8542.0340), vec2(-2.8, 8542.0340)))) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, _GLF_IDENTITY(8542.0340, clamp(8542.0340, 8542.0340, 8542.0340)))) : injectionSwitch), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)))))))))[0], (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(pow(vec2(-1.8, -7.4), injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : pow(vec2(-1.8, -7.4), injectionSwitch)))) : _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-2.8, 8542.0340)), _GLF_IDENTITY(vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0)), vec2(1.0, 1.0) * _GLF_IDENTITY((vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0))), vec2(vec2((vec2(vec4(_GLF_FUZZED(vec2(-2.8, 8542.0340)), 0.0, 0.0)))))))) : injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), min(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), _GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), clamp(_GLF_IDENTITY(min(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8)), 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch), (min(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-2.8, 8542.0340), max(vec2(-2.8, 8542.0340), vec2(-2.8, 8542.0340)))) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, _GLF_IDENTITY(8542.0340, clamp(8542.0340, 8542.0340, 8542.0340)))) : injectionSwitch), min(false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-2.8, 8542.0340)) : injectionSwitch)))))))))[1]), vec2(_GLF_FUZZED(float((-84163 - -36884))), _GLF_FUZZED(5.8)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))) && true)) ? _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) | (next_virtual_gid), ((next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, (0u ^ 0u) ^ (next_virtual_gid)))) | _GLF_IDENTITY(0u, 0u ^ (0u)))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, 0u | (1u)))), ~ (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u)))) ^ 0u, ((_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u)))) ^ 0u) | ((_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u)))) ^ 0u)), ((_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, _GLF_IDENTITY(1u, 0u ^ (1u)))))) ^ 0u) | ((_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u)))) ^ 0u)))))))), 0u | ((_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 0u, 1u, 1u)), min(uint(uvec4(1u, 0u, 1u, 1u)), uint(uvec4(1u, 0u, 1u, 1u)))))) ^ 0u, ((_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u)))) ^ 0u) | ((_GLF_IDENTITY(1u, uint(uvec4(_GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u, 1u, 1u)))) ^ 0u)))))))))) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, max(0u, 0u)))))))))], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), min(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(40802))))), 64, _GLF_IDENTITY(4, ~ (~ (4))));
 if(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)) < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0))))).x)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(127.660) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6134.8119)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(floor(-246.714)))), 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (true ? _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0))) - 0.0) : _GLF_FUZZED(873.077))))), 1.0), mat4x3(mat4(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0))), 1.0))))))))), (_GLF_IDENTITY(uint(uvec3(virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0))))).x)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(127.660) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6134.8119)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(floor(-246.714)))), 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (true ? _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0))) - 0.0) : _GLF_FUZZED(873.077))))), 1.0), mat4x3(mat4(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0))), 1.0))))))))), (uint(uvec3(virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0))))).x)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(127.660) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6134.8119)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(floor(-246.714)))), 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (true ? _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0))) - 0.0) : _GLF_FUZZED(873.077))))), 1.0), mat4x3(mat4(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0))), 1.0)))))))))) ^ 0u)) | (uint(uvec3(virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0))))).x)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(127.660) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6134.8119)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(floor(-246.714)))), 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (true ? _GLF_IDENTITY(float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0)), (float(vec3(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), 1.0, 0.0))) - 0.0) : _GLF_FUZZED(873.077))))), 1.0), mat4x3(mat4(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, sqrt(1.0), 0.0))), 1.0))))))))))))], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true, false))) || false)), true && (! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true, false))) || false)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
            }
           return;
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 | 0, (1 | 0) | 0)), false || (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 | 0, min(1 | 0, 1 | 0))), (_injected_loop_counter != (1 | 0)) && true)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))) && true, ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || ((_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) && true)))))))) && true) && true)))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, (true) && true), true)), (bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))))))))) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), min(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), ((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) | (4)), 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-470 & (0 << _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
