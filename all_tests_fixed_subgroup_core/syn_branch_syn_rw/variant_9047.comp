#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     switch(_GLF_SWITCH(((0 << _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(2), int(2)))))
      {
       case 60:
       atan(74.42, -7.6);
       case 76:
       do
        {
         bitfieldExtract(ivec2(78938, 6849), 95342, -9391);
        }
       while(_GLF_WRAPPED_LOOP(false));
       case 0:
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       break;
       case 47:
       for(ivec4 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v; true; ivec3(-76799, -14826, 50888))
        {
         if((! (next_virtual_gid < subgroup_size)))
          {
          }
         else
          {
           bvec4(false, true, true, false);
           false;
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             mat2(71.59, -6.4, 60.60, 507.136);
            }
           if(_GLF_DEAD(false))
            break;
           for(           (ivec3(-45661, -22536, 22502) / ivec3(93906, 56858, 48309));
 false; (-74077 + ivec2(67679, -48561)))
            {
             (uvec4(19755u, 115913u, 175733u, 83346u) - subgroup_id);
             injectionSwitch;
            }
           -33.21;
           ;
           bvec3(false, true, false);
           ;
           while(false)
            {
             injectionSwitch;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             ivec4(94153, 70884, -97774, -25351);
             do
              {
               mat4(transpose(mat4x2(878.467, -36.22, 5.0, 7.7, -2.3, 5295.0228, 298.242, -8.5)));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             mat3(99.57, 2.3, 3385.5182, 898.340, -8.6, -65.75, 83.80, 79.92, -393.883);
            }
          }
         while(true);
         ivec2 _GLF_SWITCH_0_3v[29], _GLF_SWITCH_0_4v;
         ;
        }
       default:
       1;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
