#version 460
struct _GLF_struct_0 {
 uint workgroup_id;
 vec3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.y = subgroup_id;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.w = workgroup_size;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_WorkGroupID.x, vec3(1.0));
 uint workgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.w * _GLF_struct_replacement_0.workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.y * subgroup_size + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.z;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.y * subgroup_size + ((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.z + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_size.z + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
