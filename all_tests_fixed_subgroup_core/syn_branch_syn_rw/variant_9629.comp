#version 460
struct _GLF_struct_4 {
 mat2x3 _f0;
 mat3x2 _f1;
 int _f2;
 ivec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 uint _f1;
 mat2 _f2;
 mat2 _f3;
 bvec4 _f4;
 float _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_5 {
 uint workgroup_base;
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_1 {
 uint _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 ivec2 _f1;
 bvec3 _f2;
 vec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 int _f1;
 _GLF_struct_1 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_6 {
 int _f0;
 _GLF_struct_2 _f1;
 int _f2;
 _GLF_struct_5 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(1, _GLF_struct_2(_GLF_struct_0(bvec2(true), ivec2(1), bvec3(true), vec4(1.0), mat3x2(1.0)), 1, _GLF_struct_1(1u, ivec3(1)), vec4(1.0)), 1, _GLF_struct_5(workgroup_size * workgroup_id, _GLF_struct_3(uvec3(1u), 1u, mat2(1.0), mat2(1.0), bvec4(true), 1.0, ivec4(1)), _GLF_struct_4(mat2x3(1.0), mat3x2(1.0), 1, ivec4(1), uvec4(1u))));
 uint virtual_gid = _GLF_struct_replacement_6._f3.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_6._f3.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}
