#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x) / 1u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-22.53))) > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((0 ^ 0) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), 0 | (int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))))) + (-52613 & 0)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), 0 | (int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))))) + (-52613 & 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), 0 | (int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))))) + (-52613 & 0)))))), int(ivec3(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))), _GLF_IDENTITY(0 | (int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))), (0 | (int(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))))) << 0))) + (-52613 & 0)))), 1, 0))) > (((0 << _GLF_IDENTITY(int(1), int(1))) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) << 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(int(1), int(1))))))) | (_GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))))), (_GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))))), (int(int(~ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) ^ 0)) / (1 & 1))))))) << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(0 << _GLF_IDENTITY(int(5), int(5)), 0 << _GLF_IDENTITY(int(5), int(5))), ~ (~ (_GLF_IDENTITY(min(0 << _GLF_IDENTITY(int(5), int(5)), 0 << _GLF_IDENTITY(int(5), int(5))), 0 ^ (min(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))), min(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))), int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(5)))), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))))), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), int(5)))))))))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) / 1), (int(5)) | 0), int(5)))))) ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0 + (_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 1.0)), 1.0)), injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)))))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0), mix(vec4((vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0))[0], (vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0))[1], _GLF_FUZZED(-3871.1117), _GLF_FUZZED(78.86)), vec4(_GLF_FUZZED(-7118.6292), _GLF_FUZZED(-2.9), (vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0))[2], (vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 1.0))[3]), bvec4(false, false, true, true))))).y), max(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), float(mat4x3(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sqrt(0.0)))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), max(_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))) | (int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))) / 1), _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), 0), (ivec2(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), 0)) / ivec2(1, 1))))))))), (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))), bool(bvec3(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), mix(float(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), float(_GLF_FUZZED((false ? -78.42 : -351.532))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false)))) && true)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), max(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, exp(0.0)), vec3(mat4(vec3(injectionSwitch.y, 1.0, exp(0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))), float(mat4x3(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sqrt(0.0)))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))) || false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), mix(float(_GLF_FUZZED((+ 9.8))), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.y))))), bool(bvec3(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), 1 * (int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))))), true, false))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))), bool(bvec3(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), min(max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), injectionSwitch.y))))), true, false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)))))))))) && true), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))))))))))), (true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))) && true), false, false, false)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)))), _GLF_IDENTITY(true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y))))), (true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     do
      {
       barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))), false || ((false)))) && true)) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0)))))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     break;
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_DEAD(false)))), ! (! (! (bool(bool(_GLF_DEAD(false)))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_DEAD(false)))), ! (! (! (bool(bool(_GLF_DEAD(false))))))))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(workgroup_base, workgroup_base), (max(workgroup_base, workgroup_base)) >> 0u)), workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) ^ 0u)))) ^ 0u), workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 1u))) * subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(30315u))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_size), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(30315u))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), subgroup_size), (true ? clamp(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(30315u))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) : _GLF_FUZZED(163624u)))) - 0u))), max(((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)) / 1u) | _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ 0u))) | 0u)) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, true && (true)) ? subgroup_size : _GLF_FUZZED(30315u))), subgroup_size), ~ (~ (max(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(30315u))), subgroup_size))))), subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), 1))), ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), 1)), _GLF_IDENTITY(uint(uvec4(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, max(1, 1)))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)), (uint(uvec4(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 1u))) - 0u)))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) | (1))))), ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) ^ 0)) / 1) - 0), 1)))) >> 0u))) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)), _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(30315u))), subgroup_size)), subgroup_size)))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9.1)))))) || false)))))
    barrier();
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (0u | 0u) + (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u ^ (next_virtual_gid), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u ^ (next_virtual_gid)), (uint(0u ^ (next_virtual_gid))) ^ 0u)), (uint(_GLF_IDENTITY(uint(0u ^ (next_virtual_gid)), (uint(0u ^ (next_virtual_gid))) ^ 0u))) / 1u)))))], uint(1), 4, 64, _GLF_IDENTITY(4, (4) ^ ((0 >> _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(4), int(4)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) || false)))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, length(0.0), 1.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, abs(1.0), tan(0.0)), _GLF_IDENTITY((mat3x4(injectionSwitch.x, length(0.0), 1.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, abs(1.0), tan(0.0))) * mat3(1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + ((mat3x4(injectionSwitch.x, length(0.0), 1.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, abs(1.0), tan(0.0))) * mat3(1.0)))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false)), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), true, false), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).y))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u) < subgroup_size)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       int i = 0;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) + 0u)) | (read)), _GLF_IDENTITY((read) | (read), ((read) | (read)) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((2.6 * -57.51))), bool(false))))))), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, _GLF_IDENTITY((read) | (read), min((read) | (read), _GLF_IDENTITY((read) | (read), min((read) | (read), (read) | (read)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY((read), min((read), (read))) | (read)), min(_GLF_IDENTITY(read, _GLF_IDENTITY((read) | (read), ((read) | (read)) | 0u)), _GLF_IDENTITY(read, _GLF_IDENTITY((read), 0u | (_GLF_IDENTITY((read), (false ? _GLF_FUZZED(workgroup_id) : (read))))) | (read)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, (read) | (read)))), _GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY((read) | (_GLF_IDENTITY(read, 0u | (_GLF_IDENTITY(read, uint(uvec4(read, 1u, 0u, 0u)))))), uint(uvec3((read) | (read), 1u, 1u)))), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, _GLF_IDENTITY((read) | (read), ((read) | (read)) / _GLF_IDENTITY(1u, ~ (~ (1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, _GLF_IDENTITY((_GLF_IDENTITY(read, (read) << 0u)) | (read), ((_GLF_IDENTITY(read, (read) << 0u)) | (read)) ^ ((0u << _GLF_IDENTITY(uint(8u), uint(8u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) << 0u)) | (read)))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) << 0u)) | (read)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) << 0u)) | (read)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | _GLF_IDENTITY((read), ((read)) | ((read)))), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) << 0u)) | (read)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (read) | (read)), uint(uint(_GLF_IDENTITY(read, (read) | (read))))), min(_GLF_IDENTITY(read, (read) | (read)), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, _GLF_IDENTITY((read) << 0u, clamp((read) << 0u, _GLF_IDENTITY((read) << 0u, clamp((read) << 0u, (read) << 0u, (read) << 0u)), _GLF_IDENTITY((read) << 0u, 1u * ((read) << 0u)))))) | (read))))) - 0u))))))))) << 0u), 4, 64, 4);
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), false || (! (! (false)))), ! (! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(false, (false) && true) || (! (! (false))))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), false || _GLF_IDENTITY((! (! (false))), false || ((! (! (false))))))))))), ! (! (bool(bool(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))))))))), (! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false)))))), (! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))) && true)))), ! _GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))), true && ((! (bool(bool(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))))))))) && true))))) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))) || false, bool(bvec3(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)) || false))) && true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true)))), ((_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), ((false)) || false), false, true, true)))))), (true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), ((false)) || false), false, true, true))))))) || false))))))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(min(injectionSwitch[1], injectionSwitch[1]), (min(injectionSwitch[1], injectionSwitch[1])) / 1.0)))).x > injectionSwitch.y)))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_IDENTITY(true, ! (! (true))), true)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_IDENTITY(true, ! (! (true))), true)))))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true && (bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false, false, true))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 & 72247); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), false || (bool(bvec3(_GLF_DEAD(false), true, true))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))) && true)) || false)); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))
                  barrier();
                }
               else
                {
                }
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (false))), bool(_GLF_IDENTITY(bvec3(bool((! (false))), true, true), bvec3(bvec3(bvec3(bool((! (false))), true, true))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool((! (false))), bool(_GLF_IDENTITY(bvec3(bool((! (false))), true, true), bvec3(bvec3(bvec3(bool((! (false))), true, _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))))))))), ! (! (! (bool(_GLF_IDENTITY(bool((! (false))), bool(_GLF_IDENTITY(bvec3(bool((! _GLF_IDENTITY((false), ((false)) || false))), true, true), bvec3(bvec3(bvec3(bool((! (false))), true, true)))))))))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + length(vec2(0.0, 0.0)))))))
          return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
