#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))) && true, ((bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))) && true) || false))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(268.610) : (injectionSwitch.y))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.0), _GLF_FUZZED(-8.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), max(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), mix(float(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), float(_GLF_FUZZED(vec4(91.87, 79.66, -4986.3504, 0.5).p)), bool(false))))))), mix(float(_GLF_FUZZED(0.6)), float((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, ((injectionSwitch.y) + 0.0) - sin(0.0))))))), bool(true))) / _GLF_IDENTITY(1.0, (1.0) / 1.0))))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), false, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, determinant(mat2(0.0, 0.0, 0.0, 0.0)), tan(0.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(mat2(injectionSwitch, determinant(mat2(0.0, 0.0, 0.0, 0.0)), tan(0.0))), (vec2(mat2(injectionSwitch, determinant(mat2(0.0, 0.0, 0.0, 0.0)), tan(0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))).y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), 0.0, 1.0, 1.0)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, float(mat3(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))))), injectionSwitch.y)), 0.0, 1.0, 1.0))))) || false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(atomicExchange(_injected_loop_counter, _injected_loop_counter)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((- -4.5))), vec2(_GLF_FUZZED(-91.80), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | (0 >> _GLF_IDENTITY(int(8), int(8)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))), true))))))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-928.624)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(_GLF_IDENTITY(mat3x4((injectionSwitch.x) + 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 1.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0), transpose(transpose(mat3x4((injectionSwitch.x) + 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0))))))))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(7539, (7539) / int(_GLF_ONE(1.0, injectionSwitch.y))))))], injectionSwitch[1]))) - vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), ! _GLF_IDENTITY((! (! (bool(bvec2(false, false))))), ! (! ((! (! (bool(bvec2(false, false)))))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec2(false, false))), false || ((bool(bvec2(false, false))))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || ((bool(bvec2(false, false)))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || ((bool(bvec2(false, false)))))), true && (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || ((bool(bvec2(false, false))))))))))))), ! (! (! (bool(bvec2(false, false)))))))))) && _GLF_IDENTITY(true, ! (! (true))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y) && true)))) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))))))))))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(-3929.9038, 4.7, vec2(-555.240, -7441.6169))))), injectionSwitch), vec2(mat2(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(-3929.9038, 4.7, vec2(-555.240, -7441.6169))))), injectionSwitch), max(min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(-3929.9038, 4.7, vec2(-555.240, -7441.6169))))), injectionSwitch), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(-3929.9038, 4.7, vec2(-555.240, -7441.6169))))), injectionSwitch))), 1.0, 0.0)))).y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))) || false))), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))) || false))), false, false, false))))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) / (((1u | 1u) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) + subgroup_local_id) | 0u)) ^ 0u);
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED(33755)), (false ? _GLF_FUZZED(bitfieldReverse(-31210)) : (true ? 1 : _GLF_FUZZED(33755)))), max((true ? 1 : _GLF_FUZZED(33755)), (true ? 1 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(33755), (_GLF_FUZZED(33755)) | (_GLF_FUZZED(33755))), (_GLF_FUZZED(33755)) ^ 0)))))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))), _GLF_IDENTITY((subgroup_size) ^ 0u, max((subgroup_size) ^ 0u, (subgroup_size) ^ 0u)))), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_local_id)), subgroup_local_id, subgroup_local_id)))) + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(33755)))) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false)))))))), false, true)), false || (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, _GLF_IDENTITY(true, true && (true))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-24958) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), ((! (_GLF_IDENTITY(false, (false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 1.0, 0.0, 1.0)), vec2(_GLF_IDENTITY(mat4(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.8) : 0.0))) - 0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, tan(0.0), 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0), (true ? mat4(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, 1.0)), 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, abs(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0)))), 1.0, 1.0)))), 0.0, 1.0, 1.0, tan(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4(-57.67, 170.981, 32.74, -1306.2714, -365.503, 2.1, 1.1, -7887.7390, 2719.4796, -466.688, -4026.3227, -1.9, 17.90, -832.321, -8.2, 5167.5799)))))))), (clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))) * mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, max(1, 1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-23194) : (~ (_GLF_IDENTITY(1, max(1, 1))))))))) >> 0u), 4, 64, _GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (4), min(_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4))), ~ _GLF_IDENTITY((4), ~ (~ ((4))))))), ((_GLF_IDENTITY(~ (4), min(_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4))), ~ (4))))) | 0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) | 0u)))))) - 0u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))))), clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), 0u | ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))))) << 0u) | 0u)))))) - 0u)))) + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - _GLF_IDENTITY(0u, (0u) ^ 0u)), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) | 0u)))))) - 0u) + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_size)))) ^ 0u), (subgroup_local_id) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u)), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) | 0u)))))) - 0u) + 1, min(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(171902u) : (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))))) >> 0u) | 0u)))))) - 0u) + 1, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) | 0u)))), max(clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) | 0u)))), clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) | 0u)))))))) - 0u) + 1)))) < subgroup_size)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   int i = _GLF_IDENTITY(0, (0) >> 0);
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1978.9061), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-752.748, -2216.3254).y)), bvec2(true, false))).x, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1978.9061), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-752.748, -2216.3254).y)), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1978.9061), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-752.748, -2216.3254).y)), bvec2(true, false))).x)), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), min(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)))), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), min((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y) * 1.0))))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0), (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7405.5451)))))) | 0)) - 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), _GLF_IDENTITY(int(ivec3(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), min(int(ivec3(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), int(ivec3(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)))))) | 0) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))) : _GLF_FUZZED(atomicAnd(_injected_loop_counter, i))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), 1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), min(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 0, (0 ^ 0)), (ivec4(1, 1, 0, (0 ^ 0))) | (ivec4(1, 1, 0, (0 ^ 0)))))) & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y)), (1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0)) | 0)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.5) : injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)))), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) | 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), bool(true))), injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), bool(true))), injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), bool(true))), injectionSwitch.y))) - 0)) | 0), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0), 0 ^ (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))) | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y) * 1.0))))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y) * 1.0))))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y) * 1.0))))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).y) * 1.0))))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), injectionSwitch.y)), min(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat4x2(1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), 1.0)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(287.502) : 1.0)))), 1.0)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) | 0), (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7405.5451)))))) | 0)) - 0)), min((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(287.502) : 1.0)))), 1.0)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) | 0), (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7405.5451)))))) | 0)) - 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(287.502) : 1.0)))), 1.0)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) | 0), (_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7405.5451)))))) | 0)) - 0)))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))) : _GLF_FUZZED(-44.91))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), min(_GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), 1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), float(_GLF_FUZZED((-4.7 + 9.3))), bool(false))), injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-2724.8268 / -3.0))), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3598.5155)))), bool(_GLF_IDENTITY(true, ! (! (true)))))), injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (1) | 0))) & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-3.2), (true ? _GLF_FUZZED(-3.2) : _GLF_FUZZED(17.21)))), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), _GLF_IDENTITY(vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), clamp(vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]))), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(1.2)), bool(false)))))) * 1.0)), _GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (1 ^ 0) * (int(_GLF_ONE(1.0, injectionSwitch.y)))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 ^ (0)))))))))), _GLF_IDENTITY(int(ivec3(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(atomicXor(i, i)) : int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1)), min(int(ivec3(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), int(ivec3(((_GLF_IDENTITY(_GLF_IDENTITY(1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.2)), float(1.0), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7395.3328)), vec2(_GLF_FUZZED((false ? -3.6 : 6147.6893)), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).y)), min(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(1 & int(_GLF_ONE(1.0, injectionSwitch.y)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(4.3)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))))), ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(4.3)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))))) << 0) >> _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))) | 0))))), int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), injectionSwitch.x)), 1)))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)))))) | 0) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))) : _GLF_FUZZED(atomicAnd(_injected_loop_counter, i)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, ((1) + 0) / 1))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec3(0, _GLF_IDENTITY(0, (0) * 1), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_IDENTITY(ivec3(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(ivec3(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(0, 0, 0) + (ivec3(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))), ivec3(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)))))) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1053.0887)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(81.50) : injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : next_virtual_gid), max((false ? _GLF_FUZZED(subgroup_size) : next_virtual_gid), (false ? _GLF_FUZZED(subgroup_size) : next_virtual_gid)))))), next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))), ! (! (_GLF_WRAPPED_LOOP(false)))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2449.7591) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)), false))), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(exp(vec2(0.0, 0.0))) * (injectionSwitch)).y)))))))))), false, true))) && true)))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
}
