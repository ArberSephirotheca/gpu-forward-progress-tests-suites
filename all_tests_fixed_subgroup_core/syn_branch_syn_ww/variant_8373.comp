#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 mat3 _f0;
 bvec2 _f1;
 uvec2 _f2;
 vec4 _f3;
 mat2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_13 {
 int _f0;
 bvec4 _f1;
 uint workgroup_id;
 bool _f2;
 uint _f3;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 ivec3 _f1;
 _GLF_struct_14 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 int _f1;
 _GLF_struct_15 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_9 {
 uint _f0;
 mat3x2 _f1;
 float _f2;
 mat4 _f3;
 uvec3 _f4;
 vec2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_11 {
 uint workgroup_size;
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 mat2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 uint _f1;
 mat4x3 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_4 {
 float _f0;
 mat3x4 _f1;
 vec2 _f2;
 uvec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 ivec2 _f2;
 float _f3;
 mat4x3 _f4;
 bvec3 _f5;
 int i;
 mat3x2 _f6;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 ivec4 _f1;
 mat4 _f2;
 uvec4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 mat3x4 _f1;
 uvec3 _f2;
 uvec3 _f3;
 bvec4 _f4;
 bvec3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 mat3 _f1;
 mat4 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_0 {
 int _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 vec2 _f2;
 mat2 _f3;
 bvec4 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_6 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_8(vec3(1.0), mat2(1.0), mat4x3(1.0)), 1u, mat4x3(1.0), _GLF_struct_11(gl_WorkGroupSize.x, _GLF_struct_9(1u, mat3x2(1.0), 1.0, mat4(1.0), uvec3(1u), vec2(1.0), uvec3(1u)), _GLF_struct_10(mat3x2(1.0), mat2x3(1.0))));
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(uvec3(1u), 1, _GLF_struct_15(_GLF_struct_13(1, bvec4(true), gl_WorkGroupID.x, true, 1u), ivec3(1), _GLF_struct_14(mat3(1.0), bvec2(true), uvec2(1u), vec4(1.0), mat2(1.0), mat4x2(1.0)), ivec4(1)), uvec3(1u));
 uint workgroup_base = _GLF_struct_replacement_12._f3.workgroup_size * _GLF_struct_replacement_16._f2._f0.workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(mat2x4(1.0), _GLF_struct_0(1, bvec2(true)), vec2(1.0), mat2(1.0), bvec4(true), _GLF_struct_3(_GLF_struct_1(mat2x3(1.0), mat3x4(1.0), uvec3(1u), uvec3(1u), bvec4(true), bvec3(true), ivec4(1)), mat3(1.0), mat4(1.0), _GLF_struct_2(uvec3(1u), ivec4(1), mat4(1.0), uvec4(1u), uvec2(1u))), _GLF_struct_6(_GLF_struct_4(1.0, mat3x4(1.0), vec2(1.0), uvec4(1u), vec4(1.0)), _GLF_struct_5(ivec4(1), mat2(1.0)), ivec2(1), 1.0, mat4x3(1.0), bvec3(true), 0, mat3x2(1.0)));
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
    }
  }
}
