#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 0.0, 1.0)), 0.0 + (float(vec4(0.0, 1.0, 0.0, 1.0))))), injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))), ~ (~ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-1.2)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1], mix(float((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(1.0)))) + (injectionSwitch)))[1]), float(_GLF_IDENTITY(_GLF_FUZZED(1.7), min(_GLF_IDENTITY(_GLF_FUZZED(1.7), min(_GLF_FUZZED(1.7), _GLF_IDENTITY(_GLF_FUZZED(1.7), 1.0 * (_GLF_FUZZED(1.7))))), _GLF_FUZZED(1.7)))), bool(false))), (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, false)), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(! (false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (false), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(! (false), false, false))), true)))))), ! (! ((bool(_GLF_IDENTITY(bvec3(! (false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (false), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(! (false), false, false))), true))))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bool(! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_IDENTITY(false, true && (false)))), true && (bool(_GLF_IDENTITY(bvec3(! (false), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (false), false, false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (false), false, false)), bvec3(bvec4(bvec3(bvec3(! (false), false, false)), false))))))), bvec3(bvec4(bvec3(bvec3(bvec3(! (false), false, false))), true)))))))))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), true && ((! (false))))))))))))))) && true))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true)))))))))) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(false, ! (! (false)))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (gl_NumWorkGroups.x)), 0u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec2(171699u, 134457u)), ~ (~ (_GLF_FUZZED(uvec2(171699u, 134457u))))) : uvec2(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ (0u ^ 0u))), 0u)))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, 0 | (7)))) : _GLF_FUZZED(54949)))), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(ivec2(int(7), 0)))) * 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) / sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) && true)) && true))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bool(bool(bvec4(false, true, true, false))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, true, true, false))), true && (! (bool(bvec4(false, true, true, false)))))))))), _GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (91430 & 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), true), false, false)))))) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(step(-0.8, injectionSwitch)) : injectionSwitch))) - vec2(0.0, 0.0)))).x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.5))) < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false || (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)) && true)))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))))))) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y) && true)), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), max(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(91.85)), float(1.0), bool(true))), 1.0)), 1.0))), (false ? _GLF_FUZZED(vec2(-900.259, 6.1)) : mat2(1.0) * (vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))))))).y), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), cos(0.0), 1.0, 1.0, 1.0))).y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y), true, true))), true), false)))), ! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y), true), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y), true), bvec2(_GLF_IDENTITY(bvec2(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y), true)), bvec2(bvec4(bvec2(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 1.0, 1.0, 1.0))).y), true)), false, true))))), false)))))))), true, true))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)), false))))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false, true, false))))))))))) && true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true && (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0)) > injectionSwitch.y, false))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true && (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((workgroup_id >> workgroup_id)) : workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 0u)), clamp(uint(uvec2(subgroup_local_id, 0u)), uint(uvec2(subgroup_local_id, 0u)), _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 0u)), 0u | (uint(uvec2(subgroup_local_id, 0u))))))) + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, uint(uint((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size)))), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size), 0u + (((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size)))) / 1u);
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec3(~ (~ (1)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec3(~ (~ (1)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec3(~ (~ (1)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec3(~ (~ (1)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), int(ivec3(~ (~ (1)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))))))) | (_GLF_IDENTITY(1, (1) ^ 0))), (false ? _GLF_FUZZED(ivec4(18343, 21324, 41428, _GLF_IDENTITY(51660, ~ (~ (_GLF_IDENTITY(51660, (51660) << 0))))).w) : _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-6792)))))), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), min(clamp(4, 4, 4), clamp(4, 4, 4))), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (1 ^ 1) | (4)), 4, 4), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), (int(ivec3(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), int(4)))))) | (int(ivec3(_GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0)) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))), clamp(4, 4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-77051) : 4))), _GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), clamp(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), _GLF_IDENTITY(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) >> 0))) >> 0), clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(46750), ~ (~ (_GLF_FUZZED(46750)))) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), _GLF_IDENTITY(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), int(ivec3(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), 0, 0))), false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0))), false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0))))))))) << _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0))) << ((0 | 0) << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(0, (0) | (0))) << ((0 | 0) << _GLF_IDENTITY(int(5), int(5)))) | ((_GLF_IDENTITY(0, (0) | (0))) << ((0 | 0) << _GLF_IDENTITY(int(5), int(5)))))))) >> 0), (_GLF_IDENTITY(4, (4) - 0)) - 0)))), ((_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), clamp(_GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), (int(ivec3(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), int(4)))))) | (int(ivec3(_GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY((clamp(4, 4, 4)), int(int((clamp(4, 4, 4))))) >> 0)) | 0), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))), clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), clamp(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), _GLF_IDENTITY(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), clamp(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(46750), (_GLF_FUZZED(46750)) | 0) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), int(ivec3(false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0), 0, 0))), false ? _GLF_IDENTITY(_GLF_FUZZED(46750), (_GLF_FUZZED(46750)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0))), false ? _GLF_FUZZED(46750) : _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> 0))))))))) << _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0))) << ((0 | 0) << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(0, (0) | (0))) << ((0 | 0) << _GLF_IDENTITY(int(5), int(5)))) | ((_GLF_IDENTITY(0, (0) | (0))) << (_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(5), int(5)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0 | 0) << _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(45412))))))))) >> 0), (_GLF_IDENTITY(4, (4) - 0)) - 0))))) - 0) | (4)), 64, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))) : _GLF_FUZZED(91396))))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))) || false))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(10.28))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.y)))), true)))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-2493) : 1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0), ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0)) | ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), (ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, _GLF_IDENTITY(0, (0) << 0), 0)))) >> 0), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0), ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0)) | ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), (ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, _GLF_IDENTITY(0, (0) << 0), 0)))) >> 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0), ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0)) | ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), (ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, _GLF_IDENTITY(0, (0) << 0), 0)))) >> 0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0), ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0)) | ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), (ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, _GLF_IDENTITY(0, (0) << 0), 0)))) >> 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0), ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0)) | ((ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6)))), (ivec3(int(0), 1, (0 << _GLF_IDENTITY(int(6), int(6))))) - ivec3(0, _GLF_IDENTITY(0, (0) << 0), 0)))) >> 0)))), _GLF_IDENTITY(int(0), 0 | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))); _injected_loop_counter --)
                {
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7157.6227) : injectionSwitch.x)) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-18679))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 82995), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) && true), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) && true))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true), (bool(bool(false))) || false))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))[1], mix(float(_GLF_FUZZED(9.3)), float(injectionSwitch[1]), bool(true))))).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-125.594, -5.1), (vec2(-125.594, -5.1)) - tan(vec2(0.0, 0.0)))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false)))))) || false), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-125.594, _GLF_IDENTITY(-5.1, float(mat2(_GLF_IDENTITY(-5.1, max(-5.1, -5.1)), _GLF_IDENTITY(dot(vec3(cos(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 1.0)), dot(vec3(cos(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 1.0))), 1.0, 1.0)))), (vec2(-125.594, -5.1)) - tan(vec2(0.0, 0.0))))))) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(vec2(-870.468, 0.5)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-125.594, -5.1), (vec2(-125.594, -5.1)) - tan(vec2(0.0, 0.0)))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))))))), true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false)))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))))))), true, true, true)), true, false)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(8.3, -1.1, -12.69).z), _GLF_FUZZED(572.143)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + ((injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x, float(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(8.3, -1.1, -12.69).z), _GLF_FUZZED(572.143)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + ((injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x, 0.0))) < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-125.594, _GLF_IDENTITY(-5.1, float(mat2(_GLF_IDENTITY(-5.1, max(-5.1, -5.1)), _GLF_IDENTITY(dot(vec3(cos(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 1.0)), dot(vec3(cos(0.0), 1.0, sin(0.0)), vec3(0.0, 0.0, 1.0))), 1.0, 1.0)))), (vec2(-125.594, -5.1)) - tan(vec2(0.0, 0.0))))))) / vec2(1.0, 1.0)))).y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true))))) || _GLF_IDENTITY(false, false || (false)))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true))), (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true))))) || false)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true))))) || false)), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true)))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))) || false)), false))), true))))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))))), (bool(bool(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))))) || false), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, true && (false))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, true && (false))))), true && (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))))))), bool(bvec4(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, true && (false))))), true && (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))))))), false, true, false)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, true && (false))))), true && (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))))))), bool(bvec4(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, true && (false))))), true && (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))))))), false, true, false))))))))))), true, false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), true, false)), false, true)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true)), true, false))), true))), false, true))), true), bvec3(bvec4(bvec3(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true)), true), false))), false)))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.9)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(_GLF_IDENTITY(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (1.0)), 1.0)))).y))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(_GLF_IDENTITY(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (1.0)), 1.0)))).y)))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch))) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(1.0, 1.0)))).y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.4)), bool(false))), 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 1.0)) * vec2(1.0, 1.0))))).y))), true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-29.49)), float(1.0), bool(true))) : _GLF_FUZZED(321.882))), 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(_GLF_IDENTITY(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (1.0)), 1.0)))).y))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec4(-65.95, -469.992, -4370.7735, -3.7).wz))), injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-29.49)), float(1.0), bool(true))) : _GLF_FUZZED(321.882))), 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(_GLF_IDENTITY(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (1.0)), 1.0)))).y))), true))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(injectionSwitch[0], injectionSwitch[1]) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((injectionSwitch - vec2(3.8, 5539.1494))) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4x3(-75.81, -7372.3917, 54.34, 2757.5970, 4.0, 448.592, -0.6, 3.9, -8.8, 730.883, -8417.2624, -2.7)) : mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-51.59, 8.5)))), clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(1.0, 1.0)))).y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-773.467)), vec2(_GLF_FUZZED(7.7), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[1]), _GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true)))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-903.612), _GLF_FUZZED(231.295)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(vec2(-62.26, 797.142)))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0)))) / vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5960.0992) : 1.0)), 1.0)))).y))), true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))), false), true, false))), _GLF_IDENTITY(true, (true) || false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))))), true, true))), false, true)))))) || false), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))), false), true, false)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))), false), true, false)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true)))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), true)), false, true))), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false), _GLF_IDENTITY(true, true && (true)), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), false), true, false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)), false))))), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))), true, false)), false, true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)) && true)) && true)))), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false))))))))) && true)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) || false)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false))))))))) && true)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) || false)))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false))))))))) && true)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) || false)))))), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true)), true && (bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true))))), false), _GLF_IDENTITY(true, (true) || false), false)), false, true)))))), _GLF_IDENTITY(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true))))))) && true, (_GLF_IDENTITY(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), _GLF_IDENTITY(false, true && (false)), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true))), false, false)), true, false)))))))) && true, bool(_GLF_IDENTITY(bvec2(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(true, false || (true)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(true, (true) || false)))))))) && true, true), bvec2(bvec4(bvec2(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(true, (true) || false)))))))) && true, true), true, true)))))) || _GLF_IDENTITY(false, (false) && true)))), ! (! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(-3.8) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), true)), true && (bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true))))), false), _GLF_IDENTITY(true, _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) || false)) || false))) || false), false)), false, _GLF_IDENTITY(true, ! (! (true))))))))), _GLF_IDENTITY(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-54.96)), vec2(_GLF_FUZZED((9.4 * -65.70)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).y))), false), true, false)), false, true))))))) && true, (_GLF_IDENTITY(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), false), true, false)), false, true))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true, true)))))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true, true))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true, true))))))), true))))))), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, true))), false, false)), true, false)))))))) && true, bool(_GLF_IDENTITY(bvec2(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, true))))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, true)))))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false, true)))))), false, true)))))), _GLF_IDENTITY(true, false || (true)), false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && (_GLF_IDENTITY((true) || false, ((true) || false) && true))))))))))) && true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true)))))))))))))))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(true, (true) || false)))))))) && true, true), bvec2(bvec2(bvec2(((bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true)))))))))))))))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false)), false, _GLF_IDENTITY(true, (true) || false)))))))) && true, true)))), true, true)))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true))))))))) || false), false, false, true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, exp(0.0), 1.0, 0.0))), injectionSwitch.x)) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false)))))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))));
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(4), int(4))), clamp((0 << _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(4), int(4))), clamp((0 << _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(4), int(4)))))) + 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec2(1, _GLF_IDENTITY(0, (0) | (0)))))), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), clamp(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, int(ivec2(1, 0)))))), (int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), max(_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) >> (ivec2(0, 0) | ivec2(0, 0))), ivec2(1, 0))))))) ^ 0), 1, 1))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, 0 + (1))) >> 0)))), 1)) < _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) + 0u), true && (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(0, 0)) + (1))) >> 0, clamp((_GLF_IDENTITY(1, 0 + (1))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) + 0), (_GLF_IDENTITY(1, 0 + (1))) >> 0, (_GLF_IDENTITY(1, 0 + (1))) >> 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(0, 0)) + (1))) >> 0, clamp((_GLF_IDENTITY(1, 0 + (1))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) + 0), (_GLF_IDENTITY(1, 0 + (1))) >> 0, (_GLF_IDENTITY(1, 0 + (1))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(0, 0)) + (1))) >> 0, clamp((_GLF_IDENTITY(1, 0 + (1))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) + 0), (_GLF_IDENTITY(1, 0 + (1))) >> 0, (_GLF_IDENTITY(1, 0 + (1))) >> 0)))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (true ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(34438)))) >> 0, clamp((_GLF_IDENTITY(1, 0 + (1))) >> 0, (_GLF_IDENTITY(1, 0 + (1))) >> 0, (_GLF_IDENTITY(1, 0 + (1))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), 0 + (1))) >> 0, clamp((_GLF_IDENTITY(1, 0 + (1))) >> 0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, 0 + (1))), ((_GLF_IDENTITY(1, 0 + (1)))) | ((_GLF_IDENTITY(1, 0 + (1))))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, 0 + (1))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), 0 + (1)))) | ((_GLF_IDENTITY(1, 0 + (1))))), _GLF_IDENTITY((_GLF_IDENTITY(1, 0 + (1))), ((_GLF_IDENTITY(1, 0 + (1)))) | ((_GLF_IDENTITY(1, 0 + (1))))))) >> 0, (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0)) + (1))) >> 0)))))))), 1)) < subgroup_size)))
    {
     int i = 0;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, min((injectionSwitch.x) - 0.0, _GLF_IDENTITY((injectionSwitch.x) - 0.0, clamp((injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0, _GLF_IDENTITY((injectionSwitch.x) - 0.0, ((injectionSwitch.x) - 0.0) / 1.0)))))))), float(mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, 0.0, 0.0))), injectionSwitch.x))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))))))))))
              barrier();
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(1, (1) << 0)))), (0 ^ (_GLF_IDENTITY(1, (1) << 0))) | (0 ^ (_GLF_IDENTITY(1, (1) << 0))))) & 1) : _GLF_FUZZED((mat3(6.7, 3973.2329, -448.361, 845.481, 4625.6827, -0.9, -879.473, -550.250, 6096.9767) , _GLF_IDENTITY(94009, (94009) | 0)))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(mat3x4(vec2(0.0, 0.0), 0.0, 1.0, 1.0, abs(1.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0)), min(vec2(mat3x4(vec2(0.0, 0.0), 0.0, 1.0, 1.0, abs(1.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0)), vec2(mat3x4(vec2(0.0, 0.0), 0.0, 1.0, 1.0, abs(1.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y)), false)))))
            {
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, clamp(4, 4, 4)))), 64, 4);
            }
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-9137.5702) : _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-99860) : 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), int(1))), (~ (_GLF_IDENTITY(int(1), int(1)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (4)))), _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 0, 0, 1), (ivec4(4, 0, 0, 1)) | (_GLF_IDENTITY(ivec4(4, 0, 0, 1), max(_GLF_IDENTITY(ivec4(4, 0, 0, 1), (true ? ivec4(4, 0, 0, 1) : _GLF_FUZZED(ivec4(36622, -26463, 36492, -75299)))), ivec4(4, 0, 0, 1))))))), 4)));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true))))
            {
            }
           else
            {
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, false || (true))))) && true))))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, false))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
