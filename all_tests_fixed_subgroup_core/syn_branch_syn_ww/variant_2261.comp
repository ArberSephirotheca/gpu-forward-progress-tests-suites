#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), 0u + (gl_WorkGroupID.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) / vec2(1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) / _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0))))).x) + 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(30064))) != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED((-97337 | 26240))), max((true ? 0 : _GLF_FUZZED(_GLF_IDENTITY((-97337 | 26240), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((-97337 | 26240), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((-97337 | 26240)))), clamp(~ (_GLF_IDENTITY((-97337 | 26240), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((-97337 | 26240)))), ~ (_GLF_IDENTITY((-97337 | 26240), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((-97337 | 26240)))), ~ (_GLF_IDENTITY((-97337 | 26240), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((-97337 | 26240)))))))))), (true ? 0 : _GLF_FUZZED((-97337 | 26240))))))), int(0)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0)) >> 0)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))))), workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u))))))), ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), _GLF_IDENTITY((uvec3(subgroup_size, 1u, 1u)), ~ (~ ((uvec3(subgroup_size, 1u, 1u))))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) | 0u)))) | 0u))))))))) - 0u)), max(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, _GLF_IDENTITY(1u, 0u ^ (1u)), 1u))))))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))), subgroup_local_id + 1))), clamp((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) >> 0u, (_GLF_IDENTITY((subgroup_local_id + 1) >> 0u, ((subgroup_local_id + 1) >> 0u) / 1u)) * 1u))), (subgroup_local_id + 1), (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uint((subgroup_local_id + 1))), clamp(uint(uint((subgroup_local_id + 1))), uint(uint((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)))), uint(uint((subgroup_local_id + 1)))))), (subgroup_local_id + 1), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (true ? uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), 1u, 1u)))))) / uvec3(1u, 1u, 1u), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), _GLF_IDENTITY((true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u))), ((true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))) - uvec3(0u, 0u, 0u))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / uvec3(1u, 1u, 1u), ~ (~ ((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), _GLF_IDENTITY((true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u))), max((true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u))), (true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / uvec3(1u, 1u, 1u))))))), uvec3(uvec4(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), (_GLF_IDENTITY(uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), (uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) | uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), (true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))) - (uvec3(0u, 0u, 0u) & uvec3(104831u, 6181u, 28215u))), (true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)), ~ (~ ((_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), max(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (true ? uvec3(subgroup_size, 1u, 1u) : _GLF_FUZZED(uvec3(94160u, 167029u, 167864u)))), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / uvec3(1u, 1u, 1u))))))), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 0u))))))))))))))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), min(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u)))), min((0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u)), _GLF_IDENTITY(uint(uvec4(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u)), (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 1u, 0u)), (uint(uvec4(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u)), (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 1u, 0u))) | (uint(uvec4(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u)), (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), 1u, 0u)))))))))), (0u >> _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, (2u) | (2u))) + 0u))))))), uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) | (1u)))), 1u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), clamp(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), _GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), 1u * (_GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), 0u + (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))))), max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))), clamp(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))) | (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), (false ? _GLF_FUZZED(subgroup_size) : ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), 0u | (max(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) >> (0u | 0u))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))), _GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, _GLF_IDENTITY(1u, (1u) << 0u), 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u)))))))))))) | (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (1u ^ 1u) ^ (subgroup_size)), uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))), uint(uvec4(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (1u ^ 1u) ^ (subgroup_size)), uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))), 0u, 0u, (0u ^ 0u)))))), 1u * (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (1u ^ 1u) ^ (subgroup_size)), uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))), uint(uvec4(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (1u ^ 1u) ^ (subgroup_size)), uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))), 0u, 0u, (0u ^ 0u)))))))), (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))), clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))), clamp(max(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) | 0))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u)))), max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))), _GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) << (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | 0u), uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (1u))), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), 0u | (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), min(uvec3(subgroup_size, 1u, 1u), _GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), clamp(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))), _GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u))))), min(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u))))), uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))))), ((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), 1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))), 0u ^ (uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))), uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u)))))))))))) | (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))), max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))))))), 0u ^ (_GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (0u | 0u) ^ (subgroup_size)), uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), clamp(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u, 1u)), 1u * (uint(uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u, 1u)))))))), uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, (1u) / 1u)), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), _GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size))), 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u)))), (true ? _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u), ((uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u)) >> (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u))))))) : _GLF_FUZZED(uvec2(uvec4(164740u, 102493u, 124059u, 52406u)).r)))))))), 0u | (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), _GLF_IDENTITY((uvec3(subgroup_size, 1u, 1u)), (_GLF_IDENTITY((uvec3(subgroup_size, 1u, 1u)), ((uvec3(subgroup_size, 1u, 1u))) | (_GLF_IDENTITY((uvec3(subgroup_size, 1u, 1u)), ((uvec3(subgroup_size, 1u, 1u))) - uvec3(0u, 0u, 0u))))) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | 0u)) ^ 0u), 1u))))))))))), _GLF_IDENTITY(max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, int(int(1)))))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, 1u)) / uvec3(1u, 1u, 1u))))))))), (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))) / uvec3(1u, 1u, 1u)))))))))) | (max(((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / uvec3(1u, 1u, 1u)))))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(1u, 0u | (1u)), 1u)) / uvec3(1u, 1u, 1u)))))))))))))))) >> 0u))) | (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0), (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) | (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), (uvec3(subgroup_size, 1u, 1u)) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (uvec3(1u, 1u, 1u)))))))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true)))))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))))) || false, bool(bvec3((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))))) || false, false, true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 0), ivec2(0, 0) | (ivec2(4, 0))))), 64, 4);
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) ^ 0)), (int(4)) ^ 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> (-62730 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(subgroup_local_id + 1 < subgroup_size)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               int i = _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 ^ (0))));
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, (false) && true)), true, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4((_GLF_IDENTITY(false, (false) && true)), true, true, false))), false || (! (bool(bvec4((_GLF_IDENTITY(false, (false) && true)), true, true, false)))))))) || false)))
                barrier();
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))), 4, 64, 4);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))) | _GLF_IDENTITY((_injected_loop_counter), int(ivec4((_injected_loop_counter), 1, 0, 0)))) != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, false)), (bool(bvec4(true, true, false, false))) && true)))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, false)), (bool(bvec4(true, true, false, false))) && true)))))))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0)))))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true))))), bool(bool((_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true)))))))), bool(bvec3(! (_GLF_IDENTITY(true, true && (true))), true, false)))))))
                          {
                           barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(0), int(0))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(subgroup_local_id)))) >> 0u)], _GLF_IDENTITY(uint(2), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(2), ~ (~ (_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(2), ~ (_GLF_IDENTITY(~ (uint(2)), ~ (_GLF_IDENTITY(~ (~ (uint(2))), (false ? _GLF_FUZZED(workgroup_size) : ~ (~ (uint(2)))))))))), (~ (_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))))) / 1u), ~ (_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))))))))))), 4, 64, 4);
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))), int(5)))))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             do
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), clamp(_GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), (min(_injected_loop_counter, _injected_loop_counter)) | 0), min(_injected_loop_counter, _injected_loop_counter), _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), (min(_injected_loop_counter, _injected_loop_counter)) << _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, int(ivec2(0, 0)))))))))) > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    {
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> 0)) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               do
                                {
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       for(int _injected_loop_counter = ((0 ^ 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 1.0)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
