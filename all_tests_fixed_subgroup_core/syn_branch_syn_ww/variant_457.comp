#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat3 _f0;
 bvec2 _f1;
 bool _f2;
 mat3x2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 uvec3 _f1;
 _GLF_struct_0 _f2;
 float _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 _GLF_struct_1 _f1;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9619.6973))))) > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true))), true)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), bool(bvec2((true), false)))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) && true)), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) && true)), ! (! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) && true)))))) && true) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(1.0, 1.0) * (max(injectionSwitch, injectionSwitch)))).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true) || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-97.64)), bool(false))), 0.0, 0.0)), float(mat3x4(float(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-97.64)), bool(false))), 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), 1.0)), vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(6.5))), 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))).x > injectionSwitch.y))))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0))) > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), true && (! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false, false))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, (false) || false))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat2x3(1.0), _GLF_struct_1(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) >> (_GLF_IDENTITY(0u, (0u) - (((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uint(_GLF_IDENTITY(uint(6u), uint(6u))))), 0u), max(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uint(_GLF_IDENTITY(uint(6u), uint(6u))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uint(_GLF_IDENTITY(uint(6u), uint(6u))))), 0u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(113589u) : _GLF_IDENTITY(uint(6u), uint(6u))))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u)), uint(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u)), 1u, 0u)))), ((1u) >> (_GLF_IDENTITY(0u, (0u) - (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(113589u) : _GLF_IDENTITY(uint(6u), uint(6u))))) >> _GLF_IDENTITY(uint(6u), uint(6u))) ^ 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u)))) >> 0u))), uvec3(1u), _GLF_struct_0(mat3(1.0), bvec2(true), true, mat3x2(1.0), vec2(1.0)), 1.0, bvec4(true)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u), (_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 1u, 0u)))) | 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))))).x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))))).x < injectionSwitch.y)))))), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))))).x < injectionSwitch.y)))))), (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - abs(vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(159.949)), float(0.0), bool(true)))))))).x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))))).x < injectionSwitch.y))))))))) || false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || _GLF_IDENTITY((bool(bvec4(true, _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))), true))), bool(bvec4((bool(bvec4(true, _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))), true))), false, false, false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || _GLF_IDENTITY((bool(bvec4(true, _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))), true))), bool(bvec4((bool(bvec4(true, _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false || (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))), true))), false, false, false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bool(bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x, 1.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x, 1.0, 0.0, 0.0), (mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x, 1.0, 0.0, 0.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))))) - 0.0) > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))))) < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(53.84) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))))))), ! (! (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), 0, 0, 1)))) - 0) < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) / 1.0) > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), bool(bvec2((! (true)), true))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), bool(bvec2((! (true)), true)))))), _GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), bool(bvec2((! (true)), true)))))), true, false, false)), true && (bool(bvec4(! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), bool(bvec2((! (true)), true)))))), true, false, false))))))))), (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(((true)) && true, bool(_GLF_IDENTITY(bool(((true)) && true), bool(bvec3(bool(((true)) && true), true, false))))))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(861.974) : injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), max(float(mat3x2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1], 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), (float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0)))) / abs(1.0)), max(float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) - 0.0) : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x : _GLF_FUZZED(-84.72))) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), max(float(mat3x2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1], 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), (float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0)))) / abs(1.0)), max(float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) - 0.0) : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x : _GLF_FUZZED(-84.72))) > injectionSwitch.y), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), max(float(mat3x2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1], 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), (float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0)))) / abs(1.0)), max(float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) - 0.0) : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x : _GLF_FUZZED(-84.72))) > injectionSwitch.y), false)), bvec2(bvec3(bvec2(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))[1], _GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), max(float(mat3x2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1], 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-75.24), _GLF_FUZZED(-8521.3347)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0))), (float(mat3x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, abs(0.0)))) / abs(1.0)), max(float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) - 0.0) : _GLF_FUZZED(95.68)))))), float(mat3x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 1.0, abs(0.0))))))), bvec2(true, true))).x : _GLF_FUZZED(-84.72))) > injectionSwitch.y), false)), false))))))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))) && true)))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))), (injectionSwitch.x > injectionSwitch.y))));
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true))), ! (! ((_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true))))))))))))), ! (! ((! (_GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true))), ! (! ((_GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (! ((false)))) && true)))))))))))))))))) || false)) || false) && _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(false, false || (false))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))), false, true, true))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, false || (false))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))))))))))))))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))) || false), false, _GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), bool(bvec2(! _GLF_IDENTITY((false), bool(bool((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_IDENTITY(true, bool(bvec3(true, false, false))))))) && true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! ((true) || false)))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! ((true) || false)))))), bool(bvec2((! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! ((true) || false)))))), false))), true, true))))) || false), false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)))), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))) || false), false, _GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0))))) && (_GLF_IDENTITY(false, ! (! (false)))))))))))))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-29.62) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))))[_GLF_IDENTITY(0, min(0, 0))], _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(-8205.3784), _GLF_FUZZED(-6.0)), bvec2(false, false))))) * vec2(1.0, 1.0)))))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))) && true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, sin(0.0)), transpose(transpose(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, sin(0.0)), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, sin(0.0)) : _GLF_FUZZED(mat3x2(-5212.0008, 462.299, -4.0, 5476.5424, -4.4, 5250.9875))))))))).x) * 1.0) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))), true, true, true))), _GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true))))), true && (bool(bool(_GLF_IDENTITY((true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) || ((true)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))))))))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || ((true))))), true && (bool(bool(_GLF_IDENTITY((true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((true), (_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (! ((true))))))) && true)))))))))))))))), true)))))))), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(8.8, -6549.8032)))).y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(_GLF_IDENTITY(mat4x3((injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-1.6) : 1.0)), 1.0, 0.0), (_GLF_IDENTITY(mat4x3((injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0), (mat4x3((injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0)) * mat4(1.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(8.2), min(_GLF_FUZZED(8.2), _GLF_FUZZED(8.2)))), _GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) && true))))) : _GLF_FUZZED(28.61))) > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(8.2), min(_GLF_FUZZED(8.2), _GLF_FUZZED(8.2)))), _GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) && true))))) : _GLF_FUZZED(28.61))) > injectionSwitch.y)))) && true))), true, true, true))), _GLF_IDENTITY(true, true && (true))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))) || ((true))))), true && (bool(bool(_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true)))))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(-1527.2932, round(2.5), 6.1)) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, log(1.0)))), injectionSwitch.y)))) || (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ((_GLF_IDENTITY(true, (true) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true))), (_GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))) || false)))))))))))))))))))))))));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) || false)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) || false)))), false))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != (0 | 0)); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (false)))))))))), true && (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))))), false))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-62094)))) | (int(0))), int(0))), clamp(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))), 0 | (int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))))), int(0))), int(0)))))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           break;
                          }
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-397.104, -1916.3825)) : injectionSwitch)), injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(3.6)), ((true ? injectionSwitch.y : _GLF_FUZZED(3.6))) + 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(695.309)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 return;
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                break;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              break;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                              }
                             else
                              {
                               do
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5236.1872) : injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5236.1872) : injectionSwitch.x)) > injectionSwitch.y))))))
                                    return;
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                                    {
                                     return;
                                    }
                                   if(_GLF_DEAD(false))
                                    continue;
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          break;
                                         continue;
                                        }
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         return;
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), bool(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true))))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), bool(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true)))))))))))) || false, ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))) || false) && true)), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0)))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.workgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_2.workgroup_id) | 0u, ((_GLF_struct_replacement_2.workgroup_id) | 0u) * 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.workgroup_id, (_GLF_struct_replacement_2.workgroup_id) | _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))), 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_2.workgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_2.workgroup_id, (true ? _GLF_IDENTITY(_GLF_struct_replacement_2.workgroup_id, 1u * (_GLF_struct_replacement_2.workgroup_id)) : _GLF_FUZZED(workgroup_size)))) | 0u)))) - 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, max(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(virtual_gid))) * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ _GLF_IDENTITY((~ ((subgroup_local_id))), 0u | ((~ ((subgroup_local_id))))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) ^ 0u)) - (73813u & 0u)), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, max(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(virtual_gid))) * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ _GLF_IDENTITY((~ ((subgroup_local_id))), 0u | ((~ ((subgroup_local_id))))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) ^ 0u)) - (73813u & 0u)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, max(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(virtual_gid))) * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ _GLF_IDENTITY((~ ((subgroup_local_id))), 0u | ((~ ((subgroup_local_id))))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) ^ 0u)) - (73813u & 0u)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))) + 1, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, max(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1, _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(virtual_gid))) * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((subgroup_local_id), ~ _GLF_IDENTITY((~ ((subgroup_local_id))), 0u | ((~ ((subgroup_local_id))))))))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), _GLF_IDENTITY(~ (~ ((subgroup_local_id))), 1u * (~ (~ ((subgroup_local_id))))))))) + 1))) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) ^ 0u)) - (73813u & 0u))));
 do
  {
   atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) >> 0)) | (4)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(0, 0 ^ (0))))))), 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, false || (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)) < subgroup_size)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) << 0), 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), int(_GLF_IDENTITY(ivec4(((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) << 0), 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (1 ^ (1 ^ 0)), 1, 0), clamp(ivec4(((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) << 0), 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (1 ^ (1 ^ 0)), 1, 0), ivec4(((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) << 0), 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (1 ^ (1 ^ 0)), 1, 0), ivec4(((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) << 0), 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (1 ^ (1 ^ 0)), 1, 0)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = (0 & 39061); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))))))))
                  return;
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec2(true, false))))), (bool(bool(_GLF_IDENTITY(true, bool(bvec2(true, false)))))) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((2.6 * -30.83))), float(1.0), bool(true))), (1.0) - 0.0)) + _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)))), injectionSwitch.y), max(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((2.6 * -30.83))), float(1.0), bool(true))), (1.0) - 0.0)) + _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)))), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((2.6 * -30.83))), float(1.0), bool(true))), (1.0) - 0.0)) + _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), _GLF_IDENTITY(_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(((vec2(injectionSwitch[0], injectionSwitch[1])))[0], ((vec2(injectionSwitch[0], injectionSwitch[1])))[1]), vec2(_GLF_FUZZED(vec3(140.900, 2.8, -7.2).p), _GLF_FUZZED(6914.1144)), bvec2(false, false))) / vec2(1.0, 1.0), sqrt(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(21.15) : 0.0)))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9.2)), bool(false))), 0.0)), 0.0)) + (_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1])), min((vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[0], injectionSwitch[1])))) / vec2(1.0, 1.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.2), _GLF_FUZZED(6.6)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0), (mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec2(-9.4, 40.51).x)), bool(false))), _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(6.7))))), 1.0, 0.0, 0.0)), min(dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(vec4(vec4(0.0, 1.0, 0.0, 0.0)))), vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), (vec4(0.0, 1.0, 0.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0))))), dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(-16103))), bool(false))), 0.0)), 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))), _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0))), 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(30.43) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.6)), bool(false))))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)))), (true ? _GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 1.0, 1.0, sqrt(0.0), 0.0), (mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 1.0, 1.0, sqrt(0.0), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(mat3(-4071.6986, 68.60, -1294.4897, 32.32, -1.0, -5.7, -0.5, -9.2, -859.443)))))).x), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0)) * _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), transpose(_GLF_IDENTITY(transpose(mat3(1.0)), transpose(_GLF_IDENTITY(transpose(transpose(mat3(1.0))), (transpose(transpose(mat3(1.0)))) / _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(2.5, -3.3, 9.2, 9.4, 0.8, -4.7, -12.14, -8.6, -13.94)) : _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(7.0, -8.9, -4.3, -9.3, -3792.8306, -2277.0944, -4103.1989, -622.993, -6.4))))))))))), mat3(1.0) * (_GLF_IDENTITY(mat3(1.0), transpose(_GLF_IDENTITY(transpose(mat3(1.0)), transpose(_GLF_IDENTITY(transpose(transpose(mat3(1.0))), (transpose(transpose(mat3(1.0)))) / _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(mat3(2.5, -3.3, 9.2, 9.4, 0.8, -4.7, -12.14, -8.6, -13.94)) : _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(7.0, -8.9, -4.3, -9.3, _GLF_IDENTITY(-3792.8306, clamp(_GLF_IDENTITY(-3792.8306, mix(float(-3792.8306), float(_GLF_FUZZED(1.4)), bool(false))), -3792.8306, _GLF_IDENTITY(-3792.8306, clamp(-3792.8306, -3792.8306, -3792.8306)))), -2277.0944, -4103.1989, -622.993, -6.4))))), (true ? _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(mat3(2.5, -3.3, 9.2, 9.4, 0.8, -4.7, -12.14, -8.6, -13.94)) : _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(7.0, -8.9, -4.3, -9.3, _GLF_IDENTITY(-3792.8306, clamp(_GLF_IDENTITY(-3792.8306, mix(float(-3792.8306), float(_GLF_FUZZED(1.4)), bool(false))), -3792.8306, _GLF_IDENTITY(-3792.8306, clamp(-3792.8306, -3792.8306, -3792.8306)))), -2277.0944, -4103.1989, -622.993, -6.4))))), (true ? (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(mat3(2.5, -3.3, 9.2, 9.4, 0.8, -4.7, -12.14, -8.6, -13.94)) : _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat3(7.0, -8.9, -4.3, -9.3, _GLF_IDENTITY(-3792.8306, clamp(_GLF_IDENTITY(-3792.8306, mix(float(-3792.8306), float(_GLF_FUZZED(1.4)), bool(false))), -3792.8306, _GLF_IDENTITY(-3792.8306, clamp(-3792.8306, -3792.8306, -3792.8306)))), -2277.0944, -4103.1989, -622.993, -6.4))))) : _GLF_FUZZED(mat3(-3.7, -3255.7459, 5.4, 7.8, 32.79, 18.16, -40.79, 6610.1205, 3.3)))) : _GLF_FUZZED(mat3(6.9, -588.435, 66.78, 25.57, -492.049, -6958.2028, -1.1, 9262.0447, -930.851))))))))))))))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)) > injectionSwitch.y))) && true)))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     int i = 0;
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || _GLF_IDENTITY(false, (false) && true))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || _GLF_IDENTITY(false, (false) && true)))))) || false));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)))))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / cos(0.0)), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / cos(0.0))) + 0.0)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), true && (bool(bool((false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false || (false)))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true)))), (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true))))) || false)))), bool(bvec2((false), true)))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(958.719) : 0.0))), min(vec2(0.0, 0.0), vec2(0.0, 0.0))) + (injectionSwitch))))) * vec2(1.0, 1.0)), vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(958.719) : 0.0))), min(vec2(0.0, 0.0), vec2(0.0, 0.0))) + (injectionSwitch))))) * vec2(1.0, 1.0)), (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(958.719) : 0.0))), min(vec2(0.0, 0.0), vec2(0.0, 0.0))) + (injectionSwitch))))) * vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(2.7, -1.3)))), cos(0.0)))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(reflect(vec2(-65.89, -2158.8314), smoothstep(vec2(-6.0, -6.2), injectionSwitch, vec2(163.604, -2.4)))))).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false)))))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          break;
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)], uint(2), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, 1 * (4)), 4)), 64, 4);
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(0.0, 0.0)).x), float(injectionSwitch.x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y) && true)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.5, -73.28)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-73.17) : 1.0))))) > injectionSwitch.y) && true))))) || false))))))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(893.693, (_GLF_IDENTITY(893.693, mix(float(893.693), float(_GLF_FUZZED(2.7)), bool(false)))) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))) : injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(893.693, (_GLF_IDENTITY(893.693, mix(float(893.693), float(_GLF_FUZZED(2.7)), bool(false)))) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))) : injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(893.693, (_GLF_IDENTITY(893.693, mix(float(893.693), float(_GLF_FUZZED(2.7)), bool(false)))) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))) : injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(893.693, (_GLF_IDENTITY(893.693, mix(float(893.693), float(_GLF_FUZZED(2.7)), bool(false)))) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))) : injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))))), (false ? _GLF_FUZZED(-39.54) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(893.693, (_GLF_IDENTITY(893.693, mix(float(893.693), float(_GLF_FUZZED(2.7)), bool(false)))) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))) : injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(893.693) : injectionSwitch.y))))))))) - _GLF_IDENTITY(0.0, (0.0) / 1.0)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - tan(_GLF_IDENTITY(0.0, 1.0 * (0.0)))))).x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - tan(_GLF_IDENTITY(0.0, 1.0 * (0.0)))))).x < injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - tan(_GLF_IDENTITY(0.0, 1.0 * (0.0)))))).x < injectionSwitch.y))), true, false, false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - tan(_GLF_IDENTITY(0.0, 1.0 * (0.0)))))).x < injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - tan(_GLF_IDENTITY(0.0, 1.0 * (0.0)))))).x < injectionSwitch.y))), true, false, false))) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - tan(0.0)))).x < injectionSwitch.y)) && true))) && true) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false) ? _GLF_FUZZED(893.693) : _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(8.1, (8.1) / abs(1.0)))), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(-8.8, 4.9).g)), bool(false)))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(30.44) : 0.0))), float(_GLF_FUZZED(93.37)), bool(false))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * mat4(1.0)))))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0))))))) - _GLF_IDENTITY(0.0, (0.0) / 1.0))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))) && true))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-912.049)))))));
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true && (bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))), true))), true && (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(false, false || (false))) || false)), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false), (_GLF_IDENTITY(false, false || (false))) || false)))), ! (! (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((1.5 * -0.9))), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3123.7810)), bool(false)))), bool(true)))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     else
                      {
                      }
                     return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          return;
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             break;
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch[1])), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(52.08) : injectionSwitch.x)), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(52.08) : injectionSwitch.x)), 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))))
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               do
                                {
                                 return;
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               if(_GLF_DEAD(false))
                                return;
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, false))) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bool((_GLF_IDENTITY(false, (false) || false))))))) && true), false, true, false)))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), true, false, _GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true))))))), ! (! ((false)))), true, false))) || false), (_GLF_IDENTITY(false, (false) || false)) && true), false, true, false)))), false)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))), ! (! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))))))) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))), ! (! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))))))) || false), (bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))), ! (! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))))))) || false)) || false)), false || (bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))), ! (! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))))))) || false), (bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))), ! (! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))))))) || false)) || false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, false))) || false), (_GLF_IDENTITY(false, (false) || false)) && true), false, true, false)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, false))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)) && true), false, true, false)))))), false))))));
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 & -51640); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(0, 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            break;
           for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), clamp((0 >> _GLF_IDENTITY(int(8), int(8))), (0 >> _GLF_IDENTITY(int(8), int(8))), (0 >> _GLF_IDENTITY(int(8), int(8)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      break;
                     return;
                    }
                  }
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))) || false)))
                return;
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
                  continue;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0)).x < injectionSwitch.y, true)))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), max(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))), vec2(1.0, 1.0)))) - log(vec2(1.0, 1.0)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, false, false)), bool(bvec4(bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), false, false, false)), true, true, true))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bool((false)))))), ! (! (! (false))))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                  return;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), int(7))), ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), int(7)))) | 0)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   do
                    {
                     do
                      {
                       do
                        {
                         atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) | (4)))), (false ? _GLF_FUZZED(49824) : 4)), 64, 4);
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             continue;
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                            continue;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), ~ (~ (int(2))))))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))));
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((2.8))), float(0.0), bool(true))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2393.9669)), float(injectionSwitch.x), bool(true)))))))) | (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2393.9669)), float(injectionSwitch.x), bool(true)))))))) | (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2393.9669)), float(injectionSwitch.x), bool(true)))))))) | (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) : _GLF_FUZZED(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))) ^ 0))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, log(1.0), 1.0, tan(0.0), 0.0, 0.0)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.1), _GLF_FUZZED((- 2571.3205))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(5.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) * 1.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false) && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.1), _GLF_FUZZED((- 2571.3205))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(5.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))) * 1.0)), bvec2(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, ~ (~ (7))), 7)), 1)), ~ (_GLF_IDENTITY(~ (int(ivec2(_GLF_IDENTITY(7, _GLF_IDENTITY(min(_GLF_IDENTITY(7, ~ (~ (7))), 7), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (min(_GLF_IDENTITY(7, ~ (~ (7))), 7)))), 1))), (~ (int(ivec2(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, ~ (~ (7))), 7)), 1)))) | (~ (int(ivec2(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, ~ (~ (7))), 7)), 1))))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, ~ (~ _GLF_IDENTITY((7), 0 ^ (_GLF_IDENTITY((7), max((7), (7))))))), 7)), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, ~ (~ (7))), 7)), 1))))) << _GLF_IDENTITY(0, (0) + (0 << _GLF_IDENTITY(int(8), int(8))))))), ~ (~ (int(7)))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true)))))))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), bool(bvec2(_GLF_IDENTITY((false), true && ((false))), false)))))) || _GLF_IDENTITY(false, (false) || false))))) || false)))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))) - vec2(0.0, 0.0))).y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), bool(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, true))) && true), true, false))))))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1))) && true); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(false, true)))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))))) && true))), false, false))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            break;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((mat4x2(287.720, -20.74, 0.1, 8575.6652, -24.03, -719.944, 64.18, 3.4) * vec4(-60.45, 0.2, 979.837, 43.92))) : injectionSwitch)).x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)) : _GLF_FUZZED(injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
}
