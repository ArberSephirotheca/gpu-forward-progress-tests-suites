#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), false), true)))))))), true && (! (false)))), ((_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), true && (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))) || false), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))) || false), true))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(((+ -26.77) - -6.6))), vec2(_GLF_FUZZED(-5.4), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) || false)))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false)))), false))))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(2), int(2))) + (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) >> 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) - 0)), max(6, 6))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))))))), true && (_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(2), int(2))) + (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) >> 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) - 0)), max(6, 6))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))))))), ! (! (_injected_loop_counter != ((_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(2), int(2))) + (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) >> _GLF_IDENTITY(0, (0) ^ 0)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) - 0)), max(6, 6))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), _GLF_IDENTITY(0, (0) | (0)) | (int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-34510) : 6)), 6))) / 1)), 0 | (int(6))))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5523.5658), _GLF_FUZZED(-687.524)), bvec2(false, false))).x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) || _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), true, false))))))), (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), max(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))))), 0.0), (mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), max(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))))), 0.0)) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true))))), false || (((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true))))))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), bool(bvec4(! (_GLF_IDENTITY(false, (false) && true)), true, true, true)))))) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, abs(1.0), sqrt(0.0)))), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(63.66)), (_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(63.66)), float(mat2x4((true ? injectionSwitch.y : _GLF_FUZZED(63.66)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0)))) / 1.0))) / 1.0), injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true, true)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.9) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.23)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (! (false))))))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (false), true, true)), bvec3(bvec4(bvec3(bvec3(! (false), true, true)), true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (! (false)))))), (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (! (false))))))) && true)) || false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (! (! (! (false))))))))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) || false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
        }
       for(int _injected_loop_counter = (0 & 69241); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (_GLF_IDENTITY(! (! ((false))), ! (! (! (! ((false)))))))))) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), false)))) && true)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(true, false, false)), (bool(bvec3(true, false, false))) && true))))), (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(bvec3(true, false, false))), false || (_GLF_IDENTITY((false), false || ((false))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec3(true, false, false)))))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))))), (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(bvec3(true, false, false))), false || (_GLF_IDENTITY((false), false || ((false))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec3(true, false, false)))))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) && true))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (false))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_DEAD(false), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(bvec2(_GLF_DEAD(false), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5734.5498) : injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, max(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) && true)) || false))))), (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) || false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u))), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(48377) : 1))) % subgroup_size), uint(uvec2(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) % subgroup_size), 1u)))) * 1u)) - 0u), min(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u), _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u))) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size, 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), clamp(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))), uint(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))), uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u))))))))), min((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), 0u + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)))))) % subgroup_size), (true ? ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 1u)))))) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size), _GLF_IDENTITY(min(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u))), max(min(((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(packHalf2x16(vec2(-4.3, 50.97))) : subgroup_local_id)) + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u))), min(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, 1 * (1))) % subgroup_size) << 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id), (max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) | (max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))) | 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ 0u) % subgroup_size) >> 0u)), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))) / 1u))), clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max((subgroup_id), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u))) * _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) >> 0u), ((subgroup_id) * _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) >> 0u)) ^ 0u)) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u)) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u))) * subgroup_size) + 0u))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) | 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1))), ((_GLF_IDENTITY(1, 1 * (1)))) >> 0) - 0), max(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) + 0) ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), ((1) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) + 0) ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((0 ^ 0)), (((0 ^ 0))) - 0), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0))))))) + 0)), 1)), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), int(ivec3(_GLF_IDENTITY(~ (_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), 1))), 0 | (~ ((_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0, ~ (~ (0))))) ^ 0))))))), _GLF_IDENTITY(1, (1) ^ 0))))))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ 0, 0 ^ (0 ^ 0)))), 0 | (~ ((0 ^ 0)))), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, 0 | (0 ^ 0))) / 1)))))))), 1))) % subgroup_size, min((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0))))))), 1))) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), _GLF_IDENTITY(0, clamp(0, 0, 0)) | (~ ((0 ^ 0))))))), 1))) % subgroup_size)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), clamp(_GLF_IDENTITY((1) | _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), max(_GLF_IDENTITY((0 ^ 0), 0 ^ ((0 ^ 0))), (0 ^ 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ (_GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(~ ((0 ^ 0)), (~ ((0 ^ 0))) ^ 0)))))))), ~ (~ ((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ _GLF_IDENTITY(0, (0) * 1))))), 0 | (~ ((0 ^ 0))))))))), _GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), (true ? _GLF_IDENTITY(~ ((0 ^ 0)), clamp(~ ((0 ^ 0)), ~ ((0 ^ 0)), ~ ((0 ^ 0)))) : _GLF_FUZZED(-42763))), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), 1 * ((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))))), _GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), min(_GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), int(ivec4((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), 0, 1, 0))), (1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))), 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0))))) >> 0)))))))))), 1)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41162) : 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) + 0))))) << 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, (0) | (0)) ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), ~ (~ ((1) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) | (0)) ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0) | (~ ((0 ^ 0))))))))), _GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), 1 * _GLF_IDENTITY(((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, _GLF_IDENTITY(clamp(0 ^ 0, 0 ^ 0, 0 ^ 0), (_GLF_IDENTITY(clamp(0 ^ 0, 0 ^ 0, 0 ^ 0), 1 * (clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))) << 0)))))), 0 | (~ ((0 ^ 0))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0))))))), ~ (~ (((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0)))))))))), ((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0)))))))), (min(_GLF_IDENTITY(((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0))))))), ~ (~ (((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0)))))))))), ((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0))))))))) | (min(_GLF_IDENTITY(((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0))))))), ~ (~ (((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0)))))))))), ((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0)))))), 0 | (~ ((0 ^ 0)))))))))))), _GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ ((0 ^ 0))), (0 | (~ ((0 ^ 0)))) ^ 0), min(0 | (_GLF_IDENTITY(~ ((0 ^ 0)), max(~ ((0 ^ 0)), ~ ((0 ^ 0))))), 0 | (~ ((0 ^ 0)))))), 0 | (~ ((0 ^ 0)))))), min(_GLF_IDENTITY((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), 0 | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0)))))), int(ivec4((1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), (~ ((0 ^ 0))) / 1), 0 | (~ ((0 ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(81011) : 0)))))))), 0 | (~ ((0 ^ 0)))))), 0, 1, 0))), (1) | _GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ 0)), _GLF_IDENTITY(0, (0) * 1) | (~ ((0 ^ 0)))), 0 | (~ ((0 ^ 0))))))))))), 1))) + 0u)) % subgroup_size)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(5.2)), bool(false))))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))), true && (bool(bvec4(false, false, true, true)))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, ~ (~ (4))))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1))))))) && true))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))))) + 1)), (subgroup_local_id + 1) / 1u) < subgroup_size)
    {
     int i = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, ! (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))) || false)) ? 0 : _GLF_FUZZED(bitfieldReverse(findLSB(-74552)))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), (! (true)) && true), false, true, false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, false || (false)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), max(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))).y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, false))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, (true) && true)))))) && _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, true && (false)), false)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
         return;
        }
      }
     else
      {
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(sin(30.14)))) / 1.0)))) && true)), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-179.381, -0.1)) : injectionSwitch)), injectionSwitch, injectionSwitch)).y)))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))) && true)))))), false, true)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) / 1))), ~ (~ (_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) / 1)))))), 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(false, ! (! (false))), true))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(float(false)) : _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true)))))) / 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(float(false)) : _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true)))))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(float(false)) : _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true)))))) / 1.0)) / 1.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(float(false)) : _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true)))))) / 1.0))), injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(float(false)) : _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.y)) - _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true)))))) / cos(0.0)), clamp(((injectionSwitch.y)) - _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, exp(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), _GLF_IDENTITY(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), (false ? _GLF_FUZZED(66.81) : _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.y)), max(_GLF_IDENTITY(((injectionSwitch.y)), float(vec3(((injectionSwitch.y)), 0.0, 1.0))), _GLF_IDENTITY(((injectionSwitch.y)), max(((injectionSwitch.y)), ((injectionSwitch.y)))))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), (false ? _GLF_FUZZED(-9634.4405) : ((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))))))), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), float(mat4x2(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0))), clamp(_GLF_IDENTITY(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), float(mat4x2(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0))), _GLF_IDENTITY(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), float(mat4x2(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0))), _GLF_IDENTITY(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), float(mat4x2(((injectionSwitch.y)) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-53.77)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0)))))))))) / 1.0), injectionSwitch.y, injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) >> 0, int(_GLF_IDENTITY(ivec3((int(5)) >> 0, 1, 0), ivec3(1, 1, 1) * (ivec3((int(5)) >> 0, 1, 0)))))))) >> _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1))), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) / 1) >> _GLF_IDENTITY(int(5), int(5))) / 1)))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec4(int(5), (1 & 1), 1, 1)), ~ (~ (int(ivec4(int(5), (1 & 1), 1, 1)))))), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec3(_GLF_IDENTITY(int(5), int(5)), (0 & 11356), 0))))))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) >> 0)), int(5)), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5)))))) << 0)) ^ 0)) >> _GLF_IDENTITY(int(5), int(5))) / 1)))), ((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1))))) >> 0), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1)))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), (false ? _GLF_FUZZED(-88071) : _GLF_IDENTITY((5), ((5)) - 0))) - 0)), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) / 1)))))))))) * int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
    }
   else
    {
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), ! (! (true && ((injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y) || false)))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(bool(bool(false)), false)), false || (bool(bvec2(bool(bool(false)), false)))))), true))) && true)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
