#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), (bool(bvec4(_GLF_DEAD(false), true, true, true))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false)), bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), (bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), true)))))))))) || false))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), max(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), min(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))))))), max(int(2), int(2))), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), max(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), min(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))))))), max(int(2), int(2))), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), max(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), min(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))))))), max(int(2), int(2))), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), max(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), min(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))))))), max(int(2), int(2))), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))))) >> _GLF_IDENTITY(0, int(ivec2(0, 1))))) - 0)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(0), int(0)), 0 << _GLF_IDENTITY(int(0), int(0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
uint subgroup_size = 16;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (70378))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0)))) || false)) && true)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0)))) || false)) && true)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0)))) || false)) && true)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0)))) || false)) && true)), false)))))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.5)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true)))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)))))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
        break;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, sqrt(determinant(mat2(1.0, 0.0, 0.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8471.3931)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))), _GLF_IDENTITY((injectionSwitch.x) / 1.0, clamp((injectionSwitch.x) / 1.0, (injectionSwitch.x) / 1.0, (injectionSwitch.x) / 1.0))), 0.0 + (injectionSwitch.x)) > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0)), (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))) ^ 0))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED((_injected_loop_counter ++)) : _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 1 * (_GLF_IDENTITY(int(0), int(0))))) >> 0), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) / 1))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
            break;
          }
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))) >> uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> (_GLF_IDENTITY(59603, max(_GLF_IDENTITY(59603, min(_GLF_IDENTITY(59603, ~ (_GLF_IDENTITY(~ (59603), (true ? ~ (59603) : _GLF_FUZZED(-39911))))), 59603)), 59603)) & 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) ^ (workgroup_size))))) | (_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))))), clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * workgroup_id) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(186924u, (186924u) | (186924u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))))), clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * workgroup_id) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(186924u))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))))), clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(workgroup_size, workgroup_size, workgroup_size), ~ (~ (clamp(workgroup_size, workgroup_size, workgroup_size))))), workgroup_size)) * workgroup_id) >> _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(186924u)))) ^ 0u)) << 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.y)), ((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-722.717)), float((injectionSwitch.y)), bool(true))))) + 0.0) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(radians(_GLF_IDENTITY(-485.489, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -485.489 : _GLF_FUZZED(6.7))))))), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), 0.0)), 0.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))) / 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, (true ? _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(float(mat3((1.0) * 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (true ? float(mat3(_GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), clamp((1.0), (1.0), (1.0))), _GLF_IDENTITY((1.0), max(_GLF_IDENTITY((1.0), ((1.0)) * 1.0), (1.0))))) * 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(2.8)))) : _GLF_FUZZED(-0.4)))), 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.7)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -752.655))), float(injectionSwitch.y), bool(true)))))))) ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1026.1008) : _GLF_FUZZED(0.7))), mix(float(_GLF_FUZZED(0.7)), float(_GLF_FUZZED(9.3)), bool(false)))), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), max(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(mat4x2(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), min(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945)))))[2])), max((_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -752.655))), float(injectionSwitch.y), bool(true)))))))) ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1026.1008) : _GLF_FUZZED(0.7))), mix(float(_GLF_FUZZED(0.7)), float(_GLF_FUZZED(9.3)), bool(false)))), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), max(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(mat4x2(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), min(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945)))))[2])), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -752.655))), float(injectionSwitch.y), bool(true)))))))) ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1026.1008) : _GLF_FUZZED(0.7))), mix(float(_GLF_FUZZED(0.7)), float(_GLF_FUZZED(9.3)), bool(false)))), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), max(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(mat4x2(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), min(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945)))))[2])), min((_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -752.655))), float(injectionSwitch.y), bool(true)))))))) ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1026.1008) : _GLF_FUZZED(0.7))), mix(float(_GLF_FUZZED(0.7)), float(_GLF_FUZZED(9.3)), bool(false)))), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), max(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(mat4x2(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), min(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945)))))[2])), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -752.655))), float(injectionSwitch.y), bool(true)))))))) ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1026.1008) : _GLF_FUZZED(0.7))), mix(float(_GLF_FUZZED(0.7)), float(_GLF_FUZZED(9.3)), bool(false)))), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), max(_GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(mat4x2(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), min(vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945), vec3(-90.27, _GLF_IDENTITY(-8523.8748, (_GLF_IDENTITY(-8523.8748, max(-8523.8748, -8523.8748))) - 0.0), 8021.2945)))))[2]))))))), _GLF_IDENTITY(0.0, (0.0) / round(length(normalize(sqrt(vec4(1.0, 1.0, 1.0, 1.0)))))), exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.3))), 1.0, 0.0)), float(mat4x2(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.7)), bool(false))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / exp(0.0), min(_GLF_IDENTITY((injectionSwitch.x), min(_GLF_IDENTITY((injectionSwitch.x), float(mat3x4((injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))))) / exp(0.0), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x))) / exp(0.0)))) < injectionSwitch.y))))) ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.7), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_FUZZED(1026.1008), float(vec3(_GLF_IDENTITY(_GLF_FUZZED(1026.1008), mix(float(_GLF_FUZZED(1026.1008)), float(_GLF_FUZZED(-8.8)), bool(false))), 1.0, 0.0))) : _GLF_FUZZED(0.7))), mix(float(_GLF_FUZZED(0.7)), float(_GLF_FUZZED(9.3)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))), bool(false))) : _GLF_FUZZED(vec3(-90.27, -8523.8748, 8021.2945)[2]))), 0.0, exp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), min(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.3))), 1.0, 0.0)), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), length(vec2(0.0, 0.0)), 1.0, 0.0)))), 1.0, 0.0, 0.0, tan(0.0))), 0.0)))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)))) + subgroup_local_id) << _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) ^ 0u)), min(~ (0u), ~ (0u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, min(0u, 0u))), max(subgroup_local_id, subgroup_local_id))) ^ 0u)))) + 1) % subgroup_size), _GLF_IDENTITY(min(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u) + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) - (0u | 0u)), (true ? workgroup_base : _GLF_FUZZED((workgroup_id --)))) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), ~ (~ (_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) ^ 0u) + 1) % subgroup_size)), (min(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) + 0u, (_GLF_IDENTITY((subgroup_local_id) + 0u, ((subgroup_local_id) + 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u)), max(subgroup_local_id, subgroup_local_id))) ^ 0u) + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))) ^ 0u)))) ^ 0u) + 1) % subgroup_size))) | (min(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) >> 0u)) >> 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u, ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u, uint(uvec2((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u, 1u)))))) | 0u)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))) ^ 0u) + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u) + 1) | 0u)) << 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u) + 1, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))) ^ 0u) + 1) | 0u)) << 0u)))) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)))) ^ 0u), max(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) ^ 0u))), 0u, 0u, 1u))) + 1) % subgroup_size)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, exp(0.0), 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY((~ (_injected_loop_counter)), (_GLF_IDENTITY((~ (_injected_loop_counter)), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (_injected_loop_counter))))) << 0) | (~ (_injected_loop_counter))))) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1 < _GLF_IDENTITY(subgroup_size, 1u * _GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec3((subgroup_size), (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) >> 0u))), 0u), (uvec3((subgroup_size), (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) >> 0u))), 0u)) / uvec3(1u, 1u, 1u))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false), true, false, true))))))))) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) && true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(float(injectionSwitch.y))), injectionSwitch.y))), float(_GLF_IDENTITY(mat4x3((_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(float(injectionSwitch.y))), injectionSwitch.y))), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0), mat4x3(mat4(mat4x3((_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(float(injectionSwitch.y))), injectionSwitch.y))), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0)))))))))))
      return;
     int i = _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 0, 1))), _GLF_IDENTITY(_GLF_IDENTITY((0), int(_GLF_IDENTITY(ivec2((0), 0), max(ivec2((0), 0), ivec2((0), 0))))), 1 * ((0))) - 0)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), 0u | (uint(2))), 4, 64, 4);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      continue;
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, false))), bool(bvec3(! (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(true, false || (true)), false))), false, true)))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - 0, ((_injected_loop_counter ++) - 0) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0)), ((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))) >> _GLF_IDENTITY(0, (0) ^ 0))) + 0) << 0))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
          break;
         continue;
        }
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), _GLF_IDENTITY(float(mat2x4(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), clamp(float(mat2x4(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat2x4(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), float(mat2x4(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))))) - sqrt(0.0)), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) + sqrt(vec2(0.0, 0.0))).y), 0.0, 0.0, tan(0.0), 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0)))), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, tan(0.0), 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0)))), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, tan(0.0), 0.0)))) / vec2(1.0, 1.0)), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0)))), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, tan(0.0), 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0)))), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, tan(0.0), 0.0)))) / vec2(1.0, 1.0)), 1.0, exp(0.0), cos(0.0), 0.0, 0.0, length(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0))), dot(vec4(0.0, 1.0, 0.0, tan(0.0)), vec4(abs(0.0), 1.0, 0.0, abs(0.0)))), length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, tan(0.0), 0.0))))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-3.9), _GLF_FUZZED(22.71)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) / vec2(1.0, 1.0)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -8.6))))), mat2(1.0) * (max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)))), (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -8.6)))))))).x)) | (4)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)), 1 * (_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (4)))))), 1 * (int(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (4)), _GLF_IDENTITY((_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (4))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (4))), 1 * ((_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (4))))))) - 0)))))))), 64, 4);
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      break;
     continue;
    }
  }
}
