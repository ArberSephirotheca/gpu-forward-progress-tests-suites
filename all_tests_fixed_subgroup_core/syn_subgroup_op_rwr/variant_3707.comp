#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 ivec3 _f0;
 vec3 _f1;
 vec2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_20 _f0;
 float _f1;
} ;

struct _GLF_struct_19 {
 uint read_2;
 mat3 _f0;
} ;

struct _GLF_struct_22 {
 _GLF_struct_19 _f0;
 _GLF_struct_21 _f1;
 ivec4 _f2;
 mat2x4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_14 {
 int _f0;
 float _f1;
 vec2 _f2;
 mat2 _f3;
 bool _f4;
 ivec3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
 ivec3 _f1;
 uint _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_16 _f5;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 bvec3 _f1;
 mat4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_12 _f0;
 uint read_1;
 _GLF_struct_13 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_10 {
 uint workgroup_base;
 vec2 _f0;
} ;

struct _GLF_struct_11 {
 bvec2 _f0;
 bvec2 _f1;
 _GLF_struct_10 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_7 {
 bool _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 int _f1;
 uint _f2;
 vec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_8 {
 int _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 uvec3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 uvec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_5 {
 uint subgroup_id;
 _GLF_struct_3 _f0;
 ivec4 _f1;
 _GLF_struct_4 _f2;
 bvec3 _f3;
 uvec4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 float _f1;
 _GLF_struct_8 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_0 {
 uint next_virtual_gid;
 mat2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 float _f1;
 uint _f2;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat4x2 _f1;
 _GLF_struct_1 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_5(gl_SubgroupID, _GLF_struct_3(ivec2(1), uvec4(1u), vec3(1.0)), ivec4(1), _GLF_struct_4(bvec4(true), uvec3(1u), vec3(1.0)), bvec3(true), uvec4(1u), ivec3(1)), 1.0, _GLF_struct_8(1, _GLF_struct_6(vec2(1.0), 1, 1u, vec3(1.0), 1u), _GLF_struct_7(true, mat2x4(1.0)), uvec3(1u)), mat4x3(1.0));
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(bvec2(true), bvec2(true), _GLF_struct_10(workgroup_size * workgroup_id, vec2(1.0)), mat2x3(1.0));
 uint virtual_gid = _GLF_struct_replacement_11._f2.workgroup_base + _GLF_struct_replacement_9._f0.subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(1.0, mat4x2(1.0), _GLF_struct_1(_GLF_struct_0(_GLF_struct_replacement_11._f2.workgroup_base + _GLF_struct_replacement_9._f0.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), mat2(1.0), vec4(1.0)), 1.0, 1u));
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_12(uvec2(1u)), atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_struct_13(uvec2(1u), bvec3(true), mat4(1.0), ivec3(1)), _GLF_struct_17(ivec3(1), ivec3(1), 1u, _GLF_struct_14(1, 1.0, vec2(1.0), mat2(1.0), true, ivec3(1), vec4(1.0)), _GLF_struct_15(mat4x3(1.0), uvec3(1u)), _GLF_struct_16(uvec3(1u), ivec3(1))));
 atomicStore(buf[_GLF_struct_replacement_2._f2._f0.next_virtual_gid], uint(_GLF_struct_replacement_18.read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  return;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_19(atomicLoad(buf[virtual_gid], 4, 64, 0), mat3(1.0)), _GLF_struct_21(_GLF_struct_20(ivec3(1), vec3(1.0), vec2(1.0), uvec3(1u)), 1.0), ivec4(1), mat2x4(1.0), mat2(1.0));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[_GLF_struct_replacement_2._f2._f0.next_virtual_gid], uint(_GLF_struct_replacement_18.read_1 + 1 == _GLF_struct_replacement_22._f0.read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[_GLF_struct_replacement_2._f2._f0.next_virtual_gid], uint(_GLF_struct_replacement_18.read_1 + 1 == _GLF_struct_replacement_22._f0.read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(true);
  }
}
