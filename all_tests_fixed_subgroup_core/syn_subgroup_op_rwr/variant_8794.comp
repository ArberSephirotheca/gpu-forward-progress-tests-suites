#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(52734))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) * 1, ((int(0)) * 1) - 0)), int(0), int(_GLF_IDENTITY(0, (0) ^ 0))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-61.26, 92.05)))).x > injectionSwitch.y))))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(1), int(1)))))
        {
         case 73:
         notEqual(ivec4(90096, _GLF_IDENTITY(-68959, (_GLF_IDENTITY(-68959, ~ (~ (-68959)))) | (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(-78181, clamp(-78181, _GLF_IDENTITY(-78181, max(-78181, -78181)), -78181)), -81287), ivec4(81892, -94788, -63845, 34187));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         case 0:
         if(_GLF_DEAD(false))
          barrier();
         case 77:
         case 79:
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
          barrier();
         case 46:
         case 35:
         case 3:
         case 74:
         case 71:
         case 99:
         switch(_GLF_SWITCH(0))
          {
           case 75:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           vec3(_GLF_IDENTITY(31.71, (31.71) - 0.0), 9562.2071, -6.7);
           case 0:
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 ^ (1)), 1))); _injected_loop_counter ++)
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))) == read_2) + 1, 4, 64, 4);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y))))));
            }
           case 22:
           case 52:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           case 49:
           subgroupAll(false);
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           default:
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             switch(_GLF_SWITCH(_GLF_IDENTITY(0, (0) << 0)))
              {
               case 0:
               if(_GLF_DEAD(false))
                barrier();
               case 6:
               case 52:
               if(_GLF_DEAD(false))
                {
                 switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                  {
                   case 0:
                   case 89:
                   case 82:
                   case 4:
                   case 57:
                   case 35:
                   case 93:
                   case 47:
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   break;
                   case 9:
                   mat4x2 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v[95];
                   case 38:
                   bvec2(true, false);
                   default:
                   1;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  barrier();
                }
               else
                {
                }
               break;
               case 59:
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               ivec2(6759, -50021);
               case 78:
               do
                {
                 mat3(-79.58, 3.3, -6.6, 4679.5017, 2.3, -9.7, 2.1, -7.4, -9215.6107);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               default:
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 1;
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   1;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
            }
          }
         break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         case 52:
         mat4 _GLF_SWITCH_0_0v;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         default:
         1;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 95:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       (+ (workgroup_id | uvec4(198638u, 58718u, 41349u, 172458u)));
      }
     case 0:
     case 45:
     case 30:
     case 28:
     case 98:
     case 33:
     case 13:
     if(_GLF_DEAD(false))
      barrier();
     case 63:
     case 85:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
     switch(_GLF_SWITCH(0))
      {
       case 62:
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))))))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             mat3x2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v[44], _GLF_SWITCH_1_2v[76];
             mat4 _GLF_SWITCH_1_3v;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       case 47:
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(36.59, -83.16)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(9.4), (false ? _GLF_FUZZED(vec2(36.59, -83.16)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(36.59, -83.16)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(vec2(36.59, -83.16)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0] : _GLF_FUZZED(9526.6177))), _GLF_FUZZED(1.2)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))).y))))
        {
         for(uint _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v, _GLF_SWITCH_1_6v; false; findLSB(_GLF_IDENTITY(ivec4(71759, 35241, 47201, -61803), max(ivec4(71759, 35241, 47201, _GLF_IDENTITY(-61803, (_GLF_IDENTITY(-61803, (-61803) - _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 1), max(_GLF_IDENTITY(ivec2(0, 1), ~ (~ (ivec2(0, 1)))), ivec2(0, 1))))))) / (1 | 0))), ivec4(71759, 35241, 47201, -61803)))))
          {
           if(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true, false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec2(5, 0)))), max(int(_GLF_IDENTITY(5, int(ivec2(5, 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec2(5, 0)))), (int(_GLF_IDENTITY(5, int(ivec2(5, 0))))) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               mat4x3(-402.443, -8246.9700, _GLF_IDENTITY(-7591.6028, mix(float(-7591.6028), float(_GLF_FUZZED(-0.0)), bool(false))), -3230.5335, -59.09, 4.2, _GLF_IDENTITY(8685.0054, min(_GLF_IDENTITY(8685.0054, float(mat2x3(8685.0054, 1.0, 0.0, 0.0, 1.0, 0.0))), 8685.0054)), 40.91, 721.936, -7.0, 67.15, 32.26);
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   barrier();
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               mat2x4(-496.196, 6.2, -9252.4110, -5.9, _GLF_IDENTITY(-474.392, max(-474.392, -474.392)), 74.94, -554.346, _GLF_IDENTITY(1.7, (false ? _GLF_FUZZED(-52.04) : 1.7)));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(true)
              {
               _GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true))))))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true)))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true)))))))), true))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true)))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec3(_GLF_IDENTITY(isinf(vec3(-90.60, -375.316, 7.8)), bvec3(bvec4(isinf(vec3(-90.60, -375.316, 7.8)), true))))))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true)))), true)))))))), true))), true)))), true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), _GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), _GLF_IDENTITY(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(isinf(vec3(-90.60, -375.316, 7.8))), false)), true))))))), false)))));
               vec4 _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 mat2(mat3(_GLF_IDENTITY(984.073, (false ? _GLF_FUZZED(-58.92) : _GLF_IDENTITY(984.073, (984.073) + 0.0))), -8169.4180, 6.8, -9057.1978, _GLF_IDENTITY(-16.35, mix(float(_GLF_FUZZED(vec3(-2458.7044, 722.697, 4.5).x)), float(-16.35), bool(true))), _GLF_IDENTITY(41.07, _GLF_IDENTITY((41.07), cos(0.0) * ((41.07))) - 0.0), _GLF_IDENTITY(269.355, (_GLF_IDENTITY(269.355, mix(float(269.355), float(_GLF_FUZZED(-5.0)), bool(false)))) / 1.0), -42.69, 873.589));
                }
               ;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               mat3x4 _GLF_SWITCH_1_9v, _GLF_SWITCH_1_10v, _GLF_SWITCH_1_11v[4];
               uvec2(6499u, 11464u);
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     (0.2 - mat2x4(-51.63, 45.40, -6.3, -30.58, 9.0, -5130.3924, -574.256, -9.7));
                    }
                   else
                    {
                    }
                  }
                }
               mat4x3(3.1, -4.4, -50.93, 4070.4039, -8.5, -7696.7263, 4.0, 2586.6001, 9.3, -678.550, 2.8, 3222.4551);
              }
             else
              {
               notEqual(bvec3(false), bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false));
               do
                {
                 -812.818;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               mat2x3 _GLF_SWITCH_1_12v[49], _GLF_SWITCH_1_13v[26];
               if(_GLF_DEAD(false))
                barrier();
               vec4(-3.4, 45.88, -6552.1085, _GLF_IDENTITY(-7.7, (_GLF_IDENTITY(-7.7, (true ? _GLF_IDENTITY(-7.7, float(vec3(-7.7, 1.0, 0.0))) : _GLF_FUZZED(72.57)))) + 0.0));
               if(_GLF_DEAD(false))
                barrier();
               mat3x4(-0.9, -4.8, 7.6, -88.28, -450.990, 842.229, 6232.7172, 31.56, 1.7, 2.1, 9745.5383, -7.9);
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 ivec2(89139);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 next_virtual_gid;
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               while((bvec2(true, true) != bvec3(true, true, true).yz))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             for(             vec4(-73.60, -395.362, 4.2, 6.7).sqpq;
 true; uvec2(90859u, 71801u))
              {
               mat3(-739.838, -6.9, 630.103, -829.800, 3.6, 333.839, -4.4, 6.1, 76.40);
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   uaddCarry(subgroup_local_id, ((read_2 ++) * _GLF_IDENTITY(read_2, (read_2) / 1u)), _GLF_SWITCH_1_5v);
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 (60028 & (ivec3(63418, 11335, _GLF_IDENTITY(-75032, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(-75032, int(ivec4(-75032, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 1, 1)))), ~ (~ (_GLF_IDENTITY(~ (-75032), min(~ (-75032), ~ (-75032))))))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(~ (_GLF_IDENTITY(-75032, int(ivec4(-75032, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 1, 1)))), ~ (~ (_GLF_IDENTITY(~ (-75032), min(~ _GLF_IDENTITY((-75032), min((-75032), _GLF_IDENTITY((-75032), 0 + ((_GLF_IDENTITY(-75032, (false ? _GLF_FUZZED(-32303) : -75032))))))), ~ (-75032)))))))), max(int((_GLF_IDENTITY(~ (_GLF_IDENTITY(-75032, int(ivec4(-75032, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 1, 1)))), ~ (~ (_GLF_IDENTITY(~ (-75032), min(~ (-75032), ~ _GLF_IDENTITY((-75032), ((0 >> _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(1), int(1))) ^ ((-75032)))))))))), int((_GLF_IDENTITY(~ (_GLF_IDENTITY(-75032, int(ivec4(-75032, _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3))))), (1 << _GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3)))), ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3))))) + 0) >> 0), 1, 1)))), ~ (~ (_GLF_IDENTITY(~ (-75032), min(~ (_GLF_IDENTITY(-75032, int(_GLF_IDENTITY(ivec3(-75032, 0, 0), ivec3(0, 0, 0) | (ivec3(-75032, 0, 0)))))), ~ (-75032)))))))))))))) >> 8990));
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))), true, false, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))), true, false, true))))));
               vec4(-38.93, _GLF_IDENTITY(8.1, max(8.1, 8.1)), -5442.6810, -8513.2368);
               normalize(vec4(-1.6, -9.2, 0.9, -2.0));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
               else
                {
                 switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(-58587))))))))))
                  {
                   case 0:
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   break;
                   case 84:
                   bvec3(true, false, false);
                   case 77:
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     inversesqrt(abs(vec4(-503.653, 669.687, 73.68, -140.949).baa));
                    }
                   default:
                   1;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             do
              {
              }
             while((false ^^ false));
             bvec3 _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v;
             for(ivec3 _GLF_SWITCH_1_16v; (37.82 < 6.4); mat2x4(54.17, 3.7, -645.329, -6.0, 59.13, -9.3, -729.965, 74.79))
              {
               switch(_GLF_SWITCH(0))
                {
                 case 32:
                 (uvec3(780u, 117562u, 121528u) - _GLF_SWITCH_1_6v);
                 case 3:
                 (((mat4(8909.8371, 6232.3105, -8.9, 14.15, -9315.7031, -6857.4794, -114.074, 904.663, -38.00, -3811.3133, -47.18, -43.22, -5.9, 9075.7954, -75.16, 7636.7032) - -8.9) / 53.52) / 6.3);
                 case 0:
                 mat3x2 _GLF_SWITCH_1_17v, _GLF_SWITCH_1_18v[55];
                 case 54:
                 float _GLF_SWITCH_1_19v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 (mat3x4(-0.8, 635.489, 8356.5200, -3303.0712, -76.10, -7.8, -89.34, 32.98, -1.3, -5842.5504, 3.4, 3256.1224) / _GLF_SWITCH_1_19v);
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     switch(_GLF_SWITCH(0))
                      {
                       case 33:
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           workgroup_id;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       case 69:
                       mat2x3(mat3x4(1.2, -6.5, 0.7, 34.29, -9.4, 82.73, -745.944, 795.925, -3.7, -595.600, -26.89, -1895.3934));
                       case 0:
                       case 29:
                       case 53:
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       case 70:
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       case 62:
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       case 24:
                       case 74:
                       case 95:
                       case 15:
                       case 1:
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         barrier();
                        }
                       break;
                       case 65:
                       mat4 _GLF_SWITCH_0_0v[24], _GLF_SWITCH_0_1v;
                       default:
                       1;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   ;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.3, 2914.6413)))).y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y) && true)) || false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y) && true)) || false)))), _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false)), (mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x), (true ? clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ float(5482u))), _GLF_FUZZED(9063.4877)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x) : _GLF_FUZZED(_GLF_SWITCH_1_19v))))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) + determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y) && true)) || false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y) && true)) || false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, false)), true && (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x), bool(true))), injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), _GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(bool(false), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bool(false), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(bool(false), true, true))), false)))))))) > injectionSwitch.y) && true)) || false)))), _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y) && true)) || false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(vec4(46.27, 4579.1492, -80.33, -3568.0305).q)), bool(false))) > injectionSwitch.y)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) && true)) || false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, false))))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                  }
                 step(vec4(-5.1, 5.2, _GLF_IDENTITY(6.6, float(float(6.6))), 67.38), vec4(_GLF_IDENTITY(-126.296, clamp(-126.296, _GLF_IDENTITY(-126.296, (-126.296) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(-126.296, 0.0 + (-126.296)), (false ? _GLF_FUZZED(7.1) : -126.296)))), 8.8, -77.11, -174.891));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 uvec2 _GLF_SWITCH_1_20v, _GLF_SWITCH_1_21v, _GLF_SWITCH_1_22v;
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true)))))));
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 mat3 _GLF_SWITCH_1_23v[2];
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 uvec3(195916u, 18027u, 101779u);
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 break;
                 case 46:
                 (mat4(7274.0421, -7.6, -5459.1224, 965.079, -8.4, -25.50, -4.6, -92.49, -1980.6721, 58.91, 42.44, -46.33, -26.64, 174.068, -8615.3348, 3242.6297) * mat4(mat3x4(2714.5327, 828.110, 8.0, 17.57, -4051.1017, -1.4, -3184.8430, 7.1, 6327.6240, -4268.5141, -60.28, -28.00)));
                 default:
                 1;
                }
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-6301 & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             switch(_GLF_SWITCH(0))
              {
               case 0:
               case 31:
               case 71:
               case 9:
               case 62:
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               case 78:
               case 98:
               case 36:
               case 39:
               case 72:
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               break;
               case 85:
               mat3x2 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
               case 59:
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 (ivec3(83976, 62734, -84301) - _injected_loop_counter);
                }
               else
                {
                }
               default:
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                {
                 1;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       case 0:
       case 5:
       case 80:
       case 71:
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) / 1u))) + (read_1))), (~ (_GLF_IDENTITY(read_1, 0u + (_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec2(read_1, 0u), (_GLF_IDENTITY(uvec2(read_1, 0u), uvec2(_GLF_IDENTITY(uvec3(uvec2(read_1, 0u), 0u), (_GLF_IDENTITY(uvec3(uvec2(read_1, 0u), 0u), (uvec3(uvec2(read_1, 0u), 0u)) | (uvec3(uvec2(read_1, 0u), 0u)))) | (_GLF_IDENTITY(uvec3(uvec2(read_1, 0u), 0u), (uvec3(uvec2(read_1, 0u), 0u)) * uvec3(1u, 1u, 1u))))))) - uvec2(0u, 0u)))))))) ^ 0u))) + 1 == read_2) + _GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(4, (4) | 0), 64, 4);
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       case 10:
       if(_GLF_DEAD(false))
        barrier();
       case 70:
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       default:
       1;
      }
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     case 44:
     mat4x2(-76.99, -406.598, 956.972, -2.6, _GLF_IDENTITY(7856.4451, _GLF_IDENTITY(0.0 + (7856.4451), clamp(0.0 + (7856.4451), 0.0 + (7856.4451), 0.0 + (7856.4451)))), -2.6, 2404.5090, 7.5);
     case 7:
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       (abs(-85176) / ivec3(-58584, 9646, 6071));
      }
     if(_GLF_DEAD(false))
      barrier();
     default:
     1;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
