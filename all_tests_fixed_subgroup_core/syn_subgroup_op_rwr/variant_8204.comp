#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), true)))))), false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! _GLF_IDENTITY((false), ((false)) && true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), true))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, false))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec2(cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), min(0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), float(mat2x4(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (0), (1 * (0)) / 1)), max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))) << 0), 0))], injectionSwitch[1])).y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), float(mat4x2((injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) - length(vec3(0.0, 0.0, 0.0))) / _GLF_IDENTITY(dot(vec2(cos(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0))), min(0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), float(mat2x4(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))) << 0), 0))], injectionSwitch[1])).y)), true && (bool((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) - 0.0), min(0.0, 0.0))), (vec2(cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) - 0.0), min(0.0, 0.0)))) + vec2(0.0, 0.0)), vec2(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), _GLF_IDENTITY(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), float(mat2x4(dot(vec2(cos(0.0), 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))) << 0), 0))], injectionSwitch[1])).y)))))))))
    barrier();
  }
 else
  {
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))), (_GLF_IDENTITY(min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))), ~ (~ (min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))))))))) / 1u))), max((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))) / 1u), min(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))))), _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u), (_GLF_IDENTITY(~ (((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u), 0u ^ (~ (((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u)))) / 1u)), 0u ^ (~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u), (_GLF_IDENTITY(~ (((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u), 0u ^ (~ (((_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))))) >> 0u)))) / 1u)))))))) >> 0u);
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) >> 0)), (int(0)) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec2(int(0), 1))), int(0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(int(0), int(0))))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) >> 0)), (int(0)) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0)))), 0 + ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) >> 0)), (int(0)) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0))))))) / _GLF_IDENTITY(1, (1) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 0) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, false)))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.5) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), float(mat2x3(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), 1.0, 1.0, 1.0, 0.0, 0.0)))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0)), mix(float(float(mat4x2(injectionSwitch.y, 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(49.62)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true))))))))))), false, _GLF_IDENTITY(false, ! (! (false)))))))))))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, true))));
              }
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1053.9377)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1.1, -61.77)))).x < injectionSwitch.y)), false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1402.2366)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1, (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1, _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1) - 0, min(_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1) - 0, ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1) - 0) >> 0), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1) - 0)))) + (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) << 0u, (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((workgroup_base)), (_GLF_IDENTITY(~ ((workgroup_base)), clamp(~ ((workgroup_base)), ~ ((workgroup_base)), ~ ((workgroup_base))))) << 0u))) << 0u) * 1u)) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (8532u & (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))), (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (8532u & (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))) ^ (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), (subgroup_id) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (8532u & _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(5u), uint(5u))), ((0u >> _GLF_IDENTITY(uint(5u), uint(5u)))) | ((0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))), (subgroup_id) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (8532u & (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))), (subgroup_id) >> _GLF_IDENTITY(0u, 0u ^ (0u))))) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, (1u) << 0u)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    barrier();
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) && true, (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))) || ((false) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, false || (true))), false, true, false))), (! (bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))) && true)))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) && true, (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))) || ((false) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, false || (true))), false, true, false))), (! (bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))) && true)))))))))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)), clamp((_GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), max(int(_GLF_IDENTITY(0, (0) >> 0)), int(_GLF_IDENTITY(0, (0) >> 0))))))), (_GLF_IDENTITY(0, (0) >> 0))))) >> 0) | (0 | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) < 1)))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (~ (2))), 2))), int(2))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch.y))))))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sin(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sin(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, abs(0.0), sin(0.0), 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0), mat4(1.0) * (mat4(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sin(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sin(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, abs(0.0), sin(0.0), 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0)))))) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))));
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 1 * (0))))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(vec2(0.5, -2042.2704), injectionSwitch, injectionSwitch)))))).y, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) * mat2(1.0))).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(vec2(0.5, -2042.2704), injectionSwitch, injectionSwitch)))))).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).y))))))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), false, false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), (! (_GLF_IDENTITY(! (false), false || (! (false))))) || false))), true), false, false))))), bool(bvec4((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), (! (_GLF_IDENTITY(! (false), false || (! (false))))) || false))), true), false, false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))))))).y))))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) | 0), 64)), 0);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(next_virtual_gid)))], _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((4), ~ (~ (_GLF_IDENTITY((4), min((4), (4)))))), (~ (4)) | (~ (4))))), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), 0u | (max(subgroup_local_id, subgroup_local_id)))) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)).x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + (0 | 0)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + (0 | 0))))), false || (bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + (0 | 0)))))))), bool(bool(bool(_GLF_IDENTITY(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + (0 | 0))))), false || (bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + (0 | 0))))))))))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false)))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) << 0) ^ 0)), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) | (_GLF_IDENTITY(4, (4) | (4))))))))) | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) | 0))), _injected_loop_counter, _injected_loop_counter)) > (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, abs(1.0), 0.0), vec4(mat4x2(vec4(injectionSwitch.x, 1.0, abs(1.0), 0.0), 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0))))))) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7.1)), bool(false))) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -26680)); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, log(1.0), 0.0))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 0.0)))), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec4(_GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 0.0))))) * 1))) && true); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) >> 0) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch)))).y, _GLF_IDENTITY((injectionSwitch.y), float(mat2x3((injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0))) - 0.0), injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (-87084 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
              barrier();
            }
           else
            {
            }
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
          barrier();
        }
       else
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))), max((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))), (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true, true, _GLF_IDENTITY(false, bool(bool(false))))), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true, true, _GLF_IDENTITY(false, bool(bool(false))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true)))), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true)))), true)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true)))), true)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true)))), true)), false)), true)))))))))))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(false, true)), true, false)))))))))
      barrier();
     do
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) / 1)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-620.721) : injectionSwitch.x)) > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) ^ (1u ^ 1u)) + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (1) - 0), 1, 1))), min(read_1 + 1, read_1 + _GLF_IDENTITY(1, max(1, 1))))))))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u | (0u))))) / (1u ^ 0u)))))) == read_2, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1))) | (_GLF_IDENTITY(read_1 + 1, ~ (~ _GLF_IDENTITY((read_1 + 1), (true ? (read_1 + 1) : _GLF_FUZZED(atomicExchange(subgroup_size, read_2)))))))), read_1 + 1)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1))) | (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1))))), read_1 + 1)), (true ? _GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, _GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))) | (_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1))))), read_1 + 1)) : _GLF_FUZZED(subgroup_local_id))))))))))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | 0u, ((0u) | 0u) >> (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) >> 0u))))))) == read_2, (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u + (_GLF_IDENTITY(read_1, (read_1) | (read_1)))) + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1, (read_1) | (0u & 149160u)) + 1, read_1 + 1)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))), ((read_1 + 1) | (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, (1) ^ 0), min(read_1 + 1, read_1 + 1)))) | ((read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1))))))), 0u | (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((read_1 + 1) >> 0u, 0u ^ (_GLF_IDENTITY((read_1 + 1) >> 0u, ~ (_GLF_IDENTITY(~ ((read_1 + 1) >> 0u), (~ ((read_1 + 1) >> 0u)) | (~ ((read_1 + 1) >> 0u)))))))), read_1 + _GLF_IDENTITY(1, 0 | (1)), read_1 + 1)), (read_1 + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, ~ (~ (_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)))))) | (read_1 + 1)), _GLF_IDENTITY(min(read_1 + 1, read_1 + 1), (min(read_1 + 1, read_1 + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | 0u)))) == read_2) && true), true, true, false))), ! (_GLF_IDENTITY(! (read_1 + 1 == _GLF_IDENTITY(read_2, (read_2) << _GLF_IDENTITY(0u, (0u) >> 0u))), ! (! (! (read_1 + 1 == read_2))))))) + 1, max(_GLF_IDENTITY(uint(read_1 + 1 == _GLF_IDENTITY(read_2, max(read_2, read_2))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (_GLF_IDENTITY(read_1 + 1 == read_2, true && (read_1 + 1 == read_2)))))), (uint(read_1 + 1 == read_2)) >> 0u), uint(read_1 + 1 == read_2), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) >> 0u)))), (false ? _GLF_FUZZED(workgroup_id) : (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) >> 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), uint(_GLF_IDENTITY(7u, (7u) >> 0u)))) - 0u)))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) / 1u), uint(7u))) * (uint(read_1 + 1 == read_2))))) + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(34624))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (_GLF_IDENTITY(read_1 + 1 == read_2, true && (read_1 + 1 == read_2)))))), (uint(read_1 + 1 == read_2)) >> 0u), uint(read_1 + 1 == read_2), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) >> 0u)))), (false ? _GLF_FUZZED(workgroup_id) : (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) >> 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), uint(_GLF_IDENTITY(7u, (7u) >> 0u)))) - 0u)))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) / 1u), uint(7u))) * (uint(read_1 + 1 == read_2))))) + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(34624))), ~ (~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (_GLF_IDENTITY(read_1 + 1 == read_2, true && (read_1 + 1 == read_2)))))), (uint(read_1 + 1 == read_2)) >> 0u), uint(read_1 + 1 == read_2), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) >> 0u)))), (false ? _GLF_FUZZED(workgroup_id) : (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) >> 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), uint(_GLF_IDENTITY(7u, (7u) >> 0u)))) - 0u)))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) / 1u), uint(7u))) * (uint(read_1 + 1 == read_2))))) + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(34624))))))) << 0u), (uint(read_1 + 1 == read_2) + 1) | _GLF_IDENTITY((_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(read_1 + 1 == read_2), ~ (_GLF_IDENTITY(~ (uint(read_1 + 1 == read_2)), (~ (uint(read_1 + 1 == read_2))) - (0u | 0u)))) + 1) - 0u)), (((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) & 1u) * ((_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)) == read_2), ~ (_GLF_IDENTITY(~ (uint(read_1 + 1 == read_2)), _GLF_IDENTITY((~ (uint(read_1 + 1 == read_2))) - (0u | 0u), uint(uvec3((_GLF_IDENTITY(~ (uint(read_1 + 1 == read_2)), (~ (uint(read_1 + 1 == read_2))) | (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)) == read_2)), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (false ? _GLF_FUZZED(read_2) : uint(read_1 + 1 == read_2)))), ~ (~ (~ (uint(read_1 + 1 == read_2))))), ~ (uint(read_1 + 1 == read_2))))))) - (0u | 0u), 1u, 1u)))))) + 1) - 0u)))))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) - 0u), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(uint(2691.8003)), (_GLF_FUZZED(uint(2691.8003))) ^ 0u) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))), subgroup_local_id))) : read_1), 0u | (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id, 0u ^ (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)))), subgroup_local_id))) : read_1)) / 1u)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1))), (_GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1)))) | 0))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1))), (_GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1)))) | 0)))) >> 0)), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(37790, (true ? 37790 : _GLF_FUZZED(ivec4(-13206, -4510, -3781, -84403)[1])))))) == read_2), (false ? _GLF_FUZZED(read_2) : uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), min((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))))), max(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), min((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))))), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), min((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))))), _GLF_IDENTITY((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), min((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))))), _GLF_IDENTITY((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), min((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), min((false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id))), (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))))))), subgroup_local_id))) : read_1), 0u | _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, 1.0)))))) && true)) || false) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1)) / 1u)), (true ? (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, 1.0)))))) && true)) || false) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1)) / 1u)) : _GLF_FUZZED(subgroup_size))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), max(max(1, 1), _GLF_IDENTITY(max(1, 1), (_GLF_IDENTITY(max(1, 1), (_GLF_IDENTITY(max(1, 1), 0 | (max(1, 1)))) >> (0 << _GLF_IDENTITY(int(2), int(2))))) | _GLF_IDENTITY(0, clamp(0, 0, 0)))))))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(37790, (true ? 37790 : _GLF_FUZZED(ivec4(-13206, -4510, -3781, -84403)[1])))))) == read_2))) + 1, (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))), subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))), subgroup_local_id))) | (0u << _GLF_IDENTITY(uint(8u), uint(8u))))) : read_1), _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : _GLF_IDENTITY(read_1, min(read_1, read_1))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, 2.1)))).y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)))) : read_1)) / 1u)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), max(max(1, _GLF_IDENTITY(1, 1 * (1))), max(1, 1)))))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(37790, (true ? 37790 : _GLF_FUZZED(ivec4(-13206, -4510, -3781, -84403)[1])))))) == read_2), (false ? _GLF_FUZZED(read_2) : uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))), subgroup_local_id))) : read_1), 0u | (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id) | (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id))) | 0u))), subgroup_local_id), (clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id)) << 0u))) : read_1), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1)) / 1u)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1)))))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(37790, (true ? 37790 : _GLF_FUZZED(ivec4(-13206, -4510, -3781, _GLF_IDENTITY(-84403, int(_GLF_IDENTITY(ivec4(-84403, 0, 1, 1), (ivec4(-84403, 0, 1, 1)) - ivec4(0, 0, 0, 0)))))[1])))))) == read_2))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0)) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id, subgroup_local_id)))), subgroup_local_id))) : read_1), 0u | (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))).x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))), subgroup_local_id))) : read_1)) / 1u, clamp(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))), subgroup_local_id))) : read_1)) / 1u, ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))), subgroup_local_id))) : read_1)) / 1u, _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))), subgroup_local_id))) : read_1)) / 1u, 0u | (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))), subgroup_local_id))) : read_1)) / 1u)))))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1))), (true ? _GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter)))) / (0 ^ 1))))))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(37790, (true ? 37790 : _GLF_FUZZED(ivec4(-13206, -4510, -3781, -84403)[1])))))) == read_2), (false ? _GLF_FUZZED(read_2) : uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), subgroup_local_id)))), subgroup_local_id))) : read_1), 0u | (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(2691.8003)) : subgroup_local_id)), subgroup_local_id))) : read_1)) / 1u)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), max(max(1, 1), max(1, 1)))))), (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(37790, 0 + (37790)), (true ? 37790 : _GLF_FUZZED(ivec4(-13206, -4510, -3781, -84403)[1])))))) == read_2))) + 1)))), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec2(-6.1, 1178.9584).x)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y))))
    {
     subgroupAll(false);
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), true, true, false)))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), true)))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))), true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true), true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))), true))), true)))), false), false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), min(1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - (0 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, true && (injectionSwitch.x < injectionSwitch.y))))))
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, ~ (~ (_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), read_1 + 1, read_1 + 1))))) == read_2) + 1, 4, 64, 4);
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false, false))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), ((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))) << 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(int(~ (1))), (int(int(~ (1)))) | 0)))), (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -7944)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4795.7035)), float(0.0), bool(true))) : _GLF_FUZZED(-1.8))), 0.0, 0.0, 1.0)))) + vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), vec2(1.0, 1.0) * (vec2(vec3(injectionSwitch, 1.0))))), injectionSwitch)), 0.0, 0.0, 0.0, 1.0)))) + vec2(0.0, 0.0)).x > injectionSwitch.y)), false, false, false)))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.9)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))), true, _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true)))), false)))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true))))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && (true)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), (int(6)) + 0), 1))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-60599 & (0 | (0 >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), false, false)))))) && (bool(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) && true), false)))), false)), false, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) && true), false)))), false)), false, false)))), false, false))))) && (bool(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), true))), (injectionSwitch.x < injectionSwitch.y))), false)))))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec2(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), false || ((_GLF_IDENTITY(false, false || (false))))), true, false)))), true))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), false)))))))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, abs(0.0)), (true ? mat4x3(injectionSwitch, 1.0, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, abs(0.0)) : _GLF_FUZZED(mat4x3(-337.286, -48.85, 6.9, -909.752, 0.4, 8421.5840, -27.10, 27.09, 25.12, -4.6, 2204.0985, 6.5))))), vec2(_GLF_IDENTITY(mat3(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, abs(0.0)), (true ? mat4x3(injectionSwitch, 1.0, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, abs(0.0)) : _GLF_FUZZED(mat4x3(-337.286, -48.85, 6.9, -909.752, 0.4, 8421.5840, -27.10, 27.09, 25.12, -4.6, 2204.0985, 6.5))))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0), mat3(mat3x4(mat3(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, abs(0.0)), (true ? mat4x3(injectionSwitch, 1.0, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, abs(0.0)) : _GLF_FUZZED(mat4x3(-337.286, -48.85, 6.9, -909.752, 0.4, 8421.5840, -27.10, 27.09, 25.12, -4.6, 2204.0985, 6.5))))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0))))))).x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true)))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true)))))), false))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (bool(_GLF_IDENTITY(false, (false) || false)))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true))))))))) && true), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))), false || (! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))))))))) || false))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))))))) || false)))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(-60.86)), bvec2(false, false))).y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) || false)))))
      barrier();
     barrier();
    }
  }
}
