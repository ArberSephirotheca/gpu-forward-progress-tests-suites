#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_40 {
 uint _f0;
 uint subgroup_local_id;
 mat3 _f1;
 bvec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_37 {
 mat4x2 _f0;
 mat4 _f1;
 bool _f2;
 mat2 _f3;
 uint _f4;
 mat3x2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_38 {
 _GLF_struct_37 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_35 {
 bvec3 _f0;
 bvec3 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_36 {
 _GLF_struct_35 _f0;
} ;

struct _GLF_struct_33 {
 mat4x2 _f0;
 mat2x3 _f1;
 mat3x4 _f2;
 ivec4 _f3;
 bvec4 _f4;
 bool _f5;
 float _f6;
} ;

struct _GLF_struct_34 {
 mat3x2 _f0;
 ivec4 _f1;
 _GLF_struct_33 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_31 {
 mat4x2 _f0;
 ivec4 _f1;
 bvec4 _f2;
 mat4 _f3;
 bvec4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_30 {
 uvec3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_32 {
 _GLF_struct_30 _f0;
 _GLF_struct_31 _f1;
} ;

struct _GLF_struct_39 {
 uvec2 _f0;
 _GLF_struct_32 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_36 _f3;
 mat2x3 _f4;
 _GLF_struct_38 _f5;
 uint workgroup_size;
 mat2x3 _f6;
} ;

struct _GLF_struct_27 {
 vec4 _f0;
 uvec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_26 {
 mat4x3 _f0;
 bvec4 _f1;
 mat2x3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_25 {
 vec3 _f0;
 bool _f1;
 ivec3 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_28 {
 int _f0;
 _GLF_struct_25 _f1;
 uvec4 _f2;
 ivec3 _f3;
 _GLF_struct_26 _f4;
 _GLF_struct_27 _f5;
} ;

struct _GLF_struct_23 {
 vec2 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_24 {
 _GLF_struct_23 _f0;
 mat3x2 _f1;
 ivec4 _f2;
 ivec4 _f3;
 bvec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_21 {
 float _f0;
 mat4 _f1;
 mat3x2 _f2;
 mat3x4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_20 {
 mat4x3 _f0;
 int _f1;
 uvec4 _f2;
 uvec3 _f3;
 ivec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 mat3 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_29 {
 _GLF_struct_22 _f0;
 vec2 _f1;
 _GLF_struct_24 _f2;
 _GLF_struct_28 _f3;
} ;

struct _GLF_struct_18 {
 uint _f0;
 mat2x3 _f1;
 uvec2 _f2;
 bvec4 _f3;
 uint next_virtual_gid;
} ;

struct _GLF_struct_19 {
 mat2 _f0;
 mat4x2 _f1;
 _GLF_struct_18 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 uvec2 _f1;
 uvec3 _f2;
 ivec4 _f3;
 bvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 uvec4 _f1;
 uint virtual_gid;
 mat3x4 _f2;
 mat4 _f3;
 _GLF_struct_15 _f4;
 float _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 vec3 _f1;
 ivec4 _f2;
 ivec4 _f3;
 uint _f4;
 mat4x2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_12 {
 mat4x2 _f0;
 bvec4 _f1;
 uvec3 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 vec3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_11 {
 mat4x2 _f0;
 ivec2 _f1;
 float _f2;
 vec3 _f3;
} ;

struct _GLF_struct_14 {
 uint _f0;
 _GLF_struct_11 _f1;
 mat4x2 _f2;
 _GLF_struct_12 _f3;
 mat2x3 _f4;
 _GLF_struct_13 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_9 {
 ivec2 _f0;
 mat3x2 _f1;
 uint _f2;
 mat3x4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_8 {
 int _f0;
 ivec3 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 bvec3 _f4;
 vec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
 ivec4 _f1;
 mat4 _f2;
 mat3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 vec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 int _f3;
 _GLF_struct_9 _f4;
 vec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
} ;

struct _GLF_struct_2 {
 bool _f0;
 int _f1;
 mat3 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 mat2x3 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 mat3x4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_1 {
 bool _f0;
 int _f1;
 mat4 _f2;
 bool _f3;
 mat3x2 _f4;
 _GLF_struct_0 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_1 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_16 _f4;
 uvec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), false)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), false))))), ! (! (bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, false), false))))))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_22(bvec4(true), mat3(1.0), _GLF_struct_20(mat4x3(1.0), 1, uvec4(1u), uvec3(1u), ivec3(_GLF_IDENTITY(1, (1) << (-77652 & (98699 & 0)))), mat4(1.0)), _GLF_struct_21(1.0, mat4(1.0), mat3x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-832.711)), bool(false)))), mat3x4(1.0), uvec4(1u))), _GLF_IDENTITY(vec2(1.0), min(vec2(1.0), vec2(1.0))), _GLF_struct_24(_GLF_struct_23(_GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0))), gl_SubgroupID), mat3x2(1.0), ivec4(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 + (1)), 1))), ivec4(1), bvec4(true), uvec2(1u)), _GLF_struct_28(1, _GLF_struct_25(vec3(1.0), true, ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(49313) : 1))), mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mat3x4(1.0)), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | 0u)), clamp(~ (_GLF_IDENTITY(1u, (1u) | 0u)), ~ (_GLF_IDENTITY(1u, (1u) | 0u)), ~ (_GLF_IDENTITY(1u, (1u) | 0u)))))), 1u)), _GLF_IDENTITY((uint(uvec4(1u, 1u, 1u, 1u))), min((uint(uvec4(1u, 1u, 1u, 1u))), (uint(uvec4(1u, 1u, 1u, 1u))))) | (uint(uvec4(1u, 1u, 1u, 1u))))), max(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, 1u, 1u)), min(uint(uvec4(1u, 1u, 1u, 1u)), uint(uvec4(1u, 1u, 1u, 1u))))), _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u)))))), ivec3(1), _GLF_struct_26(mat4x3(1.0), bvec4(true), mat2x3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(min(1.0, 1.0), tan(tan(0.0)), 1.0, 0.0)), 0.0 + (float(vec4(min(1.0, 1.0), tan(tan(0.0)), 1.0, 0.0)))), (_GLF_IDENTITY(float(vec4(min(1.0, 1.0), tan(tan(0.0)), 1.0, 0.0)), (true ? float(vec4(min(1.0, 1.0), tan(tan(0.0)), 1.0, 0.0)) : _GLF_FUZZED(890.773)))) - 0.0)))) * 1.0), 1.0))), mat2(1.0)), _GLF_struct_27(vec4(1.0), uvec4(1u), uvec3(1u))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_40 _GLF_struct_replacement_40 = _GLF_struct_40(1u, gl_SubgroupInvocationID, _GLF_IDENTITY(mat3(1.0), transpose(_GLF_IDENTITY(transpose(mat3(1.0)), transpose(transpose(_GLF_IDENTITY(transpose(mat3(1.0)), transpose(transpose(transpose(mat3(1.0)))))))))), bvec4(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), ((_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))) || false))))))))), ! (! ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))), ((_GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))) || false)))))))))))))), mat4x2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(14253u, 191800u, 120481u)), uvec3(_GLF_IDENTITY(uvec4(_GLF_FUZZED(uvec3(14253u, 191800u, _GLF_IDENTITY(120481u, clamp(120481u, 120481u, 120481u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_FUZZED(uvec3(14253u, 191800u, 120481u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) : gl_NumWorkGroups)).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))) << 0)) / (1 | 1)))
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8863.5597))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true))))))) || false)) && true))))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))) || false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
      }
    }
  }
 _GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(uvec2(1u), _GLF_struct_32(_GLF_struct_30(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) >> (uvec3(0u, 0u, 0u) & uvec3(164339u, 163877u, 43201u))), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(_GLF_IDENTITY(193018u, (false ? _GLF_FUZZED(num_workgroup) : 193018u)), 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), min(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), uvec3(uvec3(_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))))))))))), (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (_GLF_IDENTITY(true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)), uvec3(0u, 0u, 0u) + (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u))))))) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (true ? uvec3(1u) : _GLF_FUZZED(uvec3(180455u, 130034u, 127330u)))), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), clamp(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u)))))), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), min(uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u), uvec4(_GLF_IDENTITY(min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))), (true ? min(uvec3(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, ~ (~ (1u))))), _GLF_IDENTITY(1u, (1u) ^ (119775u & 0u)), 1u))), _GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u)))) : _GLF_FUZZED(uvec3(193018u, 61325u, 95977u)))), 0u))))))))) ^ uvec3(0u, 0u, 0u)), vec4(1.0)), _GLF_struct_31(mat4x2(1.0), ivec4(1), bvec4(true), _GLF_IDENTITY(mat4(1.0), (true ? _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(1.0), 1.0)), mix(float(_GLF_FUZZED(float(true))), float(float(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(1.0), 1.0))), bool(true)))))) : _GLF_FUZZED(_GLF_IDENTITY(mat4(1286.2063, 80.63, -5.6, _GLF_IDENTITY(-1.1, 1.0 * (_GLF_IDENTITY(-1.1, mix(float(-1.1), float(_GLF_FUZZED(-6.5)), bool(false))))), -15.40, 729.565, _GLF_IDENTITY(-706.951, max(-706.951, -706.951)), -2.9, -405.190, -2674.5324, 80.20, 0.3, 334.516, -3.5, -3433.2881, 10.37), (mat4(1286.2063, 80.63, -5.6, _GLF_IDENTITY(-1.1, 1.0 * (_GLF_IDENTITY(-1.1, _GLF_IDENTITY(mix(float(-1.1), float(_GLF_FUZZED(-6.5)), bool(false)), determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(mix(float(-1.1), float(_GLF_FUZZED(-6.5)), bool(false)), clamp(mix(float(-1.1), float(_GLF_FUZZED(-6.5)), bool(false)), mix(float(-1.1), float(_GLF_FUZZED(-6.5)), bool(false)), mix(float(-1.1), float(_GLF_FUZZED(-6.5)), bool(false))))))))), -15.40, 729.565, -706.951, -2.9, -405.190, -2674.5324, 80.20, 0.3, 334.516, -3.5, -3433.2881, 10.37)) + mat4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), bvec4(true), mat4x2(1.0))), _GLF_struct_34(mat3x2(1.0), ivec4(1), _GLF_struct_33(mat4x2(1.0), mat2x3(1.0), mat3x4(1.0), ivec4(1), bvec4(true), _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), bool(bvec3(_GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))), false, false))), (bool(_GLF_IDENTITY(bool(true), true && (bool(true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true))))))) && (true)), 1.0), mat2x3(1.0)), _GLF_struct_36(_GLF_struct_35(bvec3(true), bvec3(true), mat3x2(1.0), mat2x4(1.0), vec4(1.0))), mat2x3(1.0), _GLF_struct_38(_GLF_struct_37(mat4x2(1.0), _GLF_IDENTITY(mat4(1.0), (mat4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), true, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), 1u, mat3x2(1.0), mat3x4(1.0)), mat3x2(1.0)), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) ^ 0u)))) ^ 0u), mat2x3(1.0));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), min(1, 1)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) + 0))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_39.workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))), ~ (~ (~ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), ! (! (bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((26.11 + 82.13))), vec2(_GLF_FUZZED(8193.2519), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   else
    {
    }
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_1(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) || false))), 1, mat4(1.0), _GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) || false, bool(_GLF_IDENTITY(bvec2((true) || false, true), bvec2(bvec4(bvec2((true) || false, true), false, false))))))))), mat3x2(1.0), _GLF_struct_0(uvec3(1u), mat3x4(1.0), vec2(1.0)), bvec4(true)), _GLF_struct_5(_GLF_struct_2(true, 1, _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(mat3x4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat3x4(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), transpose(transpose(mat3(1.0))))), mat2x3(1.0), _GLF_struct_3(uvec3(1u)), _GLF_struct_4(vec4(1.0)), uvec4(1u)), _GLF_struct_10(_GLF_struct_6(mat2(1.0), _GLF_IDENTITY(vec2(1.0), clamp(_GLF_IDENTITY(vec2(1.0), vec2(mat3x4(vec2(1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(vec2(-623.337, -6.7).s), min(_GLF_IDENTITY(_GLF_FUZZED(vec2(-623.337, -6.7).s), (_GLF_FUZZED(vec2(-623.337, -6.7).s)) - 0.0), _GLF_IDENTITY(_GLF_FUZZED(vec2(-623.337, -6.7).s), clamp(_GLF_FUZZED(vec2(-623.337, -6.7).s), _GLF_IDENTITY(_GLF_FUZZED(vec2(-623.337, -6.7).s), float(mat2x3(_GLF_FUZZED(vec2(-623.337, -6.7).s), 1.0, 0.0, 1.0, 0.0, 0.0))), _GLF_FUZZED(vec2(-623.337, -6.7).s)))))), float(0.0), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9673.7377, 7.8)) : injectionSwitch)).y), true && ((injectionSwitch.x < injectionSwitch.y)))))), max(mix(float(_GLF_FUZZED(vec2(-623.337, -6.7).s)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(float(_GLF_FUZZED(vec2(-623.337, -6.7).s)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 1.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) * mat2(1.0)), vec2(1.0))), uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), min((1u), (1u))) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(83587u)), ((true ? 0u : _GLF_FUZZED(83587u))) - 0u))))), _GLF_struct_7(bvec3(true), ivec4(1), mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), mat3(mat3(mat3(1.0))))) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-3.6) : 1.0, float(_GLF_IDENTITY(mat4x3(false ? _GLF_FUZZED(-3.6) : 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, cos(0.0), 0.0), vec3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0)), dot(vec3(0.0, cos(0.0), 0.0), vec3(0.0, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(vec4(2.6, -49.30, 1371.2902, -395.371)) : normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 0.0))), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (mat4x3(false ? _GLF_IDENTITY(_GLF_FUZZED(-3.6), (false ? _GLF_FUZZED(2.4) : _GLF_IDENTITY(_GLF_FUZZED(-3.6), (true ? _GLF_FUZZED(-3.6) : _GLF_FUZZED(-7.0))))) : 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, cos(0.0), 0.0), vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0) + (vec3(0.0, 1.0, 1.0))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat4(normalize(vec4(1.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), abs(1.0), sqrt(0.0))), (vec4(mat4(normalize(vec4(1.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), abs(1.0), sqrt(0.0)))) - vec4(0.0, 0.0, 0.0, 0.0))))), 0.0)), dot(vec3(0.0, cos(0.0), 0.0), vec3(0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (true ? round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(-4.3))), 0.0))), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0, 0.0)))))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0))) - mat3(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.8)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (0.0) * abs(cos(0.0))), 0.0, 0.0, 0.0, 0.0, 0.0)), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)), false, false)))), false)))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y))))), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), true))), true)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), true))), true)))))), bool(bool((! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), true))), true)))))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y))))), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), true))), true)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), true))), true)))))), bool(bool((! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, true), true))), true)))))))))), false, true)))))))))))))), false, true)), bool(bool(bool(bvec4(true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(575.588), _GLF_FUZZED(98.41)), bvec2(false, false)))), (true ? _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(575.588), _GLF_FUZZED(98.41)), bvec2(false, false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.8, -0.5)) : injectionSwitch))) - vec2(0.0, 0.0)) / vec2(1.0, 1.0))), mix(vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(575.588), _GLF_FUZZED(98.41)), bvec2(false, false)))))) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y)), false, true)))))))), _GLF_struct_8(1, ivec3(1), mat2x4(1.0), mat4x2(1.0), bvec3(true), vec3(1.0), bvec4(true)), 1, _GLF_struct_9(ivec2(1), mat3x2(1.0), 1u, mat3x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2(1.0)), vec2(1.0), bvec2(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))))), _GLF_struct_14(1u, _GLF_struct_11(mat4x2(1.0), ivec2(1), 1.0, vec3(1.0)), mat4x2(1.0), _GLF_struct_12(mat4x2(1.0), bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true))))))))) && true)) && true)), uvec3(1u), uvec4(1u), mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.8)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0), max(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))), bool(true)))), vec3(1.0), mat4(1.0)), mat2x3(1.0), _GLF_struct_13(uvec4(1u), vec3(1.0), ivec4(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1))), ivec4(1, 1, 1, 1) * (_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1))))), (_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1))), (_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1)))) << (ivec4(0, 0, 0, 0) | ivec4(0, 0, 0, 0))))), 1u, mat4x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.0)), float(1.0), bool(true))), 1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-502.308)), bool(false))), 1.0))))), mat2x3(1.0)), _GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(2.1, 8.1, -6411.7990, -6.9, 8.7, -2.4, 0.3, -8191.5162, -5.5, -32.48, -128.278, 233.845, 9.2, -4564.4374, 9973.4860, 1.1))))), _GLF_struct_16(mat4x3(1.0), uvec4(1u), workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_29._f2._f0.subgroup_id, (_GLF_struct_replacement_29._f2._f0.subgroup_id) - 0u) * subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id, 0u + (_GLF_struct_replacement_40.subgroup_local_id)), mat3x4(1.0), mat4(1.0), _GLF_struct_15(bvec4(true), _GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), uvec2(1u))), uvec2(1u))), uvec3(1u), ivec4(1), bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (true))) && true)), uvec4(1u)), 1.0, mat3x4(1.0)), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) ^ uvec2(0u, 0u)));
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(mat2(1.0), mat4x2(1.0), _GLF_struct_18(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, 0u + (1u)), 0u))), mat2x3(1.0), uvec2(1u), bvec4(true), _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(_GLF_struct_replacement_29._f2._f0.subgroup_id, min(_GLF_struct_replacement_29._f2._f0.subgroup_id, _GLF_struct_replacement_29._f2._f0.subgroup_id)) * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id, (_GLF_struct_replacement_40.subgroup_local_id) << 0u) + 1, 0u + _GLF_IDENTITY((_GLF_struct_replacement_40.subgroup_local_id + 1), ((_GLF_struct_replacement_40.subgroup_local_id + 1)) >> 0u))), ((_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1), 0u + (_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_struct_replacement_40.subgroup_local_id + 1) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) | 0u) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), mat3(1.0));
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_17._f4.virtual_gid], 4, 64, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(0, 0, 0)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), max((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), 1 * ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(-68018)))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), max((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), 1 * ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(-68018)))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), max((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), 1 * ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(-68018)))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))), ((_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), max((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), 1 * ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(-68018)))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), max((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), 1 * ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(-68018)))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), max((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) * 1)) | 0)), 0 ^ (int(7))), int(7))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), 1 * ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(-68018)))))), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))))))) ^ (-67509 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 atomicStore(buf[_GLF_struct_replacement_19._f2.next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), (uint(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u))) >> _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, (_GLF_IDENTITY((0u) - 0u, clamp((0u) - 0u, (0u) - 0u, (0u) - 0u))) - 0u))))))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) >> 0)))), 0 ^ (~ (4))))), _GLF_IDENTITY(4, (4) | (4)))), 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * abs(1.0), (true ? (injectionSwitch.x) * abs(1.0) : _GLF_FUZZED(-3071.9459)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch.x)), (false ? _GLF_FUZZED(66.64) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-95.01) : injectionSwitch.y)))), true)))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = (29188 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))))) >> _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))))) >> _GLF_IDENTITY(int(7), int(7))) | 0))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_17._f4.virtual_gid], 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(-20280))), 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), false))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))), (true ? mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec4(1.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(vec4(-6.0, 74.71, -939.152, 3.9))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))) : _GLF_FUZZED(mat4x3(5.0, -5949.0355, 3.1, _GLF_IDENTITY(-83.01, (_GLF_IDENTITY(-83.01, 1.0 * (-83.01))) / 1.0), 3133.0245, 7901.1075, -1628.0689, 452.294, 63.16, -6594.1709, -91.96, 4801.8866)))))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / 1)), (false ? _GLF_FUZZED(86866) : int(_GLF_IDENTITY(4, (4) / 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))))), true)))))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 & -76262); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (((_GLF_IDENTITY(1 & 1, min(_GLF_IDENTITY(1 & 1, (1 & 1) / 1), 1 & 1))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id + 1, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id + 1, min(_GLF_struct_replacement_40.subgroup_local_id + 1, _GLF_struct_replacement_40.subgroup_local_id + 1)))) < subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id + 1, (_GLF_struct_replacement_40.subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_local_id + 1, uint(uvec2(_GLF_struct_replacement_40.subgroup_local_id + 1, 0u))))) < subgroup_size) || false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) && true)))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[_GLF_struct_replacement_19._f2.next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-3787.7277, min(_GLF_IDENTITY(-3787.7277, clamp(-3787.7277, -3787.7277, -3787.7277)), _GLF_IDENTITY(-3787.7277, (-3787.7277) / 1.0))))), vec2(_GLF_FUZZED(136.898), _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), 0.0)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec2(1, 0)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))))
                  barrier();
                 for(int _injected_loop_counter = (-54127 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x) - 0.0) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) && true))))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         subgroupAll(false);
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             atomicStore(buf[_GLF_struct_replacement_19._f2.next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, true && (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, 1u * (read_1)), read_1)) + 1) / 1u))) == read_2)), false || (_GLF_IDENTITY(read_1 + 1 == read_2, true && _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, int(int(1)))) | (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, 1u * (read_1)), read_1)) + 1) / _GLF_IDENTITY(1u, (1u) - 0u)))) == read_2), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, int(int(1)))) | (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, 1u * (read_1)), read_1)) + 1) / _GLF_IDENTITY(1u, (1u) - 0u)))) == read_2), true && ((_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, int(int(1)))) | (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, 1u * (read_1)), read_1)) + 1) / _GLF_IDENTITY(1u, (1u) - 0u)))) == read_2)))))))))) + 1, 4, 64, _GLF_IDENTITY(4, min(4, 4)));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) * 1.0)))))) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-709.566) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), max(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]))), vec2(_GLF_FUZZED(-63.22), _GLF_FUZZED(8419.1403)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), (min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) * 1.0))))))).y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0, 0.0)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), max(_GLF_IDENTITY(0.0, float(mat2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), _GLF_IDENTITY(0.0, float(mat2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 1.0, _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(ldexp(7.6, -83831)), mix(float(_GLF_FUZZED(ldexp(7.6, -83831))), float(_GLF_FUZZED(831.805)), bool(false))) : 1.0)), 0.0), vec3(0.0, 1.0, abs(0.0))))), 0.0))).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(log(1.0))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_IDENTITY(true, ! (! (true))))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
            {
             subgroupAll(true);
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0)), (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0))) | (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0)))))))), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))) || false));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y)))) || false))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0), mat2x3(mat2x3(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0))))), clamp(vec2(_GLF_IDENTITY(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0), mat2x3(mat2x3(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0))))), vec2(_GLF_IDENTITY(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0), mat2x3(mat2x3(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0), mat2x3(mat2x3(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0))))), min(vec2(_GLF_IDENTITY(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0), mat2x3(mat2x3(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0))))), vec2(_GLF_IDENTITY(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0), mat2x3(mat2x3(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 1.0, 0.0, sqrt(1.0), 1.0))))))))))).y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), bool(bool(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4(injectionSwitch, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4(injectionSwitch, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0))), injectionSwitch, injectionSwitch)).y))))))) || false)))))) && true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
              barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, sin(0.0), 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(_GLF_IDENTITY(normalize(1.0), (true ? normalize(1.0) : _GLF_FUZZED(-92.51)))))), length(normalize(1.0))))), 1.0))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, sin(0.0), 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(_GLF_IDENTITY(normalize(1.0), (true ? normalize(1.0) : _GLF_FUZZED(-92.51)))))), length(normalize(1.0))))), 1.0))).y) && true))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(-50159, 76791, -57055, -76695)[2]) : 0))) - 0)], float(mat2x4((injectionSwitch)[0], 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(96.55), _GLF_FUZZED(-70.99)), bvec2(false, false))), vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, 0.0, round(_GLF_IDENTITY(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0)))), (_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))) - 0.0), _GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0))))))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0)))), (_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))) - 0.0), _GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0)))), (_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))) - 0.0), _GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0)))), (_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))) - 0.0), _GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-552.581)), bool(false))), length(vec3(0.0, 0.0, 0.0))), max(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-552.581)), bool(false))), length(vec3(0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-552.581)), bool(false))), length(vec3(0.0, 0.0, 0.0))))))))), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0)))), (_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))) - 0.0), _GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0)))), length(normalize(1.0))))))))), 1.0))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, sin(0.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, round(_GLF_IDENTITY(length(normalize(1.0)), clamp(length(normalize(1.0)), _GLF_IDENTITY(length(_GLF_IDENTITY(normalize(1.0), 0.0 + (_GLF_IDENTITY(normalize(1.0), (false ? _GLF_FUZZED(-2.7) : _GLF_IDENTITY(normalize(1.0), float(mat3(normalize(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))))), min(length(normalize(1.0)), _GLF_IDENTITY(length(normalize(1.0)), (length(normalize(1.0))) / 1.0))), length(normalize(1.0))))), 1.0))).y))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = (0 & 65442); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}
