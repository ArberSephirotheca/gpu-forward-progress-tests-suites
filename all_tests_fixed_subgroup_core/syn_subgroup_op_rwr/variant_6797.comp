#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 uvec3 _f0;
 bvec3 _f1;
 mat3x2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 vec3 _f1;
 bool _f2;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat2 _f3;
 uvec3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 vec2 _f1;
 ivec2 _f2;
 bool _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 bvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 vec2 _f1;
 mat2x4 _f2;
 uvec3 _f3;
 vec2 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 uint _f1;
 uvec2 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 bvec3 _f1;
 vec2 _f2;
 int _f3;
 uvec2 _f4;
 bvec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 mat3 _f1;
 uvec3 _f2;
 ivec3 _f3;
 mat4x2 _f4;
 uint _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_3 _f0;
 mat2x4 _f1;
 _GLF_struct_7 _f2;
 uint workgroup_base;
 mat2 _f3;
 ivec3 _f4;
 _GLF_struct_11 _f5;
 vec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, false || (false)), false)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false, false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), true, true, false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)), false)))) && true), false, false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, 0 | (0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ (1 ^ 0), clamp(_GLF_IDENTITY(1 ^ (1 ^ 0), (1 ^ (1 ^ 0)) | (1 ^ (1 ^ 0))), _GLF_IDENTITY(1 ^ (1 ^ 0), (1 ^ (1 ^ 0)) / 1), 1 ^ (1 ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)) * (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u)))), (1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec3(gl_NumWorkGroups.x, 1u, 1u))))) ^ 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec4(_injected_loop_counter < 1, true, true, true)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true))), false || (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) && true)))))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))))))), bool(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))))))), false, true))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (77693 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, min(2, 2))), int(2), int(_GLF_IDENTITY(2, ~ (~ (2))))))) / 1)) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), int(ivec2(int(2), 1))), int(2))), int(2))), int(2), int(2))))), int(_GLF_IDENTITY(2, (2) | (2)))))), _GLF_IDENTITY(int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(1, 1 * (1)), 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)))))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))))), min(int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(int(int(0)), (int(int(0))) >> 0))), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2))), _GLF_IDENTITY(int(2), (0 | 0) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) | 0))), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))))), int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))) * 1)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))))))))), ((_GLF_IDENTITY(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))), _GLF_IDENTITY(int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), _GLF_IDENTITY(min(int(2), int(2)), (min(int(2), int(2))) - 0)), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))))), min(int(_GLF_IDENTITY(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), int(ivec4(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), 1, 1, 0))))))))), 0 ^ (int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), int(ivec4(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), 1, 1, 0)))))))))))), int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), max(true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), _GLF_IDENTITY(true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), 0 ^ (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163)))))))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2))))))))))) << 0)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(_GLF_IDENTITY(2, 0 ^ (2))), int(2))))), true && (_injected_loop_counter != (_GLF_IDENTITY((((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) / 1)), max(~ (_GLF_IDENTITY(1, (1) / 1)), ~ (_GLF_IDENTITY(1, (1) / 1)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, min(2, 2))), int(2), int(_GLF_IDENTITY(2, ~ (~ (2))))))) / 1)) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), int(ivec2(int(2), 1))), int(2))), int(2))), int(2), int(2))))), int(_GLF_IDENTITY(2, (2) | (2)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(1, 1 * (1)), 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0), clamp(ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0), ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0), ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0))))) | (int(2))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2), int(2))))), int(2))))), (int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(1, 1 * (1)), 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0), clamp(ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0), ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0), ivec3((_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) >> 0)), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), (int(ivec4(0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))) >> 0))) >> 0))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0))))) | (int(2))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2), int(2))))), int(2)))))) << (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))))), min(int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(int(int(0)), (int(int(0))) >> 0))), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(15829) : 2))) | 0)))), _GLF_IDENTITY(int(2), (0 | 0) ^ (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) << 0), int(2)))) | 0))), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(2), max(int(2), int(2))), 0, 0, 1)), (int(ivec4(_GLF_IDENTITY(int(2), max(int(2), int(2))), 0, 0, 1))) | 0)))))), int(2)))))), int(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), 0 | (int(0))), int(0))), (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))) * 1)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))))))))), ((_GLF_IDENTITY(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)))), _GLF_IDENTITY(int(int(~ ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), _GLF_IDENTITY(min(int(2), int(2)), (min(int(2), int(2))) - 0)), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), _GLF_IDENTITY(min(int(2), int(2)), (min(int(2), int(2))) - 0)), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2)), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163)))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), _GLF_IDENTITY(min(int(2), int(2)), (min(int(2), int(2))) - 0)), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2))) ^ 0)) / 1))))), min(int(_GLF_IDENTITY(int(~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(1, (1) >> 0), 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(65163, 65163)))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), int(ivec4(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(_GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, max(2, 2)), 0, 1)))), int(2)))), 1, 1, 0))))))))), 0 ^ (int(~ ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163))), ~ (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 1, 1, 1))))), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(65163))))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), (0 << _GLF_IDENTITY(int(1), int(1))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))) : _GLF_FUZZED(_injected_loop_counter)))))) | (int(2))), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2), int(2))))), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), int(ivec4(~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))), 1, 1, 0)))))))))))), int(int(~ (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))) ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), max(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(-63362) : _GLF_IDENTITY(int(0), int(0))))) << 0) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), min(_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), (_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163)))) >> 0))), _GLF_IDENTITY(true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (int(0)) * 1), int(0)))) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), 0 ^ (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163)))))))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2))), 0 ^ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, false))) ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), max(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(-63362) : _GLF_IDENTITY(int(0), int(0))))) << 0) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), min(_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), (_GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163)))) >> 0))), _GLF_IDENTITY(true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (int(0)) * 1), int(0)))) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163))), 0 ^ (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_GLF_IDENTITY(65163, min(_GLF_IDENTITY(65163, clamp(65163, 65163, 65163)), 65163)))))))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))), int(2))))))))))))) << 0)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(_GLF_IDENTITY(2, 0 ^ (2))), int(2)))))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_3(_GLF_struct_0(_GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(1.0))), mat3(1.0), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (false ? _GLF_FUZZED(uvec3(uvec2(132330u, 78128u), workgroup_size)) : uvec3(1u)))) | (uvec3(1u))), ivec3(1), mat4x2(1.0), 1u, mat2x3(1.0)), _GLF_struct_1(mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true))), bvec3(bvec4(bvec3(true), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true)))))))))))), vec2(1.0), 1, uvec2(1u), bvec4(true), true), _GLF_struct_2(mat3x4(1.0))), mat2x4(1.0), _GLF_struct_7(_GLF_struct_4(bvec4(true), vec2(1.0), mat2x4(1.0), uvec3(1u), _GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))) - 0.0)), min(vec2(1.0), vec2(1.0))), vec2(1.0))), _GLF_IDENTITY(vec2(1.0), vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0)) + (vec2(1.0))))), mat3(1.0)), 1u, uvec2(1u), _GLF_struct_5(mat2x4(1.0), bvec4(true), mat2x3(1.0)), _GLF_struct_6(mat4x2(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (vec2(1.0)) - vec2(0.0, 0.0)), ivec2(1), true, bvec3(true))), workgroup_size * workgroup_id, _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (mat2(1.0)) / _GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 1.0, 1.0))))), ivec3(1), _GLF_struct_11(mat2x3(1.0), _GLF_struct_8(ivec3(1), uvec2(1u), ivec2(1), mat2(1.0), uvec3(_GLF_IDENTITY(1u, (1u) >> 0u)), mat2(1.0)), _GLF_struct_9(mat4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.5) : 1.0)), (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(4.9))), 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))))), vec3(1.0), true), _GLF_struct_10(uvec3(1u), bvec3(true), mat3x2(1.0), mat2x3(1.0))), vec2(1.0));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY(true, (true) && true))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, clamp((injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0))) < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(3.9, 495.542).s)), vec2(_GLF_FUZZED(-57.37), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(-9.7, 687.218)))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_12.workgroup_base, (_GLF_struct_replacement_12.workgroup_base) << 0u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), clamp(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size)))))), 0u | (subgroup_size), 0u | (subgroup_size)))), uint(_GLF_IDENTITY(uvec2(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), clamp(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id))))))), ~ (~ _GLF_IDENTITY((0u | (subgroup_size)), ~ (_GLF_IDENTITY(~ ((0u | (subgroup_size))), max(~ ((0u | (subgroup_size))), ~ ((0u | (subgroup_size))))))))))), 0u | (subgroup_size), 0u | _GLF_IDENTITY((subgroup_size), clamp(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size), (subgroup_size)))))), ((((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, _GLF_IDENTITY(uint(uvec3(4u, 0u, 0u)), min(uint(uvec3(4u, 0u, 0u)), uint(uvec3(4u, 0u, 0u))))), 4u, 4u)))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), clamp(_GLF_IDENTITY(0u | _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))))), _GLF_IDENTITY((0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))), (true ? _GLF_IDENTITY((0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))), 0u | ((0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size))))))) : _GLF_FUZZED(workgroup_id)))), 0u | (subgroup_size), 0u | (subgroup_size)))), (_GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)), clamp((((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), ~ (~ (uvec2(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), clamp(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size)))))), 0u | (subgroup_size), 0u | (subgroup_size)))), ((((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))), (_GLF_IDENTITY(uvec2(0u, 0u), max(uvec2(0u, 0u), uvec2(0u, 0u))) & uvec2(41535u, 41941u)) ^ ((_GLF_IDENTITY(uvec2(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), clamp(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size)))))), 0u | (subgroup_size), 0u | (subgroup_size)))), ((((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), ~ (~ (uvec2(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), clamp(_GLF_IDENTITY(0u | (subgroup_size), (0u | (subgroup_size)) | (_GLF_IDENTITY(0u | (subgroup_size), ~ (~ (0u | (subgroup_size)))))), 0u | (subgroup_size), 0u | (subgroup_size)))), ((((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))))) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(106251u) : 0u)), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(106251u) : 0u))) >> (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u)))) | (subgroup_size)))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(workgroup_size))) * subgroup_size))), ((_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(106251u) : 0u)) | (subgroup_size)))), min(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(usubBorrow(subgroup_local_id, workgroup_size, num_workgroup)) : subgroup_id * subgroup_size)))), subgroup_id * subgroup_size)))) - 0u) >> _GLF_IDENTITY(0u, max(0u, 0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_12.workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED((99004u << 35122u)) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 0u, 1u)))), ~ (~ ((false ? _GLF_FUZZED((99004u << 35122u)) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 0u, 1u))))))))), (_GLF_struct_replacement_12.workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED((99004u << 35122u)) : _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) : _GLF_FUZZED(subgroup_local_id), ~ (~ (true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) : _GLF_FUZZED(subgroup_local_id)))))), 0u + (false ? _GLF_FUZZED((99004u << 35122u)) : _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) : _GLF_FUZZED(subgroup_local_id), ~ (~ (true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)) : _GLF_FUZZED(subgroup_local_id)))))))))))) - 0u);
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 0u | (virtual_gid))], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || false)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             return;
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, log(1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(978.248)), bool(false))), 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0))), 0.0, 0.0, 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(injectionSwitch, 1.0, log(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0))), 0.0, 0.0, 1.0, 1.0))))).y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(7072.0663)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), (_GLF_IDENTITY((false), true && ((false)))) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), (_GLF_IDENTITY((false), true && ((false)))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), (_GLF_IDENTITY((false), true && ((false)))) || false)))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) | (1))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(virtual_gid) : buf[virtual_gid])), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (false ? _GLF_FUZZED(16435) : _GLF_IDENTITY(64, (_GLF_IDENTITY(64, max(64, 64))) ^ (0 ^ 0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(16435), min(int(16435), _GLF_IDENTITY(int(16435), 0 ^ (int(16435)))))))) : 64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(16435), min(int(16435), _GLF_IDENTITY(int(16435), 0 ^ (int(16435)))))))) : 64, 0 ^ (false ? _GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(16435), min(int(16435), _GLF_IDENTITY(int(16435), 0 ^ (int(16435)))))))) : 64))) | 0))) : _GLF_FUZZED(21341)), min((true ? _GLF_IDENTITY(64, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(_GLF_IDENTITY(16435, (_GLF_IDENTITY(16435, (16435) ^ 0)) | (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(16435), _GLF_IDENTITY(int(_GLF_IDENTITY(16435, (16435) >> 0)), 0 ^ (int(16435)))))))), min(_GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(_GLF_IDENTITY(16435, (_GLF_IDENTITY(16435, (16435) ^ 0)) | (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(16435), _GLF_IDENTITY(int(_GLF_IDENTITY(16435, (16435) >> 0)), 0 ^ (int(16435)))))))), _GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(_GLF_IDENTITY(16435, (_GLF_IDENTITY(16435, (16435) ^ 0)) | (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(16435), _GLF_IDENTITY(int(_GLF_IDENTITY(16435, (16435) >> 0)), 0 ^ (int(16435)))))))))) : 64)) : _GLF_FUZZED(_GLF_IDENTITY(21341, (21341) >> 0))), (true ? _GLF_IDENTITY(64, (false ? _GLF_FUZZED(_GLF_IDENTITY(16435, int(_GLF_IDENTITY(int(16435), min(int(16435), _GLF_IDENTITY(int(16435), 0 ^ (int(16435)))))))) : 64)) : _GLF_FUZZED(21341))))), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 ^ 0))); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) * 1)))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))))) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), max(~ (0), ~ (0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))) | 0)), ~ (~ ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))) | 0)))))) ^ (0 & 89729)))), int(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))) | _GLF_IDENTITY(0, int(int(0))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))) | 0)), ~ (~ ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))) | 0)))))) ^ (0 & 89729)))), int(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), 0)))))) >> (0 << _GLF_IDENTITY(int(6), int(6)))), 1, 1)) == read_2) + 1, 4, _GLF_IDENTITY(64, 0 ^ (64)), 4);
      }
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9561.7592)), bool(false))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4.9)), bool(false))), injectionSwitch.y))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y)) && _GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))) && true))))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true, true, false), false)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec3(true, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true, true, false), false)), false)))))))), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-83.80), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), bvec2(true, false))))).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))) && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))) && _GLF_IDENTITY(true, bool(bvec2(true, false)))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) ^ 0u, ~ (~ ((next_virtual_gid) ^ 0u)))), (true ? _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u) : _GLF_FUZZED(40573u)))], _GLF_IDENTITY(uint(read_1 + 1 == read_2), (_GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(-83377), int(int(_GLF_IDENTITY(_GLF_FUZZED(-83377), min(_GLF_FUZZED(-83377), _GLF_FUZZED(-83377)))))) : _GLF_IDENTITY(1, (1) | 0)) >> 0), false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-23105)))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0))), (false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) | 0)) ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))))) == read_2), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u) ^ (_GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466)))), min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-83377), (_GLF_IDENTITY(_GLF_FUZZED(-83377), max(_GLF_IDENTITY(_GLF_FUZZED(-83377), (_GLF_FUZZED(-83377)) | 0), _GLF_FUZZED(-83377)))) | (_GLF_FUZZED(-83377))) : _GLF_IDENTITY(1, (1) | 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(-83377), (_GLF_IDENTITY(_GLF_FUZZED(-83377), max(_GLF_IDENTITY(_GLF_FUZZED(-83377), (_GLF_FUZZED(-83377)) | 0), _GLF_FUZZED(-83377)))) | (_GLF_FUZZED(-83377))) : _GLF_IDENTITY(1, (1) | 0)) | 0), false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0))))))) == read_2), 0u + (uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466)))), min(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466)))), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466))))))) / 1)) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(-5810.5466)))))), min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-83377), (_GLF_FUZZED(-83377)) | (_GLF_FUZZED(-83377))) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (1) | 0), max(false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0), false ? _GLF_FUZZED(-83377) : _GLF_IDENTITY(1, (1) | 0))))))) == read_2)))))) | 0u) + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1)), 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(7475)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (_GLF_IDENTITY(true, ! (! (true))) ? 64 : _GLF_FUZZED(7475))))) - (1 ^ 1))) - 0, max((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0, (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(57425, (57425) << 0)) : _GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(7475)), clamp((true ? 64 : _GLF_FUZZED(7475)), (true ? 64 : _GLF_FUZZED(7475)), _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(7475)), int(_GLF_IDENTITY(int((true ? 64 : _GLF_FUZZED(7475))), clamp(int((true ? 64 : _GLF_FUZZED(7475))), int((true ? 64 : _GLF_FUZZED(7475))), int((true ? 64 : _GLF_FUZZED(7475))))))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0, max((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0, (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0))))), (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(7475)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (64)))) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0, max((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64) ^ 0, ((64) ^ 0) | 0)), _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(7475)), _GLF_IDENTITY(int(ivec2((true ? 64 : _GLF_FUZZED(7475)), 1)), min(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((true ? 64 : _GLF_FUZZED(7475)), max((true ? 64 : _GLF_FUZZED(7475)), (true ? 64 : _GLF_FUZZED(7475)))), 1)), max(int(ivec2((true ? 64 : _GLF_FUZZED(7475)), 1)), int(ivec2((true ? 64 : _GLF_FUZZED(7475)), 1)))), int(ivec2((true ? 64 : _GLF_FUZZED(7475)), 1)))))))) - 0, (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0)))))) | (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(7475)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0, max((~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(7475), int(ivec4(true ? 64 : _GLF_FUZZED(7475), 0, 0, 1))))))) - 0, (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | (0))))), (true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(7475), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(7475), clamp(_GLF_FUZZED(7475), _GLF_FUZZED(7475), _GLF_FUZZED(7475)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(7475), clamp(_GLF_FUZZED(7475), _GLF_FUZZED(7475), _GLF_FUZZED(7475))))) - 0))))))) - 0))))))))), _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), ((7475)) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))), (true ? 64 : _GLF_FUZZED(7475))))) - 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), ((7475)) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), (_GLF_IDENTITY((64), max((64), (64)))) | ((64))) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), ((7475)) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), (_GLF_IDENTITY((64), max((64), (64)))) | ((64))) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0)))), int(int((_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), ((7475)) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), (_GLF_IDENTITY((64), max((64), (64)))) | ((64))) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0)))))))) << (-40739 & 0)), _GLF_IDENTITY(((_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), ((7475)) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0))))) - 0, 0 + (((_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), _GLF_IDENTITY(((7475)), (false ? _GLF_FUZZED(49959) : ((7475)))) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0))), _GLF_IDENTITY(1, (1) << 0) * (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), ((7475)) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0))), 0 | (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_GLF_IDENTITY(7475, ~ (~ (_GLF_IDENTITY(7475, (7475) | _GLF_IDENTITY((7475), _GLF_IDENTITY(((7475)), (((7475))) - 0) >> 0))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), (true ? 64 : _GLF_FUZZED(7475))))) - 0))))))))) - 0)))) * 1) / 1), 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         subgroupAll(true);
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true)))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          break;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6.5) : 1.0)), _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), tan(0.0), 1.0, abs(0.0)))))), 0.0, 1.0)))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(69.68)), bvec2(true, false))).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
