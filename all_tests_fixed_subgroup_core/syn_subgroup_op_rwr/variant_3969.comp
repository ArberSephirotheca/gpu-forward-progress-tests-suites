#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 uvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 mat4x3 _f1;
 mat3 _f2;
 vec3 _f3;
 bool _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 int _f2;
 bvec2 _f3;
 _GLF_struct_2 _f4;
 uint subgroup_size;
 mat3x2 _f5;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 bvec2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(ivec3(1), _GLF_struct_3(_GLF_struct_0(ivec4(1)), _GLF_struct_1(mat4(1.0), mat4x2(1.0), uvec4(1u), mat4x3(1.0)), 1, bvec2(true), _GLF_struct_2(mat4x3(1.0), mat4x3(1.0), mat3(1.0), vec3(1.0), true, uvec3(1u)), gl_SubgroupSize, mat3x2(1.0)), _GLF_struct_4(uvec3(1u), vec2(1.0)), bvec2(true));
 GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.z = _GLF_struct_replacement_5._f1.subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.x = num_workgroup;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.w + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.z + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y = virtual_gid;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.w + GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.z + ((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.z);
 uint read_1 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], 4, 64, 0);
 GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.y = read_1;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.y + 1), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], 4, 64, 0);
 if(subgroup_local_id + 1 < GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.z)
  {
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.y + 1 == read_2) + 1, 4, 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     subgroupAll(false);
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_13_1_1_6_2_1_13_3_1_14num_workgroupread_1subgroup_sizeworkgroup_base.y + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(true);
  }
}
