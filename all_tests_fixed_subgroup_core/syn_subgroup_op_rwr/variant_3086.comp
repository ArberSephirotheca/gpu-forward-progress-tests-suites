#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 bvec4 _f0;
 bool _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_19 {
 ivec2 _f0;
} ;

struct _GLF_struct_18 {
 uint next_virtual_gid;
 float _f0;
 int _f1;
 mat3x2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_17 {
 int _f0;
 vec2 _f1;
 vec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_17 _f0;
 uvec3 _f1;
 mat4 _f2;
 _GLF_struct_18 _f3;
 mat3 _f4;
 _GLF_struct_19 _f5;
 _GLF_struct_20 _f6;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
} ;

struct _GLF_struct_22 {
 _GLF_struct_16 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_12 {
 bool _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_11 {
 bool _f0;
 vec3 _f1;
} ;

struct _GLF_struct_10 {
 mat4x3 _f0;
 bvec4 _f1;
 vec4 _f2;
 uvec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 vec2 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 mat2 _f1;
 bvec4 _f2;
 uint _f3;
 uvec2 _f4;
 uvec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_9 {
 bool _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_9 _f0;
 mat2 _f1;
 uint virtual_gid;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 uvec2 _f1;
 mat2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat2x3 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 bool _f1;
 mat4x2 _f2;
 int _f3;
 float _f4;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 uvec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 mat4 _f4;
 vec4 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 uint num_workgroup;
 bvec2 _f1;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 uint subgroup_size;
 float _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter)))) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            break;
           break;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec4(float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 0.0)), mix(float(float(vec4(float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 0.0))), float(_GLF_FUZZED(-1.0)), bool(false)))))))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(470.492)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)) : _GLF_FUZZED(-948.158)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), false, true, true)))), false, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))), true)), false, false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.1)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, 0.0))) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), false, true, true)))), false, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))), true)), false, false)))))) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), false, true, true)))), false, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))), true)), false, false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.1)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, 0.0))) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), false, true, true)))), false, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))), true)), false, false)))))) && true)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(90.39)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.7)), bool(false)))), bool(true))), 1.0, 0.0))) > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) || false), false))), false, true, true)))), false, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))), true)), false, false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.1)), float(injectionSwitch.x), bool(true))), 1.0, 1.0, 0.0))) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), false, true, true)))), false, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))), true)), false, false)))))) && true))) || false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch), vec2(mat2x4(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), cos(0.0), 0.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         return;
        }
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)), gl_SubgroupSize, 1.0);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, false))))))), false, false)))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true)), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))) || false)))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (-11988 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-205.739), _GLF_FUZZED(30.57)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, sqrt(1.0), 0.0, 0.0, cos(0.0), abs(1.0)))))).y))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           do
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            continue;
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_6(_GLF_struct_1(bvec2(true), uvec2(1u), uvec4(1u)), _GLF_struct_2(bvec3(true), true, mat4x2(1.0), 1, 1.0), _GLF_struct_3(mat3(1.0), mat2x3(1.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 1.0 : _GLF_FUZZED(-19.80))))), _GLF_struct_4(mat4x3(1.0), uvec2(1u), mat2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(-2628.3479)))), mat3(1.0)), mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0)), vec4(_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, (1.0) + abs(0.0)), 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-68.79)), bool(false))), 1.0, 1.0)), 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0))))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat2(0.0, 0.0, 0.0, 0.0)))))), _GLF_struct_5(mat4x2(1.0), mat4x3(1.0), uvec2(1u), mat2(1.0))), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u) + (gl_NumWorkGroups))))) - uvec3(0u, 0u, 0u)).x, bvec2(true));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x, 0u | (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_9(true, _GLF_struct_8(bvec4(true), mat2(1.0), bvec4(true), 1u, uvec2(1u), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) >> 0u)))), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) >> 0u)))), ~ (~ (uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) >> 0u))))))), uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY(0u, (0u) / 1u))))), uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) >> 0u)))))), uvec4(1u))), mat2(1.0), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_size, (_GLF_struct_replacement_0.subgroup_size) | (_GLF_struct_replacement_0.subgroup_size)), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * _GLF_struct_replacement_0.subgroup_size, uint(_GLF_IDENTITY(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * _GLF_struct_replacement_0.subgroup_size, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_struct_replacement_0.subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u))) * _GLF_struct_replacement_0.subgroup_size) | 0u), 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 1u, 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 1u, 0u)))))), 0u), ~ (~ (uvec4(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_size, max(_GLF_struct_replacement_0.subgroup_size, _GLF_struct_replacement_0.subgroup_size)), 1u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, _GLF_IDENTITY(0u, (0u) / 1u)))))))) ^ uvec4(0u, 0u, 0u, 0u))))) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), uint(5u))), (_GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))), ((0u << _GLF_IDENTITY(uint(5u), uint(5u)))) - 0u), max(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))), ~ (~ (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))), ~ (~ ((0u << _GLF_IDENTITY(uint(5u), uint(5u))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) - 0u))), (_GLF_IDENTITY(uint(5u), uint(5u))) / 1u))))) * 1u)) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_struct_13(ivec4(1), vec2(_GLF_IDENTITY(1.0, (1.0) + _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_struct_10(mat4x3(1.0), bvec4(true), vec4(1.0), uvec4(1u), ivec2(1)), _GLF_struct_11(true, vec3(1.0)), _GLF_struct_12(true, ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(96283) : 1), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(96283) : 1), ((false ? _GLF_FUZZED(96283) : 1)) << 0), (false ? _GLF_FUZZED(96283) : 1), (false ? _GLF_FUZZED(96283) : 1))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_16(_GLF_struct_15(mat4x3(1.0), ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18882) : 1))), mat3x2(1.0), mat4x3(1.0), bvec2(true))), ivec3(1), mat3x4(1.0), ivec2(1), _GLF_struct_21(_GLF_struct_17(1, vec2(1.0), vec3(1.0), mat2x4(1.0)), uvec3(1u), mat4(1.0), _GLF_struct_18(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((workgroup_base) * ((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), min(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), _GLF_IDENTITY(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(uint(5u), uint(5u))) - (0u | 0u)))) >> 0u)) + subgroup_id * _GLF_struct_replacement_0.subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((workgroup_base) * ((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), min(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), _GLF_IDENTITY(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(uint(5u), uint(5u))) - (0u | 0u)))) >> 0u)) + subgroup_id * _GLF_struct_replacement_0.subgroup_size, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((workgroup_base) * ((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), min(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), _GLF_IDENTITY(uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec3(uint(5u), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(uint(5u), uint(5u))) - (0u | 0u)))) >> 0u)) + subgroup_id * _GLF_struct_replacement_0.subgroup_size) << 0u)) << 0u) + ((subgroup_local_id + 1) % _GLF_struct_replacement_0.subgroup_size), 1.0, 1, mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), (_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), ((1.0)) - log(1.0)))) - _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), bvec4(true)), mat3(1.0), _GLF_struct_19(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1)))), _GLF_struct_20(bvec4(true), true, mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(782.368) : 1.0), float(mat2x4((false ? _GLF_FUZZED(782.368) : 1.0), 0.0, 0.0, abs(0.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)))), 1.0))) / 1.0)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_14.virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), clamp(_GLF_IDENTITY(4, max(4, 4)), 4, 4)), 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     atomicStore(buf[_GLF_struct_replacement_22._f4._f3.next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.41), _GLF_FUZZED(5472.7976)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bool(true)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)), false)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), false, true, false)))) && true), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))) && true), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), true)))), false, true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((9.2 + 798.436)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)))), true, false)))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.41), _GLF_FUZZED(5472.7976)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bool(true)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)), false)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), false, true, false)))) && true), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))) && true), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), true)))), false, true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((9.2 + 798.436)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)))), true, false)))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.41), _GLF_FUZZED(5472.7976)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bool(true)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), bvec3(bvec4(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false), true)))), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(true, (true) && true)), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)), false)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), false, true, false)))) && true), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))) && true), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))), false))))), true, false))), false), true)))), false, true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((9.2 + 798.436)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y), true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(! (injectionSwitch.x > injectionSwitch.y), true), false)), true))))), false, false))), true)))), true, false)))), false)), true, true))))), bool(bvec2(bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))), true)), false)))))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_14.virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), max(vec2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), vec2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(subgroup_local_id + 1 < _GLF_struct_replacement_0.subgroup_size)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           return;
          }
         atomicStore(buf[_GLF_struct_replacement_22._f4._f3.next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(801.210) : injectionSwitch.x)) > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                break;
               for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), 1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             else
              {
               subgroupAll(false);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) || false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                    {
                     for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(0, (0) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x > injectionSwitch.y))))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 else
                  {
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 + (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)) << (0 | 0)))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                        {
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || false), false))))))) && true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | (5))))) >> _GLF_IDENTITY(int(5), int(5))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         continue;
                        }
                       break;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false) && (false))))))
                  return;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         atomicStore(buf[_GLF_struct_replacement_22._f4._f3.next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4) / 1, ((4) / 1) - 0)));
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           subgroupAll(true);
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, sqrt(1.0), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               do
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
                                  return;
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                              continue;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 return;
                                }
                               return;
                              }
                            }
                          }
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)), bool(_GLF_IDENTITY(bool((true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))), true && (bool((true) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), float(mat4(_GLF_IDENTITY(mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), min(mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))))), exp(0.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.6)), float(1.0), bool(true))))), 0.0, 1.0, 1.0)))) - 0.0)) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           return;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), 0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               break;
                              }
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(false) & 0)); _injected_loop_counter --)
                          {
                           return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           break;
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false)), (_GLF_IDENTITY(false, false || (false))) || false)));
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
              break;
             return;
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               continue;
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, false))))))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, false))))))), false, false, false)), (_GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, false))))))), false, false, false)), ! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), true), false, false))))))), false, false, false)))))) || false))));
                }
               if(_GLF_DEAD(false))
                break;
               continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(96838) : int(4)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0 * (injectionSwitch.y), clamp(1.0 * (injectionSwitch.y), _GLF_IDENTITY(1.0 * (injectionSwitch.y), 1.0 * (_GLF_IDENTITY(1.0 * (injectionSwitch.y), mix(float(1.0 * (injectionSwitch.y)), float(_GLF_FUZZED(-15.90)), bool(false))))), 1.0 * _GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), _GLF_IDENTITY(float(_GLF_FUZZED(56.72)), float(mat4x3(float(_GLF_FUZZED(56.72)), 1.0, exp(0.0), 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), false || (bool(bvec4(_GLF_DEAD(false), false, false, false)))))) && true))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), true)))))))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
}
