#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-99.60)), float(injectionSwitch.y), bool(true))))) && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2((true), true))))))) && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(((~ uvec3(169125u, 136625u, 101810u)) >> mix(subgroup_size, subgroup_local_id, false))) : gl_NumWorkGroups)), ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), clamp(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((gl_NumWorkGroups), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), _GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3((gl_NumWorkGroups)))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))) ^ ((gl_NumWorkGroups)))))), clamp(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) / uvec3(1u, 1u, 1u))))))), ~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), ~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))) ^ ((gl_NumWorkGroups))))))), (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) << uvec3(0u, 0u, 0u))), uvec3(uvec4((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) << uvec3(0u, 0u, 0u))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), 0u), (_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), 0u), (false ? _GLF_FUZZED(uvec4(172620u, 23520u, 133303u, 79783u)) : _GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups))))), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u))), 0u), (_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups))))), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u))), 0u), clamp(uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups))))), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u))), 0u), uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups))))), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u))), 0u), uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups))))), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))) | uvec3(0u, 0u, 0u))), 0u)))) | uvec4(0u, 0u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u))), uvec3(uvec4(uvec3(_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), 0u), (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)) | (uvec4(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), 0u))), (false ? _GLF_FUZZED(uvec4(172620u, 23520u, 133303u, 79783u)) : uvec4(~ (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups)))))), 0u)))) << uvec4(0u, 0u, 0u, 0u))), 1u)))))) * uvec3(1u, 1u, 1u))))), min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ _GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), (true ? (gl_NumWorkGroups) : _GLF_FUZZED((uvec3(162868u, 130684u, 54525u) & subgroup_size))))))), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups)))))))))) >> uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (_GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), min(_GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) + uvec3(0u, 0u, 0u)), min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), min(~ (~ (gl_NumWorkGroups)), ~ (~ (gl_NumWorkGroups)))))), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ _GLF_IDENTITY((gl_NumWorkGroups), max((gl_NumWorkGroups), (gl_NumWorkGroups))), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups))))), (_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups)))))) >> uvec3(0u, 0u, 0u)))))), uvec3(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))), uvec3(uvec3(_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))))), ~ (~ ((_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups))))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), (min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_NumWorkGroups), _GLF_IDENTITY(min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups)), _GLF_IDENTITY((min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))), uvec3(0u, 0u, 0u) + ((min(~ (gl_NumWorkGroups), ~ (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(~ (gl_NumWorkGroups), min(~ (gl_NumWorkGroups), _GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) + (~ (gl_NumWorkGroups)))))))))) + uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u)))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true))))), (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) + 0.0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-792.411), min(_GLF_FUZZED(-792.411), _GLF_IDENTITY(_GLF_FUZZED(-792.411), clamp(_GLF_FUZZED(-792.411), _GLF_FUZZED(-792.411), _GLF_FUZZED(-792.411)))))), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), false, false), true)))))) && true) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), false || ((_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))) && true) || (false)), (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (0u | 0u) | (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) : _GLF_FUZZED(num_workgroup))))))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(8493u))), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(27.09) : injectionSwitch.x))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), (false ? _GLF_FUZZED(20953) : int(1))), (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(20953) : int(1)))) | (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(20953) : int(1))))), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), clamp(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), 0.0 + (_GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), clamp(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))))))), _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), clamp(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), max(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false)))))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false))))))))))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false || (false))))))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))) || (false))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) && true))))) > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.3)), float(1.0), bool(true))))) - 0.0) > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-115.926)), float(injectionSwitch.y), bool(true)))))), false, _GLF_IDENTITY(true, true && (true)), false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), min((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), mat2(1.0) * ((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(1.9), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(-3.1)), bvec2(true, false)))))), injectionSwitch)).y))) || _GLF_IDENTITY(false, (false) || false))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) * 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7276.7571)), bool(false))) < injectionSwitch.y))))))), bool(bool(true))), true), _GLF_IDENTITY(false, true && (false)), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true), false, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true), false, true)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (! (true)) && true))), true), false, true))))))))), false))), false, true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true && (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), false, true)), (bool(bvec3(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), false, true))) || false))), true), false, true))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))))))))), _GLF_IDENTITY(bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), false, false, true)), bool(bool(bool(bvec4(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), true), false, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), false)))))))))))))))), false, _GLF_IDENTITY(false, true && (false)), true)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))), bool(bool(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(true))), true), false, true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))), false))))), true))))), (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8427.6901)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)), false, false, true)), bool(bool(bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), false, false, true))))))))) || false)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7276.7571)), bool(false))) < injectionSwitch.y))))))), bool(bool(true))), true), _GLF_IDENTITY(false, true && (false)), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true), false, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true), false, true)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (! (true)) && true))), true), false, true))))))))), false))), false, true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true && (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), false, true)), (bool(bvec3(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), false, true))) || false))), true), false, true))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))))))))), _GLF_IDENTITY(bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), false, false, true)), bool(bool(bool(bvec4(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), true), false, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), false)))))))))))))))), false, _GLF_IDENTITY(false, true && (false)), true)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))), bool(bool(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(true))), true), false, true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))), false))))), true))))), (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8427.6901)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)), false, false, true)), bool(bool(bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), false, false, true))))))))) || false)))) && true), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7276.7571)), bool(false))) < injectionSwitch.y))))))), bool(bool(true))), true), _GLF_IDENTITY(false, true && (false)), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true), false, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true), false, true)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (! (true)) && true))), true), false, true))))))))), false))), false, true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true && (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), false, true)), (bool(bvec3(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false)), false, true))) || false))), true), false, true))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))))))))), _GLF_IDENTITY(bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), false, false, true)), bool(bool(bool(bvec4(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), true), false, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false), true)))))), false, true)), false)))))))))))))))), false, _GLF_IDENTITY(false, true && (false)), true)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))))), bool(bool(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(true))), true), false, true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))), false))))), true))))), (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8427.6901)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)), false, false, true)), bool(bool(bool(bvec4(! (! (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true), false, true)))))), false, false, true))))))))) || false)))) && true), false, false))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), false || ((bool(false)))) || false)))));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, (false) && true)), true, false))))))), false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, false, true)))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_ONE(1.0, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false)), _GLF_IDENTITY((bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false))) || false, ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false))) || false, true && ((bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false))) || false))))))));
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), true, true, true))), (injectionSwitch.x < injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  barrier();
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 0u)))) ^ 0u)], 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) - 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(-25132), (_GLF_FUZZED(_GLF_IDENTITY(-25132, max(-25132, _GLF_IDENTITY(-25132, (-25132) / 1))))) << 0) : _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) | 0)))) | (0 ^ 0)) ^ (0)));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
    {
    }
   else
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid))), (min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid)))) | 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(next_virtual_gid, (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | (uint(7u))))) | (next_virtual_gid))))), (min(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))), (_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), (_GLF_FUZZED(read_1)) | (_GLF_FUZZED(_GLF_IDENTITY(read_1, clamp(read_1, read_1, _GLF_IDENTITY(read_1, clamp(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(subgroup_id) : read_1)), read_1, read_1))))))) : next_virtual_gid))) | 0u))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(min(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid)), (true ? _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid)) : _GLF_FUZZED(next_virtual_gid)))), max(min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid))), min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), 0u | (_GLF_FUZZED(read_1))) : next_virtual_gid))))), (min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), 0u | (_GLF_FUZZED(read_1))) : next_virtual_gid)))) | 0u)) | (_GLF_IDENTITY(min(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid))), (min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(read_1) : next_virtual_gid)))) | 0u))), _GLF_IDENTITY(min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(read_1), (_GLF_FUZZED(read_1)) >> 0u) : _GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(next_virtual_gid)))))), (min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(_GLF_IDENTITY(read_1, ~ (~ (read_1)))) : next_virtual_gid)))) | 0u)))), 1u, (0u ^ 1u), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(next_virtual_gid) : 0u))), uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY((uvec4(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> _GLF_IDENTITY(0u, 1u * (0u))), 1u, _GLF_IDENTITY((0u ^ 1u), min((_GLF_IDENTITY(0u ^ 1u, (true ? 0u ^ 1u : _GLF_FUZZED(atomicMax(workgroup_base, 184936u))))), (0u ^ 1u))), 0u)), (_GLF_IDENTITY((uvec4(next_virtual_gid, 1u, _GLF_IDENTITY((0u ^ 1u), (_GLF_IDENTITY((0u ^ 1u), (_GLF_IDENTITY((0u ^ 1u), ((0u ^ 1u)) | ((0u ^ _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) | 0u)) + (0u ^ 0u)), 0u)), ((uvec4(next_virtual_gid, 1u, (_GLF_IDENTITY(0u ^ 1u, (0u ^ 1u) | (0u ^ 1u))), 0u))) >> uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u)))) | uvec4(0u, 0u, 0u, 0u)))))], uint(_GLF_IDENTITY(read_1, (true ? read_1 : _GLF_FUZZED(num_workgroup))) + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(min(4, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4)))))) | (4))))), 0 ^ (_GLF_IDENTITY(min(4, 4), (min(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(4, 1, 1), (ivec3(4, 1, 1)) * ivec3(1, _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(int(1))), 1)), 1, 1))), 1)))))) | _GLF_IDENTITY((min(4, 4)), max((min(4, 4)), _GLF_IDENTITY((min(4, 4)), clamp((min(4, 4)), _GLF_IDENTITY((min(4, 4)), max((min(4, _GLF_IDENTITY(4, clamp(4, 4, 4)))), (min(4, 4)))), (min(4, 4)))))))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(uint(uvec3((subgroup_local_id), 1u, (((1u ^ 0u) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) - 0u), uint(6u))))), (_GLF_IDENTITY(uint(uvec3((subgroup_local_id), 1u, (((1u ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) | 0u)), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (uint(uvec3((subgroup_local_id), 1u, (((1u ^ 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) | 0u)), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u)))))))))) | (_GLF_IDENTITY(uint(uvec3((subgroup_local_id), 1u, (((1u ^ 0u) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) ^ 0u)), uint(6u))))), (true ? uint(uvec3((subgroup_local_id), 1u, (((1u ^ 0u) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), ~ (~ (_GLF_IDENTITY(uint(6u), uint(6u)))))))) : _GLF_FUZZED(workgroup_size))))))))) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) || false) && (_GLF_DEAD(false))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(11985 | -8747, clamp(_GLF_IDENTITY(11985 | -8747, (11985 | -8747) - 0), 11985 | -8747, _GLF_IDENTITY(11985 | -8747, (_GLF_IDENTITY(11985, ~ (~ (11985))) | -8747) << 0)))) & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, true)))))), false)))))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(read_1, read_1)), (_GLF_IDENTITY(read_1, max(read_1, read_1))) | (_GLF_IDENTITY(read_1, max(read_1, read_1)))) + 1 == read_2) + 1, _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(8064) : int(2))), int(2))), int(2)), _GLF_IDENTITY(int(ivec2(0 << _GLF_IDENTITY(int(2), int(2)), 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(ivec2(0 << _GLF_IDENTITY(int(2), int(2)), 0)), 0, 1, 0), ~ (~ (ivec4(int(ivec2(0 << _GLF_IDENTITY(int(2), int(2)), 0)), 0, 1, 0))))), (int(_GLF_IDENTITY(ivec4(int(ivec2(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0), 0)), 0, 1, 0), ~ (~ (_GLF_IDENTITY(ivec4(int(ivec2(0 << _GLF_IDENTITY(int(2), int(2)), 0)), 0, 1, 0), (ivec4(0, 0, 0, 0) >> _GLF_IDENTITY(ivec4(1), ivec4(1))) ^ (_GLF_IDENTITY(ivec4(int(ivec2(0 << _GLF_IDENTITY(int(2), int(2)), 0)), 0, 1, 0), (true ? ivec4(int(ivec2(0 << _GLF_IDENTITY(int(2), int(2)), 0)), 0, 1, 0) : _GLF_FUZZED(ivec4(47620, 75683, -8334, 89635))))))))))) - _GLF_IDENTITY(0, 0 ^ (0)))))) | (4)), (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), max(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-88526, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (-88526))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), _GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED((34486 | (-87551 >> 65139))))) : _GLF_FUZZED(-88526), _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), ~ (~ (true ? 4 : _GLF_FUZZED(-88526)))))), 0), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526))), 0)) - ivec2(0, 0), clamp(_GLF_IDENTITY((ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526))), 0)) - ivec2(0, 0), ((ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526))), 0)) - ivec2(0, 0)) | ((ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526))), 0)) - ivec2(0, 0))), (ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526))), 0)) - ivec2(0, 0), (ivec2(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), clamp(true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526), true ? 4 : _GLF_FUZZED(-88526))), 0)) - ivec2(0, 0)))))), _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(-88526), 0 + (_GLF_IDENTITY(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-88526), max(_GLF_FUZZED(-88526), _GLF_FUZZED(-88526))), int(int(true ? 4 : _GLF_FUZZED(-88526)))))))))))), 64, 4);
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) / 1.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.2)), float(injectionSwitch.y), bool(true)))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec3((! ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch))))).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) && true)))))))) && true)))))))), true, false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), 0 | (0 >> _GLF_IDENTITY(int(6), int(6))))), 0 + ((0 >> _GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, ~ (~ (0)))), 0, 1, 0))), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 0, 1), (ivec4(0, 0, 0, 1)) * ivec4(1, 1, 1, 1)))), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) >> 0), 0, 1, 0))), 0, int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(469.993)), bool(false))))))))) << _GLF_IDENTITY(int(8), int(8)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) / 1u) + 1, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, ~ (~ (_GLF_IDENTITY((4) - 0, ((4) - 0) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(44811) : _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) | (0))))))))));
   do
    {
     subgroupAll(true);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
     barrier();
    }
  }
}
