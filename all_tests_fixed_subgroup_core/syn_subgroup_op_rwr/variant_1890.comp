#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
      {
       do
        {
         _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_size) + 0u)) << 0u);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), _GLF_IDENTITY((bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true, _GLF_IDENTITY(bool(bool((bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true)), _GLF_IDENTITY(bool(bvec2(bool(bool((bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true)), true)), false || (bool(bvec2(bool(bool((bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true)), true)))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ~ (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7)))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))), true)))));
                  }
                 else
                  {
                  }
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))));
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(101822u) : workgroup_id)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, (_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, (0u & 172373u) ^ (_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, (workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w) / 1u)))) | (_GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, min(workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w, workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z = workgroup_base;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + subgroup_id * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x + subgroup_local_id;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y = virtual_gid;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, (false ? _GLF_FUZZED(uvec4(152863u, 96029u, _GLF_IDENTITY(116156u, uint(uvec3(_GLF_IDENTITY(116156u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(116156u, min(116156u, 116156u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 57101u)) : GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id)).z + subgroup_id * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0)) << 0))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), (0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))) * 1))) | 0)), (0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), (0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))) * 1))) | 0))) | 0))) % GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x);
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec4(int(5), 0, 0, ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | (2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(-11251))))) ^ (_GLF_IDENTITY(2, ~ (~ (2))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((~ -56597) & 0)); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mat2(36.02, -7716.1960, -7485.5131, -1430.8990)) : mat2(1.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(mat2(-1.1, -6.8, 7.5, 7.3)) : _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(36.02, -7716.1960, -7485.5131, _GLF_IDENTITY(-1430.8990, _GLF_IDENTITY(float(vec2(-1430.8990, 0.0)), float(mat4x3(float(vec2(-1430.8990, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))) : mat2(1.0)))), mat2(mat3((false ? _GLF_FUZZED(mat2(-1.1, -6.8, 7.5, 7.3)) : _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(36.02, -7716.1960, -7485.5131, _GLF_IDENTITY(-1430.8990, _GLF_IDENTITY(float(vec2(-1430.8990, 0.0)), float(mat4x3(float(vec2(-1430.8990, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))) : mat2(1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mat2(36.02, -7716.1960, -7485.5131, -1430.8990)) : mat2(1.0))), (false ? _GLF_FUZZED(mat2(-1.1, -6.8, 7.5, 7.3)) : _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(36.02, -7716.1960, -7485.5131, _GLF_IDENTITY(-1430.8990, _GLF_IDENTITY(float(vec2(-1430.8990, 0.0)), float(mat4x3(float(vec2(-1430.8990, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))) : mat2(1.0)))))) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)).y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
      }
    }
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(subgroup_local_id + 1 < GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, true))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), true))), false, true))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), mix(float(_GLF_FUZZED(224.588)), float((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), min((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, false || (true)))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)), (false ? _GLF_FUZZED(min(-37613, -62628)) : _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> 0)), ~ (~ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, int(_GLF_ONE(1.0, injectionSwitch.y)) * (3)))) - 0)), max((_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, int(_GLF_ONE(1.0, injectionSwitch.y)) * (3)))) - 0)), (_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, int(_GLF_ONE(1.0, injectionSwitch.y)) * (3)))) - 0)))) >> 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(3669) : int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + 1 == read_2) || false)), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, ! (! (read_1 + _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))) == read_2))), (_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, false, true, false)))) || false)), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(read_1, ~ (~ (read_1))))) + 1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -381.712))), bool(_GLF_IDENTITY(false, (false) || false)))))))) ^ (_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(read_1) : _GLF_IDENTITY(read_1, clamp(read_1, _GLF_IDENTITY(read_1, uint(uvec4(read_1, 1u, 1u, 0u))), read_1)))))))), (false ? _GLF_FUZZED(workgroup_size) : uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) + 1, 1u, (1u & 1u)), (uvec3(_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(read_1, ~ (~ (read_1)))), (false ? _GLF_FUZZED(workgroup_size) : uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(read_1, ~ (~ (read_1))))))) + 1, 1u, (1u & 1u))) * uvec3(1u, 1u, 1u)))) == read_2, (read_1 + 1 == read_2) || false)), uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec2(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), 0u))), (_GLF_IDENTITY(read_1 + 1, uint(uvec2(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, read_1 + 1, read_1 + 1)), 0u)))) | (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, _GLF_IDENTITY(read_1 + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (read_1 + 1)), read_1 + 1)), 0u)), (uint(uvec2(_GLF_IDENTITY(read_1 + 1, clamp(read_1 + 1, _GLF_IDENTITY(read_1 + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (read_1 + 1)), read_1 + 1)), 0u))) - 0u)))) == read_2) || false)), uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u) == read_2), bool(_GLF_IDENTITY(bool((read_1 + 1 == read_2)), _GLF_IDENTITY(true && (bool((_GLF_IDENTITY(read_1 + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(read_1 + 1, (read_1 + 1) ^ 0u))) == read_2))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && _GLF_IDENTITY((bool((_GLF_IDENTITY(read_1 + 1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false))))), (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false)))))) && true), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false))))), (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false)))))) && true), false, true)), true, true, false)), (bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false))))), (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false)))))) && true), false, true)), true, true, false))) && true)))))))))))), bool(bvec3((bool((_GLF_IDENTITY(read_1 + 1 == read_2, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false)))))), ! (! (! (_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY(bool(bvec3(read_1 + 1 == read_2, false, false)), true && (bool(bvec3(read_1 + 1 == read_2, false, false)))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)))), uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1))), _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), max((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1))))) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), max((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1))))) >> 0u))), (true ? _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), max((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1))))) >> 0u))) : _GLF_FUZZED(next_virtual_gid)))) | (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), max((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1))))) >> 0u))), (true ? _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), max((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1)))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1, (0u ^ 0u) ^ (_GLF_IDENTITY(read_1, min(read_1, read_1)) + 1))))) >> 0u))) : _GLF_FUZZED(num_workgroup))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) == read_2) || false)))) + 1, 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64), ((_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec3(64, 0, 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec3(64, 0, 0)), (false ? _GLF_FUZZED(96697) : int(ivec3(64, 0, 0))))), ((_GLF_IDENTITY(int(ivec3(64, 0, 0)), (false ? _GLF_FUZZED(96697) : int(ivec3(64, 0, 0)))))) | ((_GLF_IDENTITY(int(ivec3(64, 0, 0)), (false ? _GLF_FUZZED(96697) : int(ivec3(64, 0, 0))))))) / (1 | 1))))) >> 0) - _GLF_IDENTITY(0, (0) / 1)), 4);
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         do
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
              return;
             return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y))))))))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)), ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) || false), false, _GLF_IDENTITY(false, ! (! (false))), false)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) || false), false, _GLF_IDENTITY(false, ! (! (false))), false)))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(8)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       subgroupAll(false);
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = (-90181 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) * 1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              break;
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             do
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (78199 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, 1 * (1)), (uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, 1 * (1))) >> 0u), 4, 64, 4);
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (0 >> _GLF_IDENTITY(int(0), int(0))) | (int(8)))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
}
