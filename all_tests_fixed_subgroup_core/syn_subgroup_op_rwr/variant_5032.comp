#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * 1.0))).y)))))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false || (_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED((vec2(-24.83, 415.983) / 16.46)))).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - tan(vec2(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED((vec2(-24.83, 415.983) / 16.46)))).x > injectionSwitch.y)))) || (false))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false, false, false)))) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), (false || (false)) && true))))), true && (! (_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), (false || (false)) && true))))))))), ! (! (false || (false)))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (_GLF_IDENTITY(~ (subgroup_size), 0u + (~ (subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (_GLF_IDENTITY(~ (subgroup_size), 0u + (~ (subgroup_size))))))), 0u | (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (_GLF_IDENTITY(~ (subgroup_size), 0u + (~ (subgroup_size)))))))))) | (0u & 38767u)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))), (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) || false))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false)))))), ! (! (! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false)))))), ! (! (! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false)))))))))))), (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false)))))), ! (! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false))))), (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))), ! (! (true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))))))))) || false)))))) && true)))))))), ! (! (! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))) || false))))))))))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(bool(false))))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), clamp(0 | (1), 0 | (1), 0 | (1)))), min(read_1 + _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) | (0)) | (1)), _GLF_IDENTITY((read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 | (1))), (true ? (read_1 + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) << 0)))) : _GLF_FUZZED(read_1))) + 0u)))), _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, min(4, 4)))), 64, 4);
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(virtual_gid, 1u, 1u), uvec3(uvec3(uvec3(virtual_gid, 1u, 1u))))), min(uint(_GLF_IDENTITY(uvec3(virtual_gid, 1u, 1u), uvec3(uvec3(uvec3(virtual_gid, 1u, 1u))))), uint(_GLF_IDENTITY(uvec3(virtual_gid, 1u, 1u), uvec3(uvec3(uvec3(virtual_gid, 1u, 1u))))))))], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false), true && (! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-933.147), _GLF_FUZZED(-2.9)), bvec2(false, false))).y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), true, false))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : read_1, 0u | (false ? _GLF_FUZZED(num_workgroup) : read_1)))) + 1 == read_2)) - (_GLF_IDENTITY(0u | 0u, ~ (~ (0u | 0u))))), (_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), max((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)))) - (0u | 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, min(read_1, read_1))) - 0u))) + 1) / 1u) == read_2)) - (0u | 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), clamp(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0))))) == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) / 1u)) | (_GLF_IDENTITY(read_1, min(read_1, read_1)))))), (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u)))))))))) - (0u | 0u), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : read_1, 0u | (false ? _GLF_FUZZED(num_workgroup) : read_1)))) + 1 == read_2)) - (_GLF_IDENTITY(0u | 0u, ~ (~ (0u | 0u))))), (_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), max((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)))) - (0u | 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, min(read_1, read_1))) - 0u))) + 1) / 1u) == read_2)) - (0u | 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), clamp(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0))))) == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) / 1u)) | (_GLF_IDENTITY(read_1, min(read_1, read_1)))))), (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u)))))))))) - (0u | 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : read_1, 0u | (false ? _GLF_FUZZED(num_workgroup) : read_1)))) + 1 == read_2)) - (_GLF_IDENTITY(0u | 0u, ~ (~ (0u | 0u))))), (_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), max((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)))) - (0u | 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, min(read_1, read_1))) - 0u))) + 1) / 1u) == read_2)) - (0u | 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), clamp(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0))))) == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) / 1u)) | (_GLF_IDENTITY(read_1, min(read_1, read_1)))))), (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u)))))))))) - (0u | 0u), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : read_1, 0u | (false ? _GLF_FUZZED(num_workgroup) : read_1)))) + 1 == read_2)) - (_GLF_IDENTITY(0u | 0u, ~ (~ (0u | 0u))))), (_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), max((uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)))) - (0u | 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1, (_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, min(read_1, read_1))) - 0u))) + 1) / 1u) == read_2)) - (0u | 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), clamp(~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(1, 0))))) == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1, (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u))), ~ (_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) / 1u)) | (_GLF_IDENTITY(read_1, min(read_1, read_1)))))), (false ? _GLF_FUZZED(num_workgroup) : read_1)) + 1 == read_2)) - (0u | 0u)))))))))) - (0u | 0u)) ^ 0u)))) + 1, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), false, false))))))
          return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_ZERO(0.0, injectionSwitch.x))), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_ZERO(0.0, injectionSwitch.x)))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), false || ((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(51226))), 1, (-83718 & 0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))), ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3)))))) * 1)))) == read_2, ! (! (read_1 + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(51226))), 1, (-83718 & 0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))), ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, max(3, 3))) * 1), 3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3)), ~ (~ (clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (false ? _GLF_FUZZED(13700) : 3))) << 0)), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(3, int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(23792)))) | (int(3))))), (3) | 0)), int(3), int(3))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3))), max(_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3))), _GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), max(int(_GLF_IDENTITY(3, (3) | 0)), int(_GLF_IDENTITY(3, (3) | 0))))))), int(3), int(3))), 0 | (_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3))), 1 * (_GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, (3) | 0)), int(3), int(3)))))))))))))) * 1)))) == read_2))), bool(bvec4(read_1 + 1 == read_2, false, true, true)))) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bool(bool(_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false)))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), (! (_GLF_IDENTITY(true, bool(bool(true))))) && true))), (_GLF_IDENTITY(true, (true) || false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), tan(0.0), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), tan(0.0), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0) : _GLF_FUZZED(mat3x2(-276.228, 66.13, -306.422, -842.919, 5.3, -14.90)))))) > injectionSwitch.y))) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), false)))))), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), false)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-885.815 * 34.08))), vec2(_GLF_FUZZED(-98.66), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))), true))), (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(mat2(-7338.1753, 30.13, 701.158, -7.0)[1]) : _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), max(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))) || false)) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], _GLF_FUZZED(-8.3)), vec2(_GLF_FUZZED(-5759.1493), ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(false, true)))))).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false, false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6857.7189)), vec2(_GLF_FUZZED(9.5), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bool(bool(bvec4(false, false, true, false)))), false || (bool(bool(bool(bvec4(false, false, true, false))))))))))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), float(_GLF_IDENTITY(float(log(1.0)), _GLF_IDENTITY(float(vec4(float(log(1.0)), 1.0, 1.0, 1.0)), clamp(float(vec4(float(log(1.0)), 1.0, 1.0, 1.0)), float(vec4(float(log(1.0)), 1.0, 1.0, 1.0)), _GLF_IDENTITY(float(vec4(float(log(1.0)), 1.0, 1.0, 1.0)), float(vec3(float(vec4(float(log(1.0)), 1.0, 1.0, 1.0)), 0.0, 0.0)))))))), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(1.0))), clamp(round(length(normalize(1.0))), round(length(normalize(1.0))), round(length(normalize(1.0))))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(round(length(normalize(1.0))), mix(float(_GLF_FUZZED(6716.1456)), float(round(length(normalize(1.0)))), bool(true))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, sin(0.0), 1.0, 0.0)), (_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(round(length(normalize(1.0))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(6716.1456, (true ? 6716.1456 : _GLF_FUZZED(-3.3))))), float(round(length(normalize(1.0)))), bool(true))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, sin(0.0), 1.0, 0.0)), (true ? float(mat4x3(_GLF_IDENTITY(round(length(normalize(1.0))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(6716.1456), clamp(_GLF_FUZZED(6716.1456), _GLF_FUZZED(6716.1456), _GLF_FUZZED(6716.1456)))), float(round(length(normalize(_GLF_IDENTITY(1.0, max(1.0, 1.0)))))), bool(true))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 1.0, 0.0, sin(0.0), 1.0, 0.0)) : _GLF_FUZZED(-55.14)))) * 1.0)), 1.0, _GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), 1.0, 0.0, 0.0, exp(0.0), _GLF_IDENTITY(log(1.0), mix(float(log(1.0)), float(_GLF_FUZZED(-5637.6739)), bool(false))), 1.0, 0.0, 0.0, abs(1.0), cos(0.0), 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, round(length(normalize(1.0))), 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(735.442)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))) > injectionSwitch.y)))) && true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) || (injectionSwitch.x > injectionSwitch.y))) || false)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, false)))), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, false))))))), _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))), _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y)), false))))
  barrier();
}
