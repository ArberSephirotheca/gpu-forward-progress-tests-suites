#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base;
 uvec4 GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2;
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uvec4 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec3 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size;
 uvec4 GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.2, -93.73)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.xy = GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-22.34 + -669.680))), bool(false)))))))
  barrier();
 GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy = GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.xy;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false)) && _GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz = GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.y = subgroup_id;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.y = GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.y;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.y = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.y;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.y = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false)))) || false))), true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), abs(abs(0.0)), 1.0), mix(vec4((vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), abs(abs(0.0)), 1.0))[0], (vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), abs(abs(0.0)), 1.0))[1], _GLF_FUZZED(-0.8), (vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), abs(abs(0.0)), 1.0))[3]), vec4(_GLF_FUZZED(4.4), _GLF_FUZZED(2894.1235), (vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), abs(abs(0.0)), 1.0))[2], _GLF_FUZZED(3207.1118)), bvec4(false, false, true, false))))).y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), cos(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), bool(true)))))) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       barrier();
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.z = subgroup_local_id;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid) | uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY((GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid), ((GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid)) | ((GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid))) | (GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid)))).z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x, (true ? GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.x : _GLF_FUZZED(55135u)));
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.z = num_workgroup;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? _GLF_IDENTITY(int(5), min(int(5), int(5))) : _GLF_FUZZED(70842)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bool(bool(bvec3(false, true, false)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.y = workgroup_id;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y = GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter)))) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(ivec4(1 << _GLF_IDENTITY(int(0), int(0)), (0 ^ 1), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), injectionSwitch.y)))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z, (true ? GLF_merged3_0_1_17_1_1_12_2_1_14subgroup_local_idworkgroup_idworkgroup_size.z : _GLF_FUZZED(max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_local_id)))) * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, _GLF_IDENTITY(1u, (1u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, min(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, min(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, max(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, clamp(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y) >> 0u))), GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)))))), 1u * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, 1u * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)), clamp(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, _GLF_IDENTITY(1u, ~ (~ (1u))) * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)), _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, 1u * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, 1u * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)), (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, 1u * (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y))) / 1u))), 1u))))) | (~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, 1u * (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.y)))))))));
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(0.7, min(0.7, _GLF_IDENTITY(0.7, clamp(0.7, 0.7, 0.7)))))), float(1.0), bool(true))))).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, tan(0.0), 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, sqrt(1.0), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), (true ? float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(1.0, tan(0.0), 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, tan(0.0), 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, sqrt(1.0), length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(vec2(-17.52, -5.4)[1])))) < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 0))) < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 1.0, 1.0))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, false)))));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(0.8))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7224.0598)), bool(false))))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz, (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z, max(GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz, (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz, (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z, 0u | (GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz, (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z)))), (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz, (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz, (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz) / uvec3(1u, 1u, 1u)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z)))) / 1u) + GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.z = virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.w = GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
    {
     barrier();
    }
   else
    {
    }
  }
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.w = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.w;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.x = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.w;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.w + GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z + (_GLF_IDENTITY((GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z + 1) % GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z, ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z, clamp(_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z, 0u ^ (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z)), GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z, _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z, min(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z, GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z)))) + 1) % GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z))));
 GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.z = next_virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.w = GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.z;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0), int(3))), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 ^ (3))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.8, 4.2)) : injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))), injectionSwitch)), injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.8, 4.2)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), clamp(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))), ((injectionSwitch) * mat2(1.0)))) * vec2(1.0, 1.0))), injectionSwitch)), injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.8, 4.2)) : injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))), injectionSwitch)), injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.8, 4.2)) : injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))), injectionSwitch)), injectionSwitch)).x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bvec2(! (! (true)), false))))), (! (true)) || false)))) && true))))));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), false || ((_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))) && true)), bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), false || ((_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || (true))))) && true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, true))), true)))))))))), false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_WRAPPED_IF_FALSE(false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, cos(0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.6)), bool(false)))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_1 = atomicLoad(buf[GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.x], 4, 64, _GLF_IDENTITY(0, (0) | (0)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.x = read_1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 else
  {
  }
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.x = GLF_merged4_0_1_6_1_1_11_2_1_11_3_1_14read_1subgroup_idvirtual_gidworkgroup_base.x;
 GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_11read_1subgroup_idsubgroup_local_idvirtual_gid.x;
 for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid, clamp(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid, GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid, GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid)).w], uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.xy.x], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w = read_2;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(708.361)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, true)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), 1 * (int(0))), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.x = _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w, clamp(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w, (true ? GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(155852u, min(_GLF_IDENTITY(155852u, min(155852u, 155852u)), 155852u))), clamp(_GLF_IDENTITY(_GLF_FUZZED(155852u), (_GLF_FUZZED(155852u)) | (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), _GLF_IDENTITY(_GLF_FUZZED(155852u), min(_GLF_FUZZED(_GLF_IDENTITY(155852u, min(155852u, 155852u))), _GLF_FUZZED(155852u))), _GLF_FUZZED(155852u))))), _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w, uint(uvec3(GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w, 1u, 1u))), GLF_merged3_0_2_48_2_1_16_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnext_virtual_gidread_2.w));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, false, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, false, false))))) || false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))), ! (! (bool((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))))))))), false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (bool(bvec2(! (false), false))))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, exp(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5066.5422)), bool(false)))), float(_GLF_FUZZED(-22.74)), bool(false))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     barrier();
    }
  }
 GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z, ~ (~ (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.z))) + 1 < GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid.z)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (false ? _GLF_FUZZED(vec2(-4153.4468, 241.057)) : vec2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0))))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     atomicStore(buf[GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.w], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, uvec4(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1[0], GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1[1], _GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1) << uvec4(0u, 0u, 0u, 0u))[2], GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1[3])).w + 1 == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid))), (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid)))) | (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid))))).w + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1))), (~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1)))) >> 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid))), (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid)))) | (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid))))).w + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1))), (~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1)))) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid))), (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid)))) | (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1, (true ? GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_11read_2subgroup_idsubgroup_sizevirtual_gid))))).w + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1))), (~ (_GLF_IDENTITY(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1, (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1) | (GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1)))) >> 0u))))) == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x)), (~ (uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1 == _GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid, uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u)) ^ (GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid)).xyz.x))) ^ _GLF_IDENTITY((0u & _GLF_IDENTITY(189112u, (189112u) >> 0u)), ((0u & _GLF_IDENTITY(189112u, (189112u) >> 0u))) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))) + 1, 4, _GLF_IDENTITY(64, (64) | 0), 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))))); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) * 1)), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
         barrier();
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-344.665) : _GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-344.665) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-344.665) : _GLF_ZERO(0.0, injectionSwitch.x))))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bvec3((false), true, true)), true && (bool(bvec3((false), true, true)))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) | 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       subgroupAll(false);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), (~ (int(5))) >> 0))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.w, min(GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.w, GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.w))], _GLF_IDENTITY(uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1 == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x), uint(_GLF_IDENTITY(uvec4(uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1 == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x), 1u, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1 == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x), 1u, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), (uvec4(uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1 == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x), 1u, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) | (uvec4(uint(GLF_merged3_0_2_48_2_1_13_3_1_6GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idnum_workgroupread_1.w + 1 == GLF_merged2_0_3_65_3_1_16GLF_merged3_0_1_6_1_1_11_2_1_17read_2subgroup_idsubgroup_local_idnext_virtual_gid.xyz.x), 1u, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))))))) + _GLF_IDENTITY(1, (1) + int(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(true);
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), max((1 << _GLF_IDENTITY(int(1), int(1))), (1 << _GLF_IDENTITY(int(1), int(1)))))) >> 0)) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) | 0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) - 0))))), ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) - 0)))))), (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) - 0)))))), (true ? ~ (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 ^ (_GLF_IDENTITY(int(1), (int(1)) - 0)))))) : _GLF_FUZZED(_injected_loop_counter)))) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}
