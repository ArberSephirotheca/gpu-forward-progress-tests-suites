#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(688.141), _GLF_FUZZED((+ -842.412))), bvec2(false, false))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id;
 uvec3 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_size;
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ~ (~ ((0))))) ^ 0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 uvec4 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid;
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-753.775, 4.8)))).y)))), bool(bvec3(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-753.775, 4.8)))).y)))), false, false)))))), ! (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-753.775, 4.8)))).y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-753.775, 4.8)))).y))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz = GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) - vec2(0.0, 0.0)).y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz = _GLF_IDENTITY(GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz, min(_GLF_IDENTITY(GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz, ~ (~ (GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz))), _GLF_IDENTITY(GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz, uvec3(GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz[0], GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz[1], GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.xyz[2]))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz.xy = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, min(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)), max(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)), _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size))))) << uvec2(0u, 0u)), _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size))) | uvec2(0u, 0u))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy = _GLF_IDENTITY(GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz, (true ? GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz : _GLF_FUZZED(GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size))).xy, ~ (~ (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy = GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz.xy)));
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id), (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y = subgroup_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - (0 >> _GLF_IDENTITY(int(1), int(1)))))
  {
   _GLF_IDENTITY(GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.w = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.w = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y, (GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.w = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y) << 0u)));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-736.679)), vec2(_GLF_FUZZED(-2.9), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, false || (false)), true))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.y = GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizesubgroup_id.w;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.y;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))), true, false, true)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))), true, false, true))))) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) || false))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), bool(bvec4(true && (injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))) || false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))))).y, true && (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(degrees(vec2(6486.1463, 788.927))))))).x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), true, false))))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -24984)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec4((_GLF_IDENTITY(false, false || (false))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec4((_GLF_IDENTITY(false, false || (false))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || ((_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec4((_GLF_IDENTITY(false, false || (false))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -74355) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))) && true))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz.z = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, max(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, clamp(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z) / 1u), clamp(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z) / 1u), _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z) / 1u), _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z) / 1u))))))), GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.z));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.z = GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.xyz.z;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1]))))), _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1]))))), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1]))))))), 0.0)), (vec2(vec3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1]))))), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1]))))))), 0.0))) - vec2(0.0, 0.0)))).y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y) - tan(0.0)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y))))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])))[0], _GLF_FUZZED(-902.467)), vec2(_GLF_FUZZED(-80.49), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])))[1], max((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])))[1], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])))[1]))), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y) - tan(0.0)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch[0]), bool(true))), injectionSwitch[1])).y)))))))) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))), bool(bool(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.z = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.z;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && _GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), bool(bvec4(false, true, true, true)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), false, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), false, true)))))))) || false)))) || false)), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(false, true, true, true)))) && true)))))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x = GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.z;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, (false) || false), false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, (false) || false), false), true)), true))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(668.944))), injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), 0.0, exp(0.0), 0.0, exp(sqrt(0.0)), sin(0.0), 1.0, abs(_GLF_ONE(1.0, injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y))))
                  return;
                 barrier();
                }
               continue;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec2(bool(bvec4(false, false, false, true)), false)))))))));
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, ! (! ((false) && true))), true)))), ! (! (! (_GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false) && true), (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))) || _GLF_IDENTITY(false, ! (! (false))))), false || ((_GLF_IDENTITY(! ((false) && true), (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))) || _GLF_IDENTITY(false, ! (! (false)))))))), true))))))))))))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).x > injectionSwitch.y))));
           barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(12204) : int(_GLF_ONE(1.0, injectionSwitch.y)))) & ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 1 * _GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(max(6, 6), 0 | (max(6, 6))), ~ (~ (max(_GLF_IDENTITY(6, (6) | (6)), 6)))))), ((_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(max(6, 6), 0 | (max(6, 6))), ~ (~ (max(_GLF_IDENTITY(6, (6) | (6)), 6))))))) - 0))), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, (_GLF_IDENTITY(true ? 6 : _GLF_FUZZED((mat2x4(-4.3, 686.189, 206.840, 5.3, -5864.2917, _GLF_IDENTITY(-912.635, mix(float(_GLF_FUZZED(-1.0)), float(-912.635), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(2.0, (_GLF_IDENTITY(2.0, (2.0) - log(1.0))) - tan(0.0)), float(_GLF_IDENTITY(vec4(2.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), abs(0.0)), mix(vec4((vec4(2.0, 1.0, 0.0, abs(0.0)))[0], (vec4(2.0, 1.0, 0.0, abs(0.0)))[1], (vec4(2.0, 1.0, 0.0, abs(0.0)))[2], _GLF_FUZZED(963.236)), vec4(_GLF_FUZZED(-9.2), _GLF_FUZZED(-5398.0783), _GLF_FUZZED(-4483.6341), _GLF_IDENTITY((vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], clamp((vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], (vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], (vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))]))), bvec4(false, false, false, true))))), -72.07) , _injected_loop_counter)), (true ? 6 : _GLF_FUZZED((mat2x4(-4.3, 686.189, 206.840, 5.3, -5864.2917, _GLF_IDENTITY(-912.635, mix(float(_GLF_FUZZED(-1.0)), float(-912.635), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(2.0, (_GLF_IDENTITY(2.0, (2.0) - log(1.0))) - tan(0.0)), float(_GLF_IDENTITY(vec4(2.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), abs(0.0)), mix(vec4((vec4(2.0, 1.0, 0.0, abs(0.0)))[0], (vec4(2.0, 1.0, 0.0, abs(0.0)))[1], (vec4(2.0, 1.0, 0.0, abs(0.0)))[2], _GLF_FUZZED(963.236)), vec4(_GLF_FUZZED(-9.2), _GLF_FUZZED(-5398.0783), _GLF_FUZZED(-4483.6341), _GLF_IDENTITY((vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], clamp((vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], (vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], (vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))]))), bvec4(false, false, false, true))))), -72.07) , _injected_loop_counter))) | (true ? 6 : _GLF_FUZZED((mat2x4(-4.3, 686.189, 206.840, 5.3, -5864.2917, _GLF_IDENTITY(-912.635, mix(float(_GLF_FUZZED(-1.0)), float(-912.635), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(2.0, (_GLF_IDENTITY(2.0, (2.0) - log(1.0))) - tan(0.0)), float(_GLF_IDENTITY(vec4(2.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), abs(0.0)), mix(vec4((vec4(2.0, 1.0, 0.0, abs(0.0)))[0], (vec4(2.0, 1.0, 0.0, abs(0.0)))[1], (vec4(2.0, 1.0, 0.0, abs(0.0)))[2], _GLF_FUZZED(963.236)), vec4(_GLF_FUZZED(-9.2), _GLF_FUZZED(-5398.0783), _GLF_FUZZED(-4483.6341), _GLF_IDENTITY((vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], clamp((vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], (vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))], (vec4(2.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), float(mat3x2(_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-40.01))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(exp(0.0), 0.0, 0.0))))), sqrt(0.0))))))[_GLF_IDENTITY(3, ~ (~ (3)))]))), bvec4(false, false, false, true))))), -72.07) , _injected_loop_counter))))))))), int(6))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.x = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) || false)))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (83837 & (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, 0 | (3)), 3))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true)))))))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - tan(vec2(0.0, 0.0)))))).x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat4x3(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))) + vec2(0.0, 0.0)).y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.y = workgroup_size, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.y = workgroup_size) << 0u);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))) ? int(1) : _GLF_FUZZED(32832))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), int(1)), (max(int(1), int(1))) - 0)))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), int(1)), (max(int(1), int(1))) - 0)))), (true ? (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), int(1)), (max(int(1), int(1))) - 0)))) : _GLF_FUZZED(59267))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), int(1)), (max(int(1), int(1))) - 0)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), int(1)), (max(int(1), int(1))) - 0)))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), int(1)), (max(int(1), int(1))) - 0))))) / 1))) >> _GLF_IDENTITY(int(1), int(1))) - 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- 522.936))), bool(false))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicOr(_injected_loop_counter, -25436)) : int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- 522.936))), bool(false))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) - 0)) * 1))) > _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), true && (bool(bool(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + (0 << _GLF_IDENTITY(int(8), int(8)))))
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x;
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.w = workgroup_id;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.w, max(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.w, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.w));
  }
 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy) - uvec2(0u, 0u)).y * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y;
 _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base) * 1u);
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(uvec3(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, 0u))).y, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(uvec3(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, 0u))).y)) + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, max(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, ~ (~ (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1))), GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1)).xy, uvec2(uvec2(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, max(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, ~ (~ (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1))), GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1)).xy))).x + subgroup_local_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id)), (false ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.y) : _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) * uvec2(1u, 1u), min((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) * uvec2(1u, 1u), (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) * uvec2(1u, 1u)))).y + _GLF_IDENTITY(GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y, min(GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y, GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y)) * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id)))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, uvec4(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[0], _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[1], ~ (~ (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[1]))), GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[2], GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[3])).xy.x + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) << uvec2(0u, 0u)).y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id), max((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) << uvec2(0u, 0u)).y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) << uvec2(0u, 0u)).y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id), ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) << uvec2(0u, 0u)).y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id)) | ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) << uvec2(0u, 0u)).y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id))))) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + subgroup_local_id))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
    break;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, (GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x = _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)))) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)))) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)))) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))))))).x) - uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.3)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(ivec3(_GLF_IDENTITY(int(7), int(7)), 1, 0)))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1749.5793), _GLF_FUZZED(9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1749.5793), _GLF_FUZZED(9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-3704.9420, -6.8)) : _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))) : _GLF_FUZZED(vec2(5.9, 0.6))))))[0])), (injectionSwitch)[1]), bvec2(true, true))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1749.5793), _GLF_FUZZED(9.2)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-3704.9420, -6.8)) : _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))) : _GLF_FUZZED(vec2(5.9, 0.6))))))[0])), (injectionSwitch)[1]), bvec2(true, true))).y : _GLF_FUZZED(-968.710)))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(-41141) : (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy) >> uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x), 1u * (((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u)))) % _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy) | uvec2(0u, 0u))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))).x)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.w = next_virtual_gid;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) / 1)), (int(_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) / 1))) | (int(_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) / 1))))) < (0 | 1)); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z = GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_sizenext_virtual_gid.w;
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id, (uvec2(1u, 1u) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(0.8)), bool(false))))) * (GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id)).x], (buf[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id, (uvec2(1u, 1u) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(0.8)), bool(false))))) * (GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id)).x]) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id, (uvec2(1u, 1u) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id)).x], (buf[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id, (uvec2(1u, 1u) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id)).x]) / 1u)) - 0u), _GLF_IDENTITY(4, (4) + 0), 64, 0);
 _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.x = read_1, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.x = read_1) / 1u);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w = GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_1subgroup_idsubgroup_sizeworkgroup_id.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-60.16)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))))))
    barrier();
   atomicStore(buf[GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z], uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)), 0u | (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))))), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (true ? GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1), uvec4(0u, 0u, 0u, 0u) ^ (~ (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1))))).w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1) | (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1)).w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), clamp(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), clamp(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), clamp(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), clamp(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), clamp(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, max(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))))))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)), min(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)), _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))))), (uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))), (uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w))))), ((uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))))) / 1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w)))), (uint(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w, 0u + (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u))), 1u, 0u, 1u))))))))) + 1), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.w = read_2;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x = GLF_merged2_0_3_90_3_1_6GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_sizeread_2.w;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), bool(bvec2(bool(bvec2(true, true)), true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) + 0, 0 ^ ((_injected_loop_counter) + 0))), _injected_loop_counter))) : 1))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) << 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uint((subgroup_local_id + 1))))) | ((subgroup_local_id + 1)))) < GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.xy.x)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((0 | 1) ^ (0 | 0)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 0.0)))))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(bool(bvec4((false), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(bool(bool(bool(bvec4((false), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true))))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, true, false)))))), false)), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, true, false)), ! (! (bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, true, false)))))), false))) && true))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         atomicStore(buf[GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z], uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) * (_GLF_IDENTITY(1, (1) * 1))) == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) - 0), 1, _GLF_IDENTITY(1, (1) - 0)), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) - 0), 1, _GLF_IDENTITY(1, (1) - 0)), max(clamp(_GLF_IDENTITY(1, (1) - 0), 1, _GLF_IDENTITY(1, (1) - 0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) - 0), 1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (1) - 0)), 0 ^ (clamp(_GLF_IDENTITY(1, (1) - 0), 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))))))) / 1))) | (1)), (1) * 1))) == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x) || false)) + 1, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (4))), _GLF_IDENTITY((~ _GLF_IDENTITY((4), ((4)) - 0)), min((~ _GLF_IDENTITY((4), ((4)) - 0)), (~ _GLF_IDENTITY((4), ((4)) - 0)))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (0))) + 0)), 0, _GLF_IDENTITY(1, (1) ^ 0), (0 >> _GLF_IDENTITY(int(3), int(3))))), (int(ivec4(_GLF_IDENTITY(~ (4), (~ (4)) >> 0), 0, 1, (0 >> _GLF_IDENTITY(int(3), int(3)))))) - 0)))), 64, 4);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
          barrier();
        }
       subgroupAll(false);
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z, clamp(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z, GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z, GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.z))], _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, clamp(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1, uvec4(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[0], GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[1], _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[2], (false ? _GLF_FUZZED(virtual_gid) : GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[2])), GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1[3])), GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1)).w + 1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x) + 1, _GLF_IDENTITY((true ? _GLF_IDENTITY(uint(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x) + 1, (uint(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x) + 1) - 0u) : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w)), _GLF_IDENTITY((_GLF_IDENTITY((true ? uint(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x) + 1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w)), ((true ? uint(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1 == _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id) - uvec4(0u, 0u, 0u, 0u)).x) + 1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (0u >> _GLF_IDENTITY(uint(8u), uint(8u))), ((_GLF_IDENTITY((true ? uint(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1 == GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.x) + 1 : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w, max(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w)))), ((true ? uint(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1, (GLF_merged3_0_2_52_2_1_16_3_1_6GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizenext_virtual_gidread_1.w + 1) >> (0u ^ 0u)) == _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id) - uvec4(0u, 0u, 0u, 0u)).x) + 1 : _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_12read_2subgroup_idsubgroup_sizeworkgroup_id.w))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))) ^ 0u))), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
        {
         subgroupAll(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(floor(injectionSwitch)))).x > injectionSwitch.y)))))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ (((0 | 0) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))
    return;
  }
}
