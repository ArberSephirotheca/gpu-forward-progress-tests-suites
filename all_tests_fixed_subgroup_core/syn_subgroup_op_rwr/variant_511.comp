#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, sin(0.0), cos(0.0), round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (vec4(1.0, 1.0, 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0))))), 0.0)), (vec2(mat2x3(injectionSwitch, sin(0.0), cos(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))) / vec2(1.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! _GLF_IDENTITY((! (! (true))), ! (_GLF_IDENTITY(! ((! (! (true)))), bool(bvec4(_GLF_IDENTITY(! ((! (! (true)))), (! ((! (! (true))))) || false), true, false, true)))))))), (injectionSwitch.x < injectionSwitch.y)))))))))))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(mat4(_GLF_IDENTITY(-6.1, (-6.1) / 1.0), 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, _GLF_IDENTITY(155.299, clamp(_GLF_IDENTITY(155.299, mix(float(_GLF_FUZZED(4.5)), float(155.299), bool(true))), 155.299, 155.299)), -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4)) : mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0))))), (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, abs(1.0))), (true ? vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, abs(1.0))) : _GLF_FUZZED(injectionSwitch))))) * vec2(1.0, 1.0)), min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4)) : mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), max(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0)))))) * mat2(1.0))).x < injectionSwitch.y))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0)), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(405.948))), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec3(-5.4, 3.9, 14.72).t)), float(0.0), bool(true))), clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 1.0, round(length(normalize(abs(1.0)))), 0.0, 1.0, 0.0, 1.0)), (float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 1.0, round(length(normalize(abs(1.0)))), 0.0, 1.0, 0.0, 1.0))) - 0.0)), 0.0, 0.0)))), 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0))))), (false ? _GLF_FUZZED(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, _GLF_IDENTITY(-3.4, min(-3.4, -3.4)))) : mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), float(mat4(sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, sqrt(1.0), 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0))))), (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2471.1972)), float(_GLF_IDENTITY(1.0, float(vec3(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0)))), bool(true)))), 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(-6.1, 49.86, _GLF_IDENTITY(-0.2, (-0.2) - 0.0), 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4), (_GLF_IDENTITY(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4), transpose(transpose(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4))))) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3x4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-820.826 - -8.7))), vec2(_GLF_FUZZED(48.85), (injectionSwitch)[1]), bvec2(false, true))).y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) : mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.1)), float(0.0), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))) * mat2(1.0))).x < injectionSwitch.y)))))), ((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0)), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(405.948))), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec3(-5.4, 3.9, 14.72).t)), float(0.0), bool(true))), clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 1.0, round(length(normalize(abs(1.0)))), 0.0, 1.0, 0.0, 1.0)), (float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 1.0, round(length(normalize(abs(1.0)))), 0.0, 1.0, 0.0, 1.0))) - 0.0)), 0.0, 0.0)))), 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0))))), (false ? _GLF_FUZZED(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, _GLF_IDENTITY(-3.4, min(-3.4, -3.4)))) : mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), float(mat4(sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, sqrt(1.0), 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(0.0))))), (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2471.1972)), float(_GLF_IDENTITY(1.0, float(vec3(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0)))), bool(true)))), 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(-6.1, 49.86, _GLF_IDENTITY(-0.2, (-0.2) - 0.0), 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4), (_GLF_IDENTITY(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4), transpose(transpose(mat4(-6.1, 49.86, -0.2, 91.21, 99.52, -6000.8606, -0.1, -4071.4662, 2772.5194, 155.299, -38.91, 49.32, -3.9, 3.3, -3452.1275, -3.4))))) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3x4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-820.826 - -8.7))), vec2(_GLF_FUZZED(48.85), (injectionSwitch)[1]), bvec2(false, true))).y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) : mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, log(1.0), 0.0, sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.1)), float(0.0), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))) * mat2(1.0))).x < injectionSwitch.y))))))) && true)))))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, false, false, true))), false || (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, false, false, true))), true && (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false, false, false, true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.5), _GLF_FUZZED(65.86)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.5), _GLF_FUZZED(65.86)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.5), _GLF_FUZZED(65.86)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y) && true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          continue;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY((5834 & (0 & -15877)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-98557) : (5834 & (0 & -15877)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756)))), bool(bvec4(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756)))), false, true, false)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756)))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756)))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756))))) || false), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756)))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ((-81397 - 18127) * 83756))))) || false))))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0))))).y))));
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            barrier();
           continue;
          }
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(59729) : int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (! (_GLF_WRAPPED_IF_FALSE(false)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(64180) : _injected_loop_counter --))))))) << 0))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec4(bvec2(! (false), true), true, true)))))))))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec3((! (false)), true, false))))) && true) || false))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), ~ (~ ((1 & 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (false) && true)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u), _GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u))))), 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u), _GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u))))), 1u)) * (gl_WorkGroupSize), ((uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u), _GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u))))), 1u)) * (gl_WorkGroupSize)) - uvec3(0u, 0u, 0u)), (uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u), _GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))), (_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u)))) + 0u))))), 1u)) * (gl_WorkGroupSize)))).x, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 0u))), 1u)), ((uvec3(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, max(1u, 1u)))), 1u, 1u) & uvec3(1u, 1u, 1u))) ^ (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u)))) * (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) - uvec3(0u, 0u, 0u)))), ~ (_GLF_IDENTITY(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) - uvec3(0u, 0u, 0u))))), uvec3(uvec3(~ ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), _GLF_IDENTITY(uvec3(6u), (uvec3(6u)) - uvec3(0u, 0u, 0u)))))))))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize)), min(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))))) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))))) * (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(164689u, 37920u, 165107u)))), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), clamp(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * uvec3(1u, 1u, 1u))))) * (gl_WorkGroupSize)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize)), min(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))))) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (false ? _GLF_FUZZED(uvec3(18821u, 49651u, 41781u)) : uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)))))) * (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(164689u, 37920u, 165107u)))), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), clamp(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * uvec3(1u, 1u, 1u))))) * (gl_WorkGroupSize))))) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(2u)))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u | (1u)))), 1u, 1u)) * _GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)), 0u)), (uvec3(uvec4(_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) >> uvec3(0u, 0u, 0u)), 0u))) >> uvec3(0u, 0u, 0u))), ((uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (1u))) * 1u), _GLF_IDENTITY(1u, 0u + (1u))) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize)) + uvec3(0u, 0u, 0u))))), max(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, _GLF_IDENTITY(1u, (0u | 1u) * (1u)), 1u)), ((uvec3(1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), 1u)), 1u) & uvec3(1u, 1u, 1u))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u))) * (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(146010u, 130192u, 43164u)) : _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(((gl_WorkGroupSize)), (true ? ((gl_WorkGroupSize)) : _GLF_FUZZED((uvec3(145174u, 207u, 13078u) << subgroup_id)))) + uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) ^ 0u))) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(((gl_WorkGroupSize)), (true ? ((gl_WorkGroupSize)) : _GLF_FUZZED((uvec3(145174u, 207u, 13078u) << subgroup_id)))) + uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) ^ 0u))) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) | (_GLF_IDENTITY((gl_WorkGroupSize), _GLF_IDENTITY(((gl_WorkGroupSize)), (true ? ((gl_WorkGroupSize)) : _GLF_FUZZED((uvec3(145174u, 207u, 13078u) << subgroup_id)))) + uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) ^ 0u))) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))))) : _GLF_FUZZED(uvec3(139698u, 47371u, 3995u))))))), (uvec3(1u, 1u, 1u) & _GLF_IDENTITY(uvec3(1u, 1u, 1u), (true ? uvec3(1u, 1u, 1u) : _GLF_FUZZED(uvec3(13017u, 198404u, 50118u))))) * (gl_WorkGroupSize)))).x, _GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) ^ (_GLF_IDENTITY(0u, min(0u, 0u)))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), 0u | (uint(uint(1u)))))), ~ (~ _GLF_IDENTITY((uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), (! (true)) || false), false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), (! (true)) || false), false, false)), true && (bool(bvec3(_GLF_IDENTITY(! (true), (! (true)) || false), false, false)))))))))))) && true), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))) ? _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(157655u, 170813u, 126526u)))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), uvec3(uvec4((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), 1u))) * (gl_WorkGroupSize), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize))), min(_GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), uvec3(uvec4((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), 1u))) * (gl_WorkGroupSize), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize))), _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), uvec3(uvec4((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), 1u))) * (gl_WorkGroupSize), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize)))))).x, 1u, 0u, 1u)), ((uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), (! (true)) || false), false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), (! (true)) || false), false, false)), true && (bool(bvec3(_GLF_IDENTITY(! (true), (! (true)) || false), false, false)))))))))))) && true), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))) ? _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(157655u, 170813u, 126526u)))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), uvec3(uvec4((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), 1u))) * (gl_WorkGroupSize), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize))), min(_GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), uvec3(uvec4((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), 1u))) * (gl_WorkGroupSize), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize))), _GLF_IDENTITY((uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize), min(_GLF_IDENTITY((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), uvec3(uvec4((uvec3(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))) & uvec3(1u, 1u, 1u)), 1u))) * (gl_WorkGroupSize), (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u)) * (gl_WorkGroupSize)))))).x, 1u, 0u, 1u))) * uvec4(1u, 1u, 1u, 1u))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ uint(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), (true ? min(0.0, 0.0) : _GLF_FUZZED(-785.441)))), 0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_ZERO(0.0, injectionSwitch.x)), vec3(mat4x2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0)))), max(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_ZERO(0.0, injectionSwitch.x)), vec3(mat4x2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0)))), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_ZERO(0.0, injectionSwitch.x)), vec3(mat4x2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 0.0))))))), injectionSwitch)).y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false)))) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), false || (! (_GLF_IDENTITY(false, (false) || false))))))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false, ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          return;
        }
      }
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch)))), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch)))))[0], _GLF_FUZZED(951.519)), vec2(_GLF_FUZZED(92.20), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch)))))[1]), bvec2(false, true)))))) * vec2(1.0, 1.0)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (_GLF_IDENTITY(true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch), mix(vec2((true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(-1627.1286)), vec2(_GLF_FUZZED(-74.78), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) * vec2(1.0, 1.0)).y)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), _GLF_IDENTITY(min(workgroup_size, workgroup_size), min(min(workgroup_size, workgroup_size), min(workgroup_size, workgroup_size)))) * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), false, false))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id) + 0u), max(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size))) + 0u), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) + (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(21.93, -1.1).g)), bvec2(true, false))), injectionSwitch)).x))) * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) + (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(21.93, -1.1).g)), bvec2(true, false))), injectionSwitch)).x))), min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) + (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(21.93, -1.1).g)), bvec2(true, false))), injectionSwitch)).x))), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) + (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(21.93, -1.1).g)), bvec2(true, false))), injectionSwitch)).x))))) * subgroup_size : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, ~ (~ ((subgroup_id) ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) + (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)) + (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u))) << 0u))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(-656.735, -40.68)))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), (injectionSwitch)[_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(-52945)))]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(21.93, -1.1).g)), bvec2(true, false))), injectionSwitch)).x))) * subgroup_size) / 1u)) << 0u) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), 1))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), _GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), 0u))))) + 1), 1u * ((subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(virtual_gid))), (subgroup_local_id + 1) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)) : _GLF_FUZZED(workgroup_size))) + 0u))))))) | ((subgroup_local_id + 1)), min((_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), _GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), 0u))))) + 1), 1u * ((subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(virtual_gid))), (subgroup_local_id + 1) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)) : _GLF_FUZZED(workgroup_size))) + 0u))))))) | ((subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), _GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), 0u))))) + 1), 1u * ((subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(virtual_gid))), (subgroup_local_id + 1) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)) : _GLF_FUZZED(workgroup_size))) + 0u))))))) | ((subgroup_local_id + 1)), max((_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), _GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), 0u))))) + 1), 1u * ((subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(virtual_gid))), (subgroup_local_id + 1) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)) : _GLF_FUZZED(workgroup_size))) + 0u))))))) | ((subgroup_local_id + 1)), (_GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), _GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), 0u))))) + 1), 1u * ((subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(virtual_gid))), (subgroup_local_id + 1) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) - 0u)) / 1u)) : _GLF_FUZZED(workgroup_size))) + 0u))))))) | ((subgroup_local_id + 1))))))) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ (0 | 0), min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ (0 | 0), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ (0 | 0))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ (0 | 0), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ (0 | 0)) | (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ (0 | 0)))) << ((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, max(0, 0)))) & -86115) ^ 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), ~ (~ (_GLF_IDENTITY(0, max(0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true))) && true)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))], _GLF_IDENTITY(4, min(4, 4)), 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))), false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false, true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (true ? 1 : _GLF_FUZZED(-52069))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y) && true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), true, false))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), true, false)))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(step(-33.33, -266.759)) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8226.3940)), float(injectionSwitch.y), bool(true))))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), false || ((! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))) && true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), true && (true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))
      barrier();
     continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, (read_1) ^ 0u)))) + 1), 4, 64, 4);
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false))))))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       break;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, _GLF_IDENTITY(64, _GLF_IDENTITY(~ (~ (64)), ~ (~ (~ (~ (64))))))), int(ivec2(clamp(64, 64, _GLF_IDENTITY(64, ~ (~ (64)))), ((0 & 36590) << _GLF_IDENTITY(int(1), int(1))))))), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(88607))), _injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, false)), (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, false))) && true)) && (_GLF_DEAD(false))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), ! (! (! (bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))))))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)), mix(vec2(_GLF_FUZZED(3.4), _GLF_FUZZED(9.5)), vec2((vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))[0], (vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))[1]), bvec2(true, true)))), injectionSwitch)).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u) + 1 == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u) + 1 == read_2, (_GLF_IDENTITY(read_1, (read_1) / 1u) + 1 == read_2) && true)))) + _GLF_IDENTITY(1, clamp(1, 1, 1)), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(max(64, 64), (max(64, 64)) << 0)), 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7)))))) ^ 1)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7)))))) ^ 1))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7)))))) ^ 1)))) || false))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(smoothstep(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), (true ? _GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), clamp(tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch))), (_GLF_IDENTITY(_GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), (true ? _GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), clamp(tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch))), (false ? _GLF_FUZZED((vec2(-9.6, 3.3) + injectionSwitch)) : _GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), _GLF_IDENTITY((true ? _GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), clamp(tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch)), ((true ? _GLF_IDENTITY(tan(tan(vec2(0.0, 0.0))), clamp(tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))), tan(tan(vec2(0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch))) * vec2(1.0, 1.0)))))) + vec2(0.0, 0.0))))))), injectionSwitch)).y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-640.340), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7600.8781)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).y)), true, true, _GLF_IDENTITY(false, (false) && true))))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sin(vec2(-2159.9971, 8.0))) : injectionSwitch)).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             break;
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), max(float(vec3(injectionSwitch.x, 0.0, 0.0)), float(vec3(injectionSwitch.x, 0.0, 0.0))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(intBitsToFloat(ivec2(67703, 7615))))), injectionSwitch)), min(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2774.5366, 3.2)))), max(injectionSwitch, injectionSwitch)), injectionSwitch)), min(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2774.5366, 3.2)))), max(injectionSwitch, injectionSwitch)), injectionSwitch)), min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(tan(vec2(-2999.9205, -2.0))))) : _GLF_FUZZED(vec2(-3.8, 4318.5117)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0, cos(0.0), 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), 1.0)))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3973.9862)), bool(false))), 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, _GLF_IDENTITY(length(0.0), (length(0.0)) * 1.0), 1.0, cos(0.0), 1.0)))))).y), float(_GLF_FUZZED((+ -5.0))), bool(_GLF_IDENTITY(false, ! (! (false)))))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(0.0), 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0), mat3(mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.9, -9.7)) : injectionSwitch)), injectionSwitch, injectionSwitch)), abs(0.0), 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(0.0), 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(-25480))), bool(false))))), cos(0.0), 1.0)))))).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), (true ? _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), _GLF_IDENTITY(vec2(mat2x4(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0)), clamp(vec2(mat2x4(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0)), vec2(mat2x4(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0)), vec2(mat2x4(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0))))) : _GLF_FUZZED(vec2(9.0, -3055.0354))))), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), 1.0), _GLF_IDENTITY(mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), min((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) - vec2(0.0, 0.0)), injectionSwitch)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-49.32)))), 1.0, 0.0, length(_GLF_IDENTITY(0.0, (0.0) + sin(0.0))), 1.0, cos(0.0), 1.0))), (true ? mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), min((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) - vec2(0.0, 0.0)), injectionSwitch)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(fract(-49.32)))), 1.0, 0.0, length(_GLF_IDENTITY(0.0, (0.0) + sin(0.0))), 1.0, cos(0.0), 1.0))) : _GLF_FUZZED(mat3(83.99, -95.25, 5.3, 8589.3304, 1.9, -4984.9374, 68.04, 35.29, -5926.3409))))), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(0.0), 1.0, cos(0.0), 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), 0.0, 1.0, 0.0, length(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-551.269)), float(0.0), bool(true)))), 1.0, cos(0.0), 1.0)))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).y), float(_GLF_IDENTITY(_GLF_FUZZED((+ -5.0)), (true ? _GLF_IDENTITY(_GLF_FUZZED((+ -5.0)), max(_GLF_FUZZED((+ -5.0)), _GLF_FUZZED((+ -5.0)))) : _GLF_FUZZED(mix(-9905.4829, 883.052, -11.58))))), bool(false))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, true)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))))))))) && true)))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! _GLF_IDENTITY((true && (false)), false || ((true && (false)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), bool(bvec3((false), false, true)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))))))))) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false)))), 0u ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false)))), clamp(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == _GLF_IDENTITY(read_2, uint(uvec3(_GLF_IDENTITY(read_2, (true ? read_2 : _GLF_FUZZED(workgroup_base))), 1u, (1u | 1u)))), false)))), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false))))) / 1u), uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) << 0))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(int(1))), 1, 1)))) == read_2, bool(bvec2(read_1 + 1 == read_2, false)))), uint(uvec4(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec2(read_1 + 1 == read_2, false)))), 1u, 1u, 1u))))))) + 1, 4, 64, 4);
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, (0 >> _GLF_IDENTITY(int(1), int(1))), 1, 1)), _GLF_IDENTITY(int(ivec2(int(ivec4(0, (0 >> _GLF_IDENTITY(int(1), int(1))), 1, 1)), 0)), (int(ivec2(int(ivec4(0, (0 >> _GLF_IDENTITY(int(1), int(1))), 1, 1)), 0))) | (int(ivec2(int(ivec4(0, (0 >> _GLF_IDENTITY(int(1), int(1))), 1, 1)), 0)))))) | 0)); _injected_loop_counter --)
          {
           barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))));
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true)) && true))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)))[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(6.9)), mix(vec2(_GLF_FUZZED(1.6), (vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(6.9)))[1]), vec2(_GLF_IDENTITY((vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(6.9)))[0], mix(float(_GLF_IDENTITY((vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(6.9)))[0], min((vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(6.9)))[0], (vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(6.9)))[0]))), float(_GLF_FUZZED(48.54)), bool(false))), _GLF_FUZZED(vec4(20.28, -93.30, 11.73, 2827.0491).q)), bvec2(true, false))), bvec2(false, false)))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-41.25 * 9562.6348))), float(injectionSwitch.y), bool(true)))))), bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false || (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), ! (! ((_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           barrier();
          }
        }
       else
        {
        }
       subgroupAll(true);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) | 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), 0 | (int(0))), int(0))), _GLF_IDENTITY(int(0), (int(0)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), ~ (~ (int(7)))) : _GLF_FUZZED(78142)))), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), ~ (~ (int(7)))) : _GLF_FUZZED(78142)))))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, sin(0.0), 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, sin(0.0), 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y)))), bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, sin(0.0), 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y)))), false)))) && true) && true)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(_injected_loop_counter) : int(8)))), 1 * (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) * 1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), (-12398 & 0) ^ (_GLF_IDENTITY(max(1, 1), min(max(1, 1), _GLF_IDENTITY(max(1, 1), (max(1, 1)) << 0))))), _GLF_IDENTITY((max(1, 1)) | (max(1, 1)), clamp((max(1, 1)) | (max(1, 1)), (max(1, 1)) | (max(1, 1)), (max(1, 1)) | (max(1, 1))))), _GLF_IDENTITY((_GLF_IDENTITY(max(1, 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))), (_GLF_IDENTITY(max(1, 1), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1))))))) << 0), _GLF_IDENTITY(max(1, 1), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))))) : _GLF_FUZZED(-62843)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(max(1, 1), (true ? _GLF_IDENTITY(max(1, 1), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))) : _GLF_FUZZED(-62843)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) && true))
              barrier();
            }
           else
            {
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}
