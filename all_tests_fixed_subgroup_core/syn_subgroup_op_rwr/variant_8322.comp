#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), ~ (~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))))) + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0) | 0, ((0) | 0) / 1)), (~ (_GLF_IDENTITY((0) | 0, ((0) | 0) / 1))) << 0)))), 0)), ~ (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | 0), 0))))));
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(read_1 + 1), 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) >> (-15705 & 0)))), 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(90036u) : subgroup_size))), (uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(90036u) : _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))))) >> 0u)), uint(uvec3(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(90036u) : subgroup_size))), (uint(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(90036u) : subgroup_size)))) >> 0u)), 0u, 1u)))))
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(74162) : 4)));
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(read_1 + 1, (true ? _GLF_IDENTITY(read_1 + 1, (true ? read_1 + 1 : _GLF_FUZZED(subgroup_local_id))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))))) | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(537.315)), _GLF_IDENTITY(float(0.0), (float(0.0)) - 0.0), bool(true))), injectionSwitch.x))) == read_2) + 1, 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))));
  }
}
