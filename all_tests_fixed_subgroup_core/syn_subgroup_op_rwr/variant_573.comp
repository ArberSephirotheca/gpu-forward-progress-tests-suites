#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 mat3x4 _f0;
 uvec2 _f1;
 bvec2 _f2;
 mat4x3 _f3;
 bvec3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 bvec2 _f1;
 bool _f2;
 float _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_6 {
 ivec3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 _GLF_struct_6 _f1;
 mat2 _f2;
 _GLF_struct_7 _f3;
 mat2 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 uvec4 _f1;
 vec2 _f2;
 ivec3 _f3;
 int _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bool _f1;
 ivec2 _f2;
 mat4x3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_2 {
 bool _f0;
 uvec4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_3 {
 bool _f0;
 _GLF_struct_0 _f1;
 uvec2 _f2;
 _GLF_struct_1 _f3;
 uint _f4;
 mat3x2 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
 mat3x2 _f2;
 _GLF_struct_9 _f3;
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bool(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_base;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 ^ 1) + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_10 _GLF_struct_replacement_10;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  barrier();
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.x = subgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | 0))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))))), false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))), bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))), false, false), true)))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y = subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x, ~ (~ (GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x)))), (~ (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x, ~ (~ (GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x))))) | 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))) || (false))), bool(bvec4(_GLF_DEAD(false), true, false, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, abs(0.0)), (true ? vec4(injectionSwitch.x, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, abs(0.0)) : _GLF_FUZZED(vec4(425.209, -530.835, -6219.6494, -6.1)))))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), true && (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-793.133))), injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fract(vec2(8991.1634, -353.923))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-609.961, 4748.6950)) : injectionSwitch)))).y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fract(vec2(8991.1634, -353.923))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-609.961, 4748.6950)) : injectionSwitch)))).y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fract(vec2(8991.1634, -353.923))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-609.961, 4748.6950)) : injectionSwitch)))).y)))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fract(vec2(8991.1634, -353.923))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-609.961, 4748.6950)) : injectionSwitch)))).y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fract(vec2(8991.1634, -353.923))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-609.961, 4748.6950)) : injectionSwitch)))).y)))) && true))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     barrier();
    }
   _GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.x = num_workgroup;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.w = workgroup_size;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)) && true)) && true)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), true))))), bool(bool(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, false), true))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, true && (true))) && true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.w = workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-15.07) : injectionSwitch.x))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.w * _GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.z = workgroup_base, (GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.z = workgroup_base) << 0u);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), false, false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-776.283), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), bool(_GLF_IDENTITY(bvec2(bool((false)), false), bvec2(bvec4(bvec2(bool((false)), false), false, true)))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), bool(_GLF_IDENTITY(bvec2(bool((false)), false), bvec2(bvec4(bvec2(bool((false)), false), false, true))))))))))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, true, true)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && true)))
          return;
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), (true && ((injectionSwitch.x > injectionSwitch.y))) || false), false, false, true))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   _GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.z = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.z;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.z + GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.x * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y + GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))
    return;
   barrier();
  }
 do
  {
   GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y = virtual_gid;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.z = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y, _GLF_IDENTITY((GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.z = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y), ((GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.z = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y)) * 1u) << 0u);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.z, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.z) | 0u) + GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y, clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y, max(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y, (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y) | 0u), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y)), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y, GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y)) + ((GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y + _GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(max(vec2(-67.13, -20.44), vec2(-4.8, 8920.7828))) : injectionSwitch)).x)))) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y);
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.w = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.x = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.w;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.z, (true ? GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.z : _GLF_FUZZED(workgroup_size)))], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.y = read_1;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, false)))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.x], uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.y, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.y) >> 0u) + 1), _GLF_IDENTITY(4, 0 | (4)), 64, 4);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ((_GLF_IDENTITY(false, bool(bool(false))))) && true)) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.3) : injectionSwitch.y))))))
  barrier();
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.z], _GLF_IDENTITY(4, (4) >> 0), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y, (GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y) << 0u) + 1 < GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y, min(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y, max(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y, _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y, 0u | (GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y)))), GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y)), (GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.y) << 0u) + 1 < GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_14subgroup_idsubgroup_sizevirtual_gidworkgroup_size.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         barrier();
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     atomicStore(buf[GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.x], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id), ((_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)) + uvec4(0u, 0u, 0u, 0u)) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(uint(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), clamp(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), clamp(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), clamp(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2)))), (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), clamp(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2))))) | (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), clamp(uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2), uint(_GLF_IDENTITY(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id, (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id) | (_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id)).y + 1 == read_2))))))) | 0u))))) + 1, 4, 64, _GLF_IDENTITY(4, (4) * 1));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, 0 + (6))))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false)))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
      }
    }
   atomicStore(buf[GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_basenext_virtual_gid.xyz.x], _GLF_IDENTITY(uint(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.y + 1 == read_2), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.0)), bool(false))), injectionSwitch.x)) ^ (_GLF_IDENTITY(uint(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.y + 1 == read_2), 0u ^ (uint(_GLF_struct_replacement_10.GLF_merged4_0_1_13_1_1_6_2_1_14_3_1_12num_workgroupread_1workgroup_baseworkgroup_id.y + 1 == read_2))))) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bool(true))), false))) ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(dot(vec4(8.0, 39.62, 2.8, 3.3), vec4(-884.538, -98.88, 6853.7957, -324.920)), clamp(dot(vec4(8.0, 39.62, 2.8, 3.3), vec4(-884.538, -98.88, 6853.7957, -324.920)), dot(vec4(8.0, 39.62, 2.8, 3.3), vec4(-884.538, -98.88, 6853.7957, -324.920)), dot(vec4(8.0, 39.62, 2.8, 3.3), vec4(-884.538, -98.88, 6853.7957, -324.920))))))) > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, 39.62, 2.8, 3.3), vec4(-884.538, _GLF_IDENTITY(-98.88, max(-98.88, -98.88)), 6853.7957, -324.920))))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, 39.62, 2.8, 3.3), vec4(-884.538, _GLF_IDENTITY(-98.88, max(-98.88, -98.88)), 6853.7957, -324.920))))) > injectionSwitch.y)))), ! (! (false || _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, _GLF_IDENTITY(39.62, clamp(39.62, 39.62, 39.62)), 2.8, 3.3), vec4(-884.538, -98.88, _GLF_IDENTITY(6853.7957, float(_GLF_IDENTITY(vec2(6853.7957, 0.0), clamp(_GLF_IDENTITY(vec2(6853.7957, 0.0), vec2(1.0, 1.0) * (vec2(6853.7957, 0.0))), vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(-324.920, min(_GLF_IDENTITY(-324.920, (_GLF_IDENTITY(-324.920, 1.0 * (-324.920))) - 0.0), -324.920)), (false ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(-324.920, 0.0 + _GLF_IDENTITY((-324.920), mix(float(_GLF_FUZZED(-772.847)), float(_GLF_IDENTITY((-324.920), min((-324.920), (-324.920)))), bool(true))))))))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, _GLF_IDENTITY(39.62, clamp(_GLF_IDENTITY(39.62, (false ? _GLF_FUZZED(-0.4) : 39.62)), 39.62, 39.62)), _GLF_IDENTITY(2.8, mix(float(_GLF_IDENTITY(2.8, min(2.8, 2.8))), float(_GLF_FUZZED(vec3(-10.30, -6096.4512, -1.3).b)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 3.3), vec4(-884.538, -98.88, _GLF_IDENTITY(_GLF_IDENTITY(6853.7957, clamp(6853.7957, 6853.7957, 6853.7957)), float(_GLF_IDENTITY(vec2(6853.7957, 0.0), clamp(_GLF_IDENTITY(vec2(6853.7957, 0.0), vec2(1.0, 1.0) * (vec2(6853.7957, 0.0))), vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))))), _GLF_IDENTITY(-324.920, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(_GLF_IDENTITY(-324.920, 0.0 + (-324.920)), (_GLF_IDENTITY(_GLF_IDENTITY(-324.920, 0.0 + (-324.920)), mix(float(_GLF_FUZZED(-5090.3268)), float(_GLF_IDENTITY(-324.920, 0.0 + (-324.920))), bool(true)))) - sin(0.0)))))))), min((_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, _GLF_IDENTITY(39.62, clamp(_GLF_IDENTITY(39.62, (false ? _GLF_FUZZED(-0.4) : 39.62)), 39.62, 39.62)), _GLF_IDENTITY(2.8, mix(float(_GLF_IDENTITY(2.8, min(2.8, 2.8))), float(_GLF_FUZZED(vec3(-10.30, -6096.4512, -1.3).b)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 3.3), vec4(-884.538, -98.88, _GLF_IDENTITY(_GLF_IDENTITY(6853.7957, clamp(6853.7957, 6853.7957, 6853.7957)), float(_GLF_IDENTITY(vec2(6853.7957, 0.0), clamp(_GLF_IDENTITY(vec2(6853.7957, 0.0), vec2(1.0, 1.0) * (vec2(6853.7957, 0.0))), vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))))), _GLF_IDENTITY(-324.920, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(_GLF_IDENTITY(-324.920, 0.0 + (-324.920)), (_GLF_IDENTITY(_GLF_IDENTITY(-324.920, 0.0 + (-324.920)), mix(float(_GLF_FUZZED(-5090.3268)), float(_GLF_IDENTITY(-324.920, 0.0 + (-324.920))), bool(true)))) - sin(0.0)))))))), (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, _GLF_IDENTITY(39.62, clamp(_GLF_IDENTITY(39.62, (false ? _GLF_FUZZED(-0.4) : 39.62)), 39.62, 39.62)), _GLF_IDENTITY(2.8, mix(float(_GLF_IDENTITY(2.8, min(2.8, 2.8))), float(_GLF_FUZZED(vec3(-10.30, -6096.4512, -1.3).b)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 3.3), vec4(-884.538, -98.88, _GLF_IDENTITY(_GLF_IDENTITY(6853.7957, clamp(6853.7957, 6853.7957, 6853.7957)), float(_GLF_IDENTITY(vec2(6853.7957, 0.0), clamp(_GLF_IDENTITY(vec2(6853.7957, 0.0), vec2(1.0, 1.0) * (vec2(6853.7957, 0.0))), vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))))), _GLF_IDENTITY(-324.920, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(_GLF_IDENTITY(-324.920, 0.0 + (-324.920)), (_GLF_IDENTITY(_GLF_IDENTITY(-324.920, 0.0 + (-324.920)), mix(float(_GLF_FUZZED(-5090.3268)), float(_GLF_IDENTITY(-324.920, 0.0 + (-324.920))), bool(true)))) - sin(0.0))))))))))) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, _GLF_IDENTITY(39.62, clamp(39.62, 39.62, 39.62)), 2.8, 3.3), vec4(-884.538, -98.88, _GLF_IDENTITY(6853.7957, float(_GLF_IDENTITY(vec2(6853.7957, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.0) : 0.0)) : _GLF_FUZZED(392.003)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(6853.7957, 0.0), max(vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))), vec2(1.0, 1.0) * (vec2(6853.7957, 0.0))), vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))))), _GLF_IDENTITY(-324.920, _GLF_IDENTITY((false ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(-324.920, 0.0 + (-324.920))), float(mat2x3((false ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(-324.920, 0.0 + (-324.920))), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))))) > injectionSwitch.y))), ! (! (bool(((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(vec4(8.0, _GLF_IDENTITY(39.62, clamp(39.62, 39.62, 39.62)), 2.8, 3.3), vec4(-884.538, -98.88, _GLF_IDENTITY(6853.7957, float(_GLF_IDENTITY(vec2(6853.7957, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.0) : 0.0)) : _GLF_FUZZED(392.003)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(6853.7957, 0.0), max(vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))), vec2(1.0, 1.0) * (vec2(6853.7957, 0.0))), vec2(6853.7957, 0.0), vec2(6853.7957, 0.0))))), _GLF_IDENTITY(-324.920, _GLF_IDENTITY((false ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(-324.920, 0.0 + (-324.920))), float(mat2x3((false ? _GLF_FUZZED(-1.0) : _GLF_IDENTITY(-324.920, 0.0 + (-324.920))), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))))) > injectionSwitch.y))))))))))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.7) : injectionSwitch.y))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.7) : injectionSwitch.y)))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(13.86)), vec2(_GLF_FUZZED(-6.5), (injectionSwitch)[1]), bvec2(false, true)))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(378.055))) > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))))
                return;
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false))), true, true, _GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(false, false || (false)))))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y))) || false), false, false))), true, true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
                      continue;
                    }
                  }
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3065.2087)), float(injectionSwitch.x), bool(true))), 1.0, 0.0, 0.0))))) + 0.0)) / 1.0)) > injectionSwitch.y) && true)))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))), false || (bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))))))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8082.3750))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
    }
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-47174) : int(4))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(10189))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) << 0) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec3((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec3((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(80.87)), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.1) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-23.32)), bool(false)))))), bool(true))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) - sin(0.0)), float(_GLF_FUZZED(-4.7)), bool(false)))) - abs(0.0)), injectionSwitch.y))))) || false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
}
