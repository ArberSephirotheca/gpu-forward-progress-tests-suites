#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) && true)))));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)), (false ? _GLF_FUZZED(-33.35) : float(vec4(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))))), injectionSwitch.x)))) > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(6.4) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(6.4) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(6.4) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))) || false)))) || false, ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(6.4) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(6.4) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, length(vec3(0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0, sin(tan(0.0)), 0.0, 0.0, 1.0, tan(0.0), 1.0)), (false ? _GLF_FUZZED(vec2(-4987.3920, -2.4)) : vec2(mat4x3(injectionSwitch, length(vec3(0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0, sin(tan(0.0)), 0.0, 0.0, 1.0, tan(0.0), 1.0))))).x, injectionSwitch.x)))))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(6.4) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))) || false)))) || false) && true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.y = subgroup_id, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.y = subgroup_id) / 1u);
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), ! (! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false)))))), true, true)))))))), true))), ! (_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true)))), bool(bvec4(_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true)))), (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))) && true), true, true, false)))))))), false, false))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), ! (! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false)))))), true, true)))))))), true))), ! (_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true)))), bool(bvec4(_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true)))), (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))) && true), true, true, false)))))))), false, false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(true, true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(bvec4(true, true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))), ! _GLF_IDENTITY((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true))))), bool(bool((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true))))), bool(bool((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bool(! (bool(bvec3(_GLF_IDENTITY((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true))))), bool(bool((! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, false || (false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true)), true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(false || (_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))))), bool(bool(bool(bvec3(false, false, true)))))))), false || (false)))))))), true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bvec2(bool(bool(_GLF_IDENTITY(false, false || (false)))), false))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), ! (! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false)))))), true, true)))))))), true))), ! (_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, false || (false)))), false || (! (bool(_GLF_IDENTITY(false, false || (false))))))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true)))), bool(bvec4(_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))), _GLF_IDENTITY(bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))), false, true, false)), (bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))), false, true, false))) || false)))), true)))), (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))) && true), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(false, false || (false)))))))), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false))), ! (! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), true && (false || (false)))) || false)))))), true, true)))))))), true))), ! (_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, false || (false)))), false || (! (bool(_GLF_IDENTITY(false, false || (false))))))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true)))), bool(bvec4(_GLF_IDENTITY(! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))), _GLF_IDENTITY(bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))), false, true, false)), (bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))), false, true, false))) || false)))), true)))), (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true)))))), false || (false)))))))), true))))) && true), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))), false, false))))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (false))))))))
              break;
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec4(-6.0, -64.70, -2.7, 919.734).t)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))) : _GLF_FUZZED(74.78))), injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(1.0, 1.0) * (max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(mix(injectionSwitch, vec2(5.1, 559.487), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, true)))), false)))), clamp((true ? injectionSwitch : _GLF_FUZZED(mix(injectionSwitch, vec2(5.1, 559.487), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, true)))), false)))), (true ? injectionSwitch : _GLF_FUZZED(mix(injectionSwitch, vec2(5.1, 559.487), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, true)))), false)))), (true ? injectionSwitch : _GLF_FUZZED(mix(injectionSwitch, vec2(5.1, 559.487), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, true)))), false))))))).y))))))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0, (_GLF_IDENTITY((((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0, 0 ^ (_GLF_IDENTITY((((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0, ((((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0) + 0)))) - (0 >> _GLF_IDENTITY(int(0), int(0))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY((6) | 0, ((6) | 0) | ((6) | 0)))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), ~ (~ (int(6))))) | 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(ivec3(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), ~ (~ (int(6))))) | 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) | (int(ivec3(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), ~ (~ (int(6))))) | 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))))), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(_GLF_IDENTITY(6, ~ (~ (6)))))) >> _GLF_IDENTITY(int(6), int(6))) << 0)))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)))))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)), ! (! (_injected_loop_counter < (_GLF_IDENTITY(((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)), (((1 & 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << 0)))))))))), false)))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3832.3202) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), 0.0, 0.0, 0.0, 0.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-34.73), (vec3(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0))[1], _GLF_FUZZED(-377.379)), vec3(_GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[0], min((vec3(1.0, 1.0, 1.0))[0], _GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[0], min((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[0])))), _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), (true ? mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-34.73), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3((vec3(1.0, 1.0, 1.0))[_GLF_IDENTITY(0, ~ (~ (0)))], _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x4(-20.65, 880.372, 749.661, 4.5, 9.8, -229.287, -541.288, _GLF_IDENTITY(243.946, clamp(243.946, 243.946, 243.946)), 0.5, -524.134, 892.063, 37.59))))), clamp(vec3(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-34.73), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), (true ? mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-34.73), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.4) : _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.6))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x4(-20.65, 880.372, 749.661, 4.5, 9.8, -229.287, -541.288, 243.946, 0.5, -524.134, 892.063, 37.59))))), vec3(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_IDENTITY(_GLF_FUZZED(-34.73), max(_GLF_FUZZED(-34.73), _GLF_FUZZED(-34.73))), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), (true ? mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-34.73), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x4(_GLF_IDENTITY(-20.65, min(_GLF_IDENTITY(-20.65, (_GLF_IDENTITY(-20.65, (true ? -20.65 : _GLF_FUZZED(836.459)))) * 1.0), -20.65)), 880.372, 749.661, 4.5, 9.8, -229.287, -541.288, 243.946, 0.5, -524.134, 892.063, 37.59))))), vec3(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-34.73), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3(_GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[0], 1.0 * ((vec3(1.0, 1.0, 1.0))[0])), _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), (true ? mat3x4(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(_GLF_IDENTITY(-34.73, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -34.73 : _GLF_FUZZED(3.6)))), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-377.379)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true))), 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, exp(0.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(mat3x4(-20.65, 880.372, 749.661, 4.5, 9.8, -229.287, -541.288, 243.946, 0.5, -524.134, 892.063, 37.59))))))))))), 0.0), _GLF_IDENTITY(mat2x4(mat4(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-924.495))), 0.0)), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.7)), float(0.0), bool(true)))))), mat2x4(mat2x4(mat2x4(mat4(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), 0.0, 0.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))))))) > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                    return;
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 | (0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         continue;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z = subgroup_size;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.6), _GLF_FUZZED(2.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))) && true))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))) && true))))))))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(~ (~ (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), (~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))) * 1) << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))) * 1) << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))) * 1) << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x))), _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u)) ^ 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
  return;
 do
  {
   GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.x = _GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup));
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.y * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)) && true))
          {
          }
         else
          {
           GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.w = workgroup_base;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))), true)))));
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, min(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, min(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base) ^ uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, uvec4(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base[0], GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base[1], GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base[2], GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base[3]))))) >> uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(uvec4(92431u, 28890u, _GLF_IDENTITY(180828u, uint(uvec2(180828u, 1u))), 124678u)))), GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)).w + GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.y * _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))) | uvec4(0u, 0u, 0u, 0u)).z + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(true, true && (true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))) || false)) || (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         continue;
        }
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), (uint(uvec2(0u, 0u))) | (uint(uvec2(0u, 0u)))))) ^ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)).y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, max(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)), (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base) << (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(4u), uvec4(4u)))).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, max(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)), (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base) << (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(4u), uvec4(4u)))).y : _GLF_FUZZED(subgroup_local_id))) * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, max(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)), (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base) << (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(4u), uvec4(4u)))).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, max(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)), (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base) << (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(4u), uvec4(4u)))).y : _GLF_FUZZED(subgroup_local_id))) * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.y * GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z))))) + ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, min(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, clamp(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY((GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z), uint(uvec4((GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z), (0u ^ 0u), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) + 0u), GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z)))));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x = read_1, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x = read_1, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x = read_1) ^ (0u | 0u)), (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x = read_1, (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x = read_1) ^ (0u | _GLF_IDENTITY(0u, min(0u, 0u))))) + 0u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), min(~ (1), ~ (_GLF_IDENTITY(1, (1) << 0)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1))))), _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1)))) >> (0 << _GLF_IDENTITY(int(6), int(6))))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], uint(uint(buf[virtual_gid]))), buf[virtual_gid])), 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))), true && (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))), true && (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))), true && (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), (0u | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) ^ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) / 1u, (false ? _GLF_FUZZED(workgroup_id) : (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) / 1u))))) < GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.z)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 0.0, 0.0)), 1.0)), mix(float(_GLF_FUZZED(-21.95)), float(float(vec3(injectionSwitch.x, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 0.0, 0.0)), 1.0))), bool(true)))) > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(true, (true) && true), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false || (bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(true, (true) && true), true), false))))), false, false, true)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))), true, true))), false, false, true)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))), true, true))), false, false, true)))), ! (! (bool(bool(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))), true, true))), false, false, true))))))))), true && (bool(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true, true))), false, false, true)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), min(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), max((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), (true ? injectionSwitch.y : _GLF_FUZZED(-5.5)))), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), float(mat3x4((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))), true && ((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), min(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), max((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), (true ? injectionSwitch.y : _GLF_FUZZED(-5.5)))), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), float(mat3x4((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y)))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY((_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-5.5), 1.0 * (true ? injectionSwitch.y : _GLF_FUZZED(-5.5)))), min(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), max((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), (true ? injectionSwitch.y : _GLF_FUZZED(-5.5)))), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), float(mat3x4((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(9.9)), vec2(_GLF_FUZZED(8.4), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).x)) > injectionSwitch.y))))), true && ((! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), min(_GLF_IDENTITY(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), float(mat2x3((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), 1.0, 1.0, abs(0.0), 1.0, length(vec3(0.0, 0.0, 0.0))))), max((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), (true ? injectionSwitch.y : _GLF_FUZZED(-5.5)))), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), float(mat3x4((true ? injectionSwitch.y : _GLF_FUZZED(-5.5)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0), mat4(1.0) * (mat2x4(injectionSwitch, 0.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0))))).y))))))))))) && true)), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y)))), true, true, true))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-5.5))), ! (! (injectionSwitch.x > injectionSwitch.y)))), true, true, true)))))))))))))))) && true)))
    {
     for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, max(7, 7))) - 0), ~ (~ (7)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(7), 0), (ivec2(int(7), 0)) ^ ivec2(0, 0))), min(int(_GLF_IDENTITY(ivec2(int(7), 0), _GLF_IDENTITY((ivec2(int(_GLF_IDENTITY(7, int(ivec3(_GLF_IDENTITY(7, clamp(7, 7, 7)), 0, (0 & 80416))))), 0)) ^ ivec2(0, 0), min((ivec2(int(_GLF_IDENTITY(7, int(ivec3(_GLF_IDENTITY(7, clamp(7, 7, 7)), 0, (0 & 80416))))), 0)) ^ ivec2(0, 0), (ivec2(int(_GLF_IDENTITY(7, int(ivec3(_GLF_IDENTITY(7, clamp(7, 7, 7)), 0, (0 & 80416))))), 0)) ^ ivec2(0, 0))))), int(_GLF_IDENTITY(ivec2(int(7), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (0))), (ivec2(int(7), 0)) ^ _GLF_IDENTITY(ivec2(0, 0), max(_GLF_IDENTITY(ivec2(0, 0), clamp(ivec2(0, 0), ivec2(0, 0), ivec2(0, 0))), ivec2(0, 0)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   do
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, clamp(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (false ? _GLF_FUZZED(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base) : GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))), clamp(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))), min(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))), _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, ~ (~ (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))))), _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base))) * uvec4(1u, 1u, 1u, 1u))))))))).x + 1 == _GLF_IDENTITY(read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_2, (read_2) | (read_2)), (_GLF_IDENTITY(read_2, _GLF_IDENTITY((read_2) | (read_2), max(_GLF_IDENTITY((read_2) | (read_2), ((read_2) | (read_2)) >> 0u), _GLF_IDENTITY((read_2) | (_GLF_IDENTITY(read_2, min(_GLF_IDENTITY(read_2, (read_2) + 0u), read_2))), ((_GLF_IDENTITY(read_2, max(_GLF_IDENTITY(read_2, (read_2) << 0u), read_2))) | (read_2)) - (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))))) | (_GLF_IDENTITY(read_2, (_GLF_IDENTITY(read_2, (read_2) ^ 0u)) | (read_2))))) - 0u)) + 1, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(-20164, (-20164) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) & (45448 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), max(_GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), min(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), (true ? clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid) : _GLF_FUZZED(virtual_gid))))))), ~ (~ ((next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), max(_GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), min(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), (true ? clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid) : _GLF_FUZZED(virtual_gid))))))))))), next_virtual_gid, next_virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(uint(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, 1))), 0 | (~ (_GLF_IDENTITY(1, max(1, 1))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, 1))), 0 | (~ (_GLF_IDENTITY(1, max(1, 1))))))))), (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, 1))), 0 | (~ (_GLF_IDENTITY(1, max(1, 1)))))))))) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, 1))), 0 | (~ (_GLF_IDENTITY(1, max(1, 1))))))))))), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, 1))), 0 | (~ (_GLF_IDENTITY(1, max(1, 1))))))))))), (_GLF_IDENTITY(uint(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x + _GLF_IDENTITY(1, (1) | 0) == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(mix(35451, -5879, false)) : 1)), min(1, 1)), (uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base, (false ? _GLF_FUZZED(uvec4(8027u, 18702u, 41240u, 69693u)) : GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base)).x + _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((-49146 - -5075))))) == read_2) + _GLF_IDENTITY(1, min(1, 1))) / 1u)) / 1u), 0u ^ (uint(GLF_merged4_0_1_6_1_1_11_2_1_13_3_1_14read_1subgroup_idsubgroup_sizeworkgroup_base.x + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 + (1)), 1, _GLF_IDENTITY(1, (1) / 1))) == read_2) + 1)), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(true);
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))))) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))))) && true), (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
