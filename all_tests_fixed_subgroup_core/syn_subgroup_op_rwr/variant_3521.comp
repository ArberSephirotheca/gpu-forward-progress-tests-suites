#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 mat3x2 _f0;
 ivec4 _f1;
 ivec3 _f2;
 mat4x3 _f3;
 bvec4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_11 {
 ivec3 _f0;
 mat4x2 _f1;
 ivec4 _f2;
 int _f3;
 mat2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 ivec4 _f1;
 bvec3 _f2;
 uvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_8 {
 uint _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_13 {
 uint workgroup_id;
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_6 {
 ivec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 bvec3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 mat4x3 _f1;
 bvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 vec3 _f3;
 bvec2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 vec3 _f1;
 mat2 _f2;
 float _f3;
} ;

struct _GLF_struct_0 {
 uint _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 uvec4 _f2;
 float _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_14 {
 _GLF_struct_3 _f0;
 mat4 _f1;
 ivec4 _f2;
 vec2 _f3;
 _GLF_struct_7 _f4;
 bvec3 _f5;
 _GLF_struct_13 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_3(_GLF_struct_0(1u), _GLF_struct_1(ivec3(1), vec3(1.0), mat2(1.0), 1.0), uvec4(1u), 1.0, _GLF_struct_2(mat4(1.0))), mat4(1.0), ivec4(1), vec2(1.0), _GLF_struct_7(_GLF_struct_4(mat4x2(1.0), mat4x3(1.0), bvec3(true), mat3x4(1.0)), _GLF_struct_5(ivec3(1), bvec3(true), uvec4(1u)), _GLF_struct_6(ivec3(1), true), vec3(1.0), bvec2(true), vec3(1.0)), bvec3(true), _GLF_struct_13(gl_WorkGroupID.x, _GLF_struct_8(1u, uvec2(1u)), _GLF_struct_9(vec3(1.0), uvec4(1u)), _GLF_struct_10(uvec2(1u), ivec4(1), bvec3(true), uvec3(1u), mat4x2(1.0)), _GLF_struct_11(ivec3(1), mat4x2(1.0), ivec4(1), 1, mat2(1.0), ivec3(1)), _GLF_struct_12(mat3x2(1.0), ivec4(1), ivec3(1), mat4x3(1.0), bvec4(true), mat3x2(1.0)), mat3x4(1.0)));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_14._f6.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     do
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       subgroupAll(false);
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
     subgroupAll(true);
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
