#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 float _f0;
 mat4 _f1;
 ivec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 vec2 _f1;
 mat3x4 _f2;
 mat4x2 _f3;
 mat2x4 _f4;
 bvec4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 ivec2 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 bvec4 _f4;
 vec4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 mat3x2 _f1;
 mat3 _f2;
 ivec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 mat2x3 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 bvec3 _f4;
 _GLF_struct_4 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_0 {
 uint subgroup_local_id;
 mat3x4 _f0;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 vec2 _f1;
 mat3x4 _f2;
 vec2 _f3;
 mat4 _f4;
 _GLF_struct_0 _f5;
 uint _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 float _f1;
 mat2 _f2;
 vec4 _f3;
 vec3 _f4;
 _GLF_struct_6 _f5;
 mat4 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(mat4x3(1.0), vec2(1.0), mat3x4(1.0), vec2(1.0), mat4(1.0), _GLF_struct_0(gl_SubgroupInvocationID, mat3x4(1.0)), 1u), 1.0, mat2(1.0), vec4(1.0), vec3(1.0), _GLF_struct_6(ivec2(1), mat2x3(1.0), _GLF_struct_2(mat4x2(1.0), mat3x2(1.0), mat3(1.0), ivec3(1), vec3(1.0)), _GLF_struct_3(mat4(1.0), ivec2(1), mat4x3(1.0), mat2x4(1.0), bvec4(true), vec4(1.0), mat3(1.0)), bvec3(true), _GLF_struct_4(bvec4(true), vec2(1.0), mat3x4(1.0), mat4x2(1.0), mat2x4(1.0), bvec4(true), mat2(1.0)), _GLF_struct_5(1.0, mat4(1.0), ivec2(1), uvec2(1u))), mat4(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_7._f0._f5.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_7._f0._f5.subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_struct_replacement_7._f0._f5.subgroup_local_id + 1 < subgroup_size)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
                }
               else
                {
                }
              }
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               subgroupAll(false);
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(true);
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
