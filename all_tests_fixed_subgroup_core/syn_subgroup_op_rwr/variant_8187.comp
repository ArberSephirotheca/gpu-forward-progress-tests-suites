#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 mat2 _f0;
 uvec4 _f1;
 int _f2;
 uint _f3;
 bvec2 _f4;
 float _f5;
 vec4 _f6;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 mat3x4 _f3;
 bvec4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 mat2 _f1;
 uvec4 _f2;
 _GLF_struct_13 _f3;
 mat3x4 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 bool _f1;
 mat2 _f2;
 mat2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 mat3 _f1;
 ivec4 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_16 {
 uint subgroup_local_id;
 _GLF_struct_11 _f0;
 ivec2 _f1;
 ivec4 _f2;
 _GLF_struct_15 _f3;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 uint subgroup_id;
 mat3x2 _f1;
 _GLF_struct_7 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 ivec4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 vec3 _f1;
 ivec2 _f2;
 float _f3;
 uint workgroup_size;
 bvec2 _f4;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 vec4 _f1;
 ivec2 _f2;
 bvec4 _f3;
 vec4 _f4;
 vec3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 _GLF_struct_1 _f2;
 uvec4 _f3;
 _GLF_struct_2 _f4;
 mat4x2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bvec3 _f1;
 bvec3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(mat2x4(1.0), gl_SubgroupID, mat3x2(1.0), _GLF_struct_7(_GLF_struct_6(mat3x2(1.0))), mat2x3(1.0));
uint subgroup_size = 16;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(gl_SubgroupInvocationID, _GLF_struct_11(_GLF_struct_9(bvec3(true), true, mat2(1.0), mat2(1.0), uvec2(1u)), mat3(1.0), ivec4(1), _GLF_struct_10(vec3(1.0), mat2x4(1.0), mat2x4(1.0))), ivec2(1), ivec4(1), _GLF_struct_15(_GLF_struct_12(bvec4(true), mat2x3(1.0), bvec3(true), mat3x4(1.0), bvec4(true), uvec3(1u)), mat2(1.0), uvec4(1u), _GLF_struct_13(mat2x4(1.0), uvec3(1u)), mat3x4(1.0), _GLF_struct_14(mat2(1.0), uvec4(1u), 1, 1u, bvec2(true), 1.0, vec4(1.0))));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(_GLF_struct_0(mat3x2(1.0)), mat3x4(1.0), _GLF_struct_1(bvec4(true), vec4(1.0), ivec2(1), bvec4(true), vec4(1.0), vec3(1.0), mat4x2(1.0)), uvec4(1u), _GLF_struct_2(mat3x2(1.0), vec3(1.0), ivec2(1), 1.0, gl_WorkGroupSize.x, bvec2(true)), mat4x2(1.0), _GLF_struct_3(mat3x4(1.0), ivec4(1), bvec3(true))), bvec3(true), bvec3(true));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_5._f0._f4.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_8.subgroup_id * subgroup_size + _GLF_struct_replacement_16.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_8.subgroup_id * subgroup_size + ((_GLF_struct_replacement_16.subgroup_local_id + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_struct_replacement_16.subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           subgroupAll(true);
          }
        }
      }
    }
  }
}
