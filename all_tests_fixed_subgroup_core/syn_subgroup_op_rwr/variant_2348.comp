#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_178 {
 vec3 _f0;
} ;

struct _GLF_struct_179 {
 _GLF_struct_178 _f0;
 int _injected_loop_counter;
 uint _f1;
} ;

struct _GLF_struct_176 {
 ivec2 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
 vec2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_175 {
 mat3x4 _f0;
 mat3x2 _f1;
 mat4x2 _f2;
 ivec4 _f3;
 mat2 _f4;
 mat3x4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_177 {
 ivec4 _f0;
 uint _f1;
 mat3x4 _f2;
 int _f3;
 _GLF_struct_175 _f4;
 _GLF_struct_176 _f5;
} ;

struct _GLF_struct_180 {
 bvec4 _f0;
 vec2 _f1;
 _GLF_struct_177 _f2;
 _GLF_struct_179 _f3;
 ivec4 _f4;
 int _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_173 {
 int _f0;
} ;

struct _GLF_struct_171 {
 bvec2 _f0;
} ;

struct _GLF_struct_170 {
 bvec3 _f0;
 uint _f1;
 mat4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_172 {
 _GLF_struct_170 _f0;
 _GLF_struct_171 _f1;
} ;

struct _GLF_struct_174 {
 int _injected_loop_counter;
 _GLF_struct_172 _f0;
 bvec2 _f1;
 _GLF_struct_173 _f2;
} ;

struct _GLF_struct_167 {
 mat2x4 _f0;
} ;

struct _GLF_struct_166 {
 vec4 _f0;
 bvec4 _f1;
 uvec4 _f2;
 mat3x4 _f3;
 mat3 _f4;
 mat4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_168 {
 _GLF_struct_166 _f0;
 _GLF_struct_167 _f1;
} ;

struct _GLF_struct_165 {
 float _f0;
 uvec4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_163 {
 uint _f0;
} ;

struct _GLF_struct_164 {
 _GLF_struct_163 _f0;
 uvec3 _f1;
 mat2 _f2;
 vec4 _f3;
 int _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_161 {
 mat2x3 _f0;
 bool _f1;
 ivec4 _f2;
 mat4x2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_162 {
 _GLF_struct_161 _f0;
} ;

struct _GLF_struct_160 {
 mat3x2 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_169 {
 _GLF_struct_160 _f0;
 _GLF_struct_162 _f1;
 _GLF_struct_164 _f2;
 _GLF_struct_165 _f3;
 _GLF_struct_168 _f4;
} ;

struct _GLF_struct_157 {
 mat4x3 _f0;
} ;

struct _GLF_struct_156 {
 ivec2 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 mat4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_158 {
 vec3 _f0;
 _GLF_struct_156 _f1;
 _GLF_struct_157 _f2;
 vec4 _f3;
 mat4x2 _f4;
 vec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_154 {
 uvec2 _f0;
 mat4x3 _f1;
 bvec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_153 {
 uint _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_152 {
 float _f0;
 ivec4 _f1;
 bool _f2;
} ;

struct _GLF_struct_151 {
 ivec2 _f0;
 vec3 _f1;
 bvec4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_155 {
 _GLF_struct_151 _f0;
 int _injected_loop_counter;
 _GLF_struct_152 _f1;
 _GLF_struct_153 _f2;
 mat4x2 _f3;
 _GLF_struct_154 _f4;
} ;

struct _GLF_struct_159 {
 _GLF_struct_155 _f0;
 mat4x3 _f1;
 _GLF_struct_158 _f2;
} ;

struct _GLF_struct_148 {
 mat4 _f0;
 bvec3 _f1;
 mat2x4 _f2;
 vec2 _f3;
 mat2 _f4;
 mat3x2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_147 {
 mat3 _f0;
 uvec4 _f1;
 bool _f2;
 vec4 _f3;
 mat3x4 _f4;
 mat2x4 _f5;
 uint _f6;
} ;

struct _GLF_struct_149 {
 uvec3 _f0;
 _GLF_struct_147 _f1;
 _GLF_struct_148 _f2;
 vec2 _f3;
 int _f4;
 float _f5;
 vec3 _f6;
} ;

struct _GLF_struct_145 {
 mat3 _f0;
 vec4 _f1;
 bvec3 _f2;
 int _f3;
} ;

struct _GLF_struct_144 {
 bool _f0;
 float _f1;
 mat4 _f2;
 mat2x4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_146 {
 ivec2 _f0;
 _GLF_struct_144 _f1;
 vec2 _f2;
 _GLF_struct_145 _f3;
} ;

struct _GLF_struct_142 {
 bool _f0;
 uvec4 _f1;
 ivec3 _f2;
 float _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_143 {
 vec2 _f0;
 mat2 _f1;
 mat4 _f2;
 _GLF_struct_142 _f3;
} ;

struct _GLF_struct_140 {
 vec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_139 {
 mat4x2 _f0;
 mat2x3 _f1;
 mat4x2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_138 {
 ivec2 _f0;
 bvec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_141 {
 ivec2 _f0;
 mat4x2 _f1;
 _GLF_struct_138 _f2;
 _GLF_struct_139 _f3;
 _GLF_struct_140 _f4;
 bvec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_137 {
 ivec3 _f0;
} ;

struct _GLF_struct_150 {
 vec4 _f0;
 _GLF_struct_137 _f1;
 mat4 _f2;
 _GLF_struct_141 _f3;
 _GLF_struct_143 _f4;
 _GLF_struct_146 _f5;
 _GLF_struct_149 _f6;
} ;

struct _GLF_struct_134 {
 mat3x2 _f0;
 uint _f1;
 ivec2 _f2;
 vec3 _f3;
 vec4 _f4;
 mat2x3 _f5;
 uint _f6;
} ;

struct _GLF_struct_135 {
 mat4x3 _f0;
 vec3 _f1;
 mat4x3 _f2;
 _GLF_struct_134 _f3;
} ;

struct _GLF_struct_133 {
 int _injected_loop_counter;
 uvec2 _f0;
} ;

struct _GLF_struct_136 {
 mat4 _f0;
 _GLF_struct_133 _f1;
 mat3x2 _f2;
 _GLF_struct_135 _f3;
} ;

struct _GLF_struct_130 {
 vec2 _f0;
 uint _f1;
 uvec2 _f2;
 uvec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_131 {
 mat3x4 _GLF_SWITCH_5_1v;
 _GLF_struct_130 _f0;
} ;

struct _GLF_struct_128 {
 vec2 _f0;
 bvec4 _f1;
 bvec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_127 {
 float _f0;
 vec2 _f1;
 uint _f2;
 mat2x4 _f3;
 mat2x4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_129 {
 mat4 _f0;
 mat3 _f1;
 vec3 _f2;
 mat2x3 _f3;
 _GLF_struct_127 _f4;
 _GLF_struct_128 _f5;
 uint _f6;
} ;

struct _GLF_struct_125 {
 ivec2 _f0;
 ivec4 _f1;
 vec4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_126 {
 vec3 _f0;
 vec4 _f1;
 uvec2 _f2;
 _GLF_struct_125 _f3;
 ivec3 _f4;
 ivec2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_123 {
 ivec3 _f0;
} ;

struct _GLF_struct_122 {
 uint _f0;
 bvec4 _f1;
 mat4 _f2;
 uvec3 _f3;
 int _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_124 {
 _GLF_struct_122 _f0;
 _GLF_struct_123 _f1;
} ;

struct _GLF_struct_132 {
 mat3 _f0;
 _GLF_struct_124 _f1;
 _GLF_struct_126 _f2;
 uint _f3;
 _GLF_struct_129 _f4;
 _GLF_struct_131 _f5;
} ;

struct _GLF_struct_119 {
 mat2 _f0;
 bool _f1;
 int _f2;
 ivec2 _f3;
 bvec4 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_120 {
 _GLF_struct_119 _f0;
} ;

struct _GLF_struct_121 {
 mat2x3 _GLF_SWITCH_0_38v;
 _GLF_struct_120 _f0;
} ;

struct _GLF_struct_116 {
 vec2 _f0;
 mat4x2 _f1;
 uvec4 _f2;
 mat4x3 _f3;
 mat4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_117 {
 vec4 _f0;
 mat2x4 _f1;
 _GLF_struct_116 _f2;
 uint subgroup_local_id;
 uint _f3;
} ;

struct _GLF_struct_118 {
 _GLF_struct_117 _f0;
 bool _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_113 {
 ivec3 _f0;
 ivec2 _f1;
 mat3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_114 {
 bvec4 _f0;
 ivec2 _f1;
 _GLF_struct_113 _f2;
 uint _f3;
} ;

struct _GLF_struct_111 {
 mat3 _f0;
 ivec2 _f1;
 mat3x4 _f2;
 bool _f3;
 mat4x3 _f4;
 uint _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_110 {
 vec3 _f0;
 ivec4 _f1;
 float _f2;
 ivec2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_112 {
 float _f0;
 _GLF_struct_110 _f1;
 vec2 _f2;
 _GLF_struct_111 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_115 {
 ivec3 _f0;
 _GLF_struct_112 _f1;
 _GLF_struct_114 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_107 {
 bvec3 _f0;
 mat2x3 _f1;
 mat2x3 _f2;
 bvec4 _f3;
 vec3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_106 {
 mat3 _f0;
} ;

struct _GLF_struct_105 {
 ivec4 _f0;
} ;

struct _GLF_struct_104 {
 uvec4 _f0;
 bool _f1;
 uvec2 _f2;
 vec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_108 {
 _GLF_struct_104 _f0;
 _GLF_struct_105 _f1;
 uint _f2;
 _GLF_struct_106 _f3;
 ivec4 _f4;
 _GLF_struct_107 _f5;
 float _f6;
} ;

struct _GLF_struct_102 {
 int _f0;
 mat4x2 _f1;
 ivec4 _f2;
 uvec3 _f3;
 bvec2 _f4;
 bvec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_101 {
 uvec3 _f0;
 uint _f1;
} ;

struct _GLF_struct_100 {
 float _f0;
 bvec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_99 {
 mat4x2 _f0;
} ;

struct _GLF_struct_103 {
 _GLF_struct_99 _f0;
 mat2 _f1;
 _GLF_struct_100 _f2;
 _GLF_struct_101 _f3;
 _GLF_struct_102 _f4;
} ;

struct _GLF_struct_97 {
 ivec4 _f0;
} ;

struct _GLF_struct_96 {
 mat3 _f0;
 mat2 _f1;
 vec3 _f2;
 float _f3;
} ;

struct _GLF_struct_98 {
 _GLF_struct_96 _f0;
 ivec2 _f1;
 _GLF_struct_97 _f2;
} ;

struct _GLF_struct_94 {
 uvec3 _f0;
 int _f1;
} ;

struct _GLF_struct_93 {
 mat2x4 _f0;
 mat3x2 _f1;
 uvec2 _f2;
 uvec3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_92 {
 mat3x2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_95 {
 mat2 _f0;
 _GLF_struct_92 _f1;
 _GLF_struct_93 _f2;
 _GLF_struct_94 _f3;
 int _f4;
 vec2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_90 {
 bvec4 _f0;
 bvec4 _f1;
 mat4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_89 {
 mat4 _f0;
 uvec2 _f1;
 uvec4 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_88 {
 vec3 _f0;
} ;

struct _GLF_struct_87 {
 mat4 _f0;
} ;

struct _GLF_struct_91 {
 _GLF_struct_87 _f0;
 _GLF_struct_88 _f1;
 _GLF_struct_89 _f2;
 _GLF_struct_90 _f3;
} ;

struct _GLF_struct_109 {
 _GLF_struct_91 _f0;
 _GLF_struct_95 _f1;
 _GLF_struct_98 _f2;
 mat4x3 _GLF_SWITCH_0_14v;
 mat2x4 _f3;
 mat4 _f4;
 _GLF_struct_103 _f5;
 _GLF_struct_108 _f6;
} ;

struct _GLF_struct_84 {
 ivec3 _f0;
} ;

struct _GLF_struct_85 {
 uvec3 _f0;
 vec4 _f1;
 _GLF_struct_84 _f2;
 mat4 _f3;
 vec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_82 {
 vec4 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 bvec3 _f3;
 mat3x2 _f4;
 mat3x4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_81 {
 mat4 _f0;
} ;

struct _GLF_struct_83 {
 mat2x4 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 _GLF_struct_81 _f3;
 mat2x3 _f4;
 _GLF_struct_82 _f5;
 bvec4 _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_79 {
 mat4x3 _f0;
} ;

struct _GLF_struct_78 {
 mat3x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_77 {
 uvec3 _f0;
} ;

struct _GLF_struct_80 {
 mat2x4 _f0;
 _GLF_struct_77 _f1;
 _GLF_struct_78 _f2;
 _GLF_struct_79 _f3;
} ;

struct _GLF_struct_86 {
 uvec3 _f0;
 _GLF_struct_80 _f1;
 _GLF_struct_83 _f2;
 float _f3;
 _GLF_struct_85 _f4;
} ;

struct _GLF_struct_74 {
 mat3 _f0;
 int _f1;
 ivec2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_73 {
 uvec2 _f0;
 mat3x4 _f1;
 vec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_72 {
 bvec4 _f0;
 bvec3 _f1;
 vec4 _f2;
 vec3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_75 {
 mat2x4 _f0;
 _GLF_struct_72 _f1;
 _GLF_struct_73 _f2;
 _GLF_struct_74 _f3;
 uvec2 _f4;
 vec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_70 {
 mat2 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 ivec3 _f3;
 mat4x2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_71 {
 int _f0;
 uvec2 _f1;
 _GLF_struct_70 _f2;
} ;

struct _GLF_struct_68 {
 float _f0;
} ;

struct _GLF_struct_67 {
 vec3 _f0;
 vec3 _f1;
 int _f2;
 bvec2 _f3;
 mat2x4 _f4;
 int _f5;
} ;

struct _GLF_struct_66 {
 mat4x3 _f0;
 mat3 _f1;
 mat4x2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_65 {
 mat3x2 _f0;
} ;

struct _GLF_struct_64 {
 mat2x4 _f0;
 bvec4 _f1;
 ivec2 _f2;
 vec2 _f3;
 uvec3 _f4;
 mat2x4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_69 {
 _GLF_struct_64 _f0;
 uint _f1;
 _GLF_struct_65 _f2;
 _GLF_struct_66 _f3;
 _GLF_struct_67 _f4;
 _GLF_struct_68 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_62 {
 mat3x2 _f0;
 mat4x3 _f1;
 bool _f2;
 uint _f3;
 ivec4 _f4;
 uvec2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_61 {
 bool _f0;
 bvec4 _f1;
 float _f2;
 uint _f3;
 vec2 _f4;
 uvec3 _f5;
 int _f6;
} ;

struct _GLF_struct_63 {
 _GLF_struct_61 _f0;
 _GLF_struct_62 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_76 {
 int _injected_loop_counter;
 _GLF_struct_63 _f0;
 _GLF_struct_69 _f1;
 mat3 _f2;
 bool _f3;
 _GLF_struct_71 _f4;
 bool _f5;
 _GLF_struct_75 _f6;
} ;

struct _GLF_struct_58 {
 ivec4 _f0;
 ivec3 _f1;
 bvec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_57 {
 bool _f0;
 mat2x4 _f1;
 bvec4 _f2;
 ivec3 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_56 {
 int _f0;
 int _f1;
 bvec4 _f2;
 vec2 _f3;
 mat2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_59 {
 _GLF_struct_56 _f0;
 uint _f1;
 mat2x3 _f2;
 uvec4 _f3;
 _GLF_struct_57 _f4;
 _GLF_struct_58 _f5;
} ;

struct _GLF_struct_54 {
 bvec4 _f0;
} ;

struct _GLF_struct_53 {
 mat4x3 _f0;
 bvec2 _f1;
 uvec3 _f2;
 uvec4 _f3;
 float _f4;
 float _f5;
 mat4 _f6;
} ;

struct _GLF_struct_52 {
 uvec4 _f0;
 mat2 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_51 {
 uvec4 _f0;
 bvec4 _f1;
 ivec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_50 {
 ivec3 _f0;
} ;

struct _GLF_struct_55 {
 _GLF_struct_50 _f0;
 _GLF_struct_51 _f1;
 _GLF_struct_52 _f2;
 _GLF_struct_53 _f3;
 uvec3 _f4;
 _GLF_struct_54 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_48 {
 ivec4 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_49 {
 _GLF_struct_48 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_46 {
 float _f0;
 mat4x2 _f1;
 mat3 _f2;
 uvec4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_45 {
 mat4x3 _f0;
 ivec3 _f1;
 ivec3 _f2;
 mat3x4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_44 {
 uint _f0;
} ;

struct _GLF_struct_43 {
 mat2 _f0;
 int _f1;
} ;

struct _GLF_struct_42 {
 vec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_47 {
 _GLF_struct_42 _f0;
 _GLF_struct_43 _f1;
 _GLF_struct_44 _f2;
 _GLF_struct_45 _f3;
 _GLF_struct_46 _f4;
 bvec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_60 {
 _GLF_struct_47 _f0;
 _GLF_struct_49 _f1;
 vec2 _f2;
 _GLF_struct_55 _f3;
 mat3x4 _GLF_SWITCH_3_3v;
 _GLF_struct_59 _f4;
} ;

struct _GLF_struct_39 {
 float _f0;
 bvec4 _f1;
 mat4x2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_38 {
 vec3 _f0;
 float _f1;
 bvec2 _f2;
 bvec2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_37 {
 mat2 _f0;
 mat4x2 _f1;
 mat4 _f2;
 ivec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_40 {
 ivec4 _f0;
 _GLF_struct_37 _f1;
 _GLF_struct_38 _f2;
 _GLF_struct_39 _f3;
} ;

struct _GLF_struct_41 {
 uint num_workgroup;
 _GLF_struct_40 _f0;
} ;

struct _GLF_struct_35 {
 bvec2 _f0;
} ;

struct _GLF_struct_33 {
 int _f0;
} ;

struct _GLF_struct_34 {
 bool _f0;
 _GLF_struct_33 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_36 {
 ivec3 _f0;
 mat2 _f1;
 ivec3 _f2;
 _GLF_struct_34 _f3;
 _GLF_struct_35 _f4;
 int _injected_loop_counter;
 mat2x3 _f5;
} ;

struct _GLF_struct_30 {
 ivec3 _f0;
 ivec4 _f1;
 mat3 _f2;
 bvec4 _f3;
 mat3 _f4;
 mat4x3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_29 {
 vec4 _f0;
 vec3 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_28 {
 mat2x4 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 float _f3;
 uint _f4;
} ;

struct _GLF_struct_31 {
 uvec4 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
} ;

struct _GLF_struct_26 {
 uvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_27 {
 int _injected_loop_counter;
 uint _f0;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_24 {
 ivec3 _f0;
 mat3 _f1;
 bvec3 _f2;
 mat2 _f3;
 mat3x2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_23 {
 mat3x2 _f0;
 bool _f1;
 uvec4 _f2;
 uvec2 _f3;
 int _f4;
} ;

struct _GLF_struct_22 {
 mat4x2 _f0;
 mat2 _f1;
 bvec3 _f2;
 mat2x3 _f3;
 bool _f4;
} ;

struct _GLF_struct_21 {
 ivec3 _f0;
 vec4 _f1;
 int _f2;
} ;

struct _GLF_struct_25 {
 mat3x4 _f0;
 uvec4 _f1;
 _GLF_struct_21 _f2;
 _GLF_struct_22 _f3;
 _GLF_struct_23 _f4;
 _GLF_struct_24 _f5;
} ;

struct _GLF_struct_32 {
 _GLF_struct_25 _f0;
 ivec4 _f1;
 _GLF_struct_27 _f2;
 int _f3;
 _GLF_struct_31 _f4;
} ;

struct _GLF_struct_20 {
 mat2 _f0;
 uint read_1;
 mat2x3 _f1;
} ;

struct _GLF_struct_17 {
 int _f0;
 mat3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
} ;

struct _GLF_struct_15 {
 float _f0;
 vec4 _f1;
 mat2x4 _f2;
 bool _f3;
 mat2x3 _f4;
 float _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 bool _f1;
 bool _f2;
 vec2 _f3;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 vec3 _f1;
 ivec3 _f2;
 float _f3;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 vec4 _f1;
 mat4x2 _f2;
 vec3 _f3;
 _GLF_struct_11 _f4;
 _GLF_struct_12 _f5;
 _GLF_struct_13 _f6;
 uint virtual_gid;
} ;

struct _GLF_struct_8 {
 float _f0;
 mat3x2 _f1;
 bvec2 _f2;
 vec3 _f3;
 mat4x3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 mat2x4 _f1;
 _GLF_struct_8 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_19 {
 bool _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_14 _f2;
 uvec2 _f3;
 _GLF_struct_16 _f4;
 _GLF_struct_18 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 uvec4 _f1;
 uvec2 _f2;
 float _f3;
 mat2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_4 {
 mat4 _f0;
 uint _f1;
 vec3 _f2;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat3x2 _f1;
 uvec3 _f2;
 ivec3 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 uint _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 mat3 _GLF_SWITCH_0_40v;
 bvec3 _f1;
 _GLF_struct_6 _f2;
 int _f3;
} ;

struct _GLF_struct_0 {
 uint next_virtual_gid;
 mat3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false, false))) && true))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))))))
    return;
  }
 else
  {
  }
 _GLF_struct_118 _GLF_struct_replacement_118 = _GLF_struct_118(_GLF_struct_117(vec4(1.0), mat2x4(1.0), _GLF_struct_116(vec2(1.0), mat4x2(1.0), uvec4(1u), mat4x3(1.0), mat4(1.0), mat2x3(1.0)), gl_SubgroupInvocationID, 1u), true, ivec4(1));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(gl_NumWorkGroups.x, _GLF_struct_40(ivec4(1), _GLF_struct_37(mat2(1.0), mat4x2(1.0), mat4(1.0), ivec2(1), bvec4(true)), _GLF_struct_38(vec3(1.0), 1.0, bvec2(true), bvec2(true), mat4x3(1.0)), _GLF_struct_39(1.0, bvec4(true), mat4x2(1.0), bvec3(true))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(_GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(_GLF_struct_25(mat3x4(1.0), uvec4(1u), _GLF_struct_21(ivec3(1), vec4(1.0), 1), _GLF_struct_22(mat4x2(1.0), mat2(1.0), bvec3(true), mat2x3(1.0), true), _GLF_struct_23(mat3x2(1.0), true, uvec4(1u), uvec2(1u), 1), _GLF_struct_24(ivec3(1), mat3(1.0), bvec3(true), mat2(1.0), mat3x2(1.0), bvec4(true))), ivec4(1), _GLF_struct_27((0 << _GLF_IDENTITY(int(6), int(6))), 1u, _GLF_struct_26(uvec3(1u), mat2(1.0))), 1, _GLF_struct_31(uvec4(1u), _GLF_struct_28(mat2x4(1.0), mat2x4(1.0), uvec4(1u), 1.0, 1u), _GLF_struct_29(vec4(1.0), vec3(1.0), mat3x4(1.0), ivec2(1), bvec2(true)), _GLF_struct_30(ivec3(1), ivec4(1), mat3(1.0), bvec4(true), mat3(1.0), mat4x3(1.0), mat3x2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_32._f2._injected_loop_counter != 1); _GLF_struct_replacement_32._f2._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             switch(_GLF_SWITCH(0))
              {
               case 0:
               return;
               break;
               case 74:
               ;
               default:
               1;
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(true, _GLF_struct_9(mat2x4(1.0), mat2x4(1.0), _GLF_struct_8(1.0, mat3x2(1.0), bvec2(true), vec3(1.0), mat4x3(1.0), mat3x2(1.0)), mat2x4(1.0)), _GLF_struct_14(_GLF_struct_10(mat3x2(1.0), vec3(1.0)), vec4(1.0), mat4x2(1.0), vec3(1.0), _GLF_struct_11(vec4(1.0), vec3(1.0), ivec3(1), 1.0), _GLF_struct_12(ivec4(1)), _GLF_struct_13(vec4(1.0), true, true, vec2(1.0)), workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_118._f0.subgroup_local_id), uvec2(1u), _GLF_struct_16(_GLF_struct_15(1.0, vec4(1.0), mat2x4(1.0), true, mat2x3(1.0), 1.0, bvec3(true))), _GLF_struct_18(_GLF_struct_17(1, mat3(1.0), ivec4(1))), mat3x2(1.0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_118._f0.subgroup_local_id + 1) % subgroup_size), mat3(1.0));
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(mat2(1.0), atomicLoad(buf[_GLF_struct_replacement_19._f2.virtual_gid], 4, 64, 0), mat2x3(1.0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(_GLF_struct_replacement_20.read_1 + 1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_19._f2.virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   for(int _injected_loop_counter = (0 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     switch(_GLF_SWITCH(0))
      {
       case 0:
       case 36:
       case 2:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       case 9:
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           switch(_GLF_SWITCH(0))
            {
             case 87:
             int((true || false));
             case 0:
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             case 40:
             case 22:
             case 8:
             case 98:
             if(_GLF_DEAD(false))
              return;
             case 19:
             return;
             break;
             default:
             1;
            }
          }
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH(0))
            {
             case 90:
             mat2x4(-1.7, 48.03, 74.89, -2.9, -1903.6602, 9742.6897, 24.66, 2296.8737);
             case 61:
             uvec4(23378u, 60250u, 107836u, 141246u);
             case 0:
             case 55:
             case 67:
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             case 58:
             if(_GLF_DEAD(false))
              break;
             continue;
             break;
             case 49:
             (94333 / 96513);
             case 75:
             vec3 _GLF_SWITCH_8_0v, _GLF_SWITCH_8_1v[76];
             default:
             1;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       {
        mat3(mat2(-83.13, 3198.3476, -7.4, -0.9));
        if(_GLF_DEAD(false))
         continue;
        if(_GLF_DEAD(false))
         continue;
        mat2x4 _GLF_SWITCH_2_0v[7], _GLF_SWITCH_2_1v;
        if(_GLF_DEAD(false))
         return;
        if(_GLF_WRAPPED_IF_FALSE(false))
         {
         }
        else
         {
          do
           {
            if(_GLF_DEAD(false))
             continue;
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
            mod(vec4(-3.1, -3992.8564, -2.1, 9.6), sinh(vec4(-304.412, -5.9, 456.692, -6.0)));
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         }
        mat3x2(-5.2, 2217.4776, 1255.1860, 4.2, -9.7, -9.1);
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          if(_GLF_DEAD(false))
           continue;
          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6))))))); _injected_loop_counter ++)
           {
            if(_GLF_DEAD(false))
             continue;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            (workgroup_base + uvec4(22220u, 25516u, 195111u, 140676u));
           }
         }
        else
         {
         }
        if(_GLF_DEAD(false))
         {
          if(_GLF_DEAD(false))
           continue;
          break;
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            continue;
           }
          return;
         }
        ivec4 _GLF_SWITCH_2_2v[7], _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v;
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            do
             {
              do
               {
                if(_GLF_DEAD(false))
                 return;
                vec3(-7.4, 448.326, -8.0);
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            while(_GLF_WRAPPED_LOOP(false));
           }
         }
        else
         {
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         break;
       }
       case 62:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
          {
          }
         else
          {
           return;
          }
        }
       {
        if(_GLF_DEAD(false))
         continue;
        mat2x3 _GLF_SWITCH_2_5v, _GLF_SWITCH_2_6v[21];
       }
       default:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(false))
          return;
        }
       1;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   switch(_GLF_SWITCH(0))
                    {
                     case 0:
                     if(_GLF_DEAD(false))
                      return;
                     case 9:
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     case 41:
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     case 78:
                     case 68:
                     case 89:
                     case 80:
                     case 15:
                     return;
                     break;
                     if(_GLF_DEAD(false))
                      return;
                     case 38:
                     ;
                     default:
                     if(_GLF_DEAD(false))
                      break;
                     1;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_struct_replacement_118._f0.subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           for(int _injected_loop_counter = (((1 ^ (0 & -50953)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(_GLF_struct_replacement_20.read_1 + 1 == read_2) + 1, 4, 64, 4);
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             switch(_GLF_SWITCH(((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(0), int(0)))))
              {
               case 72:
               ;
               if(_GLF_DEAD(false))
                continue;
               case 0:
               if(_GLF_DEAD(false))
                return;
               case 61:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               break;
               case 75:
               uvec2(126123u, 73823u);
               case 12:
               mat2x4 _GLF_SWITCH_8_0v;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               default:
               if(_GLF_DEAD(false))
                continue;
               1;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       subgroupAll(false);
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 28:
             if(_GLF_DEAD(false))
              break;
             case 65:
             case 85:
             case 37:
             case 6:
             case 68:
             switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(8), int(8)))))
              {
               case 0:
               case 90:
               case 23:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               case 43:
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               case 35:
               case 13:
               if(_GLF_DEAD(false))
                continue;
               case 10:
               case 51:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
               break;
               case 91:
               if(_GLF_DEAD(false))
                continue;
               ;
               case 40:
               (uvec4(196552u, 89400u, 156155u, 120498u) << read_2).a;
               default:
               if(_GLF_DEAD(false))
                break;
               1;
              }
             break;
             case 11:
             ;
             default:
             1;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         switch(_GLF_SWITCH((1 ^ 1)))
          {
           case 46:
           mat2x4 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v[47], _GLF_SWITCH_3_2v;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           case 0:
           if(_GLF_DEAD(false))
            return;
           case 79:
           case 23:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           case 45:
           if(_GLF_DEAD(false))
            break;
           case 97:
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           break;
           if(_GLF_DEAD(false))
            continue;
           case 33:
           _GLF_struct_60 _GLF_struct_replacement_60;
           if(_GLF_DEAD(false))
            continue;
           default:
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               1;
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         for(_GLF_struct_76 _GLF_struct_replacement_76 = _GLF_struct_76(0, _GLF_struct_63(_GLF_struct_61(true, bvec4(true), 1.0, 1u, vec2(1.0), uvec3(1u), 1), _GLF_struct_62(mat3x2(1.0), mat4x3(1.0), true, 1u, ivec4(1), uvec2(1u), mat3(1.0)), vec2(1.0)), _GLF_struct_69(_GLF_struct_64(mat2x4(1.0), bvec4(true), ivec2(1), vec2(1.0), uvec3(1u), mat2x4(1.0), vec4(1.0)), 1u, _GLF_struct_65(mat3x2(1.0)), _GLF_struct_66(mat4x3(1.0), mat3(1.0), mat4x2(1.0), ivec4(1)), _GLF_struct_67(vec3(1.0), vec3(1.0), 1, bvec2(true), mat2x4(1.0), 1), _GLF_struct_68(1.0), mat2(1.0)), mat3(1.0), true, _GLF_struct_71(1, uvec2(1u), _GLF_struct_70(mat2(1.0), mat4x3(1.0), ivec4(1), ivec3(1), mat4x2(1.0), mat2x4(1.0))), true, _GLF_struct_75(mat2x4(1.0), _GLF_struct_72(bvec4(true), bvec3(true), vec4(1.0), vec3(1.0), mat3x4(1.0)), _GLF_struct_73(uvec2(1u), mat3x4(1.0), vec4(1.0), bvec2(true)), _GLF_struct_74(mat3(1.0), 1, ivec2(1), mat3(1.0)), uvec2(1u), vec4(1.0), ivec4(1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_76._injected_loop_counter < (1 ^ 0)); _GLF_struct_replacement_76._injected_loop_counter ++)
          {
           switch(_GLF_SWITCH(0))
            {
             case 98:
             bvec2 _GLF_SWITCH_6_0v[88], _GLF_SWITCH_6_1v;
             if(_GLF_DEAD(false))
              return;
             case 0:
             case 9:
             case 70:
             switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(0), int(0)))))
              {
               case 0:
               case 59:
               if(_GLF_DEAD(false))
                return;
               case 57:
               atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(_GLF_struct_replacement_20.read_1 + 1 == read_2) + 1, 4, 64, 4);
               case 63:
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                 switch(_GLF_SWITCH(0))
                  {
                   case 0:
                   case 57:
                   case 43:
                   case 50:
                   case 74:
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = (1 & (1 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                    }
                   case 93:
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                   break;
                   case 12:
                   vec3 _GLF_SWITCH_8_0v;
                   case 39:
                   mat3x4(961.696, 6.0, 3236.6381, 105.943, -91.18, -45.84, -4.6, -0.3, 6481.0269, 0.8, 90.00, 8.7);
                   default:
                   1;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 subgroupAll(true);
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
               break;
               case 51:
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                 }
                else
                 {
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(1), int(1)))))
                       {
                        case 44:
                        if(_GLF_DEAD(false))
                         break;
                        mat4x2 _GLF_SWITCH_5_0v[28];
                        if(_GLF_DEAD(false))
                         continue;
                        case 37:
                        -4.3;
                        case 0:
                        case 84:
                        case 64:
                        case 5:
                        case 49:
                        case 1:
                        case 93:
                        return;
                        case 74:
                        case 45:
                        case 35:
                        if(_GLF_DEAD(false))
                         continue;
                        break;
                        if(_GLF_DEAD(false))
                         return;
                        case 25:
                        _GLF_struct_132 _GLF_struct_replacement_132;
                        case 97:
                        uvec3 _GLF_SWITCH_5_2v, _GLF_SWITCH_5_3v[46];
                        default:
                        1;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                       }
                     }
                    else
                     {
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(false))
                   break;
                 }
                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   return;
                 }
                if(true)
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  if(_GLF_DEAD(false))
                   break;
                  mat3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[73];
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                   }
                  else
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                       {
                        if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
                         return;
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                         }
                        else
                         {
                         }
                       }
                      do
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           return;
                          return;
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         break;
                        return;
                        if(_GLF_DEAD(false))
                         continue;
                       }
                      if(_GLF_DEAD(false))
                       break;
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
                       {
                        if(_GLF_DEAD(false))
                         return;
                        break;
                       }
                     }
                    if(_GLF_DEAD(false))
                     continue;
                   }
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        return;
                       }
                      else
                       {
                        if(_GLF_DEAD(false))
                         break;
                       }
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(false))
                     continue;
                   }
                  do
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      if(_GLF_DEAD(false))
                       return;
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                       break;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  ivec3(11664, -97370, 64166);
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      return;
                      if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                       continue;
                     }
                    return;
                   }
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    do
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         break;
                        return;
                       }
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                         }
                        else
                         {
                          return;
                         }
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   break;
                  uvec3 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[27];
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    mat4x2(-6.5, 551.056, -2674.7026, 452.863, 1848.6668, -8.0, 9.8, 54.88);
                   }
                  for(                  mix(bvec2(false, true), bvec2(false, true), not(bvec2(true, false)));
 (false ? (mat2x3(-3.7, -24.19, -429.521, -0.4, -3.8, -3.1) != mat2x3(81.80, 1.9, -363.925, -927.657, -970.268, 0.0)) : bool(-51385)); greaterThanEqual(_GLF_SWITCH_0_3v, _GLF_SWITCH_0_3v))
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 13:
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          mat4x2(-1327.9926, -3745.4149, 975.619, -9403.5454, -9469.2628, -9889.5844, 38.65, -6.9);
                         }
                        else
                         {
                         }
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       break;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(false))
                       continue;
                      case 0:
                      if(_GLF_DEAD(false))
                       return;
                      case 3:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      case 53:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      case 87:
                      if(_GLF_DEAD(false))
                       return;
                      for(_GLF_struct_136 _GLF_struct_replacement_136 = _GLF_struct_136(mat4(1.0), _GLF_struct_133((0 >> _GLF_IDENTITY(int(2), int(2))), uvec2(1u)), mat3x2(1.0), _GLF_struct_135(mat4x3(1.0), vec3(1.0), mat4x3(1.0), _GLF_struct_134(mat3x2(1.0), 1u, ivec2(1), vec3(1.0), vec4(1.0), mat2x3(1.0), 1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_136._f1._injected_loop_counter < (0 | 1)); _GLF_struct_replacement_136._f1._injected_loop_counter ++)
                       {
                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                         {
                          if(_GLF_DEAD(false))
                           break;
                          for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                           {
                            switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 1, 1, 1), ~ (~ (ivec4(int(7), 1, 1, 1))))))))))
                             {
                              case 99:
                              if(_GLF_DEAD(false))
                               break;
                              ivec4(38086, 43537, -91075, 50661);
                              case 0:
                              case 31:
                              case 26:
                              case 24:
                              if(_GLF_DEAD(false))
                               continue;
                              case 74:
                              case 81:
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               continue;
                              case 76:
                              case 55:
                              case 1:
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  if(_GLF_DEAD(false))
                                   break;
                                  return;
                                 }
                                else
                                 {
                                 }
                               }
                              break;
                              default:
                              1;
                             }
                           }
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                         }
                       }
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          return;
                         }
                        else
                         {
                         }
                       }
                      if(_GLF_DEAD(false))
                       break;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                       {
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                         continue;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        break;
                       }
                      break;
                      default:
                      1;
                     }
                   }
                  if(_GLF_DEAD(false))
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 0:
                      case 75:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        return;
                       }
                      case 8:
                      case 96:
                      case 90:
                      case 76:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      case 38:
                      case 30:
                      case 46:
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(false))
                       continue;
                      case 20:
                      for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        if(_GLF_DEAD(false))
                         continue;
                        switch(_GLF_SWITCH(0))
                         {
                          case 72:
                          if(_GLF_DEAD(false))
                           continue;
                          mat4 _GLF_SWITCH_4_0v[66], _GLF_SWITCH_4_1v[70], _GLF_SWITCH_4_2v;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                             continue;
                            break;
                            if(_GLF_DEAD(false))
                             return;
                           }
                          case 43:
                          ivec4 _GLF_SWITCH_4_3v[4], _GLF_SWITCH_4_4v, _GLF_SWITCH_4_5v;
                          case 0:
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             break;
                            continue;
                           }
                          if(_GLF_DEAD(false))
                           break;
                          do
                           {
                            switch(_GLF_SWITCH(0))
                             {
                              case 26:
                              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                               break;
                              do
                               {
                                do
                                 {
                                  if(_GLF_DEAD(false))
                                   break;
                                  _GLF_SWITCH_0_0v;
                                 }
                                while(_GLF_WRAPPED_LOOP(false));
                                if(_GLF_DEAD(false))
                                 break;
                               }
                              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               return;
                              case 0:
                              if(_GLF_DEAD(false))
                               continue;
                              if(_GLF_DEAD(false))
                               continue;
                              if(_GLF_WRAPPED_IF_TRUE(true))
                               {
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  if(_GLF_DEAD(false))
                                   {
                                    switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))))
                                     {
                                      case 89:
                                      if(_GLF_DEAD(false))
                                       continue;
                                      bool _GLF_SWITCH_6_0v[20], _GLF_SWITCH_6_1v, _GLF_SWITCH_6_2v;
                                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       continue;
                                      case 42:
                                      ;
                                      case 0:
                                      case 39:
                                      if(_GLF_DEAD(false))
                                       continue;
                                      case 76:
                                      do
                                       {
                                        switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : int(4)))))))
                                         {
                                          case 80:
                                          (+ _GLF_SWITCH_0_4v);
                                          case 0:
                                          case 43:
                                          case 33:
                                          case 5:
                                          case 68:
                                          if(_GLF_DEAD(false))
                                           return;
                                          case 25:
                                          if(_GLF_DEAD(false))
                                           break;
                                          case 47:
                                          case 72:
                                          switch(_GLF_SWITCH((-35287 & 0)))
                                           {
                                            case 0:
                                            return;
                                            break;
                                            default:
                                            1;
                                           }
                                          break;
                                          case 69:
                                          mat3x4(6664.1346, 3.9, -5.0, -1.6, 0.1, 85.66, 1508.1731, -87.40, 3.8, -26.78, 5.0, -8.7);
                                          case 74:
                                          if(_GLF_DEAD(false))
                                           return;
                                          ((mat4(26.00, -931.510, -954.571, 75.96, -99.72, 5183.0012, 21.34, -6.6, -573.430, 624.426, 84.14, -1.6, 0.0, 3.1, 2.1, -7.4) - vec3(-4.8, -7424.0004, 20.71).z) != _GLF_SWITCH_4_2v);
                                          default:
                                          1;
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(false));
                                      break;
                                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       continue;
                                      case 46:
                                      (6.0 - mat2x3(3802.4430, -3501.0362, 353.322, 3815.4034, -50.08, 76.90));
                                      case 3:
                                      bvec3 _GLF_SWITCH_6_3v;
                                      default:
                                      1;
                                     }
                                   }
                                 }
                                else
                                 {
                                 }
                               }
                              else
                               {
                               }
                              if(_GLF_WRAPPED_IF_FALSE(false))
                               {
                               }
                              else
                               {
                                if(_GLF_DEAD(false))
                                 return;
                               }
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               return;
                              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                               }
                              else
                               {
                                if(_GLF_DEAD(false))
                                 continue;
                                return;
                                if(_GLF_DEAD(false))
                                 continue;
                                if(_GLF_DEAD(false))
                                 continue;
                               }
                              break;
                              if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                               break;
                              if(_GLF_DEAD(false))
                               break;
                              if(_GLF_DEAD(false))
                               break;
                              case 39:
                              vec2 _GLF_SWITCH_3_0v[9];
                              if(_GLF_DEAD(false))
                               break;
                              if(_GLF_DEAD(false))
                               return;
                              case 8:
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 return;
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 break;
                                continue;
                               }
                              if(_GLF_DEAD(false))
                               break;
                              vec4 _GLF_SWITCH_3_1v[78], _GLF_SWITCH_3_2v, _GLF_SWITCH_3_3v;
                              default:
                              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                                if(_GLF_DEAD(false))
                                 break;
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_DEAD(false))
                                   {
                                    if(_GLF_DEAD(false))
                                     break;
                                    continue;
                                   }
                                  if(_GLF_DEAD(false))
                                   {
                                    if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                     break;
                                    if(_GLF_DEAD(false))
                                     continue;
                                    continue;
                                   }
                                  break;
                                 }
                               }
                              else
                               {
                                for(int _injected_loop_counter = (0 & 30899); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                                 {
                                  1;
                                 }
                                if(_GLF_DEAD(false))
                                 continue;
                                if(_GLF_DEAD(false))
                                 break;
                               }
                              if(_GLF_DEAD(false))
                               continue;
                             }
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             return;
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                          break;
                          case 68:
                          uvec3 _GLF_SWITCH_4_6v[76], _GLF_SWITCH_4_7v, _GLF_SWITCH_4_8v;
                          default:
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            break;
                           }
                          1;
                         }
                       }
                      break;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                      case 43:
                      for(_GLF_struct_159 _GLF_struct_replacement_159 = _GLF_struct_159(_GLF_struct_155(_GLF_struct_151(ivec2(1), vec3(1.0), bvec4(true), vec4(1.0)), 0, _GLF_struct_152(1.0, ivec4(1), true), _GLF_struct_153(1u, ivec4(1)), mat4x2(1.0), _GLF_struct_154(uvec2(1u), mat4x3(1.0), bvec2(true), ivec3(1))), mat4x3(1.0), _GLF_struct_158(vec3(1.0), _GLF_struct_156(ivec2(1), mat4x2(1.0), uvec4(1u), mat4(1.0), ivec3(1)), _GLF_struct_157(mat4x3(1.0)), vec4(1.0), mat4x2(1.0), vec4(1.0), bvec2(true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_159._f0._injected_loop_counter != 1); _GLF_struct_replacement_159._f0._injected_loop_counter ++)
                       {
                        uvec4(28159u, 97265u, 77156u, 149082u);
                       }
                      default:
                      1;
                     }
                   }
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    while(true)
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_DEAD(false))
                         continue;
                        break;
                       }
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      do
                       {
                        do
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          do
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            if(_GLF_DEAD(false))
                             continue;
                            if(_GLF_DEAD(false))
                             return;
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      switch(_GLF_SWITCH((-5474 & int(_GLF_ZERO(0.0, injectionSwitch.x)))))
                       {
                        case 9:
                        mat3x2(9.0, -9866.9658, -9.3, 7912.3551, -118.241, 984.156);
                        case 57:
                        vec3 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v[51], _GLF_SWITCH_1_2v[54];
                        case 0:
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          else
                           {
                            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                             {
                              return;
                             }
                            else
                             {
                             }
                           }
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        case 53:
                        do
                         {
                          if(_GLF_DEAD(false))
                           {
                            for(_GLF_struct_169 _GLF_struct_replacement_169 = _GLF_struct_169(_GLF_struct_160(mat3x2(1.0), 1), _GLF_struct_162(_GLF_struct_161(mat2x3(1.0), true, ivec4(1), mat4x2(1.0), mat4x2(1.0))), _GLF_struct_164(_GLF_struct_163(1u), uvec3(1u), mat2(1.0), vec4(1.0), 1, mat4x3(1.0)), _GLF_struct_165(1.0, uvec4(1u), mat4x2(1.0)), _GLF_struct_168(_GLF_struct_166(vec4(1.0), bvec4(true), uvec4(1u), mat3x4(1.0), mat3(1.0), mat4(1.0), mat2(1.0)), _GLF_struct_167(mat2x4(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_169._f0._injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _GLF_struct_replacement_169._f0._injected_loop_counter --)
                             {
                              return;
                             }
                           }
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                        vec3 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        for(_GLF_struct_86 _GLF_struct_replacement_86 = _GLF_struct_86(uvec3(1u), _GLF_struct_80(mat2x4(1.0), _GLF_struct_77(uvec3(1u)), _GLF_struct_78(mat3x2(1.0), uvec3(1u)), _GLF_struct_79(mat4x3(1.0))), _GLF_struct_83(mat2x4(1.0), mat4x2(1.0), mat2x3(1.0), _GLF_struct_81(mat4(1.0)), mat2x3(1.0), _GLF_struct_82(vec4(1.0), mat2x3(1.0), uvec3(1u), bvec3(true), mat3x2(1.0), mat3x4(1.0), mat2(1.0)), bvec4(true), 0), 1.0, _GLF_struct_85(uvec3(1u), vec4(1.0), _GLF_struct_84(ivec3(1)), mat4(1.0), vec3(1.0), uvec4(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_86._f2._injected_loop_counter != 1); _GLF_struct_replacement_86._f2._injected_loop_counter ++)
                         {
                          switch(_GLF_SWITCH(((1 | 1) ^ (1 & 1))))
                           {
                            case 39:
                            mat2x3(mat3(-96.44, 955.627, -470.890, -2.5, -4953.0678, -90.62, -3442.2878, 42.19, -62.43));
                            if(_GLF_DEAD(false))
                             break;
                            case 0:
                            case 92:
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              (mat4(-8.1, -8.9, 91.85, 7108.1010, -1.5, 513.443, -1.8, -3014.2605, -5.9, 66.06, -47.40, 5.6, -47.01, 9122.5523, -27.04, 2.1) * mat2x4(2.7, 1.5, 236.787, -8.9, 7879.9263, -3.0, 2.3, 60.77));
                             }
                            else
                             {
                             }
                            case 12:
                            case 59:
                            case 55:
                            if(_GLF_DEAD(false))
                             {
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               continue;
                              return;
                             }
                            break;
                            case 43:
                            uvec2(74444u, 5329u);
                            case 9:
                            uvec4(106702u, 78766u, 192824u, 64014u);
                            default:
                            1;
                           }
                          if(_GLF_DEAD(false))
                           return;
                         }
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                         continue;
                        if(_GLF_DEAD(false))
                         continue;
                        case 75:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        if(_GLF_DEAD(false))
                         break;
                        case 99:
                        ivec4(68302, 47384, 512, 78111);
                        if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                         return;
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          vec3(9.4, -33.00, -4.6);
                         }
                        else
                         {
                         }
                        mat2 _GLF_SWITCH_0_9v[28], _GLF_SWITCH_0_10v[33], _GLF_SWITCH_0_11v;
                        if(_GLF_DEAD(false))
                         break;
                        mat4x3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                         return;
                        if(_GLF_DEAD(false))
                         continue;
                        break;
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter --)
                         {
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             return;
                            return;
                           }
                         }
                        if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                         break;
                        if(_GLF_DEAD(false))
                         break;
                        default:
                        1;
                       }
                     }
                   }
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       return;
                      return;
                     }
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    continue;
                   }
                  if(_GLF_DEAD(false))
                   continue;
                  ;
                  if((14779 != 43960))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    switch(_GLF_SWITCH(0))
                     {
                      case 60:
                      ;
                      case 0:
                      case 89:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      case 38:
                      if(_GLF_DEAD(false))
                       continue;
                      case 15:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      _GLF_struct_109 _GLF_struct_replacement_109;
                      case 13:
                      case 87:
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(false))
                       continue;
                      case 92:
                      for(_GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(ivec3(1), mat2(1.0), ivec3(1), _GLF_struct_34(true, _GLF_struct_33(1), bvec3(true)), _GLF_struct_35(bvec2(true)), (1 & 1), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_36._injected_loop_counter > 0); _GLF_struct_replacement_36._injected_loop_counter --)
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        if(_GLF_DEAD(false))
                         return;
                        switch(_GLF_SWITCH(0))
                         {
                          case 0:
                          case 82:
                          case 66:
                          case 46:
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                             continue;
                            break;
                           }
                          case 4:
                          case 95:
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                          case 20:
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            break;
                           }
                          case 73:
                          case 49:
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           return;
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                            if(_GLF_DEAD(false))
                             break;
                            continue;
                           }
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          break;
                          if(_GLF_DEAD(false))
                           continue;
                          case 68:
                          min(ivec2(-84283, 86001), (ivec2(-24733, -59463) ^ ivec2(7875, 11003)));
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             return;
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              if(_GLF_DEAD(false))
                               return;
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                  if(_GLF_DEAD(false))
                                   break;
                                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                   {
                                    return;
                                   }
                                 }
                                if(_GLF_DEAD(false))
                                 return;
                                return;
                               }
                             }
                            continue;
                           }
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                            if(_GLF_DEAD(false))
                             continue;
                            if(_GLF_DEAD(false))
                             return;
                            break;
                           }
                          if(_GLF_DEAD(false))
                           break;
                          default:
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           return;
                          1;
                          if(_GLF_DEAD(false))
                           break;
                         }
                        if(_GLF_DEAD(false))
                         break;
                       }
                      break;
                      default:
                      1;
                     }
                   }
                  else
                   {
                    switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, injectionSwitch.x)) & int(-3.3))))
                     {
                      case 0:
                      do
                       {
                        for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                         {
                          if(_GLF_DEAD(false))
                           break;
                          ;
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             break;
                            break;
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      if(_GLF_DEAD(false))
                       return;
                      uvec3 _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v[4];
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                         continue;
                        if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                         continue;
                        return;
                       }
                      case 8:
                      case 33:
                      if(_GLF_DEAD(false))
                       return;
                      uint _GLF_SWITCH_0_17v[9], _GLF_SWITCH_0_18v[19];
                      case 4:
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                      case 47:
                      ivec2 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v[57], _GLF_SWITCH_0_21v;
                      vec2 _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v[97];
                      case 27:
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                      break;
                      if(_GLF_DEAD(false))
                       continue;
                      case 20:
                      mat2 _GLF_SWITCH_7_0v[45];
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      default:
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        1;
                        if(_GLF_DEAD(false))
                         continue;
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       continue;
                     }
                   }
                  if(_GLF_DEAD(false))
                   break;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                if(_GLF_DEAD(false))
                 continue;
                ivec2(-88855, -47940).x;
                mat4 _GLF_SWITCH_0_24v, _GLF_SWITCH_0_25v;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    continue;
                   }
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                   }
                  else
                   {
                    return;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  if(_GLF_DEAD(false))
                   return;
                 }
                if(_GLF_DEAD(false))
                 continue;
                for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, clamp(1, 1, 1)) | 1)); _injected_loop_counter ++)
                 {
                  switch(_GLF_SWITCH(0))
                   {
                    case 0:
                    case 94:
                    case 78:
                    if(_GLF_DEAD(false))
                     return;
                    case 72:
                    case 61:
                    case 32:
                    case 1:
                    if(_GLF_DEAD(false))
                     break;
                    case 92:
                    case 7:
                    if(_GLF_DEAD(false))
                     continue;
                    mat3x4(1828.6373, 30.82, 958.913, 6331.5369, 659.575, -9.4, -233.312, 47.07, 58.56, -1701.0246, -7793.1972, -3.9);
                    break;
                    default:
                    1;
                   }
                 }
                if(true)
                 {
                  for(_GLF_struct_174 _GLF_struct_replacement_174 = _GLF_struct_174((1 | 1), _GLF_struct_172(_GLF_struct_170(bvec3(true), 1u, mat4(1.0), mat2x3(1.0)), _GLF_struct_171(bvec2(true))), bvec2(true), _GLF_struct_173(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_174._injected_loop_counter != 0); _GLF_struct_replacement_174._injected_loop_counter --)
                   {
                    uvec4(42123u, 63924u, 7936u, 37708u);
                   }
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                   }
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                   {
                    do
                     {
                      switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                       {
                        case 91:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        mat2x3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
                        if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) || false))))
                         continue;
                        case 11:
                        if(_GLF_DEAD(false))
                         break;
                        bool _GLF_SWITCH_2_2v;
                        case 0:
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                         {
                          if(_GLF_DEAD(false))
                           return;
                         }
                        else
                         {
                         }
                        case 97:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        case 82:
                        case 71:
                        case 65:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        case 87:
                        case 53:
                        case 18:
                        case 12:
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          do
                           {
                            return;
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                        break;
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(false))
                         continue;
                        if(_GLF_DEAD(false))
                         break;
                        case 74:
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(false))
                           break;
                          break;
                         }
                        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                         {
                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                           {
                            (_GLF_SWITCH_0_24v + _GLF_SWITCH_0_25v);
                           }
                         }
                        case 83:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-66164 & 0)); _injected_loop_counter --)
                           {
                            return;
                           }
                         }
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          continue;
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        max(exp(vec3(-82.25, -2.8, -909.892)), vec3(7568.2070, 234.717, 88.51));
                        default:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          1;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_DEAD(false))
                           {
                            do
                             {
                              if(_GLF_DEAD(false))
                               continue;
                              return;
                             }
                            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           }
                         }
                        if(_GLF_DEAD(false))
                         continue;
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  bvec2 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v[26], _GLF_SWITCH_0_28v;
                  if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                   return;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     return;
                    continue;
                   }
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                   }
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      return;
                     }
                    if(_GLF_DEAD(false))
                     return;
                   }
                  if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 26:
                      mat3x2((-26.92 / mat3x4(4204.2111, -495.318, -896.619, 479.264, -714.367, 6084.9193, 80.05, -397.804, 9.7, 9.2, -6.2, 4.6)));
                      if(_GLF_DEAD(false))
                       break;
                      case 0:
                      if(_GLF_DEAD(false))
                       break;
                      case 1:
                      case 93:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      if(_GLF_DEAD(false))
                       break;
                      case 80:
                      case 24:
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                       {
                        do
                         {
                          if(_GLF_DEAD(false))
                           return;
                          return;
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      case 84:
                      case 48:
                      if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                       continue;
                      do
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                           continue;
                          break;
                         }
                        return;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      if(_GLF_DEAD(false))
                       continue;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      break;
                      if(_GLF_DEAD(false))
                       break;
                      case 44:
                      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
                       continue;
                      ivec3(-34937, 58354, -48038);
                      if(_GLF_DEAD(false))
                       continue;
                      default:
                      1;
                      if(_GLF_DEAD(false))
                       break;
                     }
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    if(_GLF_DEAD(false))
                     break;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         {
                          for(int _injected_loop_counter = (0 & 45300); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                           {
                            return;
                           }
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        do
                         {
                          return;
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                      else
                       {
                       }
                     }
                    668.251;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       return;
                      continue;
                     }
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_WRAPPED_IF_FALSE(false))
                       {
                       }
                      else
                       {
                        if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
                         break;
                        for(_GLF_struct_180 _GLF_struct_replacement_180 = _GLF_struct_180(bvec4(true), vec2(1.0), _GLF_struct_177(ivec4(1), 1u, mat3x4(1.0), 1, _GLF_struct_175(mat3x4(1.0), mat3x2(1.0), mat4x2(1.0), ivec4(1), mat2(1.0), mat3x4(1.0), uvec4(1u)), _GLF_struct_176(ivec2(1), mat4x2(1.0), mat3x4(1.0), vec2(1.0), mat2(1.0))), _GLF_struct_179(_GLF_struct_178(vec3(1.0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> (0 << _GLF_IDENTITY(int(2), int(2)))))), 1u), ivec4(1), 1, mat2x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_180._f3._injected_loop_counter != (0 & (50926 / 42156))); _GLF_struct_replacement_180._f3._injected_loop_counter --)
                         {
                          return;
                         }
                       }
                     }
                    if(_GLF_DEAD(false))
                     return;
                   }
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    break;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                     continue;
                    break;
                   }
                  if((uvec4(84658u, 33528u, 26646u, 104444u) == uvec4(subgroup_size)))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       return;
                     }
                    else
                     {
                     }
                    if(_GLF_DEAD(false))
                     continue;
                    normalize(vec3(vec4(-5.2, 2.0, -6254.8776, 6.0)).sts);
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      if(_GLF_DEAD(false))
                       break;
                     }
                    else
                     {
                      -7.0;
                     }
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                    mat3x2(-57.64, -6.7, 12.19, 0.1, -3738.5356, -670.591);
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      return;
                     }
                    if(_GLF_DEAD(false))
                     {
                      switch(_GLF_SWITCH(0))
                       {
                        case 50:
                        uvec3(65797u, 166705u, 104039u);
                        if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                         continue;
                        case 23:
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          uvec3(46981u, 163141u, 179694u);
                         }
                        else
                         {
                         }
                        if(_GLF_DEAD(false))
                         continue;
                        case 0:
                        case 59:
                        case 9:
                        case 57:
                        case 76:
                        case 17:
                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                         {
                          return;
                         }
                        break;
                        case 90:
                        uvec3(29922u, 141707u, 84705u);
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        default:
                        1;
                       }
                     }
                    findMSB(ivec3(-9245, 84901, -49297));
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                     break;
                    if(_GLF_DEAD(false))
                     continue;
                    mat4x2 _GLF_SWITCH_0_29v, _GLF_SWITCH_0_30v, _GLF_SWITCH_0_31v[22];
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                     {
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                       {
                       }
                      else
                       {
                        do
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              return;
                             }
                           }
                          return;
                          if(_GLF_DEAD(false))
                           continue;
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                       }
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      break;
                     }
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(false))
                         continue;
                       }
                      if(_GLF_DEAD(false))
                       break;
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                          continue;
                         }
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          (mat3x4(-4.8, 6.4, 5.8, 528.187, -5233.4437, 16.75, -9.7, -7492.6072, -96.28, -3771.6087, 0.5, -1.3) * atan(vec3(-70.83, 6676.4892, -47.25), (871.665 * vec3(98.59, 7.6, -6.9))));
                         }
                        if(_GLF_DEAD(false))
                         break;
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       continue;
                     }
                    if(_GLF_DEAD(false))
                     return;
                    float _GLF_SWITCH_0_32v[39], _GLF_SWITCH_0_33v;
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                       }
                      else
                       {
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                          continue;
                         }
                        return;
                       }
                     }
                   }
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    do
                     {
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))
                       break;
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(false))
                   break;
                  for(_GLF_struct_150 _GLF_struct_replacement_150 = _GLF_struct_150(vec4(1.0), _GLF_struct_137(ivec3(1)), mat4(1.0), _GLF_struct_141(ivec2(1), mat4x2(1.0), _GLF_struct_138(ivec2(1), bvec2(true), 1u), _GLF_struct_139(mat4x2(1.0), mat2x3(1.0), mat4x2(1.0), mat2x4(1.0)), _GLF_struct_140(vec4(1.0), mat3(1.0)), bvec2(true), mat4(1.0)), _GLF_struct_143(vec2(1.0), mat2(1.0), mat4(1.0), _GLF_struct_142(true, uvec4(1u), ivec3(1), 1.0, 1)), _GLF_struct_146(ivec2(1), _GLF_struct_144(true, 1.0, mat4(1.0), mat2x4(1.0), uvec4(1u)), vec2(1.0), _GLF_struct_145(mat3(1.0), vec4(1.0), bvec3(true), 1)), _GLF_struct_149(uvec3(1u), _GLF_struct_147(mat3(1.0), uvec4(1u), true, vec4(1.0), mat3x4(1.0), mat2x4(1.0), 1u), _GLF_struct_148(mat4(1.0), bvec3(true), mat2x4(1.0), vec2(1.0), mat2(1.0), mat3x2(1.0), ivec3(1)), vec2(1.0), 1, 1.0, vec3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_150._f4._f3._injected_loop_counter != (1 ^ 1)); _GLF_struct_replacement_150._f4._f3._injected_loop_counter --)
                   {
                    while(true)
                     {
                     }
                    if(_GLF_DEAD(false))
                     continue;
                   }
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                     {
                      if(_GLF_DEAD(false))
                       break;
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
                         continue;
                        return;
                        if(_GLF_DEAD(false))
                         break;
                       }
                     }
                   }
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     {
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                       {
                        return;
                       }
                     }
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     return;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  for(bvec2 _GLF_SWITCH_0_34v; any(_GLF_SWITCH_0_28v); sqrt(vec4(889.888, -930.801, 19.38, 9109.8602)).yxw)
                   {
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         return;
                        continue;
                       }
                      if(_GLF_DEAD(false))
                       return;
                      do
                       {
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          if(_GLF_WRAPPED_IF_FALSE(false))
                           {
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          else
                           {
                            if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                             break;
                            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                             {
                              switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(5), int(5)))))
                               {
                                case 0:
                                case 27:
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                  if(_GLF_DEAD(false))
                                   return;
                                  break;
                                 }
                                case 50:
                                case 42:
                                if(_GLF_DEAD(false))
                                 {
                                  if(_GLF_DEAD(false))
                                   continue;
                                  break;
                                 }
                                case 98:
                                if(_GLF_DEAD(false))
                                 return;
                                if(_GLF_DEAD(false))
                                 return;
                                if(_GLF_DEAD(false))
                                 return;
                                case 60:
                                if(_GLF_DEAD(false))
                                 break;
                                if(_GLF_DEAD(false))
                                 break;
                                case 18:
                                if(_GLF_WRAPPED_IF_TRUE(true))
                                 {
                                  if(_GLF_DEAD(false))
                                   continue;
                                  if(_GLF_DEAD(false))
                                   {
                                    if(_GLF_DEAD(false))
                                     {
                                      do
                                       {
                                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                         {
                                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                           return;
                                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                           {
                                            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                             {
                                             }
                                            else
                                             {
                                              if(_GLF_DEAD(false))
                                               continue;
                                              return;
                                             }
                                           }
                                         }
                                        else
                                         {
                                         }
                                       }
                                      while(_GLF_WRAPPED_LOOP(false));
                                      continue;
                                     }
                                    if(_GLF_WRAPPED_IF_TRUE(true))
                                     {
                                      return;
                                     }
                                    else
                                     {
                                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                       return;
                                     }
                                   }
                                  if(_GLF_DEAD(false))
                                   continue;
                                 }
                                else
                                 {
                                 }
                                if(_GLF_DEAD(false))
                                 break;
                                break;
                                case 85:
                                mat2 _GLF_SWITCH_2_0v;
                                case 88:
                                do
                                 {
                                  bvec4(bvec2(false, false), _GLF_SWITCH_0_34v);
                                 }
                                while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                if(_GLF_DEAD(false))
                                 continue;
                                default:
                                if(_GLF_WRAPPED_IF_FALSE(false))
                                 {
                                 }
                                else
                                 {
                                  1;
                                 }
                                if(_GLF_DEAD(false))
                                 return;
                                if(_GLF_DEAD(false))
                                 return;
                               }
                              if(_GLF_DEAD(false))
                               break;
                             }
                            else
                             {
                             }
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                             }
                            else
                             {
                              if(_GLF_DEAD(false))
                               continue;
                              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                               {
                                if(_GLF_DEAD(false))
                                 continue;
                                if(_GLF_DEAD(false))
                                 break;
                                return;
                               }
                             }
                           }
                         }
                        else
                         {
                          if(_GLF_DEAD(false))
                           continue;
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    mat4x3 _GLF_SWITCH_0_35v, _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v[55];
                    uvec4(120640u, 67555u, 69119u, 149865u);
                    if(_GLF_DEAD(false))
                     break;
                    do
                     {
                      switch(_GLF_SWITCH(0))
                       {
                        case 69:
                        ivec3 _GLF_SWITCH_8_0v;
                        case 42:
                        bvec2 _GLF_SWITCH_8_1v[22], _GLF_SWITCH_8_2v;
                        case 0:
                        if(_GLF_DEAD(false))
                         continue;
                        for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                         {
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        break;
                        case 66:
                        mat2x3(9300.9623, 457.124, 9725.0322, 46.39, -876.833, 519.870);
                        default:
                        1;
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    _GLF_struct_121 _GLF_struct_replacement_121;
                   }
                  (25805 & ivec3(51593, -48581, -72931));
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        return;
                       }
                     }
                    else
                     {
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                   }
                  uvec4 _GLF_SWITCH_0_39v[97];
                  if(true)
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 0:
                      case 81:
                      _GLF_struct_7 _GLF_struct_replacement_7;
                      break;
                      case 42:
                      ;
                      case 56:
                      if(_GLF_WRAPPED_IF_FALSE(false))
                       {
                       }
                      else
                       {
                        (_injected_loop_counter - ivec3(59031, 72584, 58147));
                       }
                      default:
                      if(_GLF_DEAD(false))
                       break;
                      1;
                     }
                   }
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       continue;
                      return;
                      if(_GLF_DEAD(false))
                       break;
                     }
                    else
                     {
                     }
                    if(_GLF_DEAD(false))
                     return;
                   }
                  if(_GLF_DEAD(false))
                   continue;
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      return;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                   }
                  do
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                       {
                        return;
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       return;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(false))
                     break;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  if(_GLF_DEAD(false))
                   continue;
                  for(vec4 _GLF_SWITCH_0_41v; true; (workgroup_size << (_GLF_struct_replacement_19._f2.virtual_gid ++)))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(false))
                     return;
                    ivec3(-42080);
                    do
                     {
                      if(_GLF_WRAPPED_IF_TRUE(true))
                       {
                        if(_GLF_WRAPPED_IF_FALSE(false))
                         {
                         }
                        else
                         {
                          switch(_GLF_SWITCH((0 | 0)))
                           {
                            case 0:
                            case 52:
                            case 96:
                            if(_GLF_DEAD(false))
                             return;
                            case 45:
                            case 91:
                            for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(31303) : int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                             {
                              do
                               {
                                for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                 {
                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   continue;
                                  ;
                                 }
                                if(_GLF_DEAD(false))
                                 break;
                                if(_GLF_DEAD(false))
                                 break;
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 {
                                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                   {
                                    if(_GLF_WRAPPED_IF_TRUE(true))
                                     {
                                      return;
                                     }
                                    else
                                     {
                                     }
                                   }
                                 }
                                if(_GLF_DEAD(false))
                                 return;
                               }
                              while(_GLF_WRAPPED_LOOP(false));
                             }
                            break;
                            case 5:
                            mat2x3(mat3(-0.2, 3.5, -9.1, -0.9, -84.75, -9931.0609, 5.6, 20.29, 13.66));
                            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                             return;
                            case 6:
                            matrixCompMult(mat4x2(-683.316, -67.82, -65.41, -672.407, 751.358, 874.249, -7.7, -53.94), mat4x2(-567.238, -8350.5557, 37.91, 89.01, -5.2, -5252.4924, 8734.9625, -9959.6294));
                            default:
                            1;
                           }
                         }
                       }
                      else
                       {
                       }
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                     }
                    else
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                       return;
                      if(_GLF_DEAD(false))
                       return;
                     }
                    (((ivec3(86438, -26168, -8356) % ivec3(-12753, -60639, 88280)) / ivec3(87250, 75147, 79660)) * -35598);
                    for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                     {
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                     }
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      if(_GLF_DEAD(false))
                       continue;
                      return;
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                   }
                 }
               }
               default:
               if(_GLF_DEAD(false))
                {
                 for(_GLF_struct_115 _GLF_struct_replacement_115 = _GLF_struct_115(ivec3(1), _GLF_struct_112(1.0, _GLF_struct_110(vec3(1.0), ivec4(1), 1.0, ivec2(1), mat4x3(1.0)), vec2(1.0), _GLF_struct_111(mat3(1.0), ivec2(1), mat3x4(1.0), true, mat4x3(1.0), 1u, bvec3(true)), mat4(1.0)), _GLF_struct_114(bvec4(true), ivec2(1), _GLF_struct_113(ivec3(1), ivec2(1), mat3(1.0), uvec2(1u)), 1u), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_115._injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _GLF_struct_replacement_115._injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 1;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(4), int(4)))))
                    {
                     case 4:
                     mat2x4 _GLF_SWITCH_8_0v[86], _GLF_SWITCH_8_1v;
                     if(_GLF_DEAD(false))
                      break;
                     case 0:
                     case 59:
                     if(_GLF_DEAD(false))
                      continue;
                     case 39:
                     case 40:
                     case 62:
                     continue;
                     break;
                     case 11:
                     ivec4(-26210, 19113, 66205, 10298);
                     default:
                     1;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             break;
             case 72:
             uint _GLF_SWITCH_6_2v[21], _GLF_SWITCH_6_3v;
             default:
             1;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}
