#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ((60736 & 0) | 0) ^ (1 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), ((60736 & 0) | 0) ^ (1 << _GLF_IDENTITY(int(7), int(7))))) | 0)) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1))), 1, 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7117.7188)), bool(false))), 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)))))).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(cos(0.0), float(_GLF_IDENTITY(mat3(cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0, sqrt(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), (true ? mat3(cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0, sqrt(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(mat3(88.30, -7307.1548, 6.1, -9.2, 8.7, -525.736, 8.3, 549.121, -1980.7177)))))), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED((float(88681u) - -227.742))), float(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(69.92) : dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))), false)))))))) && true), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((24.20))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true))) && true)))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-61704 & 0)); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), ! (! (bool(bvec3(_GLF_DEAD(false), true, false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), gl_WorkGroupSize, gl_WorkGroupSize))[1], gl_WorkGroupSize[2])).x, max(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (int(3))), int(3))) ^ (1))], gl_WorkGroupSize[2])).x, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, 0)), 0)), 0))), max(int(0), int(0)))))); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), clamp(~ (int(4)), ~ (int(4)), ~ (int(4)))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))) || false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-456.607) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u + (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u))))))) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ (0u << _GLF_IDENTITY(uint(6u), uint(6u))))))))) % subgroup_size, (_GLF_IDENTITY(true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED(clamp(_GLF_IDENTITY(175781u, max(_GLF_IDENTITY(175781u, 0u | (175781u)), 175781u)), subgroup_size, virtual_gid)), max(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) ? (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(! (injectionSwitch.x < injectionSwitch.y), true, false, false)), ! (! (bool(bvec4(! (injectionSwitch.x < injectionSwitch.y), true, false, false))))))), ! (! ((_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(! (injectionSwitch.x < injectionSwitch.y), true, false, false)), ! (! (bool(bvec4(! (injectionSwitch.x < injectionSwitch.y), true, false, false))))))))))))) ? _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)) : _GLF_FUZZED(virtual_gid)))) % subgroup_size : _GLF_FUZZED(clamp(175781u, subgroup_size, virtual_gid)), true ? (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))))) >> 0, clamp((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))))) >> 0, (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))))) >> 0, _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))))) >> 0, ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))))))) >> 0) << 0))))))) % subgroup_size : _GLF_FUZZED(clamp(175781u, subgroup_size, virtual_gid)))))));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && _GLF_IDENTITY(true, ! (! (true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(_GLF_IDENTITY(474.559, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(474.559, mix(float(474.559), float(_GLF_FUZZED(float(-44708))), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0), (mat4(_GLF_IDENTITY(474.559, mix(float(474.559), float(_GLF_FUZZED(float(-44708))), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0, 1.0)))), float(_GLF_FUZZED(float((uvec3(24673u, 142195u, 37998u) == uvec3(46305u, 88745u, 41102u))))), bool(false)))), 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)))), -1.1, -22.44, 4.4).a), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(84347u))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(_GLF_IDENTITY(474.559, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(474.559, mix(float(474.559), float(_GLF_IDENTITY(_GLF_FUZZED(float(-44708)), (_GLF_FUZZED(float(-44708))) - 0.0)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0, tan(0.0), 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0), (mat4(_GLF_IDENTITY(474.559, mix(float(474.559), float(_GLF_FUZZED(float(-44708))), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), 0.0, 1.0)))), float(_GLF_FUZZED(float((uvec3(24673u, 142195u, 37998u) == uvec3(46305u, 88745u, 41102u))))), bool(false)))), 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)))), -1.1, -22.44, 4.4).a), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(84347u))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(_GLF_IDENTITY(474.559, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(474.559, mix(float(474.559), float(_GLF_FUZZED(float(-44708))), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0), (mat4(_GLF_IDENTITY(474.559, mix(float(474.559), float(_GLF_FUZZED(float(-44708))), bool(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-94.01) : 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), -1.1, -22.44, 4.4).a), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(84347u))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), false)), (bool(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))))), false))) || false)))));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(int(-614.634)), (true ? 64 : _GLF_FUZZED(int(-614.634))) + 0))), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), 0u | (subgroup_size)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))))) && true)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))))) && true)), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))))) && true)))), false, true))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), 0 | ((0 << _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) + 0.0)))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_FUZZED(-57801) : ~ ((int(6))))))))), (~ (int(6))) >> 0)))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(int(6), (int(6)) >> (0 ^ 0)))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))) ? _GLF_FUZZED(-57801) : ~ ((int(6))))))))), (~ (int(6))) >> 0)))), 1)), (int(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_FUZZED(-57801) : ~ ((int(6))))))))), (~ (int(6))) >> 0)))), 1))) >> 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))) || false))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), 0 | (min(6, 6)))) - 0))))) : _GLF_FUZZED(48138), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), 0 | (min(6, 6)))) - 0))))) : _GLF_FUZZED(48138), clamp(true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), 0 | (min(6, 6)))) - 0))))) : _GLF_FUZZED(48138), true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), 0 | (min(6, 6)))) - 0))))) : _GLF_FUZZED(48138), true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), _GLF_IDENTITY(0 | (min(6, 6)), (_GLF_IDENTITY(0 | (min(6, 6)), max(0 | (min(6, 6)), 0 | (min(6, 6))))) + 0))) - 0))))) : _GLF_FUZZED(48138))), true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), 0 | (min(6, 6)))) - 0))))) : _GLF_FUZZED(48138), true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), int(int(_GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(_GLF_IDENTITY(min(6, 6), 0 | (min(6, 6))), (true ? _GLF_IDENTITY(min(6, 6), 0 | (min(6, 6))) : _GLF_FUZZED((_injected_loop_counter ++))))) - 0))))) : _GLF_FUZZED(48138))))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (45577 & 0) | (6)), 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))) / 1), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) >> 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ (~ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), _GLF_IDENTITY(int(ivec4((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), (0 >> _GLF_IDENTITY(int(2), int(2))), 0, 1)), int(int(int(ivec4((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), (0 >> _GLF_IDENTITY(int(2), int(2))), 0, 1)))))))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), max((_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, int(int(_GLF_IDENTITY(48138, 0 + (48138))))))), (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) / 1)) + 0))), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (true ? min(6, 6) : _GLF_FUZZED(_injected_loop_counter))))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), min((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(6, min(6, 6))), 0 | ((_GLF_IDENTITY(6, min(6, 6))))))))) : _GLF_FUZZED(48138)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), max(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) << 0)) >> 0), 6)), (_GLF_IDENTITY(6, min(6, 6))) << 0)))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6709.6860), _GLF_FUZZED(-3.7)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, int(ivec4(6, 1, 1, 0))))))) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) | (_GLF_FUZZED(48138)))) | 0)) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), min(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), max(true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, min(6, 6))), (~ (_GLF_IDENTITY(6, min(6, 6)))) + 0)))) | (_GLF_IDENTITY(6, min(6, 6)))) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, _GLF_IDENTITY(6, (6) | 0)), (min(6, _GLF_IDENTITY(6, (6) | 0))) | (min(6, _GLF_IDENTITY(6, (6) | 0))))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (_GLF_IDENTITY(true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), 0 ^ (_GLF_IDENTITY(true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), int(ivec3(true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), 1, 0))), true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138), (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)) | 0)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))) ^ 0), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6))))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, (48138) * 1))))), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), _GLF_IDENTITY((_GLF_FUZZED(48138)), ((_GLF_FUZZED(48138))) + 0) - 0))), _GLF_IDENTITY((_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), ((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))) << 0)), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | _GLF_IDENTITY(((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(_GLF_IDENTITY(48138, (0 >> _GLF_IDENTITY(int(5), int(5))) + (48138))))), (((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(_GLF_IDENTITY(48138, (0 >> _GLF_IDENTITY(int(5), int(5))) + (48138)))))) | (((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(_GLF_IDENTITY(48138, (0 >> _GLF_IDENTITY(int(5), int(5))) + (48138)))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)))))))), min((_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, 1 * (48138)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, bool(bvec3(true, true, true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) + 0), min(6, 6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) | (_GLF_IDENTITY(6, min(6, 6)))))))))))) : _GLF_FUZZED(48138)))))))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))))))))))) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), clamp(int(_GLF_IDENTITY(6, 0 | (6))), _GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(int(6), (int(6)) >> 0))))), 0 | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_FUZZED(-57801) : ~ ((int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_FUZZED(-57801) : ~ _GLF_IDENTITY(((int(6))), (((int(6)))) / 1))))), (true ? _GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_FUZZED(-57801) : ~ ((int(6))))))) : _GLF_FUZZED(53265)))) ^ _GLF_IDENTITY(0, ~ (~ (0)))))), (~ (int(6))) >> 0)))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ ((int(6))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-57801), max(_GLF_FUZZED(-57801), _GLF_FUZZED(-57801))) : ~ ((int(6))))), (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-57801), max(_GLF_FUZZED(-57801), _GLF_FUZZED(-57801))) : ~ ((int(6)))))) << 0)), ((_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-57801), max(_GLF_FUZZED(-57801), _GLF_FUZZED(-57801))) : ~ ((int(6))))))) - 0)))), (~ _GLF_IDENTITY((int(6)), _GLF_IDENTITY(max((int(6)), (int(6))), (_GLF_IDENTITY(max((int(6)), (int(6))), min(_GLF_IDENTITY(max((int(6)), (int(6))), max(max((int(6)), (int(6))), max((int(6)), (int(6))))), max((int(6)), (int(6)))))) | (max((int(6)), (int(6))))))) >> 0)))), 1)), (int(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), 1 * (_GLF_IDENTITY(int(6), min(int(6), int(6))))))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(6)), ~ (_GLF_IDENTITY(~ ((int(6))), 0 ^ (_GLF_IDENTITY(~ ((int(6))), (false ? _GLF_FUZZED(-57801) : ~ ((int(6))))))))), (~ (int(6))) >> 0)))), 1))) >> 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), clamp(clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, min(6, 6)))), (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, (false ? _GLF_FUZZED(77331) : 48138))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) >> 0)))) ^ (0 >> _GLF_IDENTITY(int(5), int(5)))), 6)) : _GLF_FUZZED(48138))))))) | _GLF_IDENTITY(0, 0 | (0)))) + 0)) >> 0))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-65077) : 6)), 6))))), (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | (_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))) | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)))))))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | (_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))) | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)))))))), ~ (~ (0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | (_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))) | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, 0 | (6)))), 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)))))))))))) | 0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (min(6, _GLF_IDENTITY(6, 0 ^ (6)))) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec3(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) - 0), 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) + 0))), 1, 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) + 0))), 1, 0), (ivec3(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (6) + 0))), 1, 0)) / ivec3(1, 1, 1))) >> (ivec3(-71714, 57729, -7768) & ivec3(0, 0, 0))))), min(6, 6)) : _GLF_FUZZED(48138))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), 0 | (min(6, 6)))) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), clamp(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), 0 | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))))))))), max((_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), clamp(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), 0 | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), clamp(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), 0 | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), clamp(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), 0 | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))))))))), max((_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), clamp(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), 0 | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), clamp(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), 0 | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))))))))))))) << 0)))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), min(_GLF_IDENTITY(min(6, 6), (min(6, 6)) | (min(6, 6))), min(6, 6)))) : _GLF_FUZZED(48138)))))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (_GLF_IDENTITY(! (bool(bool(true))), true && (! (bool(bool(true)))))))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), clamp(_GLF_IDENTITY(min(6, 6), min(_GLF_IDENTITY(min(6, 6), clamp(min(6, 6), min(6, 6), min(6, 6))), min(6, 6))), min(6, 6), _GLF_IDENTITY(min(6, 6), (min(6, 6)) | (min(6, 6)))))) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(min(6, 6), min(min(6, 6), min(6, 6)))))) - (0 ^ 0)))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, _GLF_IDENTITY((6), 0 ^ ((6))) << (0 << _GLF_IDENTITY(int(7), int(7)))))) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, (6) | (6)))), min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(_GLF_IDENTITY(48138, min(48138, 48138)), _GLF_IDENTITY(48138, (true ? _GLF_IDENTITY(48138, ~ (~ (48138))) : _GLF_FUZZED((_injected_loop_counter | -69020)))), _GLF_IDENTITY(48138, int(ivec4(48138, 1, 1, (0 & -74648))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(_GLF_IDENTITY(48138, min(48138, 48138)), _GLF_IDENTITY(48138, (true ? _GLF_IDENTITY(48138, ~ (~ (48138))) : _GLF_FUZZED((_injected_loop_counter | -69020)))), _GLF_IDENTITY(48138, int(ivec4(48138, 1, 1, (0 & -74648))))))), min(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(_GLF_IDENTITY(48138, min(48138, 48138)), _GLF_IDENTITY(48138, (true ? _GLF_IDENTITY(48138, ~ (~ (48138))) : _GLF_FUZZED((_injected_loop_counter | -69020)))), _GLF_IDENTITY(48138, int(ivec4(48138, 1, 1, (0 & -74648))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(_GLF_IDENTITY(48138, min(48138, 48138)), _GLF_IDENTITY(48138, (true ? _GLF_IDENTITY(48138, ~ (~ (48138))) : _GLF_FUZZED((_injected_loop_counter | -69020)))), _GLF_IDENTITY(48138, int(ivec4(48138, 1, 1, (0 & -74648)))))))))) / 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0), (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(48138, (48138) * 1)), (_GLF_FUZZED(48138)) - 0), min(_GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0), _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))))), _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), clamp(min(6, 6), min(6, 6), min(6, 6)))) : _GLF_FUZZED(48138))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(6, 6, 6)), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), (clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) ^ 0), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6)))))))))))) << 0)) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (min(6, 6)) / 1)) : _GLF_FUZZED(48138)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), _GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)), 0 ^ ((true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) ^ 0) : _GLF_FUZZED(48138))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), _GLF_IDENTITY(0, int(int(0))) ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) * 1), _GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (_GLF_IDENTITY(min(6, 6), (min(6, 6)) << 0)) | (min(6, 6)))), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), ~ (~ ((_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, cos(0.0)))) : _GLF_FUZZED(65.76))))) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), (false ? _GLF_FUZZED(atomicAnd(_injected_loop_counter, 11313)) : ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), ~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_IDENTITY(_GLF_FUZZED(48138), max(_GLF_FUZZED(48138), _GLF_FUZZED(48138)))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))), min(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))), _GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) ^ (0 << _GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(6, min(6, 6)))) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(14420) : 6))) / (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1)), min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(_GLF_IDENTITY(48138, (0 & 25320) | (48138))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)))))) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ _GLF_IDENTITY((~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))), 0 ^ ((~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), max(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))), min(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))), _GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) ^ (0 << _GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(6, min(6, 6)))) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(14420) : 6))) / (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1)), min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(_GLF_IDENTITY(48138, (0 & 25320) | (48138))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)))))) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ _GLF_IDENTITY((~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))), 0 ^ ((~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))), min(_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))), _GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(_GLF_IDENTITY(48138, clamp(48138, 48138, 48138))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | 0))) : _GLF_IDENTITY(_GLF_FUZZED(48138), (_GLF_FUZZED(48138)) - 0))), (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) ^ (0 << _GLF_IDENTITY(int(6), int(6))))) | (_GLF_IDENTITY(6, min(6, 6)))) : _GLF_FUZZED(48138)))), (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))) | (~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))), 0 ^ (_GLF_IDENTITY(6, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(14420) : 6))) / (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1)), min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(48138)), 0 | ((true ? _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(_GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(6, min(6, 6)), _GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), ~ (~ (_GLF_IDENTITY(6, min(6, 6))))))) : _GLF_FUZZED(_GLF_IDENTITY(48138, (0 & 25320) | (48138))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)))))) : _GLF_FUZZED(48138))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ _GLF_IDENTITY((~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138))))), 0 ^ ((~ (_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, min(6, 6)) : _GLF_FUZZED(48138)))))))))), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0), int(6))))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) || false), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) * 1) | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) << int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ _GLF_IDENTITY(((int(0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | (_GLF_IDENTITY(((int(0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 | (((int(0)) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)))))))))))))))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED((+ 86438)))))), ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED((+ 86438))))))), 0 ^ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(true ? int(7) : _GLF_FUZZED((+ 86438)), min(true ? int(7) : _GLF_FUZZED((+ 86438)), _GLF_IDENTITY(true ? int(7) : _GLF_FUZZED((+ 86438)), clamp(true ? int(7) : _GLF_FUZZED((+ 86438)), true ? int(7) : _GLF_FUZZED((+ 86438)), true ? int(7) : _GLF_FUZZED((+ 86438)))))))))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(true ? int(7) : _GLF_FUZZED((+ 86438)), min(true ? int(7) : _GLF_FUZZED((+ 86438)), _GLF_IDENTITY(true ? int(7) : _GLF_FUZZED((+ 86438)), clamp(true ? int(7) : _GLF_FUZZED((+ 86438)), true ? int(7) : _GLF_FUZZED((+ 86438)), true ? int(7) : _GLF_FUZZED((+ 86438))))))))))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), 1 * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u ^ (_GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))))], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 1, 0)), int(ivec4(int(ivec4(1, 0, 1, 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0, 1))))) | 0), 0))) == read_2) || false)) + _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)) + _GLF_IDENTITY(1, clamp(1, 1, 1)), (false ? _GLF_FUZZED(uvec2(88695u, 24621u).g) : _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), min(int(int(1)), int(int(1))))) == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, ~ (~ (read_1 + 1))) == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)), true && _GLF_IDENTITY((! (_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false))), _GLF_IDENTITY(bool(bvec4((! (_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4((! (_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)), true && (! (_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)))))), false), false, true)))))) + _GLF_IDENTITY(1, clamp(1, 1, 1)), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) | 0), 0), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec2(_GLF_IDENTITY(1, (1) | 0), 0))))) == read_2) || false)) + _GLF_IDENTITY(1, clamp(1, 1, 1))) - 0u)))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)) + _GLF_IDENTITY(1, clamp(1, 1, 1)), (false ? _GLF_FUZZED(uvec2(88695u, 24621u).g) : _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)) + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))), 1, 1)), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (read_1 + _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | 0), 0))) == read_2) || false)) + _GLF_IDENTITY(1, clamp(1, 1, 1))) - 0u))))) / 1u) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 4, 64, 4);
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1))))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = ((0 & 43470) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || _GLF_IDENTITY((! (! (false))), ! (! ((! (! (false)))))))))))));
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
                    barrier();
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, 0 ^ (0)))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           subgroupAll(false);
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))) || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | 0)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) && (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))))))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> (0 >> _GLF_IDENTITY(int(5), int(5)))))))) / 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(_GLF_IDENTITY(true, (true) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))));
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(305.031))), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0))), log(1.0), abs(1.0), 1.0, determinant(mat2(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-8.8)), float(float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0))), log(1.0), abs(1.0), 1.0, determinant(mat2(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), bool(true))))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), 1)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))) && true))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, true))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
