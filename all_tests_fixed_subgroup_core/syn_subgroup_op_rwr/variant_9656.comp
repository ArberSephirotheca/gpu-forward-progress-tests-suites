#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ((! (false))) || false)))))), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), bool(_GLF_IDENTITY(bool(((false))), (_GLF_IDENTITY(bool(((false))), (bool(((false)))) && true)) || false))) && true)))), true, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), (_GLF_IDENTITY((false), ((false)) && true)) || false)))), true, false), true))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), min(float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), max(float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), max(float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), float(vec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0))))))))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, (true) || false), false, false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ (0 | 0)), _GLF_IDENTITY(int(3), (int(3)) / 1))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec2(int(_GLF_IDENTITY(7, (7) | (7))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), max(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5)))), 1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))))))), ~ (~ (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec2(_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1), min(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1)))), min(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1), min(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1)))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1), min(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), int(5))))), 0, 1))))))))) / 1)))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, (1 | 1)), (ivec3(1, 0, (1 | 1))) + ivec3(0, 0, 0)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 1u))), 0u))), (subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(34.18))), injectionSwitch.x)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    {
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421)))), (true ? _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421)))), clamp(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421)))), 1 * ((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421)))))), _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421)))), ((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421))))) >> 0), (0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-61421)))))) : _GLF_FUZZED(-31919)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1786.3484)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(dot(vec2(602.170, 2.1), floor(vec2(8908.3267, -4.4)))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) / 1) << 0), _GLF_IDENTITY(0, (0) / 1))))))), int(int(_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) / 1) << 0), _GLF_IDENTITY(0, (0) / 1))))))), ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) / 1) << 0), _GLF_IDENTITY(0, (0) / 1)))))))) | ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) / 1) << 0), _GLF_IDENTITY(0, (0) / 1)))))))))))), 0 + _GLF_IDENTITY(((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), _GLF_IDENTITY(~ (0), max(~ (0), ~ (0))), ~ (0)))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) | (_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(findLSB(79540)), (_GLF_FUZZED(findLSB(79540))) - 0) : 0)))), (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, 1, (1 | 0)), (ivec3(0, 1, (1 | 0))) | (ivec3(0, 1, (1 | 0))))), clamp(int(_GLF_IDENTITY(ivec3(0, 1, (1 | 0)), (ivec3(0, 1, (1 | 0))) | (ivec3(0, 1, (1 | 0))))), int(_GLF_IDENTITY(ivec3(0, 1, (1 | 0)), (ivec3(0, 1, (1 | 0))) | (ivec3(0, 1, (1 | 0))))), int(_GLF_IDENTITY(ivec3(0, 1, (1 | 0)), (ivec3(0, 1, (1 | 0))) | (ivec3(0, 1, (1 | 0))))))))) | 0))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))) << 0), _GLF_IDENTITY(0, (0) / 1)))))))))), (((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(4), int(4))) ^ (0))) | 0)) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(findLSB(79540)) : 0)))), (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, (_GLF_IDENTITY((0) | 0, ((0) | 0) << 0)) / 1)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, clamp((0) / 1, (0) / 1, (0) / 1))))))))))))) | (((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, (_GLF_IDENTITY((0) | 0, 0 + ((0) | 0))) ^ 0))) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(findLSB(79540)) : 0)))), (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, (0) | 0))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 | (0))))) << 0), _GLF_IDENTITY(0, (0) / 1))))))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))), 0 + (_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))), (true ? (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(((0)), (((0))) / 1) - 0) << 0), _GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, (1) | (1)))))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) - 0) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))) : _GLF_FUZZED(_injected_loop_counter))))), clamp(_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) >> _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))), ((_injected_loop_counter) >> _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))) | (_GLF_IDENTITY((_injected_loop_counter) >> _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))), 0 | (_GLF_IDENTITY((_injected_loop_counter) >> _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))), ((_injected_loop_counter) >> _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))) | 0))))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))), int(ivec2(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))), 0))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))))), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))) >> 0)))), _GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(0, (0) << 0)) ^ 0))), _GLF_IDENTITY(0, (0) / 1)))))), (0 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), ~ (~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))) >> 0)))))), _GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) ^ 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) >> 0)))) / 1))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), ~ (~ (_GLF_IDENTITY(0, (0) << 0)))), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0))), _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (_GLF_IDENTITY(0, (0) >> 0)) >> 0)) / 1))))), 0 ^ ((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), int(int((_injected_loop_counter)))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1))))))))))))))), _GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (0) << _GLF_IDENTITY(0, 0 ^ (0))), (_GLF_IDENTITY(0, (0) << 0)) - 0), _GLF_IDENTITY(0, (0) / 1))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), int(ivec2((0), 0))), (0), (0))) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))), (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))))), _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), ivec4(0, 0, 0, 0) + (ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))), clamp(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), ivec4(0, 0, 0, 0) + (ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), ivec4(0, 0, 0, 0) + (ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), ivec4(0, 0, 0, 0) + (ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))), (int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), ivec4(0, 0, 0, 0) + (ivec4((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0), min((0), (0))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1))))))), 0, 0, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))) ^ 0)))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) / 1), min(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) / 1), _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) / 1)))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) / 1))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, max(0, 0)))), (0) << 0), _GLF_IDENTITY(0, (0) / 1))))), (false ? _GLF_FUZZED(30410) : (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, max(0, 0)))), (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) / 1)) / 1))))))))))), 0 | (_GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))), (true ? _GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) : _GLF_FUZZED(_injected_loop_counter))))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(0, (0) / 1)))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) / 1)), (~ (_GLF_IDENTITY(0, (0) / 1))) + 0)))), 0 + (clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) / 1)), (~ (_GLF_IDENTITY(0, (0) / 1))) + 0))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) / 1)), (~ (_GLF_IDENTITY(0, (0) / 1))) + 0)))))))), (true ? ~ ((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) / 1)), (~ (_GLF_IDENTITY(0, (0) / 1))) + 0)))))))) : _GLF_FUZZED(-32059))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))))))))), _GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))))), 0 + ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) / 1)))))))))))))))) < int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true)))), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true)))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true)))), true)))), false, false)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true)))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(tan(-835.688)) : injectionSwitch.x)) > injectionSwitch.y)))))), false, true)))), true)))), false, false))))))))))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))) || (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-633.772)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-6.7)), bool(false))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-633.772)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-6.7)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-633.772)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-6.7)), bool(false)))) / 1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)), (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-633.772)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-6.7)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-633.772)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-6.7)), bool(false)))) / 1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))) - 0.0)) > injectionSwitch.y)))))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 0) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
            barrier();
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) << 0u), 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, false || (false)))), false || (bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, false || (false))))))) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base, workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> (141247u & 0u)) * subgroup_size) << 0u))) + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), workgroup_base)) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), (subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 1, 1)))) % subgroup_size), 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))))) + 0u)), 0u | ((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))))) + 0u)))))) | 0u)));
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))) && true)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-6.6)))))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))))))) && true))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) ^ 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), ~ (_GLF_IDENTITY(~ (uint(read_1 + 1)), 0u | (~ (uint(read_1 + 1)))))), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0)), max(int(ivec3(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(4, int(ivec4(4, 0, 1, (1 | 1)))))))), 1, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (_GLF_IDENTITY(4, (4) | (4))) >> 0), 1, _GLF_IDENTITY(0, (0) / 1))), 0 | _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0), (ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0)) | (ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0))))), (_GLF_IDENTITY((int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0))), max(_GLF_IDENTITY((int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0))), ((int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0)))) | 0), _GLF_IDENTITY((int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0))), int(int((int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 1, 0))))))))) ^ 0)))))) | (4)), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(91228, min(_GLF_IDENTITY(_GLF_IDENTITY(91228, (true ? 91228 : _GLF_FUZZED(67839))), (91228) * 1), 91228)) & _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bool(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))), ! (! (! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) ^ 0)))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || false), true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || false), true)))))), true, false, true)), true && (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || false), true)))))), true, false, true))))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(35161) : 64))) >> (0 ^ 0)), 4);
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), false, true))))) && true)) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, false || (true)), false)), bool(bvec4(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, false || (true)), false)), false, false, true)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, true, true)))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         continue;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u)))), min(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u))))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u)))), min(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (1u | 1u)), 0u)), min(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), _GLF_IDENTITY((1u & (1u | 1u)), _GLF_IDENTITY(uint(uvec2((1u & (1u | 1u)), 1u)), (uint(uvec2((1u & (1u | 1u)), 1u))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), 0u)), uint(uvec3(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))), (1u & (_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) | _GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u)), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) | 0u))))))), 0u))))))))))))], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(true);
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(false, true, true, true)), true), bvec2(bvec3(bvec2(bool(bvec4(false, true, true, true)), true), true))))), false || (bool(bvec4(false, true, true, true)))))));
    }
  }
}
